!function(e) {
    "use strict";
    var t = e._ || {}
      , n = e.kh || {};
    n.router = n.router || {},
    n.router.routes = n.router.routes || {},
    t.merge(n.router.routes, {
        mypage_quest_party_guild_enh_evo_gacha_present_shop_epi: {
            mypage_quest_party_guild_enh_evo_gacha_present_shop_epi: "my_001",
            mypage: "my_001",
            "mypage/my_001": "my_001",
            quest: "q_001",
            "quest/q_001": "q_001",
            "quest/q_002": "q_002",
            "quest/q_003_1": "q_003_001",
            "quest/q_003_2": "q_003_002",
            "quest/q_004": "q_004",
            "quest/q_005": "q_005",
            "quest/q_006": "q_006_007_008",
            "quest/q_007": "q_006_007_008",
            "quest/q_008": "q_006_007_008",
            "quest/q_009": "q_009",
            "quest/q_010": "q_010",
            party: "par_001_002_003",
            "party/par_001": "par_001_002_003",
            "party/par_002": "par_001_002_003",
            "party/par_003": "par_001_002_003",
            "party/par_004": "par_004",
            "party/par_005": "par_005",
            "party/par_006": "par_006_007",
            "party/par_006_a": "par_006_007",
            "party/par_006_b": "par_006_007",
            "party/par_006_c": "par_006_007",
            "party/par_007": "par_006_007",
            "party/par_007_a": "par_006_007",
            "party/par_007_b": "par_006_007",
            "party/par_007_c": "par_006_007",
            "party/par_008": "par_008",
            "party/par_009": "par_009",
            "party/par_010": "par_010",
            "party/par_011": "par_011",
            "party/par_012": "par_012",
            "party/par_013": "par_013",
            "party/par_014": "par_014",
            "party/par_015": "par_015",
            "party/par_016": "par_016",
            "party/par_017": "par_017",
            "guild/": "gud_001",
            "guild/gud_000": "gud_000_a",
            "guild/gud_000_a": "gud_000_a",
            "guild/gud_000_b": "gud_000_b",
            "guild/gud_000_c": "gud_000_c",
            "guild/gud_001": "gud_001",
            "guild/gud_001_a": "gud_001",
            "guild/gud_001_b": "gud_001",
            "guild/gud_001_c": "gud_001",
            "guild/gud_001_d": "gud_001",
            "guild/gud_002": "gud_002",
            "guild/gud_003": "gud_003",
            "guild/gud_005": "gud_005",
            "guild/gud_006": "gud_006",
            "guild/gud_007_a": "gud_007_leader",
            "guild/gud_007_b": "gud_007_not_leader",
            "guild/gud_008": "gud_008",
            "guild/gud_009": "gud_009",
            "guild/gud_010": "gud_010_011_012",
            "guild/gud_011": "gud_010_011_012",
            "guild/gud_012": "gud_010_011_012",
            "guild/gud_013_a": "gud_013_a",
            "guild/gud_013_b": "gud_013_b",
            enh_evo: "enh_001_002_006_evo_001_002_003",
            "enh_evo/enh_001": "enh_001_002_006_evo_001_002_003",
            "enh_evo/enh_002": "enh_001_002_006_evo_001_002_003",
            "enh_evo/enh_003": "enh_003",
            "enh_evo/enh_004": "enh_004",
            "enh_evo/enh_005": "enh_005",
            "enh_evo/enh_006": "enh_001_002_006_evo_001_002_003",
            "enh_evo/enh_007": "enh_007",
            "enh_evo/enh_008": "enh_008",
            "enh_evo/enh_009": "enh_009",
            "enh_evo/enh_010": "enh_010",
            "enh_evo/enh_011": "enh_011",
            "enh_evo/enh_012": "enh_012",
            "enh_evo/enh_013": "enh_013",
            "enh_evo/enh_014": "enh_014",
            "enh_evo/enh_015": "enh_015",
            "enh_evo/evo_001": "enh_001_002_006_evo_001_002_003",
            "enh_evo/evo_002": "enh_001_002_006_evo_001_002_003",
            "enh_evo/evo_003": "enh_001_002_006_evo_001_002_003",
            "enh_evo/evo_004": "evo_004",
            "enh_evo/evo_005": "evo_005",
            "enh_evo/evo_006": "evo_006",
            "enh_evo/evo_007": "evo_007",
            "enh_evo/evo_008": "evo_008",
            "enh_evo/evo_009": "evo_009",
            "enh_evo/evo_010": "evo_010",
            "enh_evo/evo_011": "evo_011",
            "enh_evo/evo_012": "evo_012",
            "enh_evo/evo_013": "evo_013",
            "enh_evo/evo_014": "evo_014",
            "enh_evo/arousal_001": "enh_001_002_006_evo_001_002_003",
            "enh_evo/arousal_002": "arousal_002",
            "enh_evo/arousal_003": "arousal_003",
            gacha: "ga_000",
            "gacha/ga_000": "ga_000",
            "gacha/ga_001": "ga_000",
            "gacha/ga_002": "ga_002",
            "gacha/ga_003": "ga_003",
            "gacha/ga_004": "ga_004",
            "gacha/ga_100": "ga_100",
            "gacha/ga_005": "ga_005",
            "gacha/ga_006": "ga_006",
            "gacha/ga_007": "ga_007",
            "gacha/ga_008": "ga_008",
            "gacha/ga_009": "ga_009",
            "gacha/ga_010": "ga_010",
            "gacha/ga_011": "ga_011",
            "gacha/ga_012": "ga_012",
            "gacha/ga_013": "ga_013",
            "gacha/ga_014": "ga_014",
            "gacha/ga_ani": "ga_ani",
            present: "prs_001_002_003",
            "present/prs_001": "prs_001_002_003",
            "present/prs_002": "prs_001_002_003",
            "present/prs_003": "prs_001_002_003",
            shop: "sh_001",
            "shop/sh_001": "sh_001",
            "shop/sh_002": "sh_002",
            "shop/sh_003": "sh_003",
            "shop/sh_004": "sh_004",
            "shop/sh_005": "sh_005",
            "shop/sh_006": "sh_006",
            "shop/sh_007": "sh_007",
            "shop/sh_008": "sh_008",
            "shop/sh_009": "sh_009",
            epi: "epi_001",
            "epi/epi_001": "epi_001",
            "epi/epi_001_a": "epi_001",
            "epi/epi_001_b": "epi_001",
            "epi/epi_001_c": "epi_001",
            "epi/epi_002": "epi_002",
            "epi/epi_003": "epi_003",
            "epi/epi_004": "epi_004"
        }
    })
}((this || 0).self || global);
var res = res || {};
_.extend(res, {
    "core-btn-btn_atlas": "../core/res/btn/btn_atlas.plist",
    "core-btn-viewpage_atlas": "../core/res/btn/viewpage_atlas.plist",
    "core-btn-viewpage_ui": "../core/res/btn/viewpage_ui.json",
    "core-corecard-corecard_atlas": "../core/res/corecard/corecard_atlas.plist",
    "core-corecard-corecard_blank_5_3_ui": "../core/res/corecard/corecard_blank_5_3_ui.json",
    "core-corecard-corecard_blank_6_3_ui": "../core/res/corecard/corecard_blank_6_3_ui.json",
    "core-corecard-corecard_chara_ui": "../core/res/corecard/corecard_chara_ui.json",
    "core-corecard-corecard_item_ui": "../core/res/corecard/corecard_item_ui.json",
    "core-corecard-corecard_job_ui": "../core/res/corecard/corecard_job_ui.json",
    "core-corecard-corecard_npc_ui": "../core/res/corecard/corecard_npc_ui.json",
    "core-corecard-corecard_summon_ui": "../core/res/corecard/corecard_summon_ui.json",
    "core-corecard-corecard_weapon_ui": "../core/res/corecard/corecard_weapon_ui.json",
    "core-font-attack_big": "../core/res/font/attack_big.fnt",
    "core-font-harem_ap_no": "../core/res/font/harem_ap_no.fnt",
    "core-font-hp_big": "../core/res/font/hp_big.fnt",
    "core-font-my_header_power_no": "../core/res/font/my_header_power_no.fnt",
    "core-icon-elementicon": "../core/res/icon/elementicon.plist",
    "core-icon-rarityicon": "../core/res/icon/rarityicon.plist",
    "core-icon-statustypeicon": "../core/res/icon/statustypeicon.plist",
    "core-icon-treasureicon": "../core/res/icon/treasureicon.plist",
    "core-icon-weapontypeicon": "../core/res/icon/weapontypeicon.plist",
    "core-introduce-introduce": "../core/res/introduce/introduce.plist",
    "core-introduce_chara-introduce_chara_status_0_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_0_ui.json",
    "core-introduce_chara-introduce_chara_status_1_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_1_ui.json",
    "core-introduce_summon-introduce_summon_atlas": "../core/res/introduce/introduce_summon/introduce_summon_atlas.plist",
    "core-introduce_summon-introduce_summon_status_0_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_0_ui.json",
    "core-introduce_summon-introduce_summon_status_1_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_1_ui.json",
    "core-introduce_weapon-introduce_weapon_status_0_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_0_ui.json",
    "core-introduce_weapon-introduce_weapon_status_1_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_1_ui.json",
    "core-statuslist-statuslist_ability_ui": "../core/res/introduce/statuslist/statuslist_ability_ui.json",
    "core-statuslist-statuslist_assist_ui": "../core/res/introduce/statuslist/statuslist_assist_ui.json",
    "core-statuslist-statuslist_atlas": "../core/res/introduce/statuslist/statuslist_atlas.plist",
    "core-statuslist-statuslist_burst_ui": "../core/res/introduce/statuslist/statuslist_burst_ui.json",
    "core-statuslist-statuslist_ex-ability_blank_ui": "../core/res/introduce/statuslist/statuslist_ex-ability_blank_ui.json",
    "core-statuslist-statuslist_ex-ability_ui": "../core/res/introduce/statuslist/statuslist_ex-ability_ui.json",
    "core-statuslist-statuslist_weapon-skill_ui": "../core/res/introduce/statuslist/statuslist_weapon-skill_ui.json",
    "core-Default-ImageFile.png": "../core/res/menu/Default/ImageFile.png",
    "core-menu-bg_menu.png": "../core/res/menu/bg_menu.png",
    "core-menu-menu_atlas_0": "../core/res/menu/menu_atlas_0.plist",
    "core-menu-menu_ui": "../core/res/menu/menu_ui.json",
    "core-all_over-all_over_0_ui": "../core/res/pages/all_over/all_over_0_ui.json",
    "core-arousal_btn-arousal_btn_after_before_atlas": "../core/res/pages/arousal_btn/arousal_btn_after_before_atlas.plist",
    "core-arousal_btn-arousal_btn_after_before_ui": "../core/res/pages/arousal_btn/arousal_btn_after_before_ui.json",
    "core-pages-bg_pink.png": "../core/res/pages/bg_pink.png",
    "core-pages-epiparts_atlas": "../core/res/pages/epiparts_atlas.plist",
    "core-pages-mainparts_atlas": "../core/res/pages/mainparts_atlas.plist",
    "core-pages-mainparts_star_gauge_ui": "../core/res/pages/mainparts_star_gauge_ui.json",
    "core-pages-subparts_atlas": "../core/res/pages/subparts_atlas.plist",
    "core-Default-ImageFile.png-2": "../core/res/popup/Default/ImageFile.png",
    "core-popup-base_popup.png": "../core/res/popup/base_popup.png",
    "core-popup-btn": "../core/res/popup/btn.json",
    "core-popup-com_age_limit_a": "../core/res/popup/com_age_limit_a.json",
    "core-popup-com_age_limit_a_img.png": "../core/res/popup/com_age_limit_a_img.png",
    "core-popup-com_age_limit_b": "../core/res/popup/com_age_limit_b.json",
    "core-popup-com_age_limit_b_img.png": "../core/res/popup/com_age_limit_b_img.png",
    "core-popup-com_ap_restart": "../core/res/popup/com_ap_restart.json",
    "core-popup-com_back_check": "../core/res/popup/com_back_check.json",
    "core-popup-com_edit_stamp_page_ui": "../core/res/popup/com_edit_stamp_page_ui.json",
    "core-popup-com_illust_up": "../core/res/popup/com_illust_up.json",
    "core-popup-com_need_ap_bp_1": "../core/res/popup/com_need_ap_bp_1.json",
    "core-popup-com_need_ap_bp_1_sort_ui": "../core/res/popup/com_need_ap_bp_1_sort_ui.json",
    "core-popup-com_need_ap_bp_2": "../core/res/popup/com_need_ap_bp_2.json",
    "core-popup-com_use_result": "../core/res/popup/com_use_result.json",
    "core-pages-mainparts_atlas-2": "../core/res/popup/core/res/pages/mainparts_atlas.plist",
    "core-popup-epi_replay_check": "../core/res/popup/epi_replay_check.json",
    "core-popup-epi_scene_check": "../core/res/popup/epi_scene_check.json",
    "core-popup-epi_story_check": "../core/res/popup/epi_story_check.json",
    "core-popup-ga_scene_check": "../core/res/popup/ga_scene_check.json",
    "core-popup-gud_sh_sort_ui": "../core/res/popup/gud_sh_sort_ui.json",
    "core-popup-illustup_base.png": "../core/res/popup/illustup_base.png",
    "core-popup-illustup_bg.png": "../core/res/popup/illustup_bg.png",
    "core-popup-menu_list": "../core/res/popup/menu_list.json",
    "core-popup-my_001_news_a": "../core/res/popup/my_001_news_a.json",
    "core-popup-my_001_news_btn_ui": "../core/res/popup/my_001_news_btn_ui.json",
    "core-popup-my_banner_list_ui": "../core/res/popup/my_banner_list_ui.json",
    "core-popup-my_banner_page_ui": "../core/res/popup/my_banner_page_ui.json",
    "core-popup-my_ev_banner": "../core/res/popup/my_ev_banner.json",
    "core-popup-p_job_get": "../core/res/popup/p_job_get.json",
    "core-popup-p_level_bonus": "../core/res/popup/p_level_bonus.json",
    "core-popup-p_need_point": "../core/res/popup/p_need_point.json",
    "core-popup-popup_base_0000": "../core/res/popup/popup_base_0000.plist",
    "core-popup-popup_btn_0000": "../core/res/popup/popup_btn_0000.plist",
    "core-popup-popup_common": "../core/res/popup/popup_common.json",
    "core-popup-popup_icon_0000": "../core/res/popup/popup_icon_0000.plist",
    "core-popup_layer-sh_hp_attack_base.png": "../core/res/popup/popup_layer/sh_hp_attack_base.png",
    "core-popup_layer-sh_summon_base.png": "../core/res/popup/popup_layer/sh_summon_base.png",
    "core-popup_layer-sh_weapon_base.png": "../core/res/popup/popup_layer/sh_weapon_base.png",
    "core-popup-ra_quest_appearance": "../core/res/popup/ra_quest_appearance.json",
    "core-popup-sh_buy_check": "../core/res/popup/sh_buy_check.json",
    "core-popup-sh_buy_result": "../core/res/popup/sh_buy_result.json",
    "core-popup-sh_item_info": "../core/res/popup/sh_item_info.json",
    "core-popup-sh_stone_check": "../core/res/popup/sh_stone_check.json",
    "core-popup-sh_summon_info": "../core/res/popup/sh_summon_info.json",
    "core-popup-sh_weapon_info": "../core/res/popup/sh_weapon_info.json",
    "core-popup-sub_tutorial": "../core/res/popup/sub_tutorial.json",
    "core-popup-sub_tutorial_page_ui": "../core/res/popup/sub_tutorial_page_ui.json",
    "core-popup-text_button_only": "../core/res/popup/text_button_only.json",
    "core-sort-sort_list_ui": "../core/res/sort/sort_list_ui.json",
    "core-headerparts-headerparts_ap_ui": "../core/res/ui_main/headerparts/headerparts_ap_ui.json",
    "core-headerparts-headerparts_atlas": "../core/res/ui_main/headerparts/headerparts_atlas.plist",
    "core-headerparts-headerparts_ui": "../core/res/ui_main/headerparts/headerparts_ui.json",
    "core-mainmenu-mainmenu_atlas": "../core/res/ui_main/mainmenu/mainmenu_atlas.plist",
    "core-mainmenu-mainmenu_enhance_ui": "../core/res/ui_main/mainmenu/mainmenu_enhance_ui.json",
    "core-mainmenu-mainmenu_gacha_ui": "../core/res/ui_main/mainmenu/mainmenu_gacha_ui.json",
    "core-mainmenu-mainmenu_party_ui": "../core/res/ui_main/mainmenu/mainmenu_party_ui.json",
    "core-mainmenu-mainmenu_quest_normal_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_normal_ui.json",
    "core-mainmenu-mainmenu_quest_raid_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_raid_ui.json",
    "core-mainmenu-mainmenu_raid_particle": "../core/res/ui_main/mainmenu/mainmenu_raid_particle.plist",
    "core-mainmenu-mainmenu_ui": "../core/res/ui_main/mainmenu/mainmenu_ui.json",
    "core-mainmenu-mainmenu_union_ui": "../core/res/ui_main/mainmenu/mainmenu_union_ui.json",
    "core-submenu-submenu_atlas": "../core/res/ui_main/submenu/submenu_atlas.plist",
    "core-submenu-submenu_ui": "../core/res/ui_main/submenu/submenu_ui.json",
    "epi-epi_001-epi_001": "../epi/res/epi_001/epi_001.json",
    "epi-epi_001-epi_new_ui": "../epi/res/epi_001/epi_new_ui.json",
    "epi-epi_001-questlist_epi_blue_ui": "../epi/res/epi_001/questlist_epi_blue_ui.json",
    "epi-epi_002_3_4-epi_002_3_4": "../epi/res/epi_002_3_4/epi_002_3_4.json",
    "epi-epi_002_3_4-quest_list_white_ui": "../epi/res/epi_002_3_4/quest_list_white_ui.json",
    "epi-epi_atlas": "../epi/res/epi_atlas.plist",
    "epi-epi_btn_tab_three_ui": "../epi/res/epi_btn_tab_three_ui.json",
    "epi-questlist_epi_pink_ui": "../epi/res/questlist_epi_pink_ui.json"
});
var gResources = gResources || [];
for (var i in res)
    gResources.push(res[i]);
gResources = _.uniq(gResources);
var res = res || {};
_.extend(res, {
    "core-btn-btn_atlas": "../core/res/btn/btn_atlas.plist",
    "core-btn-btn_change_page_a_ui": "../core/res/btn/btn_change_page_a_ui.json",
    "core-btn-btn_tab_four_ui": "../core/res/btn/btn_tab_four_ui.json",
    "core-btn-btn_tab_two_ui": "../core/res/btn/btn_tab_two_ui.json",
    "core-btn-viewpage_atlas": "../core/res/btn/viewpage_atlas.plist",
    "core-btn-viewpage_ui": "../core/res/btn/viewpage_ui.json",
    "core-Default-ImageFile.png": "../core/res/corecard/Default/ImageFile.png",
    "core-corecard-corecard_atlas": "../core/res/corecard/corecard_atlas.plist",
    "core-corecard-corecard_blank_4_4_ui": "../core/res/corecard/corecard_blank_4_4_ui.json",
    "core-corecard-corecard_chara_ui": "../core/res/corecard/corecard_chara_ui.json",
    "core-corecard-corecard_item_ui": "../core/res/corecard/corecard_item_ui.json",
    "core-corecard-corecard_job_ui": "../core/res/corecard/corecard_job_ui.json",
    "core-corecard-corecard_npc_ui": "../core/res/corecard/corecard_npc_ui.json",
    "core-corecard-corecard_shop_ui": "../core/res/corecard/corecard_shop_ui.json",
    "core-corecard-corecard_summon_ui": "../core/res/corecard/corecard_summon_ui.json",
    "core-corecard-corecard_weapon_ui": "../core/res/corecard/corecard_weapon_ui.json",
    "core-font-attack_big": "../core/res/font/attack_big.fnt",
    "core-font-hp_big": "../core/res/font/hp_big.fnt",
    "core-font-my_header_power_no": "../core/res/font/my_header_power_no.fnt",
    "core-icon-elementicon": "../core/res/icon/elementicon.plist",
    "core-icon-rarityicon": "../core/res/icon/rarityicon.plist",
    "core-icon-statustypeicon": "../core/res/icon/statustypeicon.plist",
    "core-icon-treasureicon": "../core/res/icon/treasureicon.plist",
    "core-icon-weapontypeicon": "../core/res/icon/weapontypeicon.plist",
    "core-introduce-introduce": "../core/res/introduce/introduce.plist",
    "core-introduce_chara-introduce_chara_status_0_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_0_ui.json",
    "core-introduce_chara-introduce_chara_status_1_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_1_ui.json",
    "core-introduce-introduce_statuslist_list_7_ui": "../core/res/introduce/introduce_statuslist_list_7_ui.json",
    "core-introduce_summon-introduce_summon_atlas": "../core/res/introduce/introduce_summon/introduce_summon_atlas.plist",
    "core-introduce_summon-introduce_summon_status_0_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_0_ui.json",
    "core-introduce_summon-introduce_summon_status_1_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_1_ui.json",
    "core-introduce_weapon-introduce_weapon_status_0_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_0_ui.json",
    "core-introduce_weapon-introduce_weapon_status_1_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_1_ui.json",
    "core-statuslist-statuslist_ability_ui": "../core/res/introduce/statuslist/statuslist_ability_ui.json",
    "core-statuslist-statuslist_assist_ui": "../core/res/introduce/statuslist/statuslist_assist_ui.json",
    "core-statuslist-statuslist_atlas": "../core/res/introduce/statuslist/statuslist_atlas.plist",
    "core-statuslist-statuslist_burst_ui": "../core/res/introduce/statuslist/statuslist_burst_ui.json",
    "core-statuslist-statuslist_ex-ability_blank_ui": "../core/res/introduce/statuslist/statuslist_ex-ability_blank_ui.json",
    "core-statuslist-statuslist_ex-ability_ui": "../core/res/introduce/statuslist/statuslist_ex-ability_ui.json",
    "core-statuslist-statuslist_weapon-skill_ui": "../core/res/introduce/statuslist/statuslist_weapon-skill_ui.json",
    "core-menu-bg_menu.png": "../core/res/menu/bg_menu.png",
    "core-menu-menu_atlas_0": "../core/res/menu/menu_atlas_0.plist",
    "core-menu-menu_ui": "../core/res/menu/menu_ui.json",
    "core-all_over-all_over_0_ui": "../core/res/pages/all_over/all_over_0_ui.json",
    "core-all_over-all_over_1_ui": "../core/res/pages/all_over/all_over_1_ui.json",
    "core-pages-bg_beige.jpg": "../core/res/pages/bg_beige.jpg",
    "core-pages-mainparts_atlas": "../core/res/pages/mainparts_atlas.plist",
    "core-side_navi-side_navi_01.png": "../core/res/pages/side_navi/side_navi_01.png",
    "core-side_navi-side_navi_02.png": "../core/res/pages/side_navi/side_navi_02.png",
    "core-side_navi-side_navi_0_ui": "../core/res/pages/side_navi/side_navi_0_ui.json",
    "core-side_navi-side_navi_1_ui": "../core/res/pages/side_navi/side_navi_1_ui.json",
    "core-pages-subparts_atlas": "../core/res/pages/subparts_atlas.plist",
    "core-popup-base_popup.png": "../core/res/popup/base_popup.png",
    "core-popup-btn": "../core/res/popup/btn.json",
    "core-popup-com_back_check": "../core/res/popup/com_back_check.json",
    "core-popup-com_edit_stamp_page_ui": "../core/res/popup/com_edit_stamp_page_ui.json",
    "core-popup-com_illust_up": "../core/res/popup/com_illust_up.json",
    "core-popup-com_need_mate": "../core/res/popup/com_need_mate.json",
    "core-popup-ga_scene_check": "../core/res/popup/ga_scene_check.json",
    "core-popup-gud_sh_sort_ui": "../core/res/popup/gud_sh_sort_ui.json",
    "core-popup-illustup_base.png": "../core/res/popup/illustup_base.png",
    "core-popup-illustup_bg.png": "../core/res/popup/illustup_bg.png",
    "core-popup-menu_list": "../core/res/popup/menu_list.json",
    "core-popup-my_001_news_a": "../core/res/popup/my_001_news_a.json",
    "core-popup-my_001_news_btn_ui": "../core/res/popup/my_001_news_btn_ui.json",
    "core-popup-my_banner_list_ui": "../core/res/popup/my_banner_list_ui.json",
    "core-popup-my_banner_page_ui": "../core/res/popup/my_banner_page_ui.json",
    "core-popup-my_ev_banner": "../core/res/popup/my_ev_banner.json",
    "core-popup-popup_base_0000": "../core/res/popup/popup_base_0000.plist",
    "core-popup-popup_btn_0000": "../core/res/popup/popup_btn_0000.plist",
    "core-popup-popup_common": "../core/res/popup/popup_common.json",
    "core-popup-popup_icon_0000": "../core/res/popup/popup_icon_0000.plist",
    "core-popup_layer-sh_hp_attack_base.png": "../core/res/popup/popup_layer/sh_hp_attack_base.png",
    "core-popup_layer-sh_summon_base.png": "../core/res/popup/popup_layer/sh_summon_base.png",
    "core-popup_layer-sh_weapon_base.png": "../core/res/popup/popup_layer/sh_weapon_base.png",
    "core-popup-ra_quest_appearance": "../core/res/popup/ra_quest_appearance.json",
    "core-popup-sh_buy_check": "../core/res/popup/sh_buy_check.json",
    "core-popup-sh_buy_result": "../core/res/popup/sh_buy_result.json",
    "core-popup-sh_change_check": "../core/res/popup/sh_change_check.json",
    "core-popup-sh_change_material_ui": "../core/res/popup/sh_change_material_ui.json",
    "core-popup-sh_item_info": "../core/res/popup/sh_item_info.json",
    "core-popup-sh_stone_check": "../core/res/popup/sh_stone_check.json",
    "core-popup-sh_summon_info": "../core/res/popup/sh_summon_info.json",
    "core-popup-sh_weapon_info": "../core/res/popup/sh_weapon_info.json",
    "core-popup-sub_tutorial": "../core/res/popup/sub_tutorial.json",
    "core-popup-sub_tutorial_page_ui": "../core/res/popup/sub_tutorial_page_ui.json",
    "core-popup-text_button_only": "../core/res/popup/text_button_only.json",
    "core-sort-sort_list_ui": "../core/res/sort/sort_list_ui.json",
    "core-headerparts-headerparts_atlas": "../core/res/ui_main/headerparts/headerparts_atlas.plist",
    "core-headerparts-headerparts_ui": "../core/res/ui_main/headerparts/headerparts_ui.json",
    "core-mainmenu-mainmenu_atlas": "../core/res/ui_main/mainmenu/mainmenu_atlas.plist",
    "core-mainmenu-mainmenu_enhance_ui": "../core/res/ui_main/mainmenu/mainmenu_enhance_ui.json",
    "core-mainmenu-mainmenu_gacha_ui": "../core/res/ui_main/mainmenu/mainmenu_gacha_ui.json",
    "core-mainmenu-mainmenu_party_ui": "../core/res/ui_main/mainmenu/mainmenu_party_ui.json",
    "core-mainmenu-mainmenu_quest_normal_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_normal_ui.json",
    "core-mainmenu-mainmenu_quest_raid_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_raid_ui.json",
    "core-mainmenu-mainmenu_raid_particle": "../core/res/ui_main/mainmenu/mainmenu_raid_particle.plist",
    "core-mainmenu-mainmenu_ui": "../core/res/ui_main/mainmenu/mainmenu_ui.json",
    "core-mainmenu-mainmenu_union_ui": "../core/res/ui_main/mainmenu/mainmenu_union_ui.json",
    "core-submenu-submenu_atlas": "../core/res/ui_main/submenu/submenu_atlas.plist",
    "core-submenu-submenu_ui": "../core/res/ui_main/submenu/submenu_ui.json",
    "shop-sh_001-sh_001": "../shop/res/sh_001/sh_001.json",
    "shop-sh_001-sh_event-info_ui": "../shop/res/sh_001/sh_event-info_ui.json",
    "shop-sh_002-sh_002": "../shop/res/sh_002/sh_002.json",
    "shop-sh_003-sh_003": "../shop/res/sh_003/sh_003.json",
    "shop-sh_004-sh_004": "../shop/res/sh_004/sh_004.json",
    "shop-sh_004-sh_event_bannerlist_ui": "../shop/res/sh_004/sh_event_bannerlist_ui.json",
    "shop-sh_004-sh_exchange_ui": "../shop/res/sh_004/sh_exchange_ui.json",
    "shop-sh_004-sh_exchangelist_list_ui": "../shop/res/sh_004/sh_exchangelist_list_ui.json",
    "shop-sh_004-sh_exchangelist_ui": "../shop/res/sh_004/sh_exchangelist_ui.json",
    "shop-sh_005-sh_005": "../shop/res/sh_005/sh_005.json",
    "shop-sh_005-sh_005_atlas": "../shop/res/sh_005/sh_005_atlas.plist",
    "shop-sh_006-sh_006": "../shop/res/sh_006/sh_006.json",
    "shop-sh_006-sh_006_arrival_list_ui": "../shop/res/sh_006/sh_006_arrival_list_ui.json",
    "shop-sh_006-sh_weapon_chara_ui": "../shop/res/sh_006/sh_weapon_chara_ui.json",
    "shop-sh_007-sh_007": "../shop/res/sh_007/sh_007.json",
    "shop-sh_008-sh_008": "../shop/res/sh_008/sh_008.json",
    "shop-sh_009-sh_009": "../shop/res/sh_009/sh_009.json",
    "shop-sh_event_banner_ui": "../shop/res/sh_event_banner_ui.json",
    "shop-sh_green_list_ui": "../shop/res/sh_green_list_ui.json",
    "shop-sh_green_sale_ui": "../shop/res/sh_green_sale_ui.json",
    "shop-sh_green_ui": "../shop/res/sh_green_ui.json",
    "shop-sh_red_list_ui": "../shop/res/sh_red_list_ui.json",
    "shop-sh_red_ui": "../shop/res/sh_red_ui.json",
    "shop-shop_atlas_0": "../shop/res/shop_atlas_0.plist",
    "shop-shop_bg.jpg": "../shop/res/shop_bg.jpg"
});
var gResources = gResources || [];
for (var i in res)
    gResources.push(res[i]);
gResources = _.uniq(gResources);
var res = res || {};
_.extend(res, {
    "core-btn-btn_atlas": "../core/res/btn/btn_atlas.plist",
    "core-btn-btn_tab_three_ui": "../core/res/btn/btn_tab_three_ui.json",
    "core-btn-viewpage_atlas": "../core/res/btn/viewpage_atlas.plist",
    "core-btn-viewpage_ui": "../core/res/btn/viewpage_ui.json",
    "core-corecard-corecard_atlas": "../core/res/corecard/corecard_atlas.plist",
    "core-corecard-corecard_chara_ui": "../core/res/corecard/corecard_chara_ui.json",
    "core-corecard-corecard_item_ui": "../core/res/corecard/corecard_item_ui.json",
    "core-corecard-corecard_job_ui": "../core/res/corecard/corecard_job_ui.json",
    "core-corecard-corecard_npc_ui": "../core/res/corecard/corecard_npc_ui.json",
    "core-corecard-corecard_summon_ui": "../core/res/corecard/corecard_summon_ui.json",
    "core-corecard-corecard_weapon_ui": "../core/res/corecard/corecard_weapon_ui.json",
    "core-font-attack_big": "../core/res/font/attack_big.fnt",
    "core-font-hp_big": "../core/res/font/hp_big.fnt",
    "core-font-my_header_power_no": "../core/res/font/my_header_power_no.fnt",
    "core-icon-elementicon": "../core/res/icon/elementicon.plist",
    "core-icon-rarityicon": "../core/res/icon/rarityicon.plist",
    "core-icon-statustypeicon": "../core/res/icon/statustypeicon.plist",
    "core-icon-treasureicon": "../core/res/icon/treasureicon.plist",
    "core-icon-weapontypeicon": "../core/res/icon/weapontypeicon.plist",
    "core-introduce-introduce": "../core/res/introduce/introduce.plist",
    "core-introduce_chara-introduce_chara_status_0_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_0_ui.json",
    "core-introduce_chara-introduce_chara_status_1_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_1_ui.json",
    "core-introduce_summon-introduce_summon_atlas": "../core/res/introduce/introduce_summon/introduce_summon_atlas.plist",
    "core-introduce_summon-introduce_summon_status_0_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_0_ui.json",
    "core-introduce_summon-introduce_summon_status_1_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_1_ui.json",
    "core-introduce_weapon-introduce_weapon_status_0_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_0_ui.json",
    "core-introduce_weapon-introduce_weapon_status_1_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_1_ui.json",
    "core-statuslist-statuslist_ability_ui": "../core/res/introduce/statuslist/statuslist_ability_ui.json",
    "core-statuslist-statuslist_assist_ui": "../core/res/introduce/statuslist/statuslist_assist_ui.json",
    "core-statuslist-statuslist_atlas": "../core/res/introduce/statuslist/statuslist_atlas.plist",
    "core-statuslist-statuslist_burst_ui": "../core/res/introduce/statuslist/statuslist_burst_ui.json",
    "core-statuslist-statuslist_weapon-skill_ui": "../core/res/introduce/statuslist/statuslist_weapon-skill_ui.json",
    "core-menu-bg_menu.png": "../core/res/menu/bg_menu.png",
    "core-menu-menu_atlas_0": "../core/res/menu/menu_atlas_0.plist",
    "core-menu-menu_ui": "../core/res/menu/menu_ui.json",
    "core-pages-bg_01.jpg": "../core/res/pages/bg_01.jpg",
    "core-pages-bg_beige.jpg": "../core/res/pages/bg_beige.jpg",
    "core-pages-mainparts_atlas": "../core/res/pages/mainparts_atlas.plist",
    "core-pages-subparts_atlas": "../core/res/pages/subparts_atlas.plist",
    "core-Default-ImageFile.png": "../core/res/popup/Default/ImageFile.png",
    "core-popup-base_popup.png": "../core/res/popup/base_popup.png",
    "core-popup-btn": "../core/res/popup/btn.json",
    "core-popup-com_back_check": "../core/res/popup/com_back_check.json",
    "core-popup-com_edit_stamp_page_ui": "../core/res/popup/com_edit_stamp_page_ui.json",
    "core-popup-com_illust_up": "../core/res/popup/com_illust_up.json",
    "core-popup-gud_sh_sort_ui": "../core/res/popup/gud_sh_sort_ui.json",
    "core-popup-illustup_base.png": "../core/res/popup/illustup_base.png",
    "core-popup-illustup_bg.png": "../core/res/popup/illustup_bg.png",
    "core-popup-menu_list": "../core/res/popup/menu_list.json",
    "core-popup-my_001_news_a": "../core/res/popup/my_001_news_a.json",
    "core-popup-my_001_news_btn_ui": "../core/res/popup/my_001_news_btn_ui.json",
    "core-popup-my_banner_list_ui": "../core/res/popup/my_banner_list_ui.json",
    "core-popup-my_banner_page_ui": "../core/res/popup/my_banner_page_ui.json",
    "core-popup-my_ev_banner": "../core/res/popup/my_ev_banner.json",
    "core-popup-popup_base_0000": "../core/res/popup/popup_base_0000.plist",
    "core-popup-popup_btn_0000": "../core/res/popup/popup_btn_0000.plist",
    "core-popup-popup_common": "../core/res/popup/popup_common.json",
    "core-popup-popup_icon_0000": "../core/res/popup/popup_icon_0000.plist",
    "core-popup-prs_carry_limit": "../core/res/popup/prs_carry_limit.json",
    "core-popup-prs_non_receive_list_ui": "../core/res/popup/prs_non_receive_list_ui.json",
    "core-popup-prs_receive": "../core/res/popup/prs_receive.json",
    "core-popup-prs_receive_check_result": "../core/res/popup/prs_receive_check_result.json",
    "core-popup-prs_receive_list_ui": "../core/res/popup/prs_receive_list_ui.json",
    "core-popup-sh_buy_check": "../core/res/popup/sh_buy_check.json",
    "core-popup-sh_buy_result": "../core/res/popup/sh_buy_result.json",
    "core-popup-sh_stone_check": "../core/res/popup/sh_stone_check.json",
    "core-popup-sub_tutorial": "../core/res/popup/sub_tutorial.json",
    "core-popup-sub_tutorial_page_ui": "../core/res/popup/sub_tutorial_page_ui.json",
    "core-popup-text_button_only": "../core/res/popup/text_button_only.json",
    "core-sort-sort_list_ui": "../core/res/sort/sort_list_ui.json",
    "core-headerparts-headerparts_atlas": "../core/res/ui_main/headerparts/headerparts_atlas.plist",
    "core-headerparts-headerparts_ui": "../core/res/ui_main/headerparts/headerparts_ui.json",
    "core-mainmenu-mainmenu_atlas": "../core/res/ui_main/mainmenu/mainmenu_atlas.plist",
    "core-mainmenu-mainmenu_enhance_ui": "../core/res/ui_main/mainmenu/mainmenu_enhance_ui.json",
    "core-mainmenu-mainmenu_gacha_ui": "../core/res/ui_main/mainmenu/mainmenu_gacha_ui.json",
    "core-mainmenu-mainmenu_party_ui": "../core/res/ui_main/mainmenu/mainmenu_party_ui.json",
    "core-mainmenu-mainmenu_quest_normal_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_normal_ui.json",
    "core-mainmenu-mainmenu_quest_raid_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_raid_ui.json",
    "core-mainmenu-mainmenu_raid_particle": "../core/res/ui_main/mainmenu/mainmenu_raid_particle.plist",
    "core-mainmenu-mainmenu_ui": "../core/res/ui_main/mainmenu/mainmenu_ui.json",
    "core-mainmenu-mainmenu_union_ui": "../core/res/ui_main/mainmenu/mainmenu_union_ui.json",
    "core-submenu-submenu_atlas": "../core/res/ui_main/submenu/submenu_atlas.plist",
    "core-submenu-submenu_ui": "../core/res/ui_main/submenu/submenu_ui.json",
    "present-present_atlas": "../present/res/present_atlas.plist",
    "present-prs_001_2_3-prs_001_2_3": "../present/res/prs_001_2_3/prs_001_2_3.json",
    "present-prs_001_2_3-prs_card_ui": "../present/res/prs_001_2_3/prs_card_ui.json",
    "present-prs_001_2_3-prs_cardlist_ui": "../present/res/prs_001_2_3/prs_cardlist_ui.json"
});
var gResources = gResources || [];
for (var i in res)
    gResources.push(res[i]);
gResources = _.uniq(gResources);
var res = res || {};
_.extend(res, {
    "core-btn-btn_atlas": "../core/res/btn/btn_atlas.plist",
    "core-btn-btn_change_page_a_ui": "../core/res/btn/btn_change_page_a_ui.json",
    "core-btn-btn_tab_three_ui": "../core/res/btn/btn_tab_three_ui.json",
    "core-btn-btn_tab_two_ui": "../core/res/btn/btn_tab_two_ui.json",
    "core-btn-viewpage_atlas": "../core/res/btn/viewpage_atlas.plist",
    "core-btn-viewpage_ui": "../core/res/btn/viewpage_ui.json",
    "core-corecard-corecard_atlas": "../core/res/corecard/corecard_atlas.plist",
    "core-corecard-corecard_blank_6_3_ui": "../core/res/corecard/corecard_blank_6_3_ui.json",
    "core-corecard-corecard_chara_ui": "../core/res/corecard/corecard_chara_ui.json",
    "core-corecard-corecard_item_ui": "../core/res/corecard/corecard_item_ui.json",
    "core-corecard-corecard_job_ui": "../core/res/corecard/corecard_job_ui.json",
    "core-corecard-corecard_npc_ui": "../core/res/corecard/corecard_npc_ui.json",
    "core-corecard-corecard_summon_ui": "../core/res/corecard/corecard_summon_ui.json",
    "core-corecard-corecard_weapon_ui": "../core/res/corecard/corecard_weapon_ui.json",
    "core-corecard_chara-corecard_atlas": "../core/res/corecard_chara/corecard_atlas.plist",
    "core-corecard_chara-corecard_chara_ui": "../core/res/corecard_chara/corecard_chara_ui.json",
    "core-corecard_summon-corecard_atlas": "../core/res/corecard_summon/corecard_atlas.plist",
    "core-corecard_summon-corecard_summon_ui": "../core/res/corecard_summon/corecard_summon_ui.json",
    "core-corecard_weapon-corecard_atlas": "../core/res/corecard_weapon/corecard_atlas.plist",
    "core-corecard_weapon-corecard_weapon_ui": "../core/res/corecard_weapon/corecard_weapon_ui.json",
    "core-font-attack_big": "../core/res/font/attack_big.fnt",
    "core-font-hp_big": "../core/res/font/hp_big.fnt",
    "core-font-my_header_power_no": "../core/res/font/my_header_power_no.fnt",
    "core-icon-elementicon": "../core/res/icon/elementicon.plist",
    "core-icon-rarityicon": "../core/res/icon/rarityicon.plist",
    "core-icon-statustypeicon": "../core/res/icon/statustypeicon.plist",
    "core-icon-treasureicon": "../core/res/icon/treasureicon.plist",
    "core-icon-weapontypeicon": "../core/res/icon/weapontypeicon.plist",
    "core-introduce-introduce": "../core/res/introduce/introduce.plist",
    "core-introduce_chara-introduce_chara_status_0_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_0_ui.json",
    "core-introduce_chara-introduce_chara_status_1_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_1_ui.json",
    "core-introduce-introduce_statuslist_list_7_ui": "../core/res/introduce/introduce_statuslist_list_7_ui.json",
    "core-introduce_summon-introduce_summon_atlas": "../core/res/introduce/introduce_summon/introduce_summon_atlas.plist",
    "core-introduce_summon-introduce_summon_status_0_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_0_ui.json",
    "core-introduce_summon-introduce_summon_status_1_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_1_ui.json",
    "core-introduce_summon-introduce_summon_status_2_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_2_ui.json",
    "core-introduce_weapon-introduce_weapon_status_0_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_0_ui.json",
    "core-introduce_weapon-introduce_weapon_status_1_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_1_ui.json",
    "core-introduce_weapon-introduce_weapon_status_2_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_2_ui.json",
    "core-statuslist-statuslist_ability_ui": "../core/res/introduce/statuslist/statuslist_ability_ui.json",
    "core-statuslist-statuslist_assist_ui": "../core/res/introduce/statuslist/statuslist_assist_ui.json",
    "core-statuslist-statuslist_atlas": "../core/res/introduce/statuslist/statuslist_atlas.plist",
    "core-statuslist-statuslist_burst_ui": "../core/res/introduce/statuslist/statuslist_burst_ui.json",
    "core-statuslist-statuslist_ex-ability_blank_ui": "../core/res/introduce/statuslist/statuslist_ex-ability_blank_ui.json",
    "core-statuslist-statuslist_ex-ability_ui": "../core/res/introduce/statuslist/statuslist_ex-ability_ui.json",
    "core-statuslist-statuslist_weapon-skill_ui": "../core/res/introduce/statuslist/statuslist_weapon-skill_ui.json",
    "core-Default-ImageFile.png": "../core/res/menu/Default/ImageFile.png",
    "core-menu-bg_menu.png": "../core/res/menu/bg_menu.png",
    "core-menu-menu_atlas_0": "../core/res/menu/menu_atlas_0.plist",
    "core-menu-menu_ui": "../core/res/menu/menu_ui.json",
    "core-all_over-all_over_0_ui": "../core/res/pages/all_over/all_over_0_ui.json",
    "core-all_over-all_over_1_ui": "../core/res/pages/all_over/all_over_1_ui.json",
    "core-pages-bg_beige.jpg": "../core/res/pages/bg_beige.jpg",
    "core-pages-bg_pink.png": "../core/res/pages/bg_pink.png",
    "core-pages-epiparts_atlas": "../core/res/pages/epiparts_atlas.plist",
    "core-pages-mainparts_atlas": "../core/res/pages/mainparts_atlas.plist",
    "core-side_navi-side_navi_01.png": "../core/res/pages/side_navi/side_navi_01.png",
    "core-side_navi-side_navi_0_ui": "../core/res/pages/side_navi/side_navi_0_ui.json",
    "core-pages-subparts_atlas": "../core/res/pages/subparts_atlas.plist",
    "core-popup-base_popup.png": "../core/res/popup/base_popup.png",
    "core-popup-btn": "../core/res/popup/btn.json",
    "core-popup-com_back_check": "../core/res/popup/com_back_check.json",
    "core-popup-com_edit_stamp_page_ui": "../core/res/popup/com_edit_stamp_page_ui.json",
    "core-popup-com_illust_up": "../core/res/popup/com_illust_up.json",
    "core-popup-com_open_episode": "../core/res/popup/com_open_episode.json",
    "core-popup-ga_check_stone-ticket": "../core/res/popup/ga_check_stone-ticket.json",
    "core-popup-ga_item_info": "../core/res/popup/ga_item_info.json",
    "core-popup-ga_need_item": "../core/res/popup/ga_need_item.json",
    "core-popup-ga_need_space": "../core/res/popup/ga_need_space.json",
    "core-popup-ga_scene_check": "../core/res/popup/ga_scene_check.json",
    "core-popup-ga_tips": "../core/res/popup/ga_tips.json",
    "core-popup-gud_sh_sort_ui": "../core/res/popup/gud_sh_sort_ui.json",
    "core-popup-illustup_base.png": "../core/res/popup/illustup_base.png",
    "core-popup-illustup_bg.png": "../core/res/popup/illustup_bg.png",
    "core-popup-menu_list": "../core/res/popup/menu_list.json",
    "core-popup-my_001_news_a": "../core/res/popup/my_001_news_a.json",
    "core-popup-my_001_news_btn_ui": "../core/res/popup/my_001_news_btn_ui.json",
    "core-popup-my_banner_list_ui": "../core/res/popup/my_banner_list_ui.json",
    "core-popup-my_banner_page_ui": "../core/res/popup/my_banner_page_ui.json",
    "core-popup-my_ev_banner": "../core/res/popup/my_ev_banner.json",
    "core-popup-popup_base_0000": "../core/res/popup/popup_base_0000.plist",
    "core-popup-popup_btn_0000": "../core/res/popup/popup_btn_0000.plist",
    "core-popup-popup_common": "../core/res/popup/popup_common.json",
    "core-popup-popup_icon_0000": "../core/res/popup/popup_icon_0000.plist",
    "core-popup-ra_quest_appearance": "../core/res/popup/ra_quest_appearance.json",
    "core-popup-sh_buy_check": "../core/res/popup/sh_buy_check.json",
    "core-popup-sh_buy_result": "../core/res/popup/sh_buy_result.json",
    "core-popup-sh_item_info": "../core/res/popup/sh_item_info.json",
    "core-popup-sh_stone_check": "../core/res/popup/sh_stone_check.json",
    "core-popup-sh_summon_info": "../core/res/popup/sh_summon_info.json",
    "core-popup-sh_weapon_info": "../core/res/popup/sh_weapon_info.json",
    "core-popup-sub_tutorial": "../core/res/popup/sub_tutorial.json",
    "core-popup-sub_tutorial_page_ui": "../core/res/popup/sub_tutorial_page_ui.json",
    "core-popup-text_button_only": "../core/res/popup/text_button_only.json",
    "core-sort-sort_list_ui": "../core/res/sort/sort_list_ui.json",
    "core-headerparts-headerparts_atlas": "../core/res/ui_main/headerparts/headerparts_atlas.plist",
    "core-headerparts-headerparts_ui": "../core/res/ui_main/headerparts/headerparts_ui.json",
    "core-mainmenu-mainmenu_atlas": "../core/res/ui_main/mainmenu/mainmenu_atlas.plist",
    "core-mainmenu-mainmenu_enhance_ui": "../core/res/ui_main/mainmenu/mainmenu_enhance_ui.json",
    "core-mainmenu-mainmenu_gacha_ui": "../core/res/ui_main/mainmenu/mainmenu_gacha_ui.json",
    "core-mainmenu-mainmenu_party_ui": "../core/res/ui_main/mainmenu/mainmenu_party_ui.json",
    "core-mainmenu-mainmenu_quest_normal_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_normal_ui.json",
    "core-mainmenu-mainmenu_quest_raid_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_raid_ui.json",
    "core-mainmenu-mainmenu_raid_particle": "../core/res/ui_main/mainmenu/mainmenu_raid_particle.plist",
    "core-mainmenu-mainmenu_ui": "../core/res/ui_main/mainmenu/mainmenu_ui.json",
    "core-mainmenu-mainmenu_union_ui": "../core/res/ui_main/mainmenu/mainmenu_union_ui.json",
    "core-submenu-submenu_atlas": "../core/res/ui_main/submenu/submenu_atlas.plist",
    "core-submenu-submenu_ui": "../core/res/ui_main/submenu/submenu_ui.json",
    "mypage-gacha_add-gacha_add_atlas_1": "../mypage/res/notice_ani/gacha_add/gacha_add_atlas_1.plist",
    "gacha-ga_000-ga_000": "../gacha/res/ga_000/ga_000.json",
    "gacha-ga_000-ga_bannerlist_page_ui": "../gacha/res/ga_000/ga_bannerlist_page_ui.json",
    "gacha-ga_000-ga_bannerlist_ui": "../gacha/res/ga_000/ga_bannerlist_ui.json",
    "gacha-ga_001_2_3_4-ga_001": "../gacha/res/ga_001_2_3_4/ga_001.json",
    "gacha-ga_001_2_3_4-ga_002": "../gacha/res/ga_001_2_3_4/ga_002.json",
    "gacha-ga_001_2_3_4-ga_003": "../gacha/res/ga_001_2_3_4/ga_003.json",
    "gacha-ga_001_2_3_4-ga_004": "../gacha/res/ga_001_2_3_4/ga_004.json",
    "gacha-ga_001_2_3_4-ga_top_slider_ui": "../gacha/res/ga_001_2_3_4/ga_top_slider_ui.json",
    "gacha-ga_005-ga_005": "../gacha/res/ga_005/ga_005.json",
    "gacha-ga_005-ga_005_arrival_list_ui": "../gacha/res/ga_005/ga_005_arrival_list_ui.json",
    "gacha-ga_006-ga_006": "../gacha/res/ga_006/ga_006.json",
    "gacha-ga_007-ga_007": "../gacha/res/ga_007/ga_007.json",
    "gacha-ga_008-ga_008": "../gacha/res/ga_008/ga_008.json",
    "gacha-ga_009-ga_009": "../gacha/res/ga_009/ga_009.json",
    "gacha-ga_009-ga_009_arrival_list_page_ui": "../gacha/res/ga_009/ga_009_arrival_list_page_ui.json",
    "gacha-ga_009-ga_009_arrival_list_ui": "../gacha/res/ga_009/ga_009_arrival_list_ui.json",
    "gacha-ga_010-ga_010": "../gacha/res/ga_010/ga_010.json",
    "gacha-ga_010-ga_result_corecard_ui": "../gacha/res/ga_010/ga_result_corecard_ui.json",
    "gacha-ga_011-ga_011": "../gacha/res/ga_011/ga_011.json",
    "gacha-ga_012-ga_012": "../gacha/res/ga_012/ga_012.json",
    "gacha-ga_013-ga_013": "../gacha/res/ga_013/ga_013.json",
    "gacha-ga_013-ga_013_introduction_list_ui": "../gacha/res/ga_013/ga_013_introduction_list_ui.json",
    "gacha-ga_014-ga_014": "../gacha/res/ga_014/ga_014.json",
    "gacha-Default-Sprite.png": "../gacha/res/ga_ani/Default/Sprite.png",
    "gacha-ga_ani-ga_ani": "../gacha/res/ga_ani/ga_ani.json",
    "gacha-ga_ani-ga_ani_00": "../gacha/res/ga_ani/ga_ani_00.json",
    "gacha-ga_ani-ga_ani_06": "../gacha/res/ga_ani/ga_ani_06.json",
    "gacha-ga_ani_a-ga_ani_01_a": "../gacha/res/ga_ani/ga_ani_a/ga_ani_01_a.json",
    "gacha-ga_ani_a-ga_ani_02_a": "../gacha/res/ga_ani/ga_ani_a/ga_ani_02_a.json",
    "gacha-ga_ani_a-ga_ani_03_a": "../gacha/res/ga_ani/ga_ani_a/ga_ani_03_a.json",
    "gacha-ga_ani_a-ga_ani_04_a_0": "../gacha/res/ga_ani/ga_ani_a/ga_ani_04_a_0.json",
    "gacha-ga_ani_a-ga_ani_04_a_1": "../gacha/res/ga_ani/ga_ani_a/ga_ani_04_a_1.json",
    "gacha-ga_ani_a-ga_ani_05_a": "../gacha/res/ga_ani/ga_ani_a/ga_ani_05_a.json",
    "gacha-ga_ani_a-ga_ani_bg_a.png": "../gacha/res/ga_ani/ga_ani_a/ga_ani_bg_a.png",
    "gacha-ga_ani-ga_ani_atlas_0": "../gacha/res/ga_ani/ga_ani_atlas_0.plist",
    "gacha-ga_ani-ga_ani_atlas_1": "../gacha/res/ga_ani/ga_ani_atlas_1.plist",
    "gacha-ga_ani_b-ga_ani_01_b": "../gacha/res/ga_ani/ga_ani_b/ga_ani_01_b.json",
    "gacha-ga_ani_b-ga_ani_02_b": "../gacha/res/ga_ani/ga_ani_b/ga_ani_02_b.json",
    "gacha-ga_ani_b-ga_ani_03_b": "../gacha/res/ga_ani/ga_ani_b/ga_ani_03_b.json",
    "gacha-ga_ani_b-ga_ani_04_b_0": "../gacha/res/ga_ani/ga_ani_b/ga_ani_04_b_0.json",
    "gacha-ga_ani_b-ga_ani_04_b_1": "../gacha/res/ga_ani/ga_ani_b/ga_ani_04_b_1.json",
    "gacha-ga_ani_b-ga_ani_05_b": "../gacha/res/ga_ani/ga_ani_b/ga_ani_05_b.json",
    "gacha-ga_ani_b-ga_ani_bg_b.png": "../gacha/res/ga_ani/ga_ani_b/ga_ani_bg_b.png",
    "gacha-ga_ani-ga_ani_ball": "../gacha/res/ga_ani/ga_ani_ball.plist",
    "gacha-ga_ani-ga_ani_bg1.png": "../gacha/res/ga_ani/ga_ani_bg1.png",
    "gacha-ga_ani_c-ga_ani_01_c": "../gacha/res/ga_ani/ga_ani_c/ga_ani_01_c.json",
    "gacha-ga_ani_c-ga_ani_02_c": "../gacha/res/ga_ani/ga_ani_c/ga_ani_02_c.json",
    "gacha-ga_ani_c-ga_ani_03_c": "../gacha/res/ga_ani/ga_ani_c/ga_ani_03_c.json",
    "gacha-ga_ani_c-ga_ani_04_c_0": "../gacha/res/ga_ani/ga_ani_c/ga_ani_04_c_0.json",
    "gacha-ga_ani_c-ga_ani_04_c_1": "../gacha/res/ga_ani/ga_ani_c/ga_ani_04_c_1.json",
    "gacha-ga_ani_c-ga_ani_05_c": "../gacha/res/ga_ani/ga_ani_c/ga_ani_05_c.json",
    "gacha-ga_ani_c-ga_ani_bg_c.png": "../gacha/res/ga_ani/ga_ani_c/ga_ani_bg_c.png",
    "gacha-ga_ani-ga_ani_effect": "../gacha/res/ga_ani/ga_ani_effect.json",
    "gacha-ga_ani-ga_ani_light4.png": "../gacha/res/ga_ani/ga_ani_light4.png",
    "gacha-ga_ani-ga_ani_light6_0.png": "../gacha/res/ga_ani/ga_ani_light6_0.png",
    "gacha-ga_ani-ga_ani_light6_1.png": "../gacha/res/ga_ani/ga_ani_light6_1.png",
    "gacha-ga_ani-ga_ani_light6_2.png": "../gacha/res/ga_ani/ga_ani_light6_2.png",
    "gacha-ga_ani-ga_ani_nike_atlas": "../gacha/res/ga_ani/ga_ani_nike_atlas.plist",
    "gacha-ga_ani-ga_ani_text0_0.png": "../gacha/res/ga_ani/ga_ani_text0_0.png",
    "gacha-ga_ani-se_gacha_0001.mp3": "../gacha/res/ga_ani/se_gacha_0001.mp3",
    "gacha-ga_ani-se_gacha_0002.mp3": "../gacha/res/ga_ani/se_gacha_0002.mp3",
    "gacha-ga_ani-se_gacha_0003.mp3": "../gacha/res/ga_ani/se_gacha_0003.mp3",
    "gacha-ga_ani-se_gacha_0004.mp3": "../gacha/res/ga_ani/se_gacha_0004.mp3",
    "gacha-ga_ani-se_gacha_0005.mp3": "../gacha/res/ga_ani/se_gacha_0005.mp3",
    "gacha-ga_ani-se_gacha_0006.mp3": "../gacha/res/ga_ani/se_gacha_0006.mp3",
    "gacha-ga_ani-se_gacha_0009.mp3": "../gacha/res/ga_ani/se_gacha_0009.mp3",
    "gacha-ga_ani-se_gacha_0011.mp3": "../gacha/res/ga_ani/se_gacha_0011.mp3",
    "gacha-ga_atlas": "../gacha/res/ga_atlas.plist",
    "gacha-ga_bg.jpg": "../gacha/res/ga_bg.jpg",
    "gacha-ga_weapon_chara_ui": "../gacha/res/ga_weapon_chara_ui.json"
});
var gResources = gResources || [];
for (var i in res)
    gResources.push(res[i]);
gResources = _.uniq(gResources);
var res = res || {};
_.extend(res, {
    "core-btn-btn_atlas": "../core/res/btn/btn_atlas.plist",
    "core-btn-btn_tab_three_ui": "../core/res/btn/btn_tab_three_ui.json",
    "core-btn-btn_tab_two_ui": "../core/res/btn/btn_tab_two_ui.json",
    "core-btn-viewpage_atlas": "../core/res/btn/viewpage_atlas.plist",
    "core-btn-viewpage_ui": "../core/res/btn/viewpage_ui.json",
    "core-corecard-corecard_atlas": "../core/res/corecard/corecard_atlas.plist",
    "core-corecard-corecard_blank_5_4_ui": "../core/res/corecard/corecard_blank_5_4_ui.json",
    "core-corecard-corecard_blank_6_3_ui": "../core/res/corecard/corecard_blank_6_3_ui.json",
    "core-corecard-corecard_chara_ui": "../core/res/corecard/corecard_chara_ui.json",
    "core-corecard-corecard_item_ui": "../core/res/corecard/corecard_item_ui.json",
    "core-corecard-corecard_job_ui": "../core/res/corecard/corecard_job_ui.json",
    "core-corecard-corecard_npc_ui": "../core/res/corecard/corecard_npc_ui.json",
    "core-corecard-corecard_summon_ui": "../core/res/corecard/corecard_summon_ui.json",
    "core-corecard-corecard_weapon_ui": "../core/res/corecard/corecard_weapon_ui.json",
    "core-font-attack_big": "../core/res/font/attack_big.fnt",
    "core-font-hp_big": "../core/res/font/hp_big.fnt",
    "core-font-my_header_power_no": "../core/res/font/my_header_power_no.fnt",
    "core-icon-elementicon": "../core/res/icon/elementicon.plist",
    "core-icon-rarityicon": "../core/res/icon/rarityicon.plist",
    "core-icon-statustypeicon": "../core/res/icon/statustypeicon.plist",
    "core-icon-treasureicon": "../core/res/icon/treasureicon.plist",
    "core-icon-weapontypeicon": "../core/res/icon/weapontypeicon.plist",
    "core-introduce-introduce": "../core/res/introduce/introduce.plist",
    "core-introduce_chara-introduce_chara_status_0_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_0_ui.json",
    "core-introduce_chara-introduce_chara_status_1_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_1_ui.json",
    "core-introduce-introduce_statuslist_list_7_ui": "../core/res/introduce/introduce_statuslist_list_7_ui.json",
    "core-introduce_summon-introduce_summon_atlas": "../core/res/introduce/introduce_summon/introduce_summon_atlas.plist",
    "core-introduce_summon-introduce_summon_status_0_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_0_ui.json",
    "core-introduce_summon-introduce_summon_status_1_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_1_ui.json",
    "core-introduce_weapon-introduce_weapon_status_0_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_0_ui.json",
    "core-introduce_weapon-introduce_weapon_status_1_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_1_ui.json",
    "core-statuslist-statuslist_ability_ui": "../core/res/introduce/statuslist/statuslist_ability_ui.json",
    "core-statuslist-statuslist_assist_ui": "../core/res/introduce/statuslist/statuslist_assist_ui.json",
    "core-statuslist-statuslist_atlas": "../core/res/introduce/statuslist/statuslist_atlas.plist",
    "core-statuslist-statuslist_burst_ui": "../core/res/introduce/statuslist/statuslist_burst_ui.json",
    "core-statuslist-statuslist_ex-ability_blank_ui": "../core/res/introduce/statuslist/statuslist_ex-ability_blank_ui.json",
    "core-statuslist-statuslist_ex-ability_ui": "../core/res/introduce/statuslist/statuslist_ex-ability_ui.json",
    "core-statuslist-statuslist_weapon-skill_ui": "../core/res/introduce/statuslist/statuslist_weapon-skill_ui.json",
    "core-Default-ImageFile.png": "../core/res/menu/Default/ImageFile.png",
    "core-menu-bg_menu.png": "../core/res/menu/bg_menu.png",
    "core-menu-menu_atlas_0": "../core/res/menu/menu_atlas_0.plist",
    "core-menu-menu_ui": "../core/res/menu/menu_ui.json",
    "core-all_over-all_over_0_ui": "../core/res/pages/all_over/all_over_0_ui.json",
    "core-all_over-all_over_1_ui": "../core/res/pages/all_over/all_over_1_ui.json",
    "core-pages-bg_01.jpg": "../core/res/pages/bg_01.jpg",
    "core-pages-bg_beige.jpg": "../core/res/pages/bg_beige.jpg",
    "core-pages-core_gauge_atlas": "../core/res/pages/core_gauge_atlas.plist",
    "core-pages-mainparts": "../core/res/pages/mainparts.plist",
    "core-pages-mainparts_atlas": "../core/res/pages/mainparts_atlas.plist",
    "core-pages-mainparts_star_gauge_ui": "../core/res/pages/mainparts_star_gauge_ui.json",
    "core-pages-sort_0_ui": "../core/res/pages/sort_0_ui.json",
    "core-pages-sort_list_0_ui": "../core/res/pages/sort_list_0_ui.json",
    "core-pages-subparts_atlas": "../core/res/pages/subparts_atlas.plist",
    "core-Default-ImageFile.png-2": "../core/res/popup/Default/ImageFile.png",
    "core-popup-base_popup.png": "../core/res/popup/base_popup.png",
    "core-popup-btn": "../core/res/popup/btn.json",
    "core-popup-com_back_check": "../core/res/popup/com_back_check.json",
    "core-popup-com_edit_stamp_page_ui": "../core/res/popup/com_edit_stamp_page_ui.json",
    "core-popup-com_illust_up": "../core/res/popup/com_illust_up.json",
    "core-popup-com_need_mate": "../core/res/popup/com_need_mate.json",
    "core-popup-com_non_offer": "../core/res/popup/com_non_offer.json",
    "core-pages-mainparts_atlas-2": "../core/res/popup/core/res/pages/mainparts_atlas.plist",
    "core-popup-enh_rare_check": "../core/res/popup/enh_rare_check.json",
    "core-popup-evo_item_choose": "../core/res/popup/evo_item_choose.json",
    "core-popup-evo_mate_check": "../core/res/popup/evo_mate_check.json",
    "core-popup-evo_money_check": "../core/res/popup/evo_money_check.json",
    "core-popup-ga_scene_check": "../core/res/popup/ga_scene_check.json",
    "core-popup-gud_sh_sort_ui": "../core/res/popup/gud_sh_sort_ui.json",
    "core-popup-illustup_base.png": "../core/res/popup/illustup_base.png",
    "core-popup-illustup_bg.png": "../core/res/popup/illustup_bg.png",
    "core-popup-menu_list": "../core/res/popup/menu_list.json",
    "core-popup-my_001_news_a": "../core/res/popup/my_001_news_a.json",
    "core-popup-my_001_news_btn_ui": "../core/res/popup/my_001_news_btn_ui.json",
    "core-popup-my_banner_list_ui": "../core/res/popup/my_banner_list_ui.json",
    "core-popup-my_banner_page_ui": "../core/res/popup/my_banner_page_ui.json",
    "core-popup-my_ev_banner": "../core/res/popup/my_ev_banner.json",
    "core-popup-popup_base_0000": "../core/res/popup/popup_base_0000.plist",
    "core-popup-popup_btn_0000": "../core/res/popup/popup_btn_0000.plist",
    "core-popup-popup_common": "../core/res/popup/popup_common.json",
    "core-popup-popup_icon_0000": "../core/res/popup/popup_icon_0000.plist",
    "core-Default-ImageFile.png-3": "../core/res/popup/popup_layer/Default/ImageFile.png",
    "core-popup_layer-arousal_mate_check": "../core/res/popup/popup_layer/arousal_mate_check.json",
    "core-popup_layer-sh_hp_attack_base.png": "../core/res/popup/popup_layer/sh_hp_attack_base.png",
    "core-popup_layer-sh_summon_base.png": "../core/res/popup/popup_layer/sh_summon_base.png",
    "core-popup_layer-sh_weapon_base.png": "../core/res/popup/popup_layer/sh_weapon_base.png",
    "core-popup-q_003_getability": "../core/res/popup/q_003_getability.json",
    "core-popup-ra_quest_appearance": "../core/res/popup/ra_quest_appearance.json",
    "core-popup-sh_buy_check": "../core/res/popup/sh_buy_check.json",
    "core-popup-sh_buy_result": "../core/res/popup/sh_buy_result.json",
    "core-popup-sh_item_info": "../core/res/popup/sh_item_info.json",
    "core-popup-sh_stone_check": "../core/res/popup/sh_stone_check.json",
    "core-popup-sh_summon_info": "../core/res/popup/sh_summon_info.json",
    "core-popup-sh_weapon_info": "../core/res/popup/sh_weapon_info.json",
    "core-popup-sub_tutorial": "../core/res/popup/sub_tutorial.json",
    "core-popup-sub_tutorial_page_ui": "../core/res/popup/sub_tutorial_page_ui.json",
    "core-popup-text_button_only": "../core/res/popup/text_button_only.json",
    "core-sort-sort_list_ui": "../core/res/sort/sort_list_ui.json",
    "core-headerparts-headerparts_atlas": "../core/res/ui_main/headerparts/headerparts_atlas.plist",
    "core-headerparts-headerparts_ui": "../core/res/ui_main/headerparts/headerparts_ui.json",
    "core-mainmenu-mainmenu_atlas": "../core/res/ui_main/mainmenu/mainmenu_atlas.plist",
    "core-mainmenu-mainmenu_enhance_ui": "../core/res/ui_main/mainmenu/mainmenu_enhance_ui.json",
    "core-mainmenu-mainmenu_gacha_ui": "../core/res/ui_main/mainmenu/mainmenu_gacha_ui.json",
    "core-mainmenu-mainmenu_party_ui": "../core/res/ui_main/mainmenu/mainmenu_party_ui.json",
    "core-mainmenu-mainmenu_quest_normal_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_normal_ui.json",
    "core-mainmenu-mainmenu_quest_raid_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_raid_ui.json",
    "core-mainmenu-mainmenu_raid_particle": "../core/res/ui_main/mainmenu/mainmenu_raid_particle.plist",
    "core-mainmenu-mainmenu_ui": "../core/res/ui_main/mainmenu/mainmenu_ui.json",
    "core-mainmenu-mainmenu_union_ui": "../core/res/ui_main/mainmenu/mainmenu_union_ui.json",
    "core-submenu-submenu_atlas": "../core/res/ui_main/submenu/submenu_atlas.plist",
    "core-submenu-submenu_ui": "../core/res/ui_main/submenu/submenu_ui.json",
    "enh_evo-arousal_002-arousal_002": "../enh_evo/res/arousal_002/arousal_002.json",
    "enh_evo-Default-ImageFile.png-4": "../enh_evo/res/arousal_003/Default/ImageFile.png",
    "enh_evo-arousal_003-arousal_003": "../enh_evo/res/arousal_003/arousal_003.json",
    "enh_evo-arousal_popup_ui": "../enh_evo/res/arousal_popup_ui.json",
    "enh_evo-enh_001_2_6_evo_001_2_3-enh_001_2_6_evo_001_2_3": "../enh_evo/res/enh_001_2_6_evo_001_2_3/enh_001_2_6_evo_001_2_3.json",
    "enh_evo-enh_003-enh_003": "../enh_evo/res/enh_003/enh_003.json",
    "enh_evo-enh_004-enh_004": "../enh_evo/res/enh_004/enh_004.json",
    "enh_evo-enh_005-enh_005": "../enh_evo/res/enh_005/enh_005.json",
    "enh_evo-enh_007-enh_007": "../enh_evo/res/enh_007/enh_007.json",
    "enh_evo-enh_008-enh_008": "../enh_evo/res/enh_008/enh_008.json",
    "enh_evo-enh_009-enh_009": "../enh_evo/res/enh_009/enh_009.json",
    "enh_evo-enh_010-enh_010": "../enh_evo/res/enh_010/enh_010.json",
    "enh_evo-enh_011-enh_011": "../enh_evo/res/enh_011/enh_011.json",
    "enh_evo-enh_012-enh_012": "../enh_evo/res/enh_012/enh_012.json",
    "enh_evo-Default-ImageFile.png-5": "../enh_evo/res/enh_013/Default/ImageFile.png",
    "enh_evo-enh_013-enh_013": "../enh_evo/res/enh_013/enh_013.json",
    "enh_evo-Default-ImageFile.png-6": "../enh_evo/res/enh_014/Default/ImageFile.png",
    "enh_evo-enh_014-enh_014": "../enh_evo/res/enh_014/enh_014.json",
    "enh_evo-Default-ImageFile.png-7": "../enh_evo/res/enh_015/Default/ImageFile.png",
    "enh_evo-enh_015-enh_015": "../enh_evo/res/enh_015/enh_015.json",
    "enh_evo-enh_evo_atlas_0": "../enh_evo/res/enh_evo_atlas_0.plist",
    "enh_evo-enh_evo_atlas_1": "../enh_evo/res/enh_evo_atlas_1.plist",
    "enh_evo-evo_004-evo_004": "../enh_evo/res/evo_004/evo_004.json",
    "enh_evo-evo_005-evo_005": "../enh_evo/res/evo_005/evo_005.json",
    "enh_evo-evo_006-evo_006": "../enh_evo/res/evo_006/evo_006.json",
    "enh_evo-evo_007-evo_007": "../enh_evo/res/evo_007/evo_007.json",
    "enh_evo-evo_008-evo_008": "../enh_evo/res/evo_008/evo_008.json",
    "enh_evo-Default-ImageFile.png-8": "../enh_evo/res/evo_009/Default/ImageFile.png",
    "enh_evo-evo_009-evo_009": "../enh_evo/res/evo_009/evo_009.json",
    "enh_evo-evo_010-evo_010": "../enh_evo/res/evo_010/evo_010.json",
    "enh_evo-evo_011-evo_011": "../enh_evo/res/evo_011/evo_011.json",
    "enh_evo-Default-ImageFile.png-9": "../enh_evo/res/evo_012/Default/ImageFile.png",
    "enh_evo-evo_012-evo_012": "../enh_evo/res/evo_012/evo_012.json",
    "enh_evo-evo_013-evo_013": "../enh_evo/res/evo_013/evo_013.json",
    "enh_evo-Default-ImageFile.png-10": "../enh_evo/res/evo_014/Default/ImageFile.png",
    "enh_evo-evo_014-evo_014": "../enh_evo/res/evo_014/evo_014.json",
    "enh_evo-se_breakthrough_0001.mp3": "../enh_evo/res/se_breakthrough_0001.mp3",
    "enh_evo-se_levelup_0001.mp3": "../enh_evo/res/se_levelup_0001.mp3",
    "enh_evo-se_mix_0001.mp3": "../enh_evo/res/se_mix_0001.mp3",
    "enh_evo-se_mix_great_0001.mp3": "../enh_evo/res/se_mix_great_0001.mp3",
    "enh_evo-se_skill_up_0001.mp3": "../enh_evo/res/se_skill_up_0001.mp3"
});
var gResources = gResources || [];
for (var i in res)
    gResources.push(res[i]);
gResources = _.uniq(gResources);
var res = res || {};
_.extend(res, {
    "core-btn-btn_atlas": "../core/res/btn/btn_atlas.plist",
    "core-btn-btn_change_page_a_ui": "../core/res/btn/btn_change_page_a_ui.json",
    "core-btn-btn_tab_three_ui": "../core/res/btn/btn_tab_three_ui.json",
    "core-btn-btn_tab_two_ui": "../core/res/btn/btn_tab_two_ui.json",
    "core-btn-viewpage_atlas": "../core/res/btn/viewpage_atlas.plist",
    "core-btn-viewpage_ui": "../core/res/btn/viewpage_ui.json",
    "core-corecard-corecard_atlas": "../core/res/corecard/corecard_atlas.plist",
    "core-corecard-corecard_blank_5_3_ui": "../core/res/corecard/corecard_blank_5_3_ui.json",
    "core-corecard-corecard_chara_ui": "../core/res/corecard/corecard_chara_ui.json",
    "core-corecard-corecard_item_ui": "../core/res/corecard/corecard_item_ui.json",
    "core-corecard-corecard_job_ui": "../core/res/corecard/corecard_job_ui.json",
    "core-corecard-corecard_npc_ui": "../core/res/corecard/corecard_npc_ui.json",
    "core-corecard-corecard_summon_ui": "../core/res/corecard/corecard_summon_ui.json",
    "core-corecard-corecard_weapon_ui": "../core/res/corecard/corecard_weapon_ui.json",
    "core-font-attack_big": "../core/res/font/attack_big.fnt",
    "core-font-hp_big": "../core/res/font/hp_big.fnt",
    "core-font-my_header_power_no": "../core/res/font/my_header_power_no.fnt",
    "core-icon-elementicon": "../core/res/icon/elementicon.plist",
    "core-icon-rarityicon": "../core/res/icon/rarityicon.plist",
    "core-icon-statustypeicon": "../core/res/icon/statustypeicon.plist",
    "core-icon-treasureicon": "../core/res/icon/treasureicon.plist",
    "core-icon-weapontypeicon": "../core/res/icon/weapontypeicon.plist",
    "core-introduce-introduce": "../core/res/introduce/introduce.plist",
    "core-introduce_chara-introduce_chara_status_0_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_0_ui.json",
    "core-introduce_chara-introduce_chara_status_1_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_1_ui.json",
    "core-introduce_summon-introduce_summon_atlas": "../core/res/introduce/introduce_summon/introduce_summon_atlas.plist",
    "core-introduce_summon-introduce_summon_status_0_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_0_ui.json",
    "core-introduce_summon-introduce_summon_status_1_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_1_ui.json",
    "core-introduce_weapon-introduce_weapon_status_0_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_0_ui.json",
    "core-introduce_weapon-introduce_weapon_status_1_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_1_ui.json",
    "core-statuslist-statuslist_ability_ui": "../core/res/introduce/statuslist/statuslist_ability_ui.json",
    "core-statuslist-statuslist_assist_ui": "../core/res/introduce/statuslist/statuslist_assist_ui.json",
    "core-statuslist-statuslist_atlas": "../core/res/introduce/statuslist/statuslist_atlas.plist",
    "core-statuslist-statuslist_burst_ui": "../core/res/introduce/statuslist/statuslist_burst_ui.json",
    "core-statuslist-statuslist_weapon-skill_ui": "../core/res/introduce/statuslist/statuslist_weapon-skill_ui.json",
    "core-Default-ImageFile.png": "../core/res/menu/Default/ImageFile.png",
    "core-menu-bg_menu.png": "../core/res/menu/bg_menu.png",
    "core-menu-menu_atlas_0": "../core/res/menu/menu_atlas_0.plist",
    "core-menu-menu_ui": "../core/res/menu/menu_ui.json",
    "core-all_over-all_over_0_ui": "../core/res/pages/all_over/all_over_0_ui.json",
    "core-pages-bg_01.jpg": "../core/res/pages/bg_01.jpg",
    "core-pages-bg_beige.jpg": "../core/res/pages/bg_beige.jpg",
    "core-bursttime-btn_burstinfo.png": "../core/res/pages/bursttime/btn_burstinfo.png",
    "core-bursttime-bursttime_period_base_0.png": "../core/res/pages/bursttime/bursttime_period_base_0.png",
    "core-bursttime-bursttime_period_base_1.png": "../core/res/pages/bursttime/bursttime_period_base_1.png",
    "core-bursttime-bursttime_period_textimg.png": "../core/res/pages/bursttime/bursttime_period_textimg.png",
    "core-bursttime-bursttime_period_ui": "../core/res/pages/bursttime/bursttime_period_ui.json",
    "core-pages-core_gauge_atlas": "../core/res/pages/core_gauge_atlas.plist",
    "core-pages-mainparts_atlas": "../core/res/pages/mainparts_atlas.plist",
    "core-pages-newslist_ui": "../core/res/pages/newslist_ui.json",
    "core-pages-newslist_ui_page": "../core/res/pages/newslist_ui_page.json",
    "core-pages-sort_0_ui": "../core/res/pages/sort_0_ui.json",
    "core-pages-sort_1_ui": "../core/res/pages/sort_1_ui.json",
    "core-pages-sort_list_0_ui": "../core/res/pages/sort_list_0_ui.json",
    "core-pages-sort_list_1_ui": "../core/res/pages/sort_list_1_ui.json",
    "core-pages-subparts_atlas": "../core/res/pages/subparts_atlas.plist",
    "core-userlist-balloonlist_atlas": "../core/res/pages/userlist/balloonlist_atlas.plist",
    "core-userlist-balloonlist_ui": "../core/res/pages/userlist/balloonlist_ui.json",
    "core-userlist-balloonlist_ui_page": "../core/res/pages/userlist/balloonlist_ui_page.json",
    "core-userlist-userlist_0_ui": "../core/res/pages/userlist/userlist_0_ui.json",
    "core-userlist-userlist_atlas": "../core/res/pages/userlist/userlist_atlas.plist",
    "core-userlist-userlist_page_ui": "../core/res/pages/userlist/userlist_page_ui.json",
    "core-popup-base_popup.png": "../core/res/popup/base_popup.png",
    "core-popup-btn": "../core/res/popup/btn.json",
    "core-popup-com_back_check": "../core/res/popup/com_back_check.json",
    "core-popup-com_edit_greed": "../core/res/popup/com_edit_greed.json",
    "core-popup-com_edit_greed_a_ui": "../core/res/popup/com_edit_greed_a_ui.json",
    "core-popup-com_edit_greed_b_ui": "../core/res/popup/com_edit_greed_b_ui.json",
    "core-popup-com_edit_stamp_page_ui": "../core/res/popup/com_edit_stamp_page_ui.json",
    "core-popup-com_illust_up": "../core/res/popup/com_illust_up.json",
    "core-popup-com_non_offer": "../core/res/popup/com_non_offer.json",
    "core-popup-gud_001_break_leave": "../core/res/popup/gud_001_break_leave.json",
    "core-popup-gud_001_bursttime_change": "../core/res/popup/gud_001_bursttime_change.json",
    "core-popup-gud_001_bursttime_change_sort_ui": "../core/res/popup/gud_001_bursttime_change_sort_ui.json",
    "core-popup-gud_001_bursttime_result": "../core/res/popup/gud_001_bursttime_result.json",
    "core-popup-gud_001_control": "../core/res/popup/gud_001_control.json",
    "core-popup-gud_001_edit": "../core/res/popup/gud_001_edit.json",
    "core-popup-gud_001_uncontrol_a": "../core/res/popup/gud_001_uncontrol_a.json",
    "core-popup-gud_001_uncontrol_b": "../core/res/popup/gud_001_uncontrol_b.json",
    "core-popup-gud_002_detail": "../core/res/popup/gud_002_detail.json",
    "core-popup-gud_005_check_rarecheck": "../core/res/popup/gud_005_check_rarecheck.json",
    "core-popup-gud_005_levelup": "../core/res/popup/gud_005_levelup.json",
    "core-popup-gud_005_result": "../core/res/popup/gud_005_result.json",
    "core-popup-gud_013_fire_top_change_end": "../core/res/popup/gud_013_fire_top_change_end.json",
    "core-popup-gud_auth_change": "../core/res/popup/gud_auth_change.json",
    "core-popup-gud_auth_change_sort_ui": "../core/res/popup/gud_auth_change_sort_ui.json",
    "core-popup-gud_gem_amount": "../core/res/popup/gud_gem_amount.json",
    "core-popup-gud_gem_check": "../core/res/popup/gud_gem_check.json",
    "core-popup-gud_gem_rankup": "../core/res/popup/gud_gem_rankup.json",
    "core-popup-gud_gem_result": "../core/res/popup/gud_gem_result.json",
    "core-popup-gud_guardian_change_buy": "../core/res/popup/gud_guardian_change_buy.json",
    "core-popup-gud_guardian_detail_b": "../core/res/popup/gud_guardian_detail_b.json",
    "core-popup-gud_guardian_detail_nomoney": "../core/res/popup/gud_guardian_detail_nomoney.json",
    "core-popup-gud_mystatus": "../core/res/popup/gud_mystatus.json",
    "core-popup-gud_name_cha": "../core/res/popup/gud_name_cha.json",
    "core-popup-gud_request_end": "../core/res/popup/gud_request_end.json",
    "core-popup-gud_request_set_ab": "../core/res/popup/gud_request_set_ab.json",
    "core-popup-gud_sh_sort_list_ui": "../core/res/popup/gud_sh_sort_list_ui.json",
    "core-popup-gud_sh_sort_ui": "../core/res/popup/gud_sh_sort_ui.json",
    "core-popup-illustup_base.png": "../core/res/popup/illustup_base.png",
    "core-popup-illustup_bg.png": "../core/res/popup/illustup_bg.png",
    "core-popup-li_summon_weapon_list_ui": "../core/res/popup/li_summon_weapon_list_ui.json",
    "core-popup-menu_list": "../core/res/popup/menu_list.json",
    "core-popup-my_001_news_a": "../core/res/popup/my_001_news_a.json",
    "core-popup-my_001_news_btn_ui": "../core/res/popup/my_001_news_btn_ui.json",
    "core-popup-my_banner_list_ui": "../core/res/popup/my_banner_list_ui.json",
    "core-popup-my_banner_page_ui": "../core/res/popup/my_banner_page_ui.json",
    "core-popup-my_ev_banner": "../core/res/popup/my_ev_banner.json",
    "core-popup-popup_base_0000": "../core/res/popup/popup_base_0000.plist",
    "core-popup-popup_btn_0000": "../core/res/popup/popup_btn_0000.plist",
    "core-popup-popup_common": "../core/res/popup/popup_common.json",
    "core-popup-popup_icon_0000": "../core/res/popup/popup_icon_0000.plist",
    "core-popup-sh_buy_check": "../core/res/popup/sh_buy_check.json",
    "core-popup-sh_buy_result": "../core/res/popup/sh_buy_result.json",
    "core-popup-sh_item_info": "../core/res/popup/sh_item_info.json",
    "core-popup-sh_stone_check": "../core/res/popup/sh_stone_check.json",
    "core-popup-sh_summon_info": "../core/res/popup/sh_summon_info.json",
    "core-popup-sh_weapon_info": "../core/res/popup/sh_weapon_info.json",
    "core-popup-sub_tutorial": "../core/res/popup/sub_tutorial.json",
    "core-popup-sub_tutorial_page_ui": "../core/res/popup/sub_tutorial_page_ui.json",
    "core-popup-text_button_only": "../core/res/popup/text_button_only.json",
    "core-sort-sort_list_ui": "../core/res/sort/sort_list_ui.json",
    "core-sort-sort_list_ui_long": "../core/res/sort/sort_list_ui_long.json",
    "core-sort-sort_ui_long": "../core/res/sort/sort_ui_long.json",
    "core-headerparts-headerparts_atlas": "../core/res/ui_main/headerparts/headerparts_atlas.plist",
    "core-headerparts-headerparts_ui": "../core/res/ui_main/headerparts/headerparts_ui.json",
    "core-mainmenu-mainmenu_atlas": "../core/res/ui_main/mainmenu/mainmenu_atlas.plist",
    "core-mainmenu-mainmenu_enhance_ui": "../core/res/ui_main/mainmenu/mainmenu_enhance_ui.json",
    "core-mainmenu-mainmenu_gacha_ui": "../core/res/ui_main/mainmenu/mainmenu_gacha_ui.json",
    "core-mainmenu-mainmenu_party_ui": "../core/res/ui_main/mainmenu/mainmenu_party_ui.json",
    "core-mainmenu-mainmenu_quest_normal_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_normal_ui.json",
    "core-mainmenu-mainmenu_quest_raid_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_raid_ui.json",
    "core-mainmenu-mainmenu_raid_particle": "../core/res/ui_main/mainmenu/mainmenu_raid_particle.plist",
    "core-mainmenu-mainmenu_ui": "../core/res/ui_main/mainmenu/mainmenu_ui.json",
    "core-mainmenu-mainmenu_union_ui": "../core/res/ui_main/mainmenu/mainmenu_union_ui.json",
    "core-submenu-submenu_atlas": "../core/res/ui_main/submenu/submenu_atlas.plist",
    "core-submenu-submenu_ui": "../core/res/ui_main/submenu/submenu_ui.json",
    "guild-gud_000-gud_000_a": "../guild/res/gud_000/gud_000_a.json",
    "guild-gud_000-gud_000_b": "../guild/res/gud_000/gud_000_b.json",
    "guild-gud_000-gud_000_c": "../guild/res/gud_000/gud_000_c.json",
    "guild-gud_000-gud_unionlist_page_ui": "../guild/res/gud_000/gud_unionlist_page_ui.json",
    "guild-gud_000-gud_unionlist_ui": "../guild/res/gud_000/gud_unionlist_ui.json",
    "guild-gud_000-guild_000_img.jpg": "../guild/res/gud_000/guild_000_img.jpg",
    "guild-gud_001-btn_guardian_ui": "../guild/res/gud_001/btn_guardian_ui.json",
    "guild-gud_001-gud_001": "../guild/res/gud_001/gud_001.json",
    "guild-gud_001-gud_001_a_ui": "../guild/res/gud_001/gud_001_a_ui.json",
    "guild-gud_001-gud_001_atlas": "../guild/res/gud_001/gud_001_atlas.plist",
    "guild-gud_001-gud_001_b_ui": "../guild/res/gud_001/gud_001_b_ui.json",
    "guild-gud_001-gud_001_c_ui": "../guild/res/gud_001/gud_001_c_ui.json",
    "guild-gud_001-gud_001_d_ui": "../guild/res/gud_001/gud_001_d_ui.json",
    "guild-gud_001-gud_comment_ui": "../guild/res/gud_001/gud_comment_ui.json",
    "guild-gud_002-gud_002": "../guild/res/gud_002/gud_002.json",
    "guild-gud_002-introduce_guardian_window.png": "../guild/res/gud_002/introduce_guardian_window.png",
    "guild-gud_003-gud_003": "../guild/res/gud_003/gud_003.json",
    "guild-gud_003-gud_guardianlist_0_page_ui": "../guild/res/gud_003/gud_guardianlist_0_page_ui.json",
    "guild-gud_003-gud_guardianlist_0_ui": "../guild/res/gud_003/gud_guardianlist_0_ui.json",
    "guild-gud_003-gud_guardianlist_1_page_ui": "../guild/res/gud_003/gud_guardianlist_1_page_ui.json",
    "guild-gud_003-gud_guardianlist_1_ui": "../guild/res/gud_003/gud_guardianlist_1_ui.json",
    "guild-gud_005-gud_005": "../guild/res/gud_005/gud_005.json",
    "guild-gud_007-gud_007_leader": "../guild/res/gud_007/gud_007_leader.json",
    "guild-gud_007-gud_007_not_leader": "../guild/res/gud_007/gud_007_not_leader.json",
    "guild-gud_008-gud_008": "../guild/res/gud_008/gud_008.json",
    "guild-gud_009-gud_009": "../guild/res/gud_009/gud_009.json",
    "guild-gud_010_011_012-gud_010_011_012": "../guild/res/gud_010_011_012/gud_010_011_012.json",
    "guild-gud_010_011_012-gud_input_ui": "../guild/res/gud_010_011_012/gud_input_ui.json",
    "guild-gud_013-gud_013_a": "../guild/res/gud_013/gud_013_a.json",
    "guild-gud_013-gud_013_b": "../guild/res/gud_013/gud_013_b.json",
    "guild-gud_atlas": "../guild/res/gud_atlas.plist",
    "guild-icon_guild_position": "../guild/res/icon_guild_position.plist"
});
var gResources = gResources || [];
for (var i in res)
    gResources.push(res[i]);
gResources = _.uniq(gResources);
var res = res || {};
_.extend(res, {
    "core-btn-btn_atlas": "../core/res/btn/btn_atlas.plist",
    "core-btn-btn_change_page_a_ui": "../core/res/btn/btn_change_page_a_ui.json",
    "core-btn-btn_tab_three_ui": "../core/res/btn/btn_tab_three_ui.json",
    "core-btn-btn_tab_two_ui": "../core/res/btn/btn_tab_two_ui.json",
    "core-btn-viewpage_atlas": "../core/res/btn/viewpage_atlas.plist",
    "core-btn-viewpage_ui": "../core/res/btn/viewpage_ui.json",
    "core-corecard-corecard_atlas": "../core/res/corecard/corecard_atlas.plist",
    "core-corecard-corecard_blank_5_3_ui": "../core/res/corecard/corecard_blank_5_3_ui.json",
    "core-corecard-corecard_chara_ui": "../core/res/corecard/corecard_chara_ui.json",
    "core-corecard-corecard_item_ui": "../core/res/corecard/corecard_item_ui.json",
    "core-corecard-corecard_job_ui": "../core/res/corecard/corecard_job_ui.json",
    "core-corecard-corecard_npc_ui": "../core/res/corecard/corecard_npc_ui.json",
    "core-corecard-corecard_summon_ui": "../core/res/corecard/corecard_summon_ui.json",
    "core-corecard-corecard_weapon_ui": "../core/res/corecard/corecard_weapon_ui.json",
    "core-font-attack_big": "../core/res/font/attack_big.fnt",
    "core-font-attack_no": "../core/res/font/attack_no.fnt",
    "core-font-hp_big": "../core/res/font/hp_big.fnt",
    "core-font-hp_no": "../core/res/font/hp_no.fnt",
    "core-font-job_level_no": "../core/res/font/job_level_no.fnt",
    "core-font-my_header_power_no": "../core/res/font/my_header_power_no.fnt",
    "core-icon-elementicon": "../core/res/icon/elementicon.plist",
    "core-icon-rarityicon": "../core/res/icon/rarityicon.plist",
    "core-icon-statustypeicon": "../core/res/icon/statustypeicon.plist",
    "core-icon-treasureicon": "../core/res/icon/treasureicon.plist",
    "core-icon-weapontypeicon": "../core/res/icon/weapontypeicon.plist",
    "core-introduce-introduce": "../core/res/introduce/introduce.plist",
    "core-introduce-introduce_btn_evolution_arousal_ui": "../core/res/introduce/introduce_btn_evolution_arousal_ui.json",
    "core-introduce_chara-introduce_chara_status_0_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_0_ui.json",
    "core-introduce_chara-introduce_chara_status_1_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_1_ui.json",
    "core-introduce_job-introduce_job": "../core/res/introduce/introduce_job/introduce_job.plist",
    "core-introduce_job-introduce_job_condition_0_ui": "../core/res/introduce/introduce_job/introduce_job_condition_0_ui.json",
    "core-introduce_job-introduce_job_condition_1_ui": "../core/res/introduce/introduce_job/introduce_job_condition_1_ui.json",
    "core-introduce_job-introduce_job_status_0_ui": "../core/res/introduce/introduce_job/introduce_job_status_0_ui.json",
    "core-introduce_job-introduce_job_status_1_ui": "../core/res/introduce/introduce_job/introduce_job_status_1_ui.json",
    "core-introduce-introduce_statuslist_list_7_ui": "../core/res/introduce/introduce_statuslist_list_7_ui.json",
    "core-introduce_summon-introduce_summon_atlas": "../core/res/introduce/introduce_summon/introduce_summon_atlas.plist",
    "core-introduce_summon-introduce_summon_status_0_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_0_ui.json",
    "core-introduce_summon-introduce_summon_status_1_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_1_ui.json",
    "core-introduce_weapon-introduce_weapon_status_0_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_0_ui.json",
    "core-introduce_weapon-introduce_weapon_status_1_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_1_ui.json",
    "core-statuslist-statuslist_ability_ui": "../core/res/introduce/statuslist/statuslist_ability_ui.json",
    "core-statuslist-statuslist_assist_ui": "../core/res/introduce/statuslist/statuslist_assist_ui.json",
    "core-statuslist-statuslist_atlas": "../core/res/introduce/statuslist/statuslist_atlas.plist",
    "core-statuslist-statuslist_burst_ui": "../core/res/introduce/statuslist/statuslist_burst_ui.json",
    "core-statuslist-statuslist_ex-ability_blank_ui": "../core/res/introduce/statuslist/statuslist_ex-ability_blank_ui.json",
    "core-statuslist-statuslist_ex-ability_ui": "../core/res/introduce/statuslist/statuslist_ex-ability_ui.json",
    "core-statuslist-statuslist_weapon-skill_ui": "../core/res/introduce/statuslist/statuslist_weapon-skill_ui.json",
    "core-menu-bg_menu.png": "../core/res/menu/bg_menu.png",
    "core-menu-menu_atlas_0": "../core/res/menu/menu_atlas_0.plist",
    "core-menu-menu_ui": "../core/res/menu/menu_ui.json",
    "core-all_over-all_over_0_ui": "../core/res/pages/all_over/all_over_0_ui.json",
    "core-all_over-all_over_1_ui": "../core/res/pages/all_over/all_over_1_ui.json",
    "core-pages-bg_01.jpg": "../core/res/pages/bg_01.jpg",
    "core-pages-bg_beige.jpg": "../core/res/pages/bg_beige.jpg",
    "core-pages-mainparts_atlas": "../core/res/pages/mainparts_atlas.plist",
    "core-pages-mainparts_star_gauge_ui": "../core/res/pages/mainparts_star_gauge_ui.json",
    "core-side_navi-side_navi_01.png": "../core/res/pages/side_navi/side_navi_01.png",
    "core-side_navi-side_navi_0_ui": "../core/res/pages/side_navi/side_navi_0_ui.json",
    "core-pages-sort_0_ui": "../core/res/pages/sort_0_ui.json",
    "core-pages-sort_list_0_ui": "../core/res/pages/sort_list_0_ui.json",
    "core-pages-subparts_atlas": "../core/res/pages/subparts_atlas.plist",
    "core-Default-ImageFile.png": "../core/res/popup/Default/ImageFile.png",
    "core-popup-base_popup.png": "../core/res/popup/base_popup.png",
    "core-popup-btn": "../core/res/popup/btn.json",
    "core-popup-com_back_check": "../core/res/popup/com_back_check.json",
    "core-popup-com_edit_stamp_page_ui": "../core/res/popup/com_edit_stamp_page_ui.json",
    "core-popup-com_illust_up": "../core/res/popup/com_illust_up.json",
    "core-popup-com_open_episode": "../core/res/popup/com_open_episode.json",
    "core-popup-ga_scene_check": "../core/res/popup/ga_scene_check.json",
    "core-popup-gud_sh_sort_ui": "../core/res/popup/gud_sh_sort_ui.json",
    "core-popup-illustup_base.png": "../core/res/popup/illustup_base.png",
    "core-popup-illustup_bg.png": "../core/res/popup/illustup_bg.png",
    "core-popup-menu_chat": "../core/res/popup/menu_chat.json",
    "core-popup-menu_list": "../core/res/popup/menu_list.json",
    "core-popup-my_001_news_a": "../core/res/popup/my_001_news_a.json",
    "core-popup-my_001_news_btn_ui": "../core/res/popup/my_001_news_btn_ui.json",
    "core-popup-my_banner_list_ui": "../core/res/popup/my_banner_list_ui.json",
    "core-popup-my_banner_page_ui": "../core/res/popup/my_banner_page_ui.json",
    "core-popup-my_ev_banner": "../core/res/popup/my_ev_banner.json",
    "core-popup-p_001_autoorg": "../core/res/popup/p_001_autoorg.json",
    "core-popup-p_ability_assist_info": "../core/res/popup/p_ability_assist_info.json",
    "core-popup-p_ability_puton_off": "../core/res/popup/p_ability_puton_off.json",
    "core-popup-p_autoorg": "../core/res/popup/p_autoorg.json",
    "core-popup-p_bonus_info": "../core/res/popup/p_bonus_info.json",
    "core-popup-p_bonus_list_ui": "../core/res/popup/p_bonus_list_ui.json",
    "core-popup-p_chara_change": "../core/res/popup/p_chara_change.json",
    "core-popup-p_fluctuation_ui": "../core/res/popup/p_fluctuation_ui.json",
    "core-popup-p_job_change": "../core/res/popup/p_job_change.json",
    "core-popup-p_job_change_bonus_list_ui": "../core/res/popup/p_job_change_bonus_list_ui.json",
    "core-popup-p_job_get": "../core/res/popup/p_job_get.json",
    "core-popup-p_level_bonus": "../core/res/popup/p_level_bonus.json",
    "core-popup-p_need_point": "../core/res/popup/p_need_point.json",
    "core-popup-p_orgend": "../core/res/popup/p_orgend.json",
    "core-popup-p_party_change": "../core/res/popup/p_party_change.json",
    "core-popup-p_weapon_main": "../core/res/popup/p_weapon_main.json",
    "core-popup-p_weapon_summon_change": "../core/res/popup/p_weapon_summon_change.json",
    "core-popup-party_base.png": "../core/res/popup/party_base.png",
    "core-popup-party_base_shadow.png": "../core/res/popup/party_base_shadow.png",
    "core-popup-party_change_page_ui": "../core/res/popup/party_change_page_ui.json",
    "core-popup-popup_base_0000": "../core/res/popup/popup_base_0000.plist",
    "core-popup-popup_btn_0000": "../core/res/popup/popup_btn_0000.plist",
    "core-popup-popup_common": "../core/res/popup/popup_common.json",
    "core-popup-popup_icon_0000": "../core/res/popup/popup_icon_0000.plist",
    "core-popup_layer-sh_hp_attack_base.png": "../core/res/popup/popup_layer/sh_hp_attack_base.png",
    "core-popup_layer-sh_summon_base.png": "../core/res/popup/popup_layer/sh_summon_base.png",
    "core-popup_layer-sh_weapon_base.png": "../core/res/popup/popup_layer/sh_weapon_base.png",
    "core-popup-q_002_sup": "../core/res/popup/q_002_sup.json",
    "core-popup-ra_quest_appearance": "../core/res/popup/ra_quest_appearance.json",
    "core-popup-sh_buy_check": "../core/res/popup/sh_buy_check.json",
    "core-popup-sh_buy_result": "../core/res/popup/sh_buy_result.json",
    "core-popup-sh_item_info": "../core/res/popup/sh_item_info.json",
    "core-popup-sh_stone_check": "../core/res/popup/sh_stone_check.json",
    "core-popup-sh_summon_info": "../core/res/popup/sh_summon_info.json",
    "core-popup-sh_weapon_info": "../core/res/popup/sh_weapon_info.json",
    "core-popup-sub_tutorial": "../core/res/popup/sub_tutorial.json",
    "core-popup-sub_tutorial_page_ui": "../core/res/popup/sub_tutorial_page_ui.json",
    "core-popup-supportlist_attention_img.png": "../core/res/popup/supportlist_attention_img.png",
    "core-popup-supportlist_base_02.png": "../core/res/popup/supportlist_base_02.png",
    "core-popup-text_button_only": "../core/res/popup/text_button_only.json",
    "core-sort-sort_list_ui": "../core/res/sort/sort_list_ui.json",
    "core-headerparts-headerparts_atlas": "../core/res/ui_main/headerparts/headerparts_atlas.plist",
    "core-headerparts-headerparts_ui": "../core/res/ui_main/headerparts/headerparts_ui.json",
    "core-mainmenu-mainmenu_atlas": "../core/res/ui_main/mainmenu/mainmenu_atlas.plist",
    "core-mainmenu-mainmenu_enhance_ui": "../core/res/ui_main/mainmenu/mainmenu_enhance_ui.json",
    "core-mainmenu-mainmenu_gacha_ui": "../core/res/ui_main/mainmenu/mainmenu_gacha_ui.json",
    "core-mainmenu-mainmenu_party_ui": "../core/res/ui_main/mainmenu/mainmenu_party_ui.json",
    "core-mainmenu-mainmenu_quest_normal_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_normal_ui.json",
    "core-mainmenu-mainmenu_quest_raid_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_raid_ui.json",
    "core-mainmenu-mainmenu_raid_particle": "../core/res/ui_main/mainmenu/mainmenu_raid_particle.plist",
    "core-mainmenu-mainmenu_ui": "../core/res/ui_main/mainmenu/mainmenu_ui.json",
    "core-mainmenu-mainmenu_union_ui": "../core/res/ui_main/mainmenu/mainmenu_union_ui.json",
    "core-submenu-submenu_atlas": "../core/res/ui_main/submenu/submenu_atlas.plist",
    "core-submenu-submenu_ui": "../core/res/ui_main/submenu/submenu_ui.json",
    "party-jobchange_ani-jobchange_ani": "../party/res/jobchange_ani/jobchange_ani.json",
    "party-jobchange_ani-jobchange_atlas": "../party/res/jobchange_ani/jobchange_atlas.plist",
    "party-jobchange_ani-se_change_0001.mp3": "../party/res/jobchange_ani/se_change_0001.mp3",
    "party-jobget_ani-jobget_ani": "../party/res/jobget_ani/jobget_ani.json",
    "party-jobget_ani-jobget_atlas": "../party/res/jobget_ani/jobget_atlas.plist",
    "party-jobget_ani-se_open_0001.mp3": "../party/res/jobget_ani/se_open_0001.mp3",
    "party-par_001-par_001_chara_card_ui": "../party/res/par_001_2_3/par_001/par_001_chara_card_ui.json",
    "party-par_001-par_001_main_member_ui": "../party/res/par_001_2_3/par_001/par_001_main_member_ui.json",
    "party-par_001-par_001_sub_member_ui": "../party/res/par_001_2_3/par_001/par_001_sub_member_ui.json",
    "party-par_001-par_001_ui": "../party/res/par_001_2_3/par_001/par_001_ui.json",
    "party-par_001_2_3-par_001_2_3": "../party/res/par_001_2_3/par_001_2_3.json",
    "party-par_001_2_3-par_001_2_3_atlas": "../party/res/par_001_2_3/par_001_2_3_atlas.plist",
    "party-par_002-par_002_sub_weapon_ui": "../party/res/par_001_2_3/par_002/par_002_sub_weapon_ui.json",
    "party-par_002-par_002_ui": "../party/res/par_001_2_3/par_002/par_002_ui.json",
    "party-par_003-par_003_sub_summon_ui": "../party/res/par_001_2_3/par_003/par_003_sub_summon_ui.json",
    "party-par_003-par_003_ui": "../party/res/par_001_2_3/par_003/par_003_ui.json",
    "party-par_004-par_004": "../party/res/par_004/par_004.json",
    "party-par_005-par_005": "../party/res/par_005/par_005.json",
    "party-par_006_7-par_006_7": "../party/res/par_006_7/par_006_7.json",
    "party-par_006_7-par_006_7_atlas": "../party/res/par_006_7/par_006_7_atlas.plist",
    "party-par_006_7-par_006_7_joblist_page_ui": "../party/res/par_006_7/par_006_7_joblist_page_ui.json",
    "party-par_006_7-par_006_7_joblist_ui": "../party/res/par_006_7/par_006_7_joblist_ui.json",
    "party-par_006_7-par_006_7_topbtn_ui": "../party/res/par_006_7/par_006_7_topbtn_ui.json",
    "party-par_008-par_008": "../party/res/par_008/par_008.json",
    "party-par_009-par_009": "../party/res/par_009/par_009.json",
    "party-par_010-par_010": "../party/res/par_010/par_010.json",
    "party-par_011-par_011": "../party/res/par_011/par_011.json",
    "party-par_012-par_012": "../party/res/par_012/par_012.json",
    "party-par_013-par_013": "../party/res/par_013/par_013.json",
    "party-par_014-par_014": "../party/res/par_014/par_014.json",
    "party-par_015-par_015": "../party/res/par_015/par_015.json",
    "party-par_016-par_016": "../party/res/par_016/par_016.json",
    "party-par_017-par_017": "../party/res/par_017/par_017.json"
});
var gResources = gResources || [];
for (var i in res)
    gResources.push(res[i]);
gResources = _.uniq(gResources);
var res = res || {};
_.extend(res, {
    "core-btn-btn_atlas": "../core/res/btn/btn_atlas.plist",
    "core-btn-btn_change_page_a_ui": "../core/res/btn/btn_change_page_a_ui.json",
    "core-btn-btn_tab_three_ui": "../core/res/btn/btn_tab_three_ui.json",
    "core-corecard-corecard_atlas": "../core/res/corecard/corecard_atlas.plist",
    "core-corecard-corecard_blank_4_3_ui": "../core/res/corecard/corecard_blank_4_3_ui.json",
    "core-corecard-corecard_chara_ui": "../core/res/corecard/corecard_chara_ui.json",
    "core-corecard-corecard_item_ui": "../core/res/corecard/corecard_item_ui.json",
    "core-corecard-corecard_job_ui": "../core/res/corecard/corecard_job_ui.json",
    "core-corecard-corecard_npc_ui": "../core/res/corecard/corecard_npc_ui.json",
    "core-corecard-corecard_summon_ui": "../core/res/corecard/corecard_summon_ui.json",
    "core-corecard-corecard_weapon_ui": "../core/res/corecard/corecard_weapon_ui.json",
    "core-font-attack_big": "../core/res/font/attack_big.fnt",
    "core-font-hp_big": "../core/res/font/hp_big.fnt",
    "core-font-my_header_power_no": "../core/res/font/my_header_power_no.fnt",
    "core-icon-elementicon": "../core/res/icon/elementicon.plist",
    "core-icon-rarityicon": "../core/res/icon/rarityicon.plist",
    "core-icon-statustypeicon": "../core/res/icon/statustypeicon.plist",
    "core-icon-treasureicon": "../core/res/icon/treasureicon.plist",
    "core-icon-weapontypeicon": "../core/res/icon/weapontypeicon.plist",
    "core-introduce-introduce": "../core/res/introduce/introduce.plist",
    "core-introduce_chara-introduce_chara_status_0_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_0_ui.json",
    "core-introduce_chara-introduce_chara_status_1_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_1_ui.json",
    "core-introduce_summon-introduce_summon_atlas": "../core/res/introduce/introduce_summon/introduce_summon_atlas.plist",
    "core-introduce_summon-introduce_summon_status_0_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_0_ui.json",
    "core-introduce_summon-introduce_summon_status_1_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_1_ui.json",
    "core-introduce_weapon-introduce_weapon_status_0_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_0_ui.json",
    "core-introduce_weapon-introduce_weapon_status_1_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_1_ui.json",
    "core-statuslist-statuslist_ability_ui": "../core/res/introduce/statuslist/statuslist_ability_ui.json",
    "core-statuslist-statuslist_assist_ui": "../core/res/introduce/statuslist/statuslist_assist_ui.json",
    "core-statuslist-statuslist_atlas": "../core/res/introduce/statuslist/statuslist_atlas.plist",
    "core-statuslist-statuslist_burst_ui": "../core/res/introduce/statuslist/statuslist_burst_ui.json",
    "core-statuslist-statuslist_weapon-skill_ui": "../core/res/introduce/statuslist/statuslist_weapon-skill_ui.json",
    "core-Default-ImageFile.png": "../core/res/menu/Default/ImageFile.png",
    "core-menu-bg_menu.png": "../core/res/menu/bg_menu.png",
    "core-menu-menu_atlas_0": "../core/res/menu/menu_atlas_0.plist",
    "core-menu-menu_ui": "../core/res/menu/menu_ui.json",
    "core-pages-bg_01.jpg": "../core/res/pages/bg_01.jpg",
    "core-pages-bg_beige.jpg": "../core/res/pages/bg_beige.jpg",
    "core-bursttime-bursttime_remaining_base.png": "../core/res/pages/bursttime/bursttime_remaining_base.png",
    "core-bursttime-bursttime_remaining_ui": "../core/res/pages/bursttime/bursttime_remaining_ui.json",
    "core-pages-core_gauge_atlas": "../core/res/pages/core_gauge_atlas.plist",
    "core-pages-mainparts_atlas": "../core/res/pages/mainparts_atlas.plist",
    "core-raid_btn-raid_atlas": "../core/res/pages/raid_btn/raid_atlas.plist",
    "core-raid_btn-raid_ui": "../core/res/pages/raid_btn/raid_ui.json",
    "core-side_navi-side_navi_01.png": "../core/res/pages/side_navi/side_navi_01.png",
    "core-side_navi-side_navi_0_ui": "../core/res/pages/side_navi/side_navi_0_ui.json",
    "core-pages-subparts_atlas": "../core/res/pages/subparts_atlas.plist",
    "core-userlist-supportlist_page_ui": "../core/res/pages/userlist/supportlist_page_ui.json",
    "core-userlist-supportlist_ui": "../core/res/pages/userlist/supportlist_ui.json",
    "core-userlist-userlist_atlas": "../core/res/pages/userlist/userlist_atlas.plist",
    "core-Default-Sprite.png": "../core/res/popup/Default/Sprite.png",
    "core-popup-base_popup.png": "../core/res/popup/base_popup.png",
    "core-popup-btn": "../core/res/popup/btn.json",
    "core-popup-com_age_limit_b": "../core/res/popup/com_age_limit_b.json",
    "core-popup-com_age_limit_b_img.png": "../core/res/popup/com_age_limit_b_img.png",
    "core-popup-com_ap_restart": "../core/res/popup/com_ap_restart.json",
    "core-popup-com_back_check": "../core/res/popup/com_back_check.json",
    "core-popup-com_edit_stamp_page_ui": "../core/res/popup/com_edit_stamp_page_ui.json",
    "core-popup-com_illust_up": "../core/res/popup/com_illust_up.json",
    "core-popup-com_need_ap_bp_1": "../core/res/popup/com_need_ap_bp_1.json",
    "core-popup-com_need_ap_bp_2": "../core/res/popup/com_need_ap_bp_2.json",
    "core-popup-com_new_member": "../core/res/popup/com_new_member.json",
    "core-popup-com_use_result": "../core/res/popup/com_use_result.json",
    "core-popup-fapplist_base.png": "../core/res/popup/fapplist_base.png",
    "core-popup-gud_sh_sort_ui": "../core/res/popup/gud_sh_sort_ui.json",
    "core-popup-illustup_base.png": "../core/res/popup/illustup_base.png",
    "core-popup-illustup_bg.png": "../core/res/popup/illustup_bg.png",
    "core-popup-ra_quest_appearance": "../core/res/popup/ra_quest_appearance.json",
    "core-popup-menu_list": "../core/res/popup/menu_list.json",
    "core-popup-my_001_news_a": "../core/res/popup/my_001_news_a.json",
    "core-popup-my_001_news_btn_ui": "../core/res/popup/my_001_news_btn_ui.json",
    "core-popup-my_banner_list_ui": "../core/res/popup/my_banner_list_ui.json",
    "core-popup-my_banner_page_ui": "../core/res/popup/my_banner_page_ui.json",
    "core-popup-my_ev_banner": "../core/res/popup/my_ev_banner.json",
    "core-popup-p_job_change_bonus_list_ui": "../core/res/popup/p_job_change_bonus_list_ui.json",
    "core-popup-party_base.png": "../core/res/popup/party_base.png",
    "core-popup-party_base_shadow.png": "../core/res/popup/party_base_shadow.png",
    "core-popup-party_change_page_ui": "../core/res/popup/party_change_page_ui.json",
    "core-popup-popup_base_0000": "../core/res/popup/popup_base_0000.plist",
    "core-popup-popup_btn_0000": "../core/res/popup/popup_btn_0000.plist",
    "core-popup-popup_common": "../core/res/popup/popup_common.json",
    "core-popup-popup_icon_0000": "../core/res/popup/popup_icon_0000.plist",
    "core-popup-q_001_ap_next": "../core/res/popup/q_001_ap_next.json",
    "core-popup-q_001_select": "../core/res/popup/q_001_select.json",
    "core-popup-q_001_story": "../core/res/popup/q_001_story.json",
    "core-popup-q_002_sup": "../core/res/popup/q_002_sup.json",
    "core-popup-q_003_comp": "../core/res/popup/q_003_comp.json",
    "core-popup-q_003_fapp": "../core/res/popup/q_003_fapp.json",
    "core-popup-q_003_getability": "../core/res/popup/q_003_getability.json",
    "core-popup-q_003_masterbonus": "../core/res/popup/q_003_masterbonus.json",
    "core-popup-q_episode_btn_ui": "../core/res/popup/q_episode_btn_ui.json",
    "core-popup-q_info": "../core/res/popup/q_info.json",
    "core-popup-q_levelup": "../core/res/popup/q_levelup.json",
    "core-popup-q_mvp": "../core/res/popup/q_mvp.json",
    "core-popup-q_newitem": "../core/res/popup/q_newitem.json",
    "core-popup-sh_buy_check": "../core/res/popup/sh_buy_check.json",
    "core-popup-sh_buy_result": "../core/res/popup/sh_buy_result.json",
    "core-popup-sh_item_info": "../core/res/popup/sh_item_info.json",
    "core-popup-sh_stone_check": "../core/res/popup/sh_stone_check.json",
    "core-popup-sh_summon_info": "../core/res/popup/sh_summon_info.json",
    "core-popup-sh_weapon_info": "../core/res/popup/sh_weapon_info.json",
    "core-popup-sub_tutorial": "../core/res/popup/sub_tutorial.json",
    "core-popup-sub_tutorial_page_ui": "../core/res/popup/sub_tutorial_page_ui.json",
    "core-popup-supportlist_attention_img.png": "../core/res/popup/supportlist_attention_img.png",
    "core-popup-supportlist_base_02.png": "../core/res/popup/supportlist_base_02.png",
    "core-popup-text_button_only": "../core/res/popup/text_button_only.json",
    "core-sort-sort_list_ui": "../core/res/sort/sort_list_ui.json",
    "core-headerparts-headerparts_ap-bp_ui": "../core/res/ui_main/headerparts/headerparts_ap-bp_ui.json",
    "core-headerparts-headerparts_atlas": "../core/res/ui_main/headerparts/headerparts_atlas.plist",
    "core-headerparts-headerparts_ui": "../core/res/ui_main/headerparts/headerparts_ui.json",
    "core-mainmenu-mainmenu_atlas": "../core/res/ui_main/mainmenu/mainmenu_atlas.plist",
    "core-mainmenu-mainmenu_enhance_ui": "../core/res/ui_main/mainmenu/mainmenu_enhance_ui.json",
    "core-mainmenu-mainmenu_gacha_ui": "../core/res/ui_main/mainmenu/mainmenu_gacha_ui.json",
    "core-mainmenu-mainmenu_party_ui": "../core/res/ui_main/mainmenu/mainmenu_party_ui.json",
    "core-mainmenu-mainmenu_quest_normal_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_normal_ui.json",
    "core-mainmenu-mainmenu_quest_raid_ui": "../core/res/ui_main/mainmenu/mainmenu_quest_raid_ui.json",
    "core-mainmenu-mainmenu_raid_particle": "../core/res/ui_main/mainmenu/mainmenu_raid_particle.plist",
    "core-mainmenu-mainmenu_ui": "../core/res/ui_main/mainmenu/mainmenu_ui.json",
    "core-mainmenu-mainmenu_union_ui": "../core/res/ui_main/mainmenu/mainmenu_union_ui.json",
    "core-submenu-submenu_atlas": "../core/res/ui_main/submenu/submenu_atlas.plist",
    "core-submenu-submenu_ui": "../core/res/ui_main/submenu/submenu_ui.json",
    "party-par_001_2_3-par_001_2_3_atlas": "../party/res/par_001_2_3/par_001_2_3_atlas.plist",
    "quest-Default-ImageFile.png": "../quest/res/q_001/Default/ImageFile.png",
    "quest-q_001-q_001": "../quest/res/q_001/q_001.json",
    "quest-q_001-q_001_atlas_0": "../quest/res/q_001/q_001_atlas_0.plist",
    "quest-q_001-q_001_atlas_1": "../quest/res/q_001/q_001_atlas_1.plist",
    "quest-q_001-q_001_boss_node": "../quest/res/q_001/q_001_boss_node.json",
    "quest-q_001-q_001_clear_node": "../quest/res/q_001/q_001_clear_node.json",
    "quest-q_001-q_001_questlist_page_ui": "../quest/res/q_001/q_001_questlist_page_ui.json",
    "quest-q_001-q_001_questlist_ui": "../quest/res/q_001/q_001_questlist_ui.json",
    "quest-q_001-q_001_tab_ui": "../quest/res/q_001/q_001_tab_ui.json",
    "quest-q_001-q_001_unknown_node": "../quest/res/q_001/q_001_unknown_node.json",
    "quest-q_002-q_002": "../quest/res/q_002/q_002.json",
    "quest-q_003-q_003_1": "../quest/res/q_003/q_003_1.json",
    "quest-q_003-q_003_1_chara_ui": "../quest/res/q_003/q_003_1_chara_ui.json",
    "quest-q_003-q_003_2": "../quest/res/q_003/q_003_2.json",
    "quest-q_003-q_003_atlas": "../quest/res/q_003/q_003_atlas.plist",
    "quest-q_003-q_result_window.png": "../quest/res/q_003/q_result_window.png",
    "quest-q_004-q_004": "../quest/res/q_004/q_004.json",
    "quest-q_004-q_004_questlist": "../quest/res/q_004/q_004_questlist.json",
    "quest-q_004-q_004_questlist_page_ui": "../quest/res/q_004/q_004_questlist_page_ui.json",
    "quest-Default-Sprite.png": "../quest/res/q_005/Default/Sprite.png",
    "quest-q_005-area_mist": "../quest/res/q_005/area_mist.json",
    "quest-q_005-q_005": "../quest/res/q_005/q_005.json",
    "quest-q_005-q_005_bg_0000.jpg": "../quest/res/q_005/q_005_bg_0000.jpg",
    "quest-q_005-q_005_bg_0001.jpg": "../quest/res/q_005/q_005_bg_0001.jpg",
    "quest-q_005-q_005_bg_0002.jpg": "../quest/res/q_005/q_005_bg_0002.jpg",
    "quest-q_005-q_005_enemyicon_ui": "../quest/res/q_005/q_005_enemyicon_ui.json",
    "quest-q_005-q_005_map_1_atlas": "../quest/res/q_005/q_005_map_1_atlas.plist",
    "quest-q_005-q_005_map_1_ui": "../quest/res/q_005/q_005_map_1_ui.json",
    "quest-q_005-q_005_map_2_atlas": "../quest/res/q_005/q_005_map_2_atlas.plist",
    "quest-q_005-q_005_map_2_ui": "../quest/res/q_005/q_005_map_2_ui.json",
    "quest-q_005-q_005_map_3_ui": "../quest/res/q_005/q_005_map_3_ui.json",
    "quest-q_006_7_8-q_006_7_8": "../quest/res/q_006_7_8/q_006_7_8.json",
    "quest-q_006_7_8-q_006_7_8_atlas": "../quest/res/q_006_7_8/q_006_7_8_atlas.plist",
    "quest-q_006_7_8-q_006_raidlist_page_ui": "../quest/res/q_006_7_8/q_006_raidlist_page_ui.json",
    "quest-q_006_7_8-q_006_raidlist_ui": "../quest/res/q_006_7_8/q_006_raidlist_ui.json",
    "quest-q_006_7_8-q_007_8_raidendlist_page_ui": "../quest/res/q_006_7_8/q_007_8_raidendlist_page_ui.json",
    "quest-q_006_7_8-q_007_8_raidendlist_ui": "../quest/res/q_006_7_8/q_007_8_raidendlist_ui.json",
    "quest-q_009-q_009": "../quest/res/q_009/q_009.json",
    "quest-q_009-raid_window.png": "../quest/res/q_009/raid_window.png",
    "quest-q_010-q_010": "../quest/res/q_010/q_010.json",
    "quest-q_010-q_010_atlas_0": "../quest/res/q_010/q_010_atlas_0.plist",
    "quest-q_010-q_010_atlas_1": "../quest/res/q_010/q_010_atlas_1.plist",
    "quest-q_010-q_010_player_discoverer_ui": "../quest/res/q_010/q_010_player_discoverer_ui.json",
    "quest-q_010-q_010_player_mvp_second_ui": "../quest/res/q_010/q_010_player_mvp_second_ui.json",
    "quest-q_010-q_010_player_mvp_ui": "../quest/res/q_010/q_010_player_mvp_ui.json",
    "quest-q_010-q_010_result_failed_ui": "../quest/res/q_010/q_010_result_failed_ui.json",
    "quest-q_010-q_010_result_succeed_ui": "../quest/res/q_010/q_010_result_succeed_ui.json",
    "quest-q_010-q_010_reward_get_player_ui": "../quest/res/q_010/q_010_reward_get_player_ui.json",
    "quest-q_010-q_result_failed_base.png": "../quest/res/q_010/q_result_failed_base.png",
    "quest-q_010-q_result_success_base.png": "../quest/res/q_010/q_result_success_base.png",
    "quest-q_010-q_success_effect_03.png": "../quest/res/q_010/q_success_effect_03.png",
    "quest-q_010-q_success_effect_04.png": "../quest/res/q_010/q_success_effect_04.png",
    "quest-q_atlas": "../quest/res/q_atlas.plist",
    "quest-q_map_chara": "../quest/res/q_map_chara.json"
});
var gResources = gResources || [];
for (var i in res)
    gResources.push(res[i]);
gResources = _.uniq(gResources);
var res = res || {};
_.extend(res, {
    "core-btn-btn_atlas": "../core/res/btn/btn_atlas.plist",
    "core-corecard-corecard_atlas": "../core/res/corecard/corecard_atlas.plist",
    "core-corecard-corecard_chara_ui": "../core/res/corecard/corecard_chara_ui.json",
    "core-corecard-corecard_item_ui": "../core/res/corecard/corecard_item_ui.json",
    "core-corecard-corecard_job_ui": "../core/res/corecard/corecard_job_ui.json",
    "core-corecard-corecard_npc_ui": "../core/res/corecard/corecard_npc_ui.json",
    "core-corecard-corecard_summon_ui": "../core/res/corecard/corecard_summon_ui.json",
    "core-corecard-corecard_weapon_ui": "../core/res/corecard/corecard_weapon_ui.json",
    "core-font-attack_big": "../core/res/font/attack_big.fnt",
    "core-font-hp_big": "../core/res/font/hp_big.fnt",
    "core-font-my_header_power_no": "../core/res/font/my_header_power_no.fnt",
    "core-icon-elementicon": "../core/res/icon/elementicon.plist",
    "core-icon-rarityicon": "../core/res/icon/rarityicon.plist",
    "core-icon-statustypeicon": "../core/res/icon/statustypeicon.plist",
    "core-icon-treasureicon": "../core/res/icon/treasureicon.plist",
    "core-icon-weapontypeicon": "../core/res/icon/weapontypeicon.plist",
    "core-introduce-introduce": "../core/res/introduce/introduce.plist",
    "core-introduce_chara-introduce_chara_status_0_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_0_ui.json",
    "core-introduce_chara-introduce_chara_status_1_ui": "../core/res/introduce/introduce_chara/introduce_chara_status_1_ui.json",
    "core-introduce_summon-introduce_summon_atlas": "../core/res/introduce/introduce_summon/introduce_summon_atlas.plist",
    "core-introduce_summon-introduce_summon_status_0_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_0_ui.json",
    "core-introduce_summon-introduce_summon_status_1_ui": "../core/res/introduce/introduce_summon/introduce_summon_status_1_ui.json",
    "core-introduce_weapon-introduce_weapon_status_0_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_0_ui.json",
    "core-introduce_weapon-introduce_weapon_status_1_ui": "../core/res/introduce/introduce_weapon/introduce_weapon_status_1_ui.json",
    "core-statuslist-statuslist_ability_ui": "../core/res/introduce/statuslist/statuslist_ability_ui.json",
    "core-statuslist-statuslist_assist_ui": "../core/res/introduce/statuslist/statuslist_assist_ui.json",
    "core-statuslist-statuslist_atlas": "../core/res/introduce/statuslist/statuslist_atlas.plist",
    "core-statuslist-statuslist_burst_ui": "../core/res/introduce/statuslist/statuslist_burst_ui.json",
    "core-statuslist-statuslist_weapon-skill_ui": "../core/res/introduce/statuslist/statuslist_weapon-skill_ui.json",
    "core-Default-ImageFile.png": "../core/res/menu/Default/ImageFile.png",
    "core-menu-bg_menu.png": "../core/res/menu/bg_menu.png",
    "core-menu-menu_atlas_0": "../core/res/menu/menu_atlas_0.plist",
    "core-menu-menu_ui": "../core/res/menu/menu_ui.json",
    "core-bursttime-bursttime_remaining_base.png": "../core/res/pages/bursttime/bursttime_remaining_base.png",
    "core-bursttime-bursttime_remaining_ui": "../core/res/pages/bursttime/bursttime_remaining_ui.json",
    "core-pages-mainparts_atlas": "../core/res/pages/mainparts_atlas.plist",
    "core-raid_btn-raid_atlas": "../core/res/pages/raid_btn/raid_atlas.plist",
    "core-raid_btn-raid_btn_ui": "../core/res/pages/raid_btn/raid_btn_ui.json",
    "core-pages-subparts_atlas": "../core/res/pages/subparts_atlas.plist",
    "core-Default-ImageFile.png-1": "../core/res/popup/Default/ImageFile.png",
    "core-popup-base_popup.png": "../core/res/popup/base_popup.png",
    "core-popup-btn": "../core/res/popup/btn.json",
    "core-popup-com_back_check": "../core/res/popup/com_back_check.json",
    "core-popup-com_edit_stamp_page_ui": "../core/res/popup/com_edit_stamp_page_ui.json",
    "core-popup-com_illust_up": "../core/res/popup/com_illust_up.json",
    "core-pages-mainparts_atlas-1": "../core/res/popup/core/res/pages/mainparts_atlas.plist",
    "core-popup-gud_sh_sort_ui": "../core/res/popup/gud_sh_sort_ui.json",
    "core-popup-illustup_base.png": "../core/res/popup/illustup_base.png",
    "core-popup-illustup_bg.png": "../core/res/popup/illustup_bg.png",
    "core-popup-menu_list": "../core/res/popup/menu_list.json",
    "core-popup-my_001_news_a": "../core/res/popup/my_001_news_a.json",
    "core-popup-my_001_news_btn_ui": "../core/res/popup/my_001_news_btn_ui.json",
    "core-popup-my_banner_list_ui": "../core/res/popup/my_banner_list_ui.json",
    "core-popup-my_banner_page_ui": "../core/res/popup/my_banner_page_ui.json",
    "core-popup-my_ev_banner": "../core/res/popup/my_ev_banner.json",
    "core-popup-popup_base_0000": "../core/res/popup/popup_base_0000.plist",
    "core-popup-popup_btn_0000": "../core/res/popup/popup_btn_0000.plist",
    "core-popup-popup_common": "../core/res/popup/popup_common.json",
    "core-popup-popup_icon_0000": "../core/res/popup/popup_icon_0000.plist",
    "core-pages-mainparts_atlas-1": "../core/res/popup/popup_layer/core/res/pages/mainparts_atlas.plist",
    "core-popup_layer-my_time_limit_ticket_caution": "../core/res/popup/popup_layer/my_time_limit_ticket_caution.json",
    "core-popup_layer-sh_hp_attack_base.png": "../core/res/popup/popup_layer/sh_hp_attack_base.png",
    "core-popup_layer-sh_summon_base.png": "../core/res/popup/popup_layer/sh_summon_base.png",
    "core-popup_layer-sh_weapon_base.png": "../core/res/popup/popup_layer/sh_weapon_base.png",
    "core-popup_layer-textbase_black.png": "../core/res/popup/popup_layer/textbase_black.png",
    "core-popup_layer-time_limit_base_one.png": "../core/res/popup/popup_layer/time_limit_base_one.png",
    "core-popup_layer-time_limit_ui": "../core/res/popup/popup_layer/time_limit_ui.json",
    "core-popup-ra_quest_appearance": "../core/res/popup/ra_quest_appearance.json",
    "core-popup-sh_buy_check": "../core/res/popup/sh_buy_check.json",
    "core-popup-sh_buy_result": "../core/res/popup/sh_buy_result.json",
    "core-popup-sh_item_info": "../core/res/popup/sh_item_info.json",
    "core-popup-sh_stone_check": "../core/res/popup/sh_stone_check.json",
    "core-popup-sh_summon_info": "../core/res/popup/sh_summon_info.json",
    "core-popup-sh_weapon_info": "../core/res/popup/sh_weapon_info.json",
    "core-popup-sub_tutorial": "../core/res/popup/sub_tutorial.json",
    "core-popup-sub_tutorial_page_ui": "../core/res/popup/sub_tutorial_page_ui.json",
    "core-popup-text_button_only": "../core/res/popup/text_button_only.json",
    "core-sort-sort_list_ui": "../core/res/sort/sort_list_ui.json",
    "core-headerparts-headerparts_ap-bp_ui": "../core/res/ui_main/headerparts/headerparts_ap-bp_ui.json",
    "core-headerparts-headerparts_atlas": "../core/res/ui_main/headerparts/headerparts_atlas.plist",
    "core-headerparts-headerparts_ui": "../core/res/ui_main/headerparts/headerparts_ui.json",
    "core-submenu-submenu_atlas": "../core/res/ui_main/submenu/submenu_atlas.plist",
    "core-submenu-submenu_ui": "../core/res/ui_main/submenu/submenu_ui.json",
    "mypage-loginbonus-item_stamp": "../mypage/res/loginbonus/item_stamp.json",
    "mypage-loginbonus-loginbonus": "../mypage/res/loginbonus/loginbonus.plist",
    "mypage-loginbonus-loginbonus_item_second": "../mypage/res/loginbonus/loginbonus_item_second.json",
    "mypage-my_001-my_001": "../mypage/res/my_001/my_001.json",
    "mypage-my_001-my_atlas": "../mypage/res/my_001/my_atlas.plist",
    "mypage-my_btn_atlas-my_btn_atlas": "../mypage/res/my_001/my_btn_atlas/my_btn_atlas.plist",
    "mypage-my_btn_atlas-my_quest_raid_particle": "../mypage/res/my_001/my_btn_atlas/my_quest_raid_particle.plist",
    "mypage-my_btn_atlas-my_quest_raid_particle.png": "../mypage/res/my_001/my_btn_atlas/my_quest_raid_particle.png",
    "mypage-my_001-my_chara_page_ui": "../mypage/res/my_001/my_chara_page_ui.json",
    "mypage-my_001-my_enhance_ui": "../mypage/res/my_001/my_enhance_ui.json",
    "mypage-my_001-my_event-info_page_ui": "../mypage/res/my_001/my_event-info_page_ui.json",
    "mypage-my_001-my_event-info_ui": "../mypage/res/my_001/my_event-info_ui.json",
    "mypage-my_001-my_gacha_ui": "../mypage/res/my_001/my_gacha_ui.json",
    "mypage-my_001-my_harem_ui": "../mypage/res/my_001/my_harem_ui.json",
    "mypage-my_001-my_mainbtn_ui": "../mypage/res/my_001/my_mainbtn_ui.json",
    "mypage-my_001-my_mission_ui": "../mypage/res/my_001/my_mission_ui.json",
    "mypage-my_001-my_particle": "../mypage/res/my_001/my_particle.plist",
    "mypage-my_001-my_particle.png": "../mypage/res/my_001/my_particle.png",
    "mypage-my_001-my_party_ui": "../mypage/res/my_001/my_party_ui.json",
    "mypage-my_001-my_quest_normal": "../mypage/res/my_001/my_quest_normal.json",
    "mypage-my_001-my_quest_raid": "../mypage/res/my_001/my_quest_raid.json",
    "mypage-my_001-my_union_ui": "../mypage/res/my_001/my_union_ui.json",
    "mypage-my_popup_ui": "../mypage/res/my_popup_ui.json",
    "mypage-gacha_add-gacha_add_ani": "../mypage/res/notice_ani/gacha_add/gacha_add_ani.json",
    "mypage-gacha_add-gacha_add_ani_01": "../mypage/res/notice_ani/gacha_add/gacha_add_ani_01.json",
    "mypage-gacha_add-gacha_add_ani_02": "../mypage/res/notice_ani/gacha_add/gacha_add_ani_02.json",
    "mypage-gacha_add-gacha_add_ani_03": "../mypage/res/notice_ani/gacha_add/gacha_add_ani_03.json",
    "mypage-gacha_add-gacha_add_ani_04": "../mypage/res/notice_ani/gacha_add/gacha_add_ani_04.json",
    "mypage-gacha_add-gacha_add_ani_05": "../mypage/res/notice_ani/gacha_add/gacha_add_ani_05.json",
    "mypage-gacha_add-gacha_add_atlas_0": "../mypage/res/notice_ani/gacha_add/gacha_add_atlas_0.plist",
    "mypage-gacha_add-gacha_add_atlas_1": "../mypage/res/notice_ani/gacha_add/gacha_add_atlas_1.plist",
    "mypage-gacha_add-gacha_add_bg.jpg": "../mypage/res/notice_ani/gacha_add/gacha_add_bg.jpg",
    "mypage-gacha_add-se_notice_01.mp3": "../mypage/res/notice_ani/gacha_add/se_notice_01.mp3",
    "mypage-gacha_add-se_notice_02.mp3": "../mypage/res/notice_ani/gacha_add/se_notice_02.mp3",
    "mypage-gacha_add-se_notice_03.mp3": "../mypage/res/notice_ani/gacha_add/se_notice_03.mp3",
    "mypage-gacha_add-se_notice_04.mp3": "../mypage/res/notice_ani/gacha_add/se_notice_04.mp3"
});
var gResources = gResources || [];
for (var i in res)
    gResources.push(res[i]);
gResources = _.uniq(gResources),
function(e) {
    "use strict";
    var t = e.kh;
    e.ccui;
    t.UnionRouter = t.UnionRouter || {},
    t.UnionRouter = cc.Class.extend({
        navigateToTopScene: function(e) {
            if (null == e || "" === e)
                return void console.warn("illegal argument: a_union_id");
            if ("me" === e) {
                var n = {};
                t.createInstance("apiAUnions").getMe().then(function(e) {
                    n = e.body || {}
                }
                .bind(this)).fail(function(e) {
                    console.warn(e.stack)
                }).then(function() {
                    t.createInstance("router").navigate(null != n.a_union_id ? "guild/gud_001" : "guild/gud_000")
                })
            } else
                t.createInstance("router").navigate("guild/gud_001", {
                    gud_001: {
                        id: e
                    }
                })
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    t.BurstTime = t.EventSubject.extend({
        EVENT_PREFIX: "burst_time",
        EVENT_NAME: {
            UPDATE_SUCCESS: "update_success"
        },
        _burstTimeInfo: null ,
        _preReservedBurstTimes: null ,
        ctor: function() {
            this._super(),
            this._resetPreReservedBurstTimes()
        },
        _resetPreReservedBurstTimes: function() {
            this._preReservedBurstTimes = n.map(n.range(2), function(e) {
                return new t.BurstTimeUnit
            })
        },
        prepare: function() {
            return t.createInstance("apiAUnions").getBurstTimeInfo().then(function(e) {
                this._burstTimeInfo = e.body.burst_time_info
            }
            .bind(this))
        },
        isEnabled: function() {
            return this._burstTimeInfo ? this._burstTimeInfo.enabled === !0 : !1
        },
        isInBurstTime: function() {
            if (!this._burstTimeInfo)
                return !1;
            if (this._burstTimeInfo.in_burst_time !== !0)
                return !1;
            var e = this.getEndDate();
            if (null === e)
                return !1;
            var t = e.getTime()
              , n = (new Date).getTime()
              , i = t - n;
            return i > 0
        },
        getFirstSelectedBurstTimeInfo: function() {
            return this.getSelectedBurstTimeInfo(0)
        },
        getSecondSelectedBurstTimeInfo: function() {
            return this.getSelectedBurstTimeInfo(1)
        },
        getSelectedBurstTimeInfo: function(e) {
            return this._burstTimeInfo && this._burstTimeInfo.selected_burst_times && this._burstTimeInfo.selected_burst_times[e] ? this._burstTimeInfo.selected_burst_times[e] : null
        },
        getFirstReservedBurstTimeInfo: function() {
            return this.getReservedBurstTimeInfo(0)
        },
        getSecondReservedBurstTimeInfo: function() {
            return this.getReservedBurstTimeInfo(1)
        },
        getReservedBurstTimeInfo: function(e) {
            return this._burstTimeInfo && this._burstTimeInfo.reserved_burst_times && this._burstTimeInfo.reserved_burst_times[e] ? this._burstTimeInfo.reserved_burst_times[e] : null
        },
        getEndDate: function() {
            return this._burstTimeInfo && this._burstTimeInfo.end_date ? new Date(this._burstTimeInfo.end_date) : null
        },
        _getRemainingTime: function() {
            var e = this.getEndDate();
            if (null === e)
                return "";
            var t = e.getTime()
              , n = (new Date).getTime()
              , i = t - n
              , a = 0
              , s = 0;
            return i > 0 && (a = Math.floor(i / 1e3 / 60),
            s = Math.floor(i / 1e3 % 60)),
            {
                minute: a,
                second: s
            }
        },
        getRemainingTime: function() {
            var e = this._getRemainingTime();
            return n.padZero(e.minute, 2) + "分" + n.padZero(e.second, 2) + "秒"
        },
        getRemainingTimeSimple: function() {
            var e = this._getRemainingTime();
            return n.padZero(e.minute, 2) + ":" + n.padZero(e.second, 2)
        },
        isReserved: function() {
            if (!this._burstTimeInfo)
                return !1;
            if (!this._burstTimeInfo.reserved_burst_times || 0 === this._burstTimeInfo.reserved_burst_times.length)
                return !1;
            var e = n(this._burstTimeInfo.reserved_burst_times).filter(function(e) {
                var t = e.type;
                return void 0 !== t && null !== t
            }).size();
            return e > 0
        },
        isReservable: function() {
            return this._burstTimeInfo ? this._burstTimeInfo.reservable === !0 : !1
        },
        update: function() {
            var e = Q.defer();
            if (null === this._preReservedBurstTimes || 0 === this._preReservedBurstTimes.length)
                return e.reject();
            var i = n.map(this._preReservedBurstTimes, function(e) {
                return {
                    type: e.getBurstTimeInfo().type
                }
            });
            return t.createInstance("apiAUnions").changeBurstTimeInfo(i).then(function(t) {
                return t.body.error ? (console.log(t.body.error),
                e.reject(t.body.error),
                void (e = null )) : (this._burstTimeInfo = t.body.burst_time_info,
                this.dispatchEvent("UPDATE_SUCCESS"),
                e.resolve(t),
                void (e = null ))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            e.promise
        },
        changePreReservedBurstTime: function(e, t) {
            this._preReservedBurstTimes[e] || console.error("kh.BurstTime.changePreReservedBurstTime() 並び順の指定が不正");
            var i = n.filter(this.getSelectableBurstTimes(), function(e) {
                return e.type === t
            });
            return 0 === i.length ? void console.error("kh.BurstTime.changePreReservedBurstTime() バーストタイムの時間帯の指定が不正") : void this._preReservedBurstTimes[e].setBurstTimeInfo(i[0])
        },
        getSelectableBurstTimes: function() {
            return this._burstTimeInfo ? this._burstTimeInfo.selectable_burst_times : []
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc;
    e._;
    t.BurstTimeUnit = n.Class.extend({
        _burstTimeInfo: {},
        ctor: function() {
            this.setBurstTimeInfo({
                type: null ,
                description: ""
            })
        },
        getBurstTimeInfo: function() {
            return this._burstTimeInfo
        },
        setBurstTimeInfo: function(e) {
            this._burstTimeInfo = e
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || {}
      , n = e.kh || {};
    n.ImplantedPopup = n.SceneObject.extend({
        ctor: function(e) {
            var t = this._getScene()
              , n = t.seekWidgetByName("popup_ui");
            if (null === n)
                return console.error("ImplantedPopup: The node 'popup_ui' not found. (name = " + e + ").");
            this._uiNode = n;
            var i = t.seekWidgetByName(e);
            if (null === i)
                return console.error("ImplantedPopup: The node " + e + " not found.");
            this._node = i;
            var a = i.getUserData();
            null !== a && console.warn("★ImplantedPopup二重登録の可能性!　’" + e + "’ノードのUserDataが既に存在します。", a),
            this._node.setUserData(this)
        },
        _getScene: function() {
            return cc.director.getRunningScene()
        },
        getNode: function() {
            return this._node
        },
        getName: function() {
            return this._node.getName()
        },
        setButtonEvents: function(e) {
            var i = {};
            t.each(e, function(e, n) {
                t.isBoolean(e) && (e = function() {
                    this.dismiss(e)
                }
                ),
                i["TOUCH_ENDED " + n] = e
            }, this),
            n.setTouchEventHandlers(this.getNode(), i, this)
        },
        open: function() {
            return this._dfd = Q.defer(),
            this._initContents.apply(this, arguments),
            this._uiNode.animate(this.getName(), !1).then(function() {
                this._uiNode.setVisible(!0)
            }
            .bind(this)),
            this._dfd.promise
        },
        dismiss: function(e) {
            this._uiNode.animate("default_view", !1).then(function() {
                this._uiNode.setVisible(!1)
            }
            .bind(this)),
            e ? this._dfd.resolve() : this._dfd.reject()
        },
        _onDispose: function() {
            var e = this.getNode();
            if (e) {
                var t = e.getUserData();
                t === this && e.setUserData(null )
            }
        },
        _initContents: function(e) {}
    });
    var i = function(e, i, a) {
        var s = e.seekWidgetByName(i);
        if (null === s)
            return void alert("Resource Error: Implanted popup node '" + i + "' not found.");
        a = a || t.capitalize(t.camelize(i)) + "Popup";
        var o = s.getUserData() || n.createInstance(a, [i]);
        return o
    };
    n.ImplantedPopup.createOrGet = i
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "APlayers"
      , s = {
        getJobPoint: function(e) {
            return this._http.get({
                url: "/a_players/" + e + "/job_point"
            })
        },
        get: function(e) {
            return this._http.get({
                url: "/a_players/" + e
            })
        },
        getMe: function() {
            var e = this.get("me");
            return e.then(this.__storeMeForLogging)
        },
        getMeEx: function(e) {
            var t = this._http.get({
                url: "/a_players/me",
                json: {
                    c: e
                }
            });
            return t.then(this.__storeMeForLogging)
        },
        __storeMeForLogging: function(e) {
            var t = e.body
              , i = {
                dmm_id: t.dmm_id,
                name: t.name
            };
            return n.createInstance("logger").setStatusInfo("player", i),
            e
        },
        getMeNumeric: function() {
            return this._http.get({
                url: "/a_players/me",
                json: {
                    id_numeric: !0
                }
            })
        },
        getCurrency: function() {
            return this._http.get({
                url: "/a_players/me/currency"
            })
        },
        getSelectedJobId: function() {
            return this._http.get({
                url: "/a_players/me/selected_job_id"
            })
        },
        getRecommended: function() {
            return this._http.get({
                url: "/a_players/",
                json: {
                    recommended: !0
                }
            })
        },
        getListByRank: function(e) {
            return this._http.get({
                url: "/a_players/",
                json: {
                    rank: e
                }
            })
        },
        getQuestPoints: function() {
            return this._http.get({
                url: "/a_players/me/quest_points"
            })
        },
        getUnionJoinedLimitState: function() {
            return this._http.get({
                url: "/a_players/me/union_joined_limit_state"
            })
        },
        updateDescription: function(e, t) {
            var i = n.createInstance("inspectionApiDelegate");
            return i.createOrUpdateInspection(t, e).then(function(t) {
                return this._http.put({
                    url: "/a_players/me",
                    json: {
                        description: e,
                        text_id: t
                    }
                })
            }
            .bind(this))
        },
        getGameConfig: function() {
            return this._http.get({
                url: "/a_players/me/game_config"
            })
        },
        getSortConfig: function() {
            return this._http.get({
                url: "/a_players/me/sort_config"
            })
        },
        updateGameConfig: function(e) {
            return this._http.put({
                url: "/a_players/me/game_config",
                json: e
            })
        },
        updateGachaAnimationSkipFlag: function(e) {
            return this._http.put({
                url: "/a_players/me/game_config",
                json: {
                    gacha_animation_skip: e
                }
            })
        },
        updateSortConfig: function(e) {
            return this._http.put({
                url: "/a_players/me/sort_config",
                json: e
            })
        },
        getSelectedPartyInfo: function(e) {
            return this._http.get({
                url: "/a_players/" + e + "/selected_party_info"
            })
        },
        getBattlePower: function() {
            return this._http.get({
                url: "/a_players/me/battle_power"
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAPlayers",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AQuestInfo"
      , s = {
        get: function() {
            return this._http.get({
                url: "/a_quest_info"
            })
        },
        moveArea: function(e) {
            return this._http.put({
                url: "/a_quest_info/me",
                json: {
                    current_a_area_id: e
                }
            })
        },
        confirmFollowUpPopup: function() {
            return this._http.put({
                url: "/a_quest_info/me",
                json: {
                    has_follow_up_quest: !1
                }
            })
        },
        confirmUnlockedQuestPopup: function() {
            return this._http.put({
                url: "/a_quest_info/me",
                json: {
                    has_unlocked_quest: !1
                }
            })
        },
        confirmUnlockedAreaPopup: function() {
            return this._http.put({
                url: "/a_quest_info/me",
                json: {
                    has_unlocked_area: !1
                }
            })
        },
        confirmCompletedLastMainQuestPopup: function() {
            return this._http.put({
                url: "/a_quest_info/me",
                json: {
                    has_completed_last_main_quest: !1
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAQuestInfo",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }, o),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "ABanners"
      , s = {
        getGachaBanners: function() {
            return this._http.get({
                url: "/a_banners/gacha"
            })
        },
        getShopBanners: function() {
            return this._http.get({
                url: "/a_banners/shop"
            })
        },
        getQuestBanners: function() {
            return this._http.get({
                url: "/a_banners/quest"
            })
        },
        getStoryEventBanners: function(e, t) {
            return this._http.get({
                url: "/a_banners/story_event",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        getTreasureEventBanners: function(e, t) {
            return this._http.get({
                url: "/a_banners/treasure_event",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        getMypageBanners: function() {
            return this._http.get({
                url: "/a_banners/mypage"
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiABanners",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "News"
      , s = "/news"
      , o = {
        get: function(e) {
            return this._http.get({
                url: s + "/" + e
            })
        },
        getList: function(e, t) {
            return this._http.get({
                url: s,
                json: {
                    page: e,
                    per_page: t
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiNews",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, o)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var r = {};
        t.each(o, function(e, t) {
            r[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, r))
    }
    var c = "undefined" != typeof process && "undefined" != typeof require;
    if (c) {
        var u = require("fs")
          , _ = u.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(o, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return u.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void u.writeFileSync(n, _.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AMail"
      , s = "/a_mail"
      , o = {
        getList: function() {
            return this._http.get({
                url: s
            })
        },
        read: function(e) {
            return this._http.post({
                url: s + "/" + e + "/already_read"
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAMail",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, o)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var r = {};
        t.each(o, function(e, t) {
            r[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, r))
    }
    var c = "undefined" != typeof process && "undefined" != typeof require;
    if (c) {
        var u = require("fs")
          , _ = u.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(o, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return u.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void u.writeFileSync(n, _.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AMypage"
      , s = "/a_mypage"
      , o = {
        put: function() {
            return this._http.put({
                url: s
            })
        },
        getFirstAnimationEventInfo: function() {
            return this._http.get({
                url: s + "/first_animation_event_info"
            })
        },
        getBackground: function() {
            return this._http.get({
                url: s + "/background"
            })
        },
        putExpireInfo: function(e, t) {
            return this._http.put({
                url: s + "/expire_info",
                json: {
                    item_id: e,
                    expire_date: t
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAMymage",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, o)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var r = {};
        t.each(o, function(e, t) {
            r[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, r))
    }
    var c = "undefined" != typeof process && "undefined" != typeof require;
    if (c) {
        var u = require("fs")
          , _ = u.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(o, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return u.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void u.writeFileSync(n, _.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "APresents"
      , s = {
        getPresentList: function(e, t, n) {
            return this._http.get({
                url: ["/a_presents"].join("/"),
                json: {
                    type: e,
                    page: t,
                    per_page: n
                }
            })
        },
        checkAvailablePresents: function(e) {
            return this._http.get({
                url: ["/a_presents_receive"].join("/"),
                json: {
                    type: e
                }
            })
        },
        receiveAllPresent: function(e) {
            return this._http.post({
                url: ["/a_presents_receive"].join("/"),
                json: {
                    type: e
                }
            })
        },
        receivePresent: function(e) {
            return this._http.post({
                url: ["/a_presents", e, "receive"].join("/")
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAPresents",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi.presentMock." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AParties"
      , s = {
        changeJob: function(e, t) {
            return this._http.put({
                url: "/a_parties/" + e,
                json: {
                    a_job_id: t
                }
            })
        },
        setExAbility: function(e, t) {
            return this._http.put({
                url: "/a_parties/" + e,
                json: {
                    ex_ability_id: t
                }
            })
        },
        changeCharacter: function(e, t, n) {
            return this._http.put({
                url: ["/a_parties", e, "characters", t].join("/"),
                json: {
                    a_character_id: n
                }
            })
        },
        changeWeapon: function(e, t, n) {
            return this._http.put({
                url: ["/a_parties", e, "weapons", t].join("/"),
                json: {
                    a_weapon_id: n
                }
            })
        },
        changeSummon: function(e, t, n) {
            return this._http.put({
                url: ["/a_parties", e, "summons", t].join("/"),
                json: {
                    a_summon_id: n
                }
            })
        },
        makeRecommendedDeck: function(e, t, n) {
            return this._http.put({
                url: ["/a_parties", e, "deck"].join("/"),
                json: {
                    recommend: !0,
                    target: t,
                    element_type: n
                }
            })
        },
        getSelectedDeck: function() {
            return this.getDeck("selected")
        },
        getDeck: function(e) {
            return this._http.get({
                url: ["/a_parties", e, "deck"].join("/")
            })
        },
        getDecks: function() {
            return this._http.get({
                url: "/a_parties_decks"
            })
        },
        changeDeck: function(e) {
            return this._http.put({
                url: ["/a_parties", e].join("/"),
                json: {
                    selected: !0
                }
            })
        },
        getExAbilitiesByParty: function(e) {
            return this._http.get({
                url: ["/a_parties", e, "ex_abilities"].join("/")
            })
        },
        getJobsByParty: function(e, t) {
            return this._http.get({
                url: ["/a_parties", e, "jobs", t].join("/")
            })
        },
        getSelectableCharactersByParty: function(e, t, n, i) {
            return this._http.get({
                url: ["/a_parties", e, "selectable_characters", t].join("/"),
                json: {
                    page: n,
                    per_page: i
                }
            })
        },
        getSelectableWeaponsByParty: function(e, t, n, i) {
            return this._http.get({
                url: ["/a_parties", e, "selectable_weapons", t].join("/"),
                json: {
                    page: n,
                    per_page: i
                }
            })
        },
        getSelectableSummonsByParty: function(e, t, n, i) {
            return this._http.get({
                url: ["/a_parties", e, "selectable_summons", t].join("/"),
                json: {
                    page: n,
                    per_page: i
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAParties",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi.partyMock." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AWorlds"
      , s = {
        getAreas: function() {
            return this._http.get({
                url: "/a_worlds/current"
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAWorlds",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AUnions"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/a_unions/" + e
            })
        },
        getMe: function() {
            return this.get("me")
        },
        getBurstTimeInfo: function() {
            return this._http.get({
                url: "/a_unions/me/burst_time_info"
            })
        },
        getChats: function(e, t) {
            return this._http.get({
                url: "/a_unions/me/chats",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        getDonationInfo: function() {
            return this._http.get({
                url: "/a_unions/me/donation_info"
            })
        },
        getGuardianDonationMaterials: function(e, t, n) {
            return this._http.get({
                url: "/a_unions/me/guardian_donation_materials",
                json: {
                    sort: e,
                    page: t,
                    per_page: n
                }
            })
        },
        getGuardians: function(e) {
            return this._http.get({
                url: "/a_unions/me/guardians",
                json: {
                    have: t.isUndefined(e) ? !0 : e
                }
            })
        },
        getSelectedGuardian: function() {
            return this._http.get({
                url: "/a_unions/me/guardians/selected"
            })
        },
        setSelectedGuardian: function(e) {
            return this._http.put({
                url: "/a_unions/me/guardians/selected",
                json: {
                    a_guardian_id: e
                }
            })
        },
        getMembersExternal: function(e, t, n) {
            return e = e || "me",
            this._http.get({
                url: "/a_unions/" + e + "/members",
                json: {
                    page: t,
                    per_page: n
                }
            })
        },
        getMembers: function(e, t) {
            return this._http.get({
                url: "/a_unions/me/members",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        getMember: function(e) {
            return this._http.get({
                url: "/a_unions/me/members/" + e
            })
        },
        getNewInfo: function() {
            return this._http.get({
                url: "/a_unions/me/new_info"
            })
        },
        getNews: function(e, t) {
            return this._http.get({
                url: "/a_unions/me/news",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        dissolution: function() {
            return this._http.del({
                url: "/a_unions/me"
            })
        },
        getMembersForFire: function(e, t) {
            return this._http.get({
                url: "/a_unions/me/members",
                json: {
                    filter: "member_dismissed",
                    page: e,
                    per_page: t
                }
            })
        },
        fireMember: function(e) {
            return this._http.del({
                url: "/a_unions/me/members/" + e
            })
        },
        leave: function() {
            return this._http.del({
                url: "/a_unions/me/members/me"
            })
        },
        create: function(e) {
            return this._http.post({
                url: "/a_unions",
                json: {
                    a_union_id: "me",
                    name: e
                }
            })
        },
        comment: function(e) {
            return n.createInstance("inspectionApiDelegate").createInspection(e).then(function(t) {
                return this._http.post({
                    url: "/a_unions/me/chats",
                    json: {
                        message: e,
                        text_id: t.getTextId()
                    }
                })
            }
            .bind(this))
        },
        stamp: function(e) {
            return this._http.post({
                url: "/a_unions/me/chats",
                json: {
                    stamp_id: e
                }
            })
        },
        deleteChat: function(e) {
            return this._http.del({
                url: "/a_unions/me/chats/" + e
            })
        },
        donation: function(e) {
            return this._http.post({
                url: "/a_unions/me/donation",
                json: {
                    gem: e
                }
            })
        },
        guardianBuy: function(e) {
            return this._http.post({
                url: "/a_unions/me/guardians_buy",
                json: {
                    guardian_id: e
                }
            })
        },
        guardianDonationGem: function(e) {
            return this._http.post({
                url: "/a_unions/me/guardian_donation",
                json: {
                    gem: e
                }
            })
        },
        confirmGuardianEnhanceMaterials: function(e) {
            return this._http.get({
                url: "/a_unions/me/confirm_guardian_enhance_materials",
                json: {
                    ids: e
                }
            })
        },
        guardianDonationWeapons: function(e) {
            return this._http.post({
                url: "/a_unions/me/guardian_donation",
                json: {
                    ids: e
                }
            })
        },
        changeUnionName: function(e, t) {
            var i = n.createInstance("inspectionApiDelegate");
            return i.createOrUpdateInspection(t, e).then(function(t) {
                return this._http.put({
                    url: "/a_unions/me",
                    json: {
                        name: e,
                        text_id: t
                    }
                })
            }
            .bind(this))
        },
        changeUnionComment: function(e, t) {
            var i = n.createInstance("inspectionApiDelegate");
            return i.createOrUpdateInspection(t, e).then(function(t) {
                return this._http.put({
                    url: "/a_unions/me",
                    json: {
                        comment: e,
                        text_id: t
                    }
                })
            }
            .bind(this))
        },
        changeBurstTimeInfo: function(e) {
            return this._http.put({
                url: "/a_unions/me/burst_time_info",
                json: {
                    burst_time_info: {
                        reserved_burst_times: e
                    }
                }
            })
        },
        changeMemberUnionPosition: function(e, t) {
            return this._http.put({
                url: "/a_unions/me/members/" + e,
                json: {
                    union_position: t
                }
            })
        },
        getMembersForLeader: function(e, t) {
            return this._http.get({
                url: "/a_unions/me/members",
                json: {
                    filter: "appointed_to_leader",
                    page: e,
                    per_page: t
                }
            })
        },
        changeLeader: function(e) {
            return this._http.put({
                url: "/a_unions/me/members/" + e,
                json: {
                    union_position: "leader"
                }
            })
        },
        accept: function(e) {
            return this._http.post({
                url: "/a_unions",
                json: {
                    a_player_id: e
                }
            })
        },
        acceptScout: function(e) {
            return this._http.post({
                url: "/a_unions",
                json: {
                    a_union_id: e
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAUnions",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AMissions"
      , s = {
        getDaily: function() {
            return this._http.get({
                url: "/a_missions/daily"
            })
        },
        getWeekly: function() {
            return this._http.get({
                url: "/a_missions/weekly"
            })
        },
        receiveMissionReward: function(e, t) {
            return this._http.post({
                url: ["/a_missions", e, t, "receive"].join("/")
            })
        },
        getSummary: function() {
            return this._http.get({
                url: "/a_missions/summary"
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAMissions",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    e.kh = e.kh || {};
    var t = e.kh;
    t.SoundChangeBtnDelegate = cc.Class.extend({
        updateSoundNode: function() {
            var e = t.createInstance("playerGameConfig")
              , n = cc.director.getRunningScene().seekWidgetByName("btn_sound");
            n.setBright(e.isSoundOn())
        },
        changeSound: function() {
            var e = t.createInstance("playerGameConfig");
            e.setSoundOn(!e.isSoundOn()),
            e.updateGameConfig().then(function() {
                this.updateSoundNode(),
                e.isSoundOn() && e.isBgmOn() ? (new t.BGM).play() : (new t.BGM).stop()
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.mypage = t.mypage || {},
    t.mypage.roles = t.mypage.roles || {},
    t.mypage.roles.MypageFirstEventInfo = {
        _playFirstAnimationIfFound: function() {
            var t = a.defer()
              , n = function() {
                var a = this.__playAnimation();
                a.then(function(e) {
                    e ? this._loadMypageData().then(function(e) {
                        e ? t.resolve() : t.reject("GOTO PANEL MISSION")
                    }
                    .bind(this)) : n()
                }
                .bind(this)).fail(function(t) {
                    i.isUndefined(t) || e.console.error(t)
                })
            }
            .bind(this);
            return n(),
            t.promise
        },
        __playAnimation: function() {
            var e = t.createInstance("apiAMypage");
            return e.getFirstAnimationEventInfo().then(function(e) {
                var i = (e.body.episode,
                n.director.getRunningScene());
                if (this.__playScenarioIfExist(e.body.episode))
                    return a.reject();
                var s = this.__getAnimationClassNameForMyPage(e.body)
                  , o = this.__getAnimationParamForMyPage(e.body);
                if (s) {
                    var r = t.createInstance(s, [i, o]);
                    return r.play().thenResolve(!1)
                }
                return a.resolve(!0)
            }
            .bind(this))
        },
        __getAnimationParamForMyPage: function(e) {
            return e.login_bonus ? e.login_bonus : e.event ? e.event : null
        },
        __getAnimationClassNameForMyPage: function(e) {
            if (e.login_bonus)
                return "LoginBonus";
            if (e.event && e.event.animation_type) {
                var n = i.capitalize(i.camelize(e.event.animation_type));
                return t.dictx.has(n) || (n = null ,
                console.error("Not defined: Animation ClassName: " + n)),
                n
            }
            return null
        },
        __playScenarioIfExist: function(e) {
            if (!i.isUndefined(e) && !i.isUndefined(e.episode_id)) {
                var n = e.episode_id;
                return delete e.episode_id,
                console.debug("scenario/play", n),
                t.createInstance("router").navigate("scenario/episode-play", {
                    "scenario/play": {
                        episode_id: n,
                        returnBackParams: {
                            scene: "mypage"
                        }
                    }
                }),
                !0
            }
            return !1
        },
        _loadMypageData: function() {
            return t.createInstance("apiAMypage").put().then(function(e) {
                return this.__setMypageData(e.body),
                this.__checkClearedPanelMission() ? (t.createInstance("router").navigate("mi"),
                !1) : !0
            }
            .bind(this))
        },
        __setMypageData: function(e) {
            this._mypage = e || {}
        },
        __checkClearedPanelMission: function() {
            return this._mypage.cleared_panel_mission_exists
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        my_001_news_a: {
            factoryName: "popupFactoryTextOnly",
            content: "my_001_news_aを表示してください",
            title: "仮POPUP",
            buttonLabels: {
                blackBtn: "Black",
                blueBtn: "Blue"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    this.dismiss().then(function() {
                        t.createInstance("router").navigate("party/par_002")
                    })
                }
            }
        }
    };
    t.pc.mypage = t.pc.mypage || {},
    t.pc.mypage.my_001 = t.pc.mypage.my_001 || {},
    t.pc.mypage.my_001.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("my_001/my_001.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: my_001/my_001.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "my001Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["mypage", "my_001"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackMyMainbtnUiBtnQuestNormal"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("my_mainbtn_ui"), "btn_quest_normal", t.createInstance("router").navigate.bind(t.createInstance("router"), "quest/q_001")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackMyMainbtnUiBtnQuestRaid"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("my_mainbtn_ui"), "btn_quest_raid", t.createInstance("router").navigate.bind(t.createInstance("router"), "quest/q_001")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRaid"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_raid", t.createInstance("router").navigate.bind(t.createInstance("router"), "quest/q_006")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackMyMainbtnUiBtnParty"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("my_mainbtn_ui"), "btn_party", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_001")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackMyMainbtnUiBtnEnhance"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("my_mainbtn_ui"), "btn_enhance", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_001")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackMyMainbtnUiBtnUnion"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("my_mainbtn_ui"), "btn_union", function() {
                alert("{{現在所属しているユニオンがある場合、gud_001へ遷移それ以外の場合、gud_000へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackMyMainbtnUiBtnGacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("my_mainbtn_ui"), "btn_gacha", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackMyBtnMi"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "my_btn_mi", t.createInstance("router").navigate.bind(t.createInstance("router"), "mi/mi_001")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnMission"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_mission", t.createInstance("router").navigate.bind(t.createInstance("router"), "mission/mission_001")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnPresent"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_present", t.createInstance("router").navigate.bind(t.createInstance("router"), "present/prs_001")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNew"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_new", function(e) {
                this.popups.my_001_news_a.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCharaChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_chara_change", function() {
                alert("{{アニメーションchara_img_outでキャラが消えアニメーションchara_img_inでチェンジ後のキャラが現れる}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSetting"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_setting", t.createInstance("router").navigate.bind(t.createInstance("router"), "set")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnHarem"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_harem", t.createInstance("router").navigate.bind(t.createInstance("router"), "epi/epi_001")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEpisode"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_episode", t.createInstance("router").navigate.bind(t.createInstance("router"), "epi/epi_001")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNext"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_next", function() {
                alert("{{次のバナーへスライドする}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnPrev"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_prev", function() {
                alert("{{前のバナーへスライドする}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackEventimgBanner"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "eventimg_banner", function(e) {
                this.popups.my_ev_banner.open(e)
            }),
            function(e, n, i, a) {
                var s = {};
                s["MOUSE_ENTER " + n] = function() {
                    e.seekWidgetByPath(i).animate(a, !0)
                }
                ,
                s["MOUSE_LEAVE " + n] = function() {
                    var t = e.seekWidgetByPath(i);
                    t.changeFrame(0)
                }
                ,
                t.setMouseEventHandlers(e, s, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_quest_normal", "my_quest_normal", "mouse_over"),
            function(e, n, i, a) {
                var s = {};
                s["MOUSE_ENTER " + n] = function() {
                    e.seekWidgetByPath(i).animate(a, !0)
                }
                ,
                s["MOUSE_LEAVE " + n] = function() {
                    var t = e.seekWidgetByPath(i);
                    t.changeFrame(0)
                }
                ,
                t.setMouseEventHandlers(e, s, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_quest_raid", "my_quest_raid", "mouse_over"),
            function(e, n, i, a) {
                var s = {};
                s["MOUSE_ENTER " + n] = function() {
                    e.seekWidgetByPath(i).animate(a, !0)
                }
                ,
                s["MOUSE_LEAVE " + n] = function() {
                    var t = e.seekWidgetByPath(i);
                    t.changeFrame(0)
                }
                ,
                t.setMouseEventHandlers(e, s, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_raid", "raid_btn_ui", "mo_raid"),
            function(e, n, i, a) {
                var s = {};
                s["MOUSE_ENTER " + n] = function() {
                    e.seekWidgetByPath(i).animate(a, !0)
                }
                ,
                s["MOUSE_LEAVE " + n] = function() {
                    var t = e.seekWidgetByPath(i);
                    t.changeFrame(0)
                }
                ,
                t.setMouseEventHandlers(e, s, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_party", "my_party_ui", "mouse_over"),
            function(e, n, i, a) {
                var s = {};
                s["MOUSE_ENTER " + n] = function() {
                    e.seekWidgetByPath(i).animate(a, !0)
                }
                ,
                s["MOUSE_LEAVE " + n] = function() {
                    var t = e.seekWidgetByPath(i);
                    t.changeFrame(0)
                }
                ,
                t.setMouseEventHandlers(e, s, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enhance", "my_enhance_ui", "mouse_over"),
            function(e, n, i, a) {
                var s = {};
                s["MOUSE_ENTER " + n] = function() {
                    e.seekWidgetByPath(i).animate(a, !0)
                }
                ,
                s["MOUSE_LEAVE " + n] = function() {
                    var t = e.seekWidgetByPath(i);
                    t.changeFrame(0)
                }
                ,
                t.setMouseEventHandlers(e, s, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_gacha", "my_gacha_ui", "mouse_over"),
            function(e, n, i, a) {
                var s = {};
                s["MOUSE_ENTER " + n] = function() {
                    e.seekWidgetByPath(i).animate(a, !0)
                }
                ,
                s["MOUSE_LEAVE " + n] = function() {
                    var t = e.seekWidgetByPath(i);
                    t.changeFrame(0)
                }
                ,
                t.setMouseEventHandlers(e, s, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_union", "my_union_ui", "mouse_over"),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.mypage = t.pc.mypage || {},
    t.pc.mypage.my_001 = t.pc.mypage.my_001 || {},
    t.pc.mypage.my_001.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        MIN_RANK_TO_HIDE_HELP_ASSISTANT_UI: 30,
        _popups: {
            my_001_news_b: {
                factoryName: "popupFactoryBlue",
                title: "新着情報",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(function() {
                            this.getUserData().resolve()
                        }
                        .bind(this))
                    }
                }
            }
        },
        soundChangeBtnDelegate: new t.SoundChangeBtnDelegate,
        onSceneInit: function(e) {
            return e.seekWidgetByName("btn_mypage").setEnabled(!1),
            e.seekWidgetByName("contentLayer").setVisible(!1),
            this._playFirstAnimationIfFound().then(function() {
                e.seekWidgetByName("contentLayer").setVisible(!0),
                this._setPanelMissionButtonVisible(!this._hasClearedAllPanels()),
                this._mypageCallApis(e)
            }
            .bind(this)).fail(function(e) {
                i.isString(e) ? console.debug(e) : console.error(e)
            })
        },
        _mypageCallApis: function(e) {
            e._onCallApisFinished = this._onCallApisFinished.bind(this);
            var t = [{
                api: "apiAPresents",
                method: "getPresentList",
                args: ["normal", 1, 1],
                callback: this._apiAPresentGetCallback.bind(this)
            }, {
                api: "apiAPresents",
                method: "getPresentList",
                args: ["timelimit", 1, 1],
                callback: this._apiAPresentGetCallback.bind(this)
            }, {
                api: "apiAParties",
                method: "getSelectedDeck",
                callback: this._apiAPartiesGetSelectedDeckCallback.bind(e)
            }, {
                api: "apiAQuestInfo",
                method: "get",
                callback: this._apiAQuestInfoGetCallback.bind(e)
            }, {
                api: "apiAMypage",
                method: "getBackground",
                callback: this._apiAMypageBackgroundGetCallback.bind(e)
            }, {
                api: "apiABanners",
                method: "getMypageBanners",
                callback: this._apiABannersGetMypageBannersCallback.bind(e)
            }, {
                api: "apiAMail",
                method: "getList",
                callback: this._apiAMailGetListCallback.bind(e)
            }, {
                api: "apiAMissions",
                method: "getSummary",
                callback: this._apiAMissionGetSummaryCallback.bind(this)
            }];
            e._callApis(t)
        },
        onSceneEnter: function(e) {
            a.defer();
            return this.soundChangeBtnDelegate.updateSoundNode(),
            this.__updateHaremUI(e),
            a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return t.setTouchEventHandlers(e, {
                "TOUCH_ENDED chara_img": "__playCharaAnime"
            }, this),
            a.resolve()
        },
        _onCallApisFinished: function() {
            var e = n.director.getRunningScene();
            this.__showSupportPopup(e).then(this._showLimitedItemPopups.bind(this)),
            this.__setPresentBoxNewIcon(e),
            e.seekWidgetByName("my_chara_page_ui").animate("chara_img_in", !1),
            this._playerGameConfig = t.createInstance("playerGameConfig"),
            this._playerGameConfig.init(),
            e.seekWidgetByName("btn_mypage").setEnabled(!0),
            this.__playVoice(),
            t.createInstance("BurstTimeCountDownPanel").show()
        },
        _showLimitedItemPopups: function() {
            var e = t.createInstance("TimeLimitItemController", [this._mypage.item_expire_info]);
            return e.showMyTimeLimitTicketCautionPopups()
        },
        _apiAPresentGetCallback: function(e) {
            this.__addPresentCount(e)
        },
        __addPresentCount: function(e) {
            this._presentCount = this._presentCount || 0,
            this._presentCount += e.max_record_count
        },
        _apiAPartiesGetSelectedDeckCallback: function(e) {
            this._delegate.__setPartyMembersImg(e);
            var t = i.random(0, this._delegate._partyMembersImgName.length - 1);
            this._delegate.__displayPartyMemberImg(this, t),
            this._delegate.__setPartyMembersVoiceParam(e)
        },
        __setPartyMembersImg: function(e) {
            this._partyMembersImgName = [];
            var n = e.deck.job.job_id
              , a = e.deck.job.skin || 0;
            this._partyMembersImgName.push(t.Img("mypage", "job", i.padZero(n, 4), a).png),
            i.each(e.deck.characters, function(e) {
                var n = e.character_id;
                if (n) {
                    var a = e.skin || 0;
                    this._partyMembersImgName.push(t.Img("mypage", "chara", i.padZero(n, 4), a).png)
                }
            }, this)
        },
        __displayPartyMemberImg: function(e, t) {
            t >= this._partyMembersImgName.length && (t = 0),
            this._partyMemberIndex = t,
            e.seekWidgetByName("chara_img").loadTexture(this._partyMembersImgName[t])
        },
        __setPartyMembersVoiceParam: function(e) {
            this._partyMembersVoiceParam = [],
            this._partyMembersVoiceParam.push({
                type: "jobSound",
                id: e.deck.job.job_id,
                skin: [1, 2, 3]
            }),
            i.each(e.deck.characters, function(e) {
                var t = e.character_id;
                t && this._partyMembersVoiceParam.push({
                    type: "charaSound",
                    id: t,
                    skin: [1, 2, 3]
                })
            }
            .bind(this))
        },
        __playCharaAnime: function() {
            this.__playVoice();
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("my_chara_page_ui");
            t.animate("chara_img_tap", !1)
        },
        __playVoice: function() {
            if (!this._playerGameConfig.isSoundOn())
                return void console.log("sound is off");
            if (!this._playerGameConfig.isVoiceOn())
                return void console.log("se is off");
            var e = this._partyMemberIndex
              , n = this._partyMembersVoiceParam[e]
              , a = i.shuffle(n.skin)[0]
              , s = [n.type, n.id, a].join("_")
              , o = t.generateResourcePath(n.type, n.id, a).mp3
              , r = this._playerGameConfig.getVirtualVoiceVolume();
            t.postMessage("playVoice", [s, [{
                media: "audio/mp3",
                path: o
            }], r])
        },
        _apiAQuestInfoGetCallback: function(e) {
            this._delegate.__setQuestInfoData(e),
            this._delegate.__showRaidBattleButton(this),
            this._delegate.__updateHaremUI(this)
        },
        __setQuestInfoData: function(e) {
            this._questInfo = e || {}
        },
        _apiAMypageBackgroundGetCallback: function(e) {
            this._delegate.__updateBackgroundImage(this, e)
        },
        __updateBackgroundImage: function(e, n) {
            var a, s = e.seekWidgetByName("mypagebg_area");
            return i.isUndefined(n.special) ? (a = n["default"].img_id,
            void s.loadTexture(t.Img("mypagebg", "area", i.padZero(a, 4), 0).jpg)) : (a = n.special.img_id,
            void s.loadTexture(t.Img("mypage", "bg", i.padZero(a, 4)).jpg))
        },
        _apiAMissionGetSummaryCallback: function(e) {
            var t = e.has_reward;
            console.log(t),
            this.__setMissionExclamationIconVisible(t)
        },
        __setMissionExclamationIconVisible: function(e) {
            var t = n.director.getRunningScene()
              , i = t.seekWidgetByName("my_mission_ui");
            if (null !== i) {
                var a = e ? "exclamation" : "no_exclamation";
                i.setAppearance(a)
            }
        },
        _apiAPlayersGetMeCallback: function(e) {
            var t = e;
            t.rank < this.MIN_RANK_TO_HIDE_HELP_ASSISTANT_UI && this.__setHelpAssistantVisible(!0)
        },
        __setHelpAssistantVisible: function(e) {
            var t = n.director.getRunningScene()
              , i = t.seekWidgetByName("my_help_assist_ui");
            null !== i && (i.setVisible(e),
            i.animate("default_view", e))
        },
        __showRaidBattleButton: function(e) {
            var t = this._questInfo.in_progress;
            (t && t.own_raid || this._questInfo.has_new_raid_request) && (e.seekWidgetByName("my_quest_normal").setVisible(!1),
            e.seekWidgetByName("my_quest_raid").setVisible(!0),
            e.seekWidgetByName("raid_btn_ui").setVisible(!0))
        },
        __updateHaremUI: function(e) {
            var t = e.seekWidgetByName("my_harem_ui");
            t.animate(this._getAnimationNameForHaremBtn(), !0),
            (!this._questInfo || this._questInfo.has_new_harem) && (t.seekWidgetByName("new_icon").setVisible(!0),
            t.animate(this._getAnimationNameForNewHarem(), !0))
        },
        _getAnimationNameForHaremBtn: function() {
            return "default_view"
        },
        _getAnimationNameForNewHarem: function() {
            return "new_harem"
        },
        _apiABannersGetMypageBannersCallback: function(e) {
            this._delegate.__setBanners(e),
            this._delegate.__updateBanners(this)
        },
        __setBanners: function(e) {
            this._banners = e || {}
        },
        __updateBanners: function(e) {
            var n = e.seekWidgetByName("my_event-info_ui");
            if (!this._banners.max_record_count)
                return void n.setVisible(!1);
            n.setVisible(!0);
            var a = n.seekWidgetByName("event-info_panel");
            a.removeAllChildren();
            var s = [];
            i.each(this._banners.data, function(e, t) {
                s.push(this.__createBannerNode(e, t))
            }, this);
            var o = new t.PageView;
            o.initialize(s, function(e, t) {
                console.log("changed page to: " + t)
            }, this),
            o.setDirection(ccui.ScrollView.DIR_HORIZONTAL),
            o.setLoopContent(!0),
            a.addChild(o);
            var r = [];
            r[t.PAGE_CONTROLLER_CONTROLS.NEXT_BUTTON] = "btn_next",
            r[t.PAGE_CONTROLLER_CONTROLS.PREVIOUS_BUTTON] = "btn_prev";
            (new t.PageController).init(n, r, o);
            n.seekWidgetByName("btn_next").setTouchEnabled(!0),
            n.seekWidgetByName("btn_prev").setTouchEnabled(!0)
        },
        __createBannerNode: function(e, n) {
            var a = ccs.load(res["mypage-my_001-my_event-info_page_ui"]).node
              , s = a.seekWidgetByName("eventimg_banner")
              , o = t.Img("eventimg", "banner", i.padZero(e.banner_id, 4)).png;
            s.loadTextures(o, o, o);
            var r = function() {
                var e = t.createInstance("popupFactoryEvBanner").create({});
                e.open({}).then(function() {})
            };
            return s.addTouchEventListener(function(e, t) {
                t === ccui.Widget.TOUCH_ENDED && r()
            }, this),
            a
        },
        _apiAMailGetListCallback: function(e) {
            this._delegate.__setMailData(e),
            this._delegate.__updateMainIcon(this)
        },
        __setMailData: function(e) {
            this._mail = e.data
        },
        __updateMainIcon: function(e) {
            var t = this._mail.length;
            if (t) {
                var n = e.seekWidgetByName("btn_new");
                n.seekWidgetByName("new_icon").setVisible(!0),
                n.seekWidgetByName("new_num_base").setVisible(!0),
                n.seekWidgetByName("new_num_label").setString(t > 999 ? 999 : t)
            }
        },
        __showSupportPopup: function(e) {
            if (!this._mypage || !this._mypage.support_info || 0 === this._mypage.support_info.friend_num && 0 === this._mypage.support_info.other_num)
                return a.resolve();
            var t = this._mypage.support_info
              , n = "";
            0 < t.friend_num && 0 < t.other_num ? (n += "<p>" + t.friend_num + "人のフレンドと<br />",
            n += t.other_num + "人の他のプレイヤーのサポートに<br />選ばれました。</p>") : 0 < t.friend_num ? n += "<p>" + t.friend_num + "人のフレンドのサポートに<br />選ばれました。</p>" : 0 < t.other_num && (n += "<p>" + t.other_num + "人の他のプレイヤーのサポートに<br />選ばれました。</p>"),
            n += "<p>報酬として" + t.gained_gem + "ジェムを受け取りました。</p>";
            var i = a.defer()
              , s = e.popups.my_001_news_b;
            return s.setUserData(i),
            s.open().then(function() {
                s.setContent(n)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            i.promise
        },
        __setPresentBoxNewIcon: function(e) {
            var t = e.seekWidgetByName("btn_present")
              , n = this._presentCount;
            if (!(0 >= n)) {
                t.seekWidgetByName("new_icon").setVisible(!0);
                var i = t.seekWidgetByName("new_num_base");
                null != i && (i.setVisible(!0),
                i.seekWidgetByName("new_num_label").setString(n > 999 ? 999 : n))
            }
        },
        btnCallbackBtnMypage: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackMyMainbtnUiBtnParty: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackMyMainbtnUiBtnEnhance: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackMyMainbtnUiBtnQuestNormal: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackMyMainbtnUiBtnQuestRaid: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnRaid: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackMyMainbtnUiBtnUnion: function(e) {
            var n = a.defer();
            return t.createInstance("unionRouter").navigateToTopScene("me"),
            n.reject(this._override),
            n.promise
        },
        btnCallbackMyMainbtnUiBtnGacha: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnPresent: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnNew: function(e) {
            var n = a.defer()
              , i = t.createInstance("popupFactoryNewsA").create({});
            return i.open({
                mail: this._mail
            }).then(function() {}),
            n.reject(this._override),
            n.promise
        },
        btnCallbackBtnCharaChange: function(e) {
            var t = a.defer();
            return null != this._characterImageChangeAnimationProgress && this._characterImageChangeAnimationProgress.isPending() ? (this._characterImageChangeAnimationProgress = this._characterImageChangeAnimationProgress.then(this._playCharacterChangeAnimation.bind(this, e)),
            this._skipCurrentCharacterChangeAnimationPhase(e)) : this._characterImageChangeAnimationProgress = this._playCharacterChangeAnimation(e),
            t.reject(this._override),
            t.promise
        },
        _playCharacterChangeAnimation: function(e) {
            var t = e.seekWidgetByName("chara_img");
            t.setEnabled(!1);
            var i = e.seekWidgetByName("my_chara_page_ui")
              , s = this._partyMemberIndex + 1;
            s == this._partyMembersImgName.length && (s = 0);
            var o = a.defer()
              , r = this._partyMembersImgName[s];
            return n.loader.loadImg(r, function(e, t) {
                o.resolve(t)
            }),
            a.all([i.animate("chara_img_out", !1), o.promise]).then(function() {
                return this.__displayPartyMemberImg(e, s),
                this._charaImgInToSkipCount ? (this._charaImgInToSkipCount--,
                i.changeFrameWithAnimInfo("chara_img_in", "end", !0),
                a.resolve()) : i.animate("chara_img_in", !1)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }).done(function() {
                t.setEnabled(!0)
            })
        },
        _skipCurrentCharacterChangeAnimationPhase: function(e) {
            var t = e.seekWidgetByName("my_chara_page_ui")
              , n = t.getCurrentlyPlayingAnimation();
            "chara_img_out" === n && (this._charaImgInToSkipCount = this._charaImgInToSkipCount || 0,
            this._charaImgInToSkipCount++),
            t.skipCurrentlyPlayingAnimation()
        },
        btnCallbackBtnSetting: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnHarem: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnEpisode: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnNext: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            t.promise
        },
        btnCallbackBtnPrev: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            t.promise
        },
        btnCallbackEventimgBanner: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            t.promise
        },
        _hasClearedAllPanels: function() {
            return null == this._mypage ? (console.warn("MyPage/sceneDelegate._hasClearedAllPanels: a_mypage response data not properly received or set"),
            !1) : this._mypage.has_cleared_all_panels
        },
        _setPanelMissionButtonVisible: function(e) {
            var t = n.director.getRunningScene().seekWidgetByName("my_btn_mi");
            return null == t ? void console.warn("MyPage/sceneDelegate._setPannelMissionButtonVisible: widget 'my_btn_mi' not found!") : void t.setVisible(e)
        }
    }),
    i.assign(t.pc.mypage.my_001.SceneDelegate.prototype, t.mypage.roles.MypageFirstEventInfo)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.console;
    t.mypage = t.mypage || {},
    t.mypage.controller = t.mypage.controller || {},
    t.mypage.controller.TimeLimitItem = n.Class.extend({
        ctor: function(e) {
            this._itemExpireInfoModel = this._createItemExpireInfoModel(e),
            this._myTimeLimitTicketCautionPopup = this._initMyTimeLimitTicketCautionPopup()
        },
        showMyTimeLimitTicketCautionPopups: function() {
            var e = this._itemExpireInfoModel.getTimeLimitItemModels();
            return i.map(e, function(e) {
                return this._showMyTimeLimitTicketCautionPopup.bind(this, e)
            }, this).reduce(Q.when, Q())
        },
        _showMyTimeLimitTicketCautionPopup: function(e) {
            return this._myTimeLimitTicketCautionPopup.open(e)
        },
        _initMyTimeLimitTicketCautionPopup: function() {
            var e = t.createInstance("MyTimeLimitTicketCautionPopup");
            return e.setOnUseCallback(this._onTouchUseItem, this),
            e.setOnCancelCallback(this._onTouchCancel, this),
            e
        },
        _createItemExpireInfoModel: function(e) {
            return t.createInstance("ItemExpireInfoModel", [e])
        },
        _reportItemRecordAsViewed: function(e) {
            return t.createInstance("apiAMypage").putExpireInfo(e.getItemId(), e.getExpireDate()).fail(function(e) {
                a.error(e && e.stack ? e.stack : e)
            })
        },
        _navigateToGachaTop: function() {
            return t.createInstance("router").navigate("gacha/ga_001"),
            Q.resolve()
        },
        _onTouchUseItem: function(e) {
            return this._reportItemRecordAsViewed(e).then(this._navigateToGachaTop.bind(this))
        },
        _onTouchCancel: function(e) {
            return this._reportItemRecordAsViewed(e)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc;
    t.mypage = t.mypage || {},
    t.mypage.model = t.mypage.model || {},
    t.mypage.model.ItemExpireInfo = n.Class.extend({
        ctor: function(e) {
            this._timeLimitItemModels = this._createTimeLimitItemModels(e)
        },
        getTimeLimitItemModels: function() {
            return this._timeLimitItemModels
        },
        _createTimeLimitItemModels: function(e) {
            return _.map(e || [], this._createTimeLimitItemModel, this)
        },
        _createTimeLimitItemModel: function(e) {
            return t.createInstance("TimeLimitItemModel", [e])
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc;
    t.mypage = t.mypage || {},
    t.mypage.model = t.mypage.model || {},
    t.mypage.model.TimeLimitItem = n.Class.extend({
        ctor: function(e) {
            this._timeLimitItemRecord = e
        },
        getItemId: function() {
            return this._timeLimitItemRecord.item_id
        },
        getName: function() {
            return this._timeLimitItemRecord.name
        },
        getDescription: function() {
            return this._timeLimitItemRecord.description
        },
        getExpireDate: function() {
            return this._timeLimitItemRecord.expire_date
        },
        getNum: function() {
            return this._timeLimitItemRecord.num
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.console;
    n.mypage = n.mypage || {},
    n.mypage.view = n.mypage.view || {},
    n.mypage.view.MyTimeLimitTicketCautionPopup = n.ImplantedPopup.extend({
        POPUP_NAME: "my_time_limit_ticket_caution",
        BUTTON_NAMES: {
            CLOSE: "btn_popup_close",
            USE: "btn_use"
        },
        WIDGET_NAMES: {
            CORECARD: "corecard_item_ui",
            NAME: "item_name_label",
            DESCRIPTION: "item_description_label",
            AMOUNT: "have_label",
            EXPIRATION_DATE: "limit_date_label"
        },
        ctor: function() {
            this._super(this.POPUP_NAME),
            this._initButtons(),
            this._corecard = this._initCorecard()
        },
        setOnCancelCallback: function(e, t) {
            this._onCancelCallback = e.bind(t)
        },
        setOnUseCallback: function(e, t) {
            this._onUseCallback = e.bind(t)
        },
        _initButtons: function() {
            var e = {};
            e[this.BUTTON_NAMES.CLOSE] = this._onBtnPopupClose.bind(this),
            e[this.BUTTON_NAMES.USE] = this._onBtnUse.bind(this),
            this.setButtonEvents(e)
        },
        _initCorecard: function() {
            var e = this._getCorecardNode();
            return n.createInstance("CoreCardItemUI", ["plain", e])
        },
        _initContents: function(e) {
            this._itemExpireInfoModel = e,
            this._setCorecardImage(e.getItemId()),
            this._setItemName(e.getName()),
            this._setItemDescription(e.getDescription()),
            this._setExpirationDate(e.getExpireDate()),
            this._setAmount(e.getNum())
        },
        _clearContents: function() {
            this._itemExpireInfoModel = null ,
            this._corecard.clearImg(),
            this._setItemName(""),
            this._setItemDescription(""),
            this._setExpirationDate(""),
            this._setAmount("")
        },
        _onBtnPopupClose: function() {
            this._onButtonClick(this._onCancelCallback, !0)
        },
        _onBtnUse: function() {
            this._onButtonClick(this._onUseCallback, !1)
        },
        _onButtonClick: function(e, n) {
            var i;
            return t.isFunction(e) && (i = e(this._itemExpireInfoModel, this)),
            i && i.then ? void i.then(function() {
                this._clearContents(),
                this.dismiss(n)
            }
            .bind(this)) : (this._clearContents(),
            void this.dismiss(n))
        },
        _setCorecardImage: function(e) {
            return null == this._corecard ? void i.warn("KHMyTimeLimitTicketCautionPopup._setCorecardImage: corecard not properly initialized.") : void this._corecard.setImg(e)
        },
        _setItemName: function(e) {
            var t = this._getNameNode();
            this._setNodeString(t, e)
        },
        _setItemDescription: function(e) {
            var t = this._getDescriptionNode();
            this._setNodeString(t, e)
        },
        _setExpirationDate: function(e) {
            var t = this._getExpirationDateNode();
            this._setNodeString(t, e)
        },
        _setAmount: function(e) {
            var t = this._getAmountNode();
            this._setNodeString(t, e.toString())
        },
        _setNodeString: function(e, t) {
            return null == e ? void i.warn("KHMyTimeLimitTicketCautionPopup._setNodeString: attempting to set the string value of a non existent node to '" + t + "'.") : void e.setString(t)
        },
        _getCorecard: function() {
            return this._corecard
        },
        _getCorecardNode: function() {
            return this._getNodeByName(this.WIDGET_NAMES.CORECARD)
        },
        _getNameNode: function() {
            return this._getNodeByName(this.WIDGET_NAMES.NAME)
        },
        _getDescriptionNode: function() {
            return this._getNodeByName(this.WIDGET_NAMES.DESCRIPTION)
        },
        _getAmountNode: function() {
            return this._getNodeByName(this.WIDGET_NAMES.AMOUNT)
        },
        _getExpirationDateNode: function() {
            return this._getNodeByName(this.WIDGET_NAMES.EXPIRATION_DATE)
        },
        _getNodeByName: function(e) {
            var t = this.getNode().seekWidgetByName(e);
            return null == t && i.warn("KHMyTimeLimitTicketCautionPopup._getNode: node '" + e + "' not found."),
            t
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    e.kh = e.kh || {};
    var t = e.kh;
    t.BaseMypageAnimation = t.BaseMypageAnimation || {},
    t.BaseMypageAnimation = cc.Class.extend({
        className: "KHBaseMypageAnimation",
        animationDfd: null ,
        play: function() {
            return this.animationDfd = Q.defer(),
            this.animationDfd.promise
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    e.kh = e.kh || {};
    var t = e.kh
      , n = e.res;
    e._;
    $staticRes(n["mypage-loginbonus-item_stamp"]),
    $staticRes(n["mypage-loginbonus-loginbonus_item_second"]),
    t.LoginBonus = cc.Class.extend({
        ctor: function(e, n) {
            var i = new t.LoginBonusData(n)
              , a = new t.LoginBonusResource(i.getLoginBonusId());
            this._delegate = new t.LoginBonusAnimation(a,e,i)
        },
        play: function() {
            return this._delegate.play()
        }
    })
}((this || 0).self || global),
function(e) {
    var t = e.kh
      , n = e._;
    t.LoginBonusData = cc.Class.extend({
        className: "LoginBonusData",
        ctor: function(e) {
            this._data = e,
            this._id = e.id,
            this._animationData = e.animation_data,
            this._todayData = e.animation_data.today_bonus_info,
            this._nextData = e.animation_data.next_bonus_info
        },
        isLastDay: function() {
            return n.isUndefined(this._animationData.is_last_day) ? !1 : this._animationData.is_last_day
        },
        hasNextItem: function() {
            return !n.isEmpty(this._nextData)
        },
        getLoginBonusId: function() {
            return this._id
        },
        getTodayNo: function() {
            return this._todayData.day
        },
        getNextDayNo: function() {
            return n.isEmpty(this._nextData) ? -1 : this._nextData.day
        },
        getTodayItemName: function() {
            return this._todayData.name
        },
        getNextItemName: function() {
            return this._nextData.name
        },
        getItemAnimationNameByDay: function(e) {
            if (e === this.getTodayNo())
                return "bonus_normal";
            var t = e - 1
              , i = this._animationData.daily_reward_items[t];
            return n.isUndefined(i) ? "bonus_normal" : i.acquired ? "bonus_get" : "bonus_normal"
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.LoginBonusResource = cc.Class.extend({
        className: "LoginBonusResource",
        ctor: function(e) {
            this._resourceNames = this._getResourceNames(e)
        },
        fetch: function() {
            return t.loader.load(this._resourceNames).then(function(e) {
                var i = e[0];
                this._animation = t.createInstance("WindowVisualEffect").init(i),
                (n.isUndefined(this._animation) || n.isNull(this._animation)) && console.error("animation is not found")
            }
            .bind(this))
        },
        _getResourceNames: function(e) {
            return n.map(["../mypage/res/loginbonus/loginbonus_[% loginBonusId %]/loginbonus.json", "../mypage/res/loginbonus/loginbonus_[% loginBonusId %]/login_text.json", "../mypage/res/loginbonus/loginbonus_[% loginBonusId %]/loginchara.json", "../mypage/res/loginbonus/loginbonus_[% loginBonusId %]/loginbonus_[% loginBonusId %]_login_text_ui.json", "../mypage/res/loginbonus/loginbonus_[% loginBonusId %]/loginbonus_[% loginBonusId %]_chara_ui.json"], function(t) {
                return t.replace(/\[% loginBonusId %\]/g, n.padZero(e, 4))
            })
        },
        setTouchEventListener: function(e, t) {
            this._getTouchNode().addTouchEventListener(e, t)
        },
        _getTouchNode: function() {
            return this._animation._node.seekWidgetByName("loginbonus_comment_0000")
        },
        getAnimation: function() {
            return this._animation
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    kh.LoginBonusAnimation = kh.BaseMypageAnimation.extend({
        className: "KHLoginBonusAnimation",
        _zOrder: 100,
        _itemZOrder: 20,
        LOGIN_ANIME_SPRITE: kh.env.isSp ? "animesprite" : "animespritepc",
        LOGIN_ANIME_IMG: kh.env.isSp ? "animeimg" : "animeimgpc",
        ctor: function(e, t, n) {
            this._resource = e,
            this._targetLayer = t,
            this._data = n
        },
        play: function() {
            return _.isUndefined(this._targetLayer) || _.isNull(this._targetLayer) ? (console.warn("this._targetLayer is not found"),
            Q.resolve()) : _.isUndefined(this._data) || _.isNull(this._data) ? (console.warn("this._data is not found"),
            Q.resolve()) : Q.all([this._resource.fetch(), this._preload()]).spread(function(e, t) {
                this._setBaseUploadImage.call(this, t[0])
            }
            .bind(this)).then(this._prepareItems.bind(this)).then(this.__playToDayItemGetAnimation.bind(this)).then(this.__playToDayItemGetLoopAnimation.bind(this)).then(this.__playNextDayItemGetAnimation.bind(this)).then(this.__playNextDayItemGetLoopAnimation.bind(this)).then(this.__playExitAnimation.bind(this)).fail(function(e) {
                return console.error(e.stack),
                Q.reject(e)
            })
        },
        _getAnimation: function() {
            return this._resource.getAnimation()
        },
        _getAnimationNode: function() {
            return this._getAnimation()._node
        },
        _seekAnimationNode: function(e) {
            return this._getAnimationNode().seekWidgetByPath(e)
        },
        _replaceBoardText: function(e, t) {
            var n = this._seekAnimationNode(e);
            if (_.isNull(n))
                return void console.warn("node not found: " + e);
            var i = _.clone(t);
            i.item1 = i.item2 = i.name;
            var a = n.getString().replace(/\[%\s*(\S+)\s*%\]/g, function(e, t) {
                return _.isUndefined(i[t]) ? "" : i[t]
            });
            n.setString(a)
        },
        _preload: function() {
            var e = kh.Img(this.LOGIN_ANIME_SPRITE, "loginbonus", _.padZero(this._data.getLoginBonusId(), 4)).png;
            return kh.loader.load([e])
        },
        _prepareItems: function() {
            if (null == this._data)
                return void console.warn("this._data is not found");
            var e = this._data.getTodayNo()
              , t = kh.Img(this.LOGIN_ANIME_SPRITE, "loginbonus", _.padZero(this._data.getLoginBonusId(), 4)).png
              , n = this._getAnimationNode().seekWidgets(function(e) {
                return /^item\d+$/.test(e.getName())
            });
            _.each(n, function(e, n) {
                var i = n + 1
                  , a = this._data.getItemAnimationNameByDay(i)
                  , s = e.getAction()
                  , o = s.animationInfo
                  , r = o[a];
                s.gotoFrameAndPause(r.startIndex + 1),
                s.gotoFrameAndPause(r.startIndex);
                var c = kh.Img(this.LOGIN_ANIME_IMG, "loginbonus", _.padZero(this._data.getLoginBonusId(), 4), i).png
                  , u = e.seekWidgetByName("loginbonus_item01");
                u.loadTexture(c);
                var l = e.seekWidgetByName("loginbonus_upload_55");
                l.setTexture(t),
                l = e.seekWidgetByName("loginbonus_upload_56"),
                l.setTexture(t)
            }
            .bind(this));
            var i = this._seekAnimationNode("loginbonus_item02")
              , a = kh.Img(this.LOGIN_ANIME_IMG, "loginbonus", _.padZero(this._data.getLoginBonusId(), 4), e).png;
            if (i.loadTexture(a),
            this._data.hasNextItem()) {
                var s = this._seekAnimationNode("loginbonus_item02_0")
                  , a = kh.Img(this.LOGIN_ANIME_IMG, "loginbonus", _.padZero(this._data.getLoginBonusId(), 4), this._data.getNextDayNo()).png;
                s.loadTexture(a)
            }
        },
        _setBaseUploadImage: function(e) {
            var t = ["loginbonus_upload_115", "loginbonus_upload_1", "loginbonus_upload_39", "loginbonus_logo_0_r.loginbonus_upload_76", "loginbonus_logo_r.loginbonus_upload_76", "loginbonus_upload_152", "loginbonus_upload_56"];
            _.each(t, function(t) {
                var n = this._seekAnimationNode(t);
                return _.isNull(n) ? void alert(t + "is not found") : void n.setTexture(e)
            }, this)
        },
        _showArrow: function(e) {
            var t = this._seekAnimationNode("loginbonus_arrow_360_1");
            t.setVisible(!!e)
        },
        __playToDayItemGetAnimation: function() {
            var e = Q.defer()
              , t = this._getAnimation()
              , n = "loginbonus_1"
              , i = this._seekAnimationNode("item" + this._data.getTodayNo());
            if (_.isNull(i))
                return Q.reject(new Error("todayItemNode is not found: " + this._data.getTodayNo()));
            var a = i.getAction()
              , s = this._getAnimationNode()
              , o = a.animationInfo.bonus_lock
              , r = this._itemZOrder
              , c = function() {
                a.gotoFrameAndPause(o.endIndex),
                s.setLocalZOrder(r),
                t.removeAnimationEventCallback("item_stamp_s")
            }
              , u = function() {
                i.setLocalZOrder(10);
                var e = i.getAction();
                e.gotoFrameAndPlay(o.startIndex, o.endIndex, !1),
                e.setFrameEventCallFunc(function(e) {
                    "item_lock_e" === e._event && c()
                }
                .bind(this))
            }
              , l = function() {
                t.removeAnimationEndCallback(),
                e.resolve()
            };
            this._resource.setTouchEventListener(function(e, t) {
                t === ccui.Widget.TOUCH_ENDED && (e.addTouchEventListener(null ),
                c(),
                l())
            }
            .bind(this)),
            t.addAnimationEventCallback("item_stamp_s", u, this),
            t.setAnimationNameEndCallback(n, l),
            this._playAnimation(n, !1);
            var d = (this._data.isLastDay() ? "lastday" : "normal") + "_first_tap_label"
              , p = (this._data.isLastDay() ? "lastday" : "normal") + "_first_tap_label";
            return this._replaceBoardText(d, {
                day: this._data.getTodayNo(),
                name: this._data.getTodayItemName()
            }),
            this._seekAnimationNode("login_text").animate(p),
            e.promise
        },
        __playToDayItemGetLoopAnimation: function() {
            var e = Q.defer()
              , t = (this._getAnimation(),
            "loginbonus_1_loop");
            return this._resource.setTouchEventListener(function(t, n) {
                n === ccui.Widget.TOUCH_ENDED && (this._showArrow(!1),
                t.addTouchEventListener(null ),
                e.resolve())
            }
            .bind(this)),
            this._playAnimation(t, !0),
            this._showArrow(!0),
            e.promise
        },
        __playNextDayItemGetAnimation: function() {
            var e = Q.defer()
              , t = this._getAnimation()
              , n = "loginbonus_2";
            return t.addAnimationEventCallback("text_change", function() {
                t.removeAnimationEventCallback("text_change"),
                this._data.isLastDay() ? (this._data.hasNextItem() && this._replaceBoardText("lastday_second_tap_label", {
                    day: this._data.getNextDayNo(),
                    name: this._data.getNextItemName()
                }),
                this._seekAnimationNode("login_text").animate("lastday_second_tap_label")) : (this._replaceBoardText("normal_second_tap_label", {
                    day: this._data.getNextDayNo(),
                    name: this._data.getNextItemName()
                }),
                this._seekAnimationNode("login_text").animate("normal_second_tap_label"))
            }, this),
            t.setAnimationNameEndCallback(n, function() {
                t.removeAnimationEndCallback(),
                e.resolve()
            }, this),
            this._playAnimation(n, !1),
            this._playNextItemAnimation(n, !1),
            e.promise
        },
        __playNextDayItemGetLoopAnimation: function() {
            var e = Q.defer()
              , t = (this._getAnimation(),
            "loginbonus_2_loop");
            return this._resource.setTouchEventListener(function(t, n) {
                n === ccui.Widget.TOUCH_ENDED && (this._showArrow(!1),
                t.addTouchEventListener(null ),
                e.resolve())
            }
            .bind(this)),
            this._playAnimation(t, !0),
            this._playNextItemAnimation(t),
            this._showArrow(!0),
            e.promise
        },
        __playExitAnimation: function() {
            var e = Q.defer()
              , t = this._getAnimation()
              , n = "loginbonus_3";
            return t.setAnimationNameEndCallback(n, function() {
                e.resolve(),
                this._getAnimation().cleanUp()
            }, this),
            this._playAnimation(n, !1),
            this._playNextItemAnimation(n),
            e.promise
        },
        _playAnimation: function(e, t) {
            var n = this._getAnimation();
            n.playByName(e, this._targetLayer, cc.p(0, 0), this._zOrder, t),
            this._seekAnimationNode("loginchara").animate(e, t)
        },
        _playNextItemAnimation: function(e, t) {
            this._data.isLastDay() && !this._data.hasNextItem() ? this._seekAnimationNode("loginbonus_item_second").animate("lastday_view", t) : this._seekAnimationNode("loginbonus_item_second").animate(e, t)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    e.kh = e.kh || {};
    var t = e.kh;
    t.AddGachaContents = t.AddGachaContents || {},
    $staticRes(res["mypage-gacha_add-gacha_add_ani"]),
    t.AddGachaContents = t.BaseMypageAnimation.extend({
        className: "KHAddGachaContents",
        addGachaAnimationInfo: {
            animation: null ,
            zOrder: 100,
            resource: "mypage-gacha_add-gacha_add_ani"
        },
        ctor: function(n, i) {
            t.createInstance("soundPlayer").init(t.createInstance("playerGameConfig")),
            this._targetLayer = n,
            this._data = i,
            this.addGachaAnimationInfo.animation = t.createInstance("WindowVisualEffect").init(e.res[this.addGachaAnimationInfo.resource]),
            this.baseNode = this.addGachaAnimationInfo.animation._node
        },
        play: function() {
            var e = this._super();
            if (null == this._targetLayer)
                return console.warn("this._targetLayer is not found"),
                this.animationDfd.resolve(),
                e;
            if (null == this._data)
                return console.warn("this._data is not found"),
                this.animationDfd.resolve(),
                e;
            var t = [this.baseNode.seekWidgetByPath("step_01.btn_skip"), this.baseNode.seekWidgetByPath("step_02.btn_skip"), this.baseNode.seekWidgetByPath("step_03.btn_skip"), this.baseNode.seekWidgetByPath("step_04.btn_skip"), this.baseNode.seekWidgetByPath("step_05.btn_skip")];
            return _.each(t, function(e) {
                this._setSkipBtn(e)
            }
            .bind(this)),
            this.__playGachaAddTitle().then(this.__playMainWeapons.bind(this)).then(this.__playMainSummons.bind(this)).then(this.__playSubWeapons.bind(this)).then(this._destroy.bind(this)),
            e
        },
        __playGachaAddTitle: function() {
            var e = t.Img("gacha-add-top", "gacha-add", _.padZero(this._data.animation_id, 4)).png
              , n = this.baseNode.seekWidgetByPath("step_01.group_panel_0.gacha-add-top_gacha-add_0");
            return n.setTexture(e),
            Q.delay(10).then(this._playStepAnimation.bind(this, "step_01")).fail(function(e) {
                console.error(e.stack)
            })
        },
        __playMainWeapons: function() {
            var e = this._data.animation_data.main_release_weapons
              , t = Q.resolve();
            return _.each(e, function(e) {
                t = t.then(this.__setMainWeaponPage.bind(this, e)).then(this._playStepAnimation.bind(this, "step_02")).then(this._playStepAnimation.bind(this, "step_03"))
            }, this),
            t
        },
        __setMainWeaponPage: function(e) {
            var n = this.baseNode.seekWidgetByPath("step_02.group_panel_0.gacha-add-main_weapon_0")
              , i = this.baseNode.seekWidgetByPath("step_02.group_panel_1.gacha-add-main_weapon_0")
              , a = this.baseNode.seekWidgetByPath("step_03.group_panel_0.gacha-add-main_weapon_0")
              , s = this.baseNode.seekWidgetByPath("step_03.group_panel_0.gacha-add-main_weapon_1")
              , o = this.baseNode.seekWidgetByPath("step_03.group_panel_1.gacha-add-main_weapon_0")
              , r = [n, i, a, s, o]
              , c = t.Img("gacha-add-main", "weapon", _.padZero(e.id, 4)).png;
            _.each(r, function(e) {
                e.setTexture(c)
            }
            .bind(this))
        },
        __playMainSummons: function() {
            var e = this._data.animation_data.main_summons
              , t = Q.resolve();
            return _.each(e, function(e) {
                t = t.then(this.__setMainSummonPage.bind(this, e)).then(this._playStepAnimation.bind(this, "step_04"))
            }, this),
            t
        },
        __setMainSummonPage: function(e) {
            var n = this.baseNode.seekWidgetByPath("step_04.group_panel_0.gacha-add-main_summon_0")
              , i = this.baseNode.seekWidgetByPath("step_04.group_panel_0.gacha-add-main_summon_1")
              , a = this.baseNode.seekWidgetByPath("step_04.group_panel_1.gacha-add-main_summon_0")
              , s = [n, a, i]
              , o = t.Img("gacha-add-main", "summon", _.padZero(e.id, 4)).png;
            return _.each(s, function(e) {
                e.setTexture(o)
            }
            .bind(this)),
            Q.resolve()
        },
        __playSubWeapons: function() {
            var e = this._data.animation_data.sub_release_weapons
              , t = 2
              , n = e.length
              , a = n / t;
            a = Math.ceil(a);
            var s = Q.resolve();
            for (i = 0; a > i; i++) {
                var o = e[i * t]
                  , r = e[i * t + 1]
                  , c = i + 1 === a;
                s = s.then(this.__setSubWeaponPage.bind(this, o, r, c)).then(this._playStepAnimation.bind(this, "step_05"))
            }
            return s
        },
        __setSubWeaponPage: function(e, t, n) {
            var i = this.baseNode.seekWidgetByPath("step_05.group_panel_0")
              , a = this.baseNode.seekWidgetByPath("step_05.group_panel_1.gacha-add-sub_weapon_0")
              , s = this.baseNode.seekWidgetByPath("step_05.group_panel_2")
              , o = this.baseNode.seekWidgetByPath("step_05.group_panel_3.gacha-add-sub_weapon_0");
            return this.__setSubWeaponImage(e, i, a),
            this.__setSubWeaponImage(t, s, o),
            n && this.baseNode.seekWidgetByPath("step_05.btn_skip").setVisible(!1),
            Q.resolve()
        },
        __setSubWeaponImage: function(e, n, i) {
            if (_.isUndefined(e))
                return n.setVisible(!1),
                void i._parent.setVisible(!1);
            var a = t.Img("gacha-add-sub", "weapon", _.padZero(e.id, 4)).png;
            n.setVisible(!0),
            i._parent.setVisible(!0),
            n.children[0].setTexture(a),
            n.children[1].setTexture(a),
            i.setTexture(a)
        },
        _playStepAnimation: function(e) {
            var n = Q.defer()
              , i = this.addGachaAnimationInfo.animation
              , a = "layer_in"
              , s = i.getChildEffect(e)
              , o = s.getNode()
              , r = o.seekWidgetByName("btn_clear");
            return r.addTouchEventListener(function(e, t) {
                t === ccui.Widget.TOUCH_ENDED && (r.addTouchEventListener(null ),
                n.resolve())
            }
            .bind(this)),
            i.playByName(e, this._targetLayer, cc.p(0, 0), this.addGachaAnimationInfo.zOrder, !1),
            i.showAnimationLastFrame(e, this._targetLayer, cc.p(0, 0), this.addGachaAnimationInfo.zOrder),
            t.createInstance("Sound2Event", [s]),
            s.setAnimationNameEndCallback(a, function() {
                s.playByName("default_view", this.baseNode, cc.p(0, 0), this.addGachaAnimationInfo.zOrder, !0),
                s.removeAnimationEndCallback()
            }, this),
            s.playByName(a, this.baseNode, cc.p(0, 0), this.addGachaAnimationInfo.zOrder, !1),
            n.promise
        },
        _setSkipBtn: function(e) {
            e.addTouchEventListener(function(t, n) {
                n === ccui.Widget.TOUCH_ENDED && (e.addTouchEventListener(null ),
                this._destroy())
            }
            .bind(this))
        },
        _destroy: function() {
            this.addGachaAnimationInfo.animation.cleanUp(),
            this.addGachaAnimationInfo.animation = null ,
            this.baseNode = null ,
            this.animationDfd.resolve()
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc;
    e._;
    t.BurstTimeCountDownPanel = n.Node.extend({
        UPDATE_INTERVAL: .5,
        _timerId: null ,
        _widget: null ,
        _label: null ,
        _khBurstTime: null ,
        show: function() {
            var e = n.director.getRunningScene();
            e.addChild(this),
            this._widget = e.seekWidgetByName("bursttime_remaining_ui"),
            this._widget.setVisible(!1),
            this._label = e.seekWidgetByName("bursttime_remaining_label"),
            this._khBurstTime = t.createInstance("burstTime"),
            this._khBurstTime.prepare().then(this._initWidget.bind(this))
        },
        _initWidget: function() {
            this._khBurstTime.isEnabled() && this._khBurstTime.isInBurstTime() && (this._updateCount(),
            this._startCountDown(),
            this._widget.setVisible(!0),
            t.env.isSp || this._widget.addChild(new n.Sprite))
        },
        _updateCount: function() {
            var e = this._khBurstTime.getRemainingTime();
            this._label.setString(e)
        },
        _startCountDown: function() {
            this.schedule(this._updateCount, this.UPDATE_INTERVAL)
        },
        _stopCountDown: function() {
            this.unschedule(this._updateCount)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    e.kh = e.kh || {};
    var t = e.kh
      , n = e.cc
      , i = e.ccs
      , a = e._
      , s = e.res;
    t.QuestSceneCommonDelegate = n.Class.extend({
        SQUARE_MAX: 5,
        ctor: function() {},
        owner: null ,
        selected: "",
        _mainQuestList: null ,
        _questInfoData: null ,
        onExit: function() {
            this._mainQuestList = null ,
            this._questInfoData = null ,
            this.owner = null ,
            this._questClearedAnimationDefer && this._questClearedAnimationDefer.promise.isPending() && (this._questClearedAnimationDefer.reject(),
            this._questClearedAnimationDefer = null )
        },
        _getMainNewLabelNode: function() {
            return this.owner.seekWidgetByName("main_quest_rest_label")
        },
        _getFreeNewLabelNode: function() {
            return this.owner.seekWidgetByName("base_free_quest_rest_label")
        },
        _getMainNewLabelBaseNode: function() {
            return this.owner.seekWidgetByName("base_main_quest_rest")
        },
        _getFreeNewLabelBaseNode: function() {
            return this.owner.seekWidgetByName("base_free_quest_rest")
        },
        setFreeNewLabel: function(e) {
            this._setNewLabel("free", e)
        },
        setMainNewLabel: function(e) {
            this._setNewLabel("main", e)
        },
        _setNewLabel: function(e, t) {
            var n = 0;
            a.each(t, function(e, t) {
                n += e.is_cleared ? 0 : 1
            }, this);
            var i = this["_get" + a.capitalize(e) + "NewLabelNode"]()
              , s = this["_get" + a.capitalize(e) + "NewLabelBaseNode"]();
            s.setVisible(n > 0),
            i.setString(n)
        },
        checkComApRestartPopup: function(e) {
            var t = this.getInProgressQuest(e);
            t && this.__showPopup_comApRestart(t)
        },
        restartCheckInProgressQuest: function(e, t) {
            var n = this.getInProgressQuest(t);
            return this._isInProgressQuest(e, n) ? (this._restart(n),
            !0) : n ? (this.__showPopup_comApRestart(n),
            !0) : !1
        },
        _isInProgressQuest: function(e, t) {
            return t && e && e.a_quest_id === t.a_quest_id && e.type === t.type ? !0 : !1
        },
        getInProgressQuest: function(e) {
            if (e && e.in_progress) {
                if (e.in_progress.is_unverified)
                    return null ;
                var t = e.in_progress.own_quest || e.in_progress.own_raid;
                if (t)
                    return t.type = t.type || "raid",
                    t
            }
            return null
        },
        __showPopup_comApRestart: function(e) {
            var n = this.owner.popups.comApRestart;
            n.open({
                questTitle: e.title,
                type: e.type
            }).then(function() {
                var i = (n.seekWidgetByName("btn_withdrawal"),
                n.seekWidgetByName("btn_restart"),
                n.seekWidgetByName("confirm_label"));
                i.setString(t.w("popupQuestRestartLabel").replace("#replace#", e.title));
                var a = this;
                t.setTouchEventHandlers(n, {
                    "TOUCH_ENDED btn_withdrawal": function() {
                        a._giveup(e),
                        n.dismiss()
                    },
                    "TOUCH_ENDED btn_restart": function() {
                        a._restart(e),
                        n.dismiss()
                    }
                    .bind(a)
                })
            }
            .bind(this))
        },
        _restart: function(e) {
            var n = t.createInstance("apiAQuests");
            n.getCurrentState(e.a_quest_id, e.type).then(function(n) {
                var i = n.body
                  , s = {
                    talk: {
                        page: "scenario/scenario-play",
                        idName: "id"
                    },
                    "harem-character": {
                        page: "scenario/harem-play",
                        idName: "id"
                    },
                    "harem-job": {
                        page: "scenario/harem-play",
                        idName: "id"
                    },
                    "harem-summon": {
                        page: "scenario/harem-play",
                        idName: "id"
                    },
                    "harem-story": {
                        page: "scenario/harem-play",
                        idName: "id"
                    },
                    battle: {
                        page: "battle",
                        idName: "a_battle_id"
                    },
                    battle_result: {
                        page: "quest/q_003_1",
                        idName: "a_battle_id"
                    },
                    finish: {
                        page: "quest/q_001",
                        idName: "id"
                    }
                }
                  , o = s[i.next_info.next_kind]
                  , r = {};
                r[o.idName] = i.next_info.id,
                r.a_quest_id = e.a_quest_id,
                r.quest_type = e.type,
                -1 !== e.type.search("raid") && (r.is_own_raid = !0),
                t.createInstance("router").navigate(o.page, r, a.merge({
                    ignoreImplicitRoute: !0
                }, r))
            })
        },
        _giveup: function(e) {
            var n = t.createInstance("apiAQuests");
            n.getGainedItems(e.a_quest_id, e.type).then(function(t) {
                t.body.gained_items;
                this.owner.popups.comBackCheck.open({
                    coin: t.body.gained_items.gem,
                    normal: t.body.gained_items.wooden_box,
                    silver: t.body.gained_items.silver_box,
                    gold: t.body.gained_items.golden_box,
                    rainbow: t.body.gained_items.rainbow_box,
                    needToOpenComBackResult: !0,
                    aQuestId: e.a_quest_id,
                    questType: e.type
                }).then(function() {}
                .bind(this))
            }
            .bind(this))
        },
        setMainMoveNextIcon: function(e, t) {
            console.debug("override me")
        },
        setAreaAnimation: function(e, t) {
            this._mainQuestList = e,
            this._questInfoData = t,
            this._questClearedAnimationDefer = Q.defer(),
            this._setSquareAnimation(),
            this._showNaviChara()
        },
        showNaviCharaOnNode: function(e) {
            this.__playSquareAnimation($staticRes(s["quest-q_map_chara"]), e, 0)
        },
        _showNaviChara: function() {
            var e = a.sortBy(this._mainQuestList, ["quest_num"]);
            a.each(e, function(e, t) {
                if (this._questInfoData.next_a_quest_id === e.a_quest_id) {
                    var n = this.owner.seekWidgetByName("q_map_mass_" + t);
                    this.__playSquareAnimation($staticRes(s["quest-q_map_chara"]), n, 0)
                }
            }, this)
        },
        _setSquareAnimation: function() {
            var e = a.sortBy(this._mainQuestList, ["quest_num"])
              , n = 3
              , i = 4
              , o = !1;
            a.each(a.range(this.SQUARE_MAX), function(a, r) {
                var c = e[r]
                  , u = c && c.is_cleared
                  , _ = this.owner.seekWidgetByName("q_map_mass_" + r)
                  , l = _.seekWidgetByName("q_map_mass_label")
                  , d = c ? "第" + c.quest_num + t.w("chapter") : "????";
                if (l.setString(d),
                c && (c.squareNum = r),
                i > r && c) {
                    var p = this.owner.seekWidgetByName("q_001_map_arrow_" + r)
                      , h = this.owner.seekWidgetByName("q_001_base_way_blue_" + r);
                    p.setVisible(c.is_cleared),
                    h.setVisible(c.is_cleared)
                }
                if (r !== n || u || this.__playSquareAnimation($staticRes(s["quest-q_001-q_001_boss_node"]), _, 0),
                r !== i || u || this.__playSquareAnimation($staticRes(s["quest-q_001-q_001_unknown_node"]), _, 0),
                u) {
                    var g = 60;
                    this.__checkPlaySquareAnimation(c.quest_id) ? (o = !0,
                    this._questClearedAnimationDefer.promise.done(function() {
                        this.__nextQuestShowPopup()
                    }
                    .bind(this)),
                    this.__playSquareAnimation($staticRes(s["quest-q_001-q_001_clear_node"]), _, {
                        start: 0,
                        end: g
                    }, !0).then(function(e) {
                        e.gotoFrameAndPlay(g, g, !0),
                        this._questClearedAnimationDefer.resolve()
                    }
                    .bind(this))) : this.__playSquareAnimation($staticRes(s["quest-q_001-q_001_clear_node"]), _, {
                        start: g,
                        end: g
                    })
                }
            }, this),
            this.__checkShowNextQuestPopup() && o === !1 && this.__nextQuestShowPopup()
        },
        __checkPlaySquareAnimation: function(e) {
            return this.owner.routerParams.quest_cleared_id === e && (this._questInfoData.has_unlocked_quest || this._questInfoData.has_unlocked_area)
        },
        __checkShowNextQuestPopup: function() {
            return this._questInfoData.has_follow_up_quest || this._questInfoData.has_unlocked_quest || this._questInfoData.has_unlocked_area || this._questInfoData.has_completed_last_main_quest || this._questInfoData.has_unverified
        },
        __nextQuestShowPopup: function() {
            !this._questInfoData.has_follow_up_quest || null != this._questInfoData.next_a_quest_id && null != this.__getCurrentQuestData() || (t.createInstance("apiAQuestInfo").confirmFollowUpPopup(),
            this._questInfoData.has_follow_up_quest = !1);
            var e = this.__getCurrentQuestData();
            if (this._questInfoData.has_unlocked_area) {
                var n = this.owner.popups.q_newworld;
                n.open().then(function() {
                    var e = t.createInstance("apiAWorlds");
                    e.getAreas().then(function(e) {
                        this._areas = e.body.a_areas;
                        var i = this.__getNextAreaData()
                          , a = "<p>新しい異世界<br />「" + i.area_name + "」が<br />" + t.w("release") + "されました!</p>";
                        n.setContent(a)
                    }
                    .bind(this))
                }
                .bind(this))
            } else if (this._questInfoData.has_follow_up_quest && !a.isUndefined(e))
                this.owner.popups.q_001_ap_next.open().then(function() {
                    var n = this.owner.seekWidgetByName("synopsis_label")
                      , i = this.owner.popups.q_001_ap_next;
                    i.blueBtn.setEnabled(!0);
                    var s = e.description;
                    e.episodes && e.episodes.length && (s = a.last(e.episodes).description),
                    n.setString(s),
                    i.setTitle(e.quest_num + t.w("chapter") + "「" + e.title + "」"),
                    i._selectQuestData = e,
                    t.createInstance("apiAQuestInfo").confirmFollowUpPopup()
                }
                .bind(this));
            else if (this._questInfoData.has_unlocked_quest) {
                var n = this.owner.popups.q_001_ap_open;
                n.open().then(function() {
                    var e = "<p>新たなクエスト<br />「" + this.__getCurrentQuestData().title + "」が<br />" + t.w("release") + "されました!</p>";
                    n.setContent(e),
                    t.createInstance("apiAQuestInfo").confirmUnlockedQuestPopup()
                }
                .bind(this))
            } else
                this._questInfoData.has_completed_last_main_quest ? this.owner.popups.q_quest_stop.open().then(function() {
                    t.createInstance("apiAQuestInfo").confirmCompletedLastMainQuestPopup()
                }) : this._questInfoData.has_unverified && this.owner.popups.popupExistUnconfirmBattle.open()
        },
        __getCurrentQuestData: function() {
            return a.find(this._mainQuestList, function(e) {
                return this._questInfoData.next_a_quest_id === e.a_quest_id
            }, this)
        },
        __getNextAreaData: function() {
            return a.find(this._areas, function(e) {
                return this._questInfoData.next_a_area_id === e.a_area_id
            }, this)
        },
        __setSquareEndAnimationEvent: function(e, t) {
            var n = new i.Timeline
              , a = new i.EventFrame;
            a.setEvent("endAnimation"),
            a.setFrameIndex(t - 2),
            n.addFrame(a),
            e.addTimeline(n);
            var s = Q.defer();
            return e.setFrameEventCallFunc(function(t) {
                "endAnimation" === t.getEvent() && s.resolve(e)
            }),
            s.promise
        },
        __playSquareAnimation: function(e, t, n, a) {
            var s = i.load($dynamicRes(e));
            s.node.runAction(s.action),
            t.addChild(s.node);
            var o = null ;
            if (a)
                var o = this.__setSquareEndAnimationEvent(s.action, n.end);
            return "object" == typeof n ? s.action.gotoFrameAndPlay(n.start, n.end, !0) : "number" == typeof n && s.action.gotoFrameAndPlay(n, !0),
            s.node.setPosition(t.getSize().width >> 1, t.getSize().height >> 1),
            o
        },
        getEvents: function() {
            var e = {};
            return e
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    e.kh = e.kh || {};
    var t = e.kh
      , n = (e.cc,
    e.ccs,
    e._);
    e.res;
    t.QuestScenePcCommonDelegate = t.QuestSceneCommonDelegate.extend({
        ctor: function() {},
        setMainMoveNextIcon: function(e, t) {
            n.each(t, function(t, n) {
                var i = t.widget
                  , a = t.record
                  , s = i.seekWidgetByName("img_quest_info_icon");
                e.in_progress && e.in_progress.own_quest && a.a_quest_id === e.in_progress.own_quest.a_quest_id && a.type === e.in_progress.own_quest.type ? (s.setVisible(!0),
                s.loadTexture("quest/res/q_icon_quest_now.png", ccui.Widget.PLIST_TEXTURE)) : a.a_quest_id === e.next_a_quest_id && (s.loadTexture("quest/res/q_icon_quest_next.png", ccui.Widget.PLIST_TEXTURE),
                s.setVisible(!0))
            })
        },
        _getMainNewLabelNode: function() {
            return this.owner.seekWidgetByName("btn_main_quest").seekWidgetByName("rest_label")
        },
        _getFreeNewLabelNode: function() {
            return this.owner.seekWidgetByName("btn_free_quest").seekWidgetByName("rest_label")
        },
        _getMainNewLabelBaseNode: function() {
            return this.owner.seekWidgetByName("btn_main_quest").seekWidgetByName("rest_base")
        },
        _getFreeNewLabelBaseNode: function() {
            return this.owner.seekWidgetByName("btn_free_quest").seekWidgetByName("rest_base")
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "Events"
      , s = {
        getQuest: function() {
            return this._http.get({
                url: "/events",
                json: {
                    filter: "quest"
                }
            })
        },
        getRaidEvent: function(e) {
            return this._http.get({
                url: "/events/raid_event/" + e
            })
        },
        getRaidEventNotice: function(e) {
            return this._http.get({
                url: "/events/raid_event_notice/" + e
            })
        },
        getQuestEvent: function(e) {
            return this._http.get({
                url: "/events/quest_event/" + e
            })
        },
        getQuestEventNotice: function(e) {
            return this._http.get({
                url: "/events/quest_event_notice/" + e
            })
        },
        getUnionEvent: function(e) {
            return this._http.get({
                url: "/events/union_event/" + e
            })
        },
        getUnionEventNotice: function(e) {
            return this._http.get({
                url: "/events/union_event_notice/" + e
            })
        },
        getUnionRaidNotice: function(e) {
            return this._http.get({
                url: "/events/union_raid_notice/" + e
            })
        },
        getUnionRaid: function(e) {
            return this._http.get({
                url: "/events/union_raid/" + e
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiEvents",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "ABattles"
      , s = {
        getCheckUserBattlePoint: function(e) {
            return this._http.get({
                url: "/a_battles/" + e
            })
        },
        joinBattle: function(e, t, n, i) {
            return this._http.post({
                url: "/a_battles/" + e,
                json: {
                    support_a_summon_id: t,
                    a_party_id: n,
                    quest_type: i
                }
            })
        },
        getHistoryList: function() {
            return this._http.get({
                url: "/a_battles",
                json: {
                    kind: "history"
                }
            })
        },
        getUnverifiedList: function() {
            return this._http.get({
                url: "/a_battles",
                json: {
                    kind: "unverified"
                }
            })
        },
        getRaidRequestList: function() {
            return this._http.get({
                url: "/a_battles",
                json: {
                    kind: "raid_request"
                }
            })
        },
        getUnionRaidRequestList: function(e, t) {
            return this._http.get({
                url: "/a_battles",
                json: {
                    kind: "event",
                    event_id: e,
                    difficulty: t
                }
            })
        },
        getBattleResult: function(e, t) {
            var n = "/a_battles/" + e + "/result";
            return this._http.post({
                url: n,
                json: {
                    quest_type: t
                }
            })
        },
        battleResult: function(e, t) {
            var n = "/a_battles/" + e + "/result";
            return this._http.get({
                url: n,
                json: {
                    quest_type: t
                }
            })
        },
        getRanking: function(e, t) {
            var n = "/a_battles/" + e + "/ranking";
            return this._http.get({
                url: n,
                json: {
                    quest_type: t
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiABattles",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        },
        _createStartParam: function(e) {
            var t = this._urls.START;
            return {
                url: t,
                json: {
                    quest_type: e
                }
            }
        },
        _createUseItemParam: function(e, t, n) {
            var i = {
                url: "/" + t + "/use"
            };
            return null != n ? i.json = {
                quest_type: e,
                chara_pos: n
            } : i.json = {
                quest_type: e
            },
            i
        },
        _createAttackParam: function(e, t, n) {
            var i = this._urls.ATTACK;
            return {
                url: i,
                json: {
                    quest_type: e,
                    burst_button_enabled: t,
                    target: n
                }
            }
        },
        _createAttackSummonParam: function(e, t) {
            var n = this._urls.SUMMON_ATTACK;
            return {
                url: n,
                json: {
                    quest_type: e,
                    summon_pos: t
                }
            }
        },
        _createAbilityParam: function(e, t, n, i) {
            var a = this._urls.ABILITY;
            return {
                url: a,
                json: {
                    quest_type: e,
                    chara_pos: t,
                    ability_pos: n,
                    target: i
                }
            }
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AQuests"
      , s = {
        getQuest: function(e, t) {
            return this._http.get({
                url: ["/a_quests", e].join("/"),
                json: {
                    type: t
                }
            })
        },
        startQuest: function(e, t, n, i, a) {
            var s = {
                type: t,
                a_party_id: n,
                support_a_summon_id: i
            };
            return void 0 !== a && (s.episode_num = a),
            this._http.post({
                url: ["/a_quests", e, "start"].join("/"),
                json: s
            })
        },
        getNextState: function(e, t) {
            return this._http.post({
                url: ["/a_quests", e, "next_state"].join("/"),
                json: {
                    type: t
                }
            })
        },
        getCurrentState: function(e, t) {
            return this._http.get({
                url: "/a_quests/" + e + "/current_state",
                json: {
                    type: t
                }
            })
        },
        getGainedItems: function(e, t) {
            return this._http.get({
                url: ["/a_quests", e, "gained_items"].join("/"),
                json: {
                    type: t
                }
            })
        },
        giveupQuest: function(e, t) {
            return this._http.post({
                url: ["/a_quests", e, "giveup"].join("/"),
                json: {
                    type: t
                }
            })
        },
        getListSpecialQuest: function() {
            return this._http.get({
                url: "/a_quests",
                json: {
                    type: "special"
                }
            })
        },
        getListEventQuest: function(e) {
            return this._http.get({
                url: "/a_quests",
                json: {
                    type: "event",
                    event_id: e
                }
            })
        },
        getCheckUserAP: function(e, t) {
            return this._http.get({
                url: "/a_quests/" + e + "/check_user_ap",
                json: {
                    type: t
                }
            })
        },
        getUnconfirmedHaremEpisodes: function(e, t) {
            return this._http.get({
                url: "/a_quests",
                json: {
                    type: "harem",
                    unconfirmed: !0,
                    page: e,
                    per_page: t
                }
            })
        },
        getListHaremByCharacter: function(e) {
            return this._http.get({
                url: "/a_quests",
                json: {
                    type: "harem-character",
                    character_id: e
                }
            })
        },
        getListHaremBySummon: function(e) {
            return this._http.get({
                url: "/a_quests",
                json: {
                    type: "harem-summon",
                    summon_id: e
                }
            })
        },
        getListHaremByJob: function(e) {
            return this._http.get({
                url: "/a_quests",
                json: {
                    type: "harem-job",
                    job_id: e
                }
            })
        }
    };
    n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAQuests",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s));
    var o = ["TutorialApi"];
    n.env.useApiMock && o.push("MockApi"),
    t.each(o, function(e) {
        n[e] = n[e] || {};
        var o = {};
        t.each(s, function(t, i) {
            o[i] = function() {
                if (!n[e])
                    throw "kh." + e + "is not defined";
                if (!n[e][a][i + "JSON"])
                    throw "not implemented: kh." + e + "." + a + "." + i;
                var t = Q.defer();
                return t.resolve({
                    body: n[e][a][i + "JSON"].apply(this, arguments)
                }),
                t.promise
            }
        }),
        n[e][a] = i.Class.extend(t.assign({}, o))
    });
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, n) {
            n += "JSON";
            var i = "mock"
              , s = "tutorialMock";
            t.each([i, s], function(e) {
                var t = "./" + e + "/" + n + ".js";
                if (c.existsSync(t))
                    return void console.log("skip: file exists: " + t);
                console.log("generate: " + t);
                var i = u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, n);
                e === s && (i = i.replace(/MockApi/g, "TutorialApi")),
                c.writeFileSync(t, i)
            })
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AAreas"
      , s = {
        getMainQuestsInCurrentArea: function() {
            return this._http.get({
                url: "/a_areas/current/quests",
                json: {
                    type: "main"
                }
            })
        },
        getFreeQuestsInCurrentArea: function() {
            return this._http.get({
                url: "/a_areas/current/quests",
                json: {
                    type: "free"
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAAreas",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AFriendOffers"
      , s = {
        makeOffer: function(e) {
            return this._http.post({
                url: "/a_friend_offers",
                json: {
                    from_player_id: "me",
                    to_player_id: e
                }
            })
        },
        getList: function(e, t, n) {
            return this._http.get({
                url: "/a_friend_offers",
                json: {
                    type: e,
                    page: t,
                    per_page: n
                }
            })
        },
        deleteOffers: function(e) {
            return this._http.del({
                url: "/a_friend_offers",
                json: {
                    ids: e
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAFriendOffers",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AItems"
      , s = {
        getApGain: function() {
            return this._http.get({
                url: "/a_items",
                json: {
                    type: "ap_gain"
                }
            })
        },
        getBpGain: function() {
            return this._http.get({
                url: "/a_items",
                json: {
                    type: "bp_gain"
                }
            })
        },
        getCure: function(e, t) {
            return this._http.get({
                url: "/a_items",
                json: {
                    type: "cure",
                    page: e,
                    per_page: t
                }
            })
        },
        getEvolution: function() {
            return this._http.get({
                url: "/a_items",
                json: {
                    type: "evolution"
                }
            })
        },
        getTreasure: function(e, t) {
            return this._http.get({
                url: "/a_items",
                json: {
                    type: "treasure",
                    page: e,
                    per_page: t
                }
            })
        },
        getTicket: function(e, t) {
            return this._http.get({
                url: "/a_items",
                json: {
                    type: "ticket",
                    page: e,
                    per_page: t,
                    zero_omit: !0
                }
            })
        },
        useItem: function(e, t) {
            return t = t || 1,
            this._http.post({
                url: ["/a_items", e, "use"].join("/"),
                json: {
                    num: t
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAItems",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }, o),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "ASummons"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/a_summons/" + e
            })
        },
        lock: function(e) {
            return this._http.put({
                url: "/a_summons/" + e,
                json: {
                    is_locked: !0
                }
            })
        },
        unlock: function(e) {
            return this._http.put({
                url: "/a_summons/" + e,
                json: {
                    is_locked: !1
                }
            })
        },
        getList: function(e, t) {
            return this._http.get({
                url: "/a_summons/",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        getListEnhanceBase: function(e, t, n) {
            return this._http.get({
                url: "/a_summons",
                json: {
                    selectable_base_filter: "enhance",
                    sort: e,
                    page: t,
                    per_page: n
                }
            })
        },
        getEnhanceMaterials: function(e, t, n) {
            return this._http.get({
                url: "/a_summons/" + e + "/enhance_materials",
                json: {
                    page: t,
                    per_page: n
                }
            })
        },
        getRecommendEnhanceMaterials: function(e) {
            return this._http.get({
                url: "/a_summons/" + e + "/recommend_enhance_materials"
            })
        },
        confirmEnhanceMaterials: function(e, t) {
            return this._http.get({
                url: "/a_summons/" + e + "/confirm_enhance_materials",
                json: {
                    ids: t
                }
            })
        },
        enhance: function(e, t) {
            return this._http.post({
                url: "/a_summons/" + e + "/enhance",
                json: {
                    ids: t
                }
            })
        },
        getListEvolveBase: function(e, t, n) {
            return this._http.get({
                url: "/a_summons",
                json: {
                    selectable_base_filter: "evolve",
                    sort: e,
                    page: t,
                    per_page: n
                }
            })
        },
        getEvolveMaterials: function(e, t, n) {
            return this._http.get({
                url: "/a_summons/" + e + "/evolve_materials",
                json: {
                    page: t,
                    per_page: n
                }
            })
        },
        confirmEvolveMaterial: function(e, t) {
            return this._http.get({
                url: "/a_summons/" + e + "/confirm_evolve_material",
                json: {
                    id: t
                }
            })
        },
        evolve: function(e, t) {
            return this._http.post({
                url: "/a_summons/" + e + "/evolve",
                json: {
                    id: t
                }
            })
        },
        getSupporterInfo: function(e) {
            return this._http.get({
                url: "/a_summons/supporters/" + e
            })
        },
        getSupporters: function() {
            return this._http.get({
                url: "/a_summons/supporters"
            })
        },
        confirmSellPrice: function(e) {
            return this._http.get({
                url: "/a_summons_sale_selection",
                json: {
                    ids: e
                }
            })
        },
        sell: function(e) {
            return this._http.post({
                url: "/a_summons_sale",
                json: {
                    ids: e
                }
            })
        },
        getSellableList: function(e, t) {
            return this._http.get({
                url: "/a_summons",
                json: {
                    selectable_base_filter: "sellable",
                    page: e,
                    per_page: t
                }
            })
        },
        getRecommendSellableList: function() {
            return this._http.get({
                url: "/a_summons",
                json: {
                    sale_recommended: !0
                }
            })
        },
        getEnhanceEvolveInfo: function(e) {
            return this._http.get({
                url: "/a_summons/" + e + "/enhance_evolve_info"
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiASummons",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "Shop"
      , s = "/shop/"
      , o = {
        getEvents: function(e) {
            return this._http.get({
                url: s + "events/" + e
            })
        },
        getGoodsPointHeal: function(e, t) {
            return this._http.get({
                url: s + "goods",
                json: {
                    currency: "point",
                    item_type: "heal",
                    page: e,
                    per_page: t
                }
            })
        },
        getGoodsPointExtension: function(e, t) {
            return this._http.get({
                url: s + "goods",
                json: {
                    currency: "point",
                    item_type: "extension",
                    page: e,
                    per_page: t
                }
            })
        },
        getGoodsStoneHeal: function(e, t) {
            return this._http.get({
                url: s + "goods",
                json: {
                    currency: "stone",
                    item_type: "heal",
                    page: e,
                    per_page: t
                }
            })
        },
        getGoodsStoneExtension: function(e, t) {
            return this._http.get({
                url: s + "goods",
                json: {
                    currency: "stone",
                    item_type: "extension",
                    page: e,
                    per_page: t
                }
            })
        },
        getGoodsStoneContinue: function() {
            return this._http.get({
                url: s + "goods",
                json: {
                    item_type: "continue",
                    currency: "stone"
                }
            })
        },
        getGoodsPointContinue: function() {
            return this._http.get({
                url: s + "goods",
                json: {
                    item_type: "continue",
                    currency: "point"
                }
            })
        },
        getGoodsPointApGain: function() {
            return this._http.get({
                url: s + "goods",
                json: {
                    item_type: "ap_gain",
                    currency: "point"
                }
            })
        },
        getGoodsStoneApGain: function() {
            return this._http.get({
                url: s + "goods",
                json: {
                    item_type: "ap_gain",
                    currency: "stone"
                }
            })
        },
        getGoodsPointBpGain: function() {
            return this._http.get({
                url: s + "goods",
                json: {
                    item_type: "bp_gain",
                    currency: "point"
                }
            })
        },
        getGoodsStoneBpGain: function() {
            return this._http.get({
                url: s + "goods",
                json: {
                    item_type: "bp_gain",
                    currency: "stone"
                }
            })
        },
        getTreasuresItemEquipment: function(e, t) {
            return this._http.get({
                url: s + "treasures",
                json: {
                    type: "item_equipment",
                    page: e,
                    per_page: t
                }
            })
        },
        getTreasuresTreasure: function(e, t) {
            return this._http.get({
                url: s + "treasures",
                json: {
                    type: "treasure",
                    page: e,
                    per_page: t
                }
            })
        },
        getTreasuresDragonEye: function(e, t) {
            return this._http.get({
                url: s + "treasures",
                json: {
                    type: "dragon_eye",
                    page: e,
                    per_page: t
                }
            })
        },
        getTreasuresByEventId: function(e, t, n) {
            var i = {
                event_id: e
            };
            return t && (i.page = t),
            n && (i.per_page = n),
            this._http.get({
                url: s + "treasures",
                json: i
            })
        },
        buy: function(e, t, n) {
            return this._http.post({
                url: s + "buy",
                json: {
                    shop_item_id: e,
                    num: t,
                    currency: n
                }
            })
        },
        exchangeItemEquipment: function(e, t) {
            return this._http.post({
                url: s + "exchange",
                json: {
                    shop_treasure_id: e,
                    shop_type: "item_equipment",
                    num: t
                }
            })
        },
        exchangeTreasure: function(e, t) {
            return this._http.post({
                url: s + "exchange",
                json: {
                    shop_treasure_id: e,
                    shop_type: "treasure",
                    num: t
                }
            })
        },
        exchangeDragonEye: function(e, t) {
            return this._http.post({
                url: s + "exchange",
                json: {
                    shop_treasure_id: e,
                    shop_type: "dragon_eye",
                    num: t
                }
            })
        },
        exchangeEvent: function(e, t, n) {
            return this._http.post({
                url: s + "exchange",
                json: {
                    shop_treasure_id: e,
                    shop_type: "event",
                    event_id: n,
                    num: t
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiShop",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, o)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var r = {};
        t.each(o, function(e, t) {
            r[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, r))
    }
    var c = "undefined" != typeof process && "undefined" != typeof require;
    if (c) {
        var u = require("fs")
          , _ = u.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(o, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return u.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void u.writeFileSync(n, _.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "ShopBuyResult"
      , s = "/shop_buy_result"
      , o = {
        put: function(e) {
            return this._http.put({
                url: s,
                json: {
                    payment_id: e
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiShopBuyResult",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, o)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var r = {};
        t.each(o, function(e, t) {
            r[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, r))
    }
    var c = "undefined" != typeof process && "undefined" != typeof require;
    if (c) {
        var u = require("fs")
          , _ = u.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(o, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return u.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void u.writeFileSync(n, _.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "Summons"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/summons/" + e
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiSummons",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "Weapons"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/weapons/" + e
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiWeapons",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "Items"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/items/" + e
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiItems",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc;
    e._;
    t.BurstTimeCountDownPanel = n.Node.extend({
        UPDATE_INTERVAL: .5,
        _timerId: null ,
        _widget: null ,
        _label: null ,
        _khBurstTime: null ,
        show: function() {
            var e = n.director.getRunningScene();
            e.addChild(this),
            this._widget = e.seekWidgetByName("bursttime_remaining_ui"),
            this._widget.setVisible(!1),
            this._label = e.seekWidgetByName("bursttime_remaining_label"),
            this._khBurstTime = t.createInstance("burstTime"),
            this._khBurstTime.prepare().then(this._initWidget.bind(this))
        },
        _initWidget: function() {
            this._khBurstTime.isEnabled() && this._khBurstTime.isInBurstTime() && (this._updateCount(),
            this._startCountDown(),
            this._widget.setVisible(!0),
            t.env.isSp || this._widget.addChild(new n.Sprite))
        },
        _updateCount: function() {
            var e = this._khBurstTime.getRemainingTime();
            this._label.setString(e)
        },
        _startCountDown: function() {
            this.schedule(this._updateCount, this.UPDATE_INTERVAL)
        },
        _stopCountDown: function() {
            this.unschedule(this._updateCount)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComApRestart = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_ap_restart",
            title: "クエスト再開",
            buttonLabels: {
                blackBtn: "キャンセル"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            var i = {};
            i.questTitle = t.questTitle || "クエストタイトル",
            i.type = "raid" === t.questType ? "レイドバトル" : "クエスト",
            e.setStrings({
                confirm_label: "進行中のクエストがあります\n{{type}}「{{questTitle}}」".replace(/{{([^}]+)}}/g, function(e, t) {
                    return i[t]
                })
            }),
            n.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_withdrawal": function() {
                    e.dismiss().then(function() {
                        this._showPopupComBackCheck(t.aQuestId, t.questType)
                    }
                    .bind(this))
                },
                "TOUCH_ENDED btn_restart": function() {
                    e.dismiss().then(function() {
                        this._gotoQuest(t.aQuestId, t.questType)
                    }
                    .bind(this))
                }
            }, this);
            var a = e.seekWidgetByName("btn_restart");
            a.setSoundEnabled(!0),
            a.setSound(n.SoundList.BUTTON_TOUCHED_CONFIRMED)
        },
        _showPopupComBackCheck: function(t, i) {
            n.createInstance("apiAQuests").getGainedItems(t, i).then(function(e) {
                var a = e.body.gained_items
                  , s = n.createInstance("popupFactoryComBackCheck").create({});
                console.log("bachCkeck", t, i),
                s.open({
                    type: i,
                    coin: a.gem,
                    normal: a.wooden_box,
                    silver: a.silver_box,
                    gold: a.golden_box,
                    rainbow: a.rainbow_box,
                    needToOpenComBackResult: !0,
                    aQuestId: t,
                    questType: i
                })
            }).fail(function(t) {
                e.console.error(t)
            })
        },
        _gotoQuest: function(e, t) {
            n.createInstance("questStateManager").restartQuest(e, t)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComBackCheck = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_back_check",
            title: "リタイア確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                redBtn: "リタイア"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss().then(this.onCancel)
                },
                redBtn: function() {
                    var t = n.createInstance("apiAQuests");
                    t.giveupQuest(this.aQuestId, this.questType).then(function(t) {
                        this.dismiss().then(function() {
                            if (this.needToOpenComBackResult) {
                                var e = n.createInstance("popupFactoryComBackResult").create({});
                                e.open({
                                    type: this.questType
                                })
                            } else
                                n.createInstance("router").navigate("quest")
                        }
                        .bind(this)).fail(function(t) {
                            e.console.error(t)
                        })
                    }
                    .bind(this)).fail(function(t) {
                        e.console.error(t)
                    })
                }
            },
            buttonSounds: {
                redBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED
            }
        },
        typeDictionary: {
            coin: "gem",
            normal: "bronze",
            silver: "silver",
            gold: "gold",
            rainbow: "rainbow"
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, n) {
            var i = n.type;
            "raid" === i && e.setStrings({
                confirm_label: e.seekWidgetByName("confirm_label").getString().replace("クエスト", "レイドバトル")
            }),
            t.each(t.keys(this.typeDictionary), function(t) {
                e.seekWidgetByName("{{type}}_no_label".replace(/{{type}}/, this.typeDictionary[t])).setString((n[t] || 0).toString())
            }
            .bind(this)),
            e.needToOpenComBackResult = n.needToOpenComBackResult || !1,
            e.aQuestId = n.aQuestId,
            e.questType = n.questType,
            e.type = i,
            e.onCancel = n.onCancel || function() {}
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComBackResult = n.PopupFactoryTextOnly.extend({
        POPUP_PROPERTIES: {
            title: "クエストリタイア",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    var e = cc.director.getRunningScene();
                    (e._delegate.update || function() {}
                    )(),
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        WIDGET_NAMES: {},
        onPopupOpened: function(e, t) {
            var n = "raid" === t.type ? "レイドバトル" : "クエスト";
            e.setContent("{{type}}からリタイアしました".replace(/{{type}}/, n))
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryTextOnly.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComNeedApBp = cc.Class.extend({
        POPUP_TYPES: {
            UNDEFINED: 0,
            HAS_RECOVERY_ITEMS: 1,
            NO_RECOVERY_ITEMS: 2
        },
        ctor: function() {
            this._popupType = this.POPUP_TYPES.UNDEFINED,
            this._instances = {}
        },
        create: function(e) {
            var t = this._cacheParams(e)
              , n = this._getItemInfo(t.property, t.items.data)
              , i = this._getCurrentQuestPoints(t.property, t.questPoints)
              , a = this._getMaxQuestPoints(t.property, t.questPoints);
            return this._updatePopupType(n),
            this._popupParams = this._getPopupParams(n, i, a),
            this._instantiate()
        },
        getPopupParams: function() {
            return this._popupParams || {}
        },
        cleanup: function() {
            this._instances = {},
            this._popupParams = null ,
            this._params = null
        },
        _cacheParams: function(e) {
            return this._params = t.assign(this._params || {}, e),
            this._params
        },
        _instantiate: function(e) {
            if (this._popupType === this.POPUP_TYPES.UNDEFINED)
                return console.warn("KHPopupFactoryComNeedApBp._instantiate: popup data not properly initialized, please check the params passed to the create method."),
                {};
            if (this._instances[this._popupType])
                return this._instances[this._popupType];
            var i = n.createInstance("popupFactoryComNeedApBp" + this._popupType).create({});
            return i.open = function(e) {
                return function(i) {
                    var a = n.createInstance("popupFactoryComNeedApBp").getPopupParams();
                    return e.call(this, t.assign(a, i || {}))
                }
            }(i.open),
            this._instances[this._popupType] = i,
            i
        },
        _getPopupParams: function(e, t, n) {
            return {
                property: this._params.property,
                questTitle: this._params.questTitle,
                item: e.fullRecoveryItem,
                itemLittleRecover: e.halfRecoveryItem,
                component: this._params.component,
                currentQuestPoints: t,
                maxQuestPoints: n,
                onUse: this._params.onUse
            }
        },
        _getMaxQuestPoints: function(e, t) {
            return "AP" === e ? t.max_ap : t.max_bp
        },
        _getCurrentQuestPoints: function(e, t) {
            return "AP" === e ? t.ap : t.bp
        },
        _updatePopupType: function(e) {
            0 === e.fullRecoveryItem.num && 0 === e.halfRecoveryItem.num ? this._popupType = this.POPUP_TYPES.NO_RECOVERY_ITEMS : this._popupType = this.POPUP_TYPES.HAS_RECOVERY_ITEMS
        },
        _getItemInfo: function(e, i) {
            var a = t.find(i, function(t) {
                return t.name === n.w("AP" === e ? "elixir" : "energyLeaf")
            })
              , s = t.find(i, function(t) {
                return t.name === n.w("AP" === e ? "elixirHalf" : "energySeed")
            });
            return {
                fullRecoveryItem: a,
                halfRecoveryItem: s
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComNeedApBp1 = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_need_ap_bp_1",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "使用する"
            },
            buttons: {
                blackBtn: function() {
                    this.cleanUp().then(this.dismiss.bind(this))
                },
                blueBtn: function() {
                    this._useItems(),
                    this.cleanUp().then(this.dismiss.bind(this))
                }
            }
        },
        WIDGET_NAMES: {
            FULL: {
                POINTS_BEFORE_AFTER: "comp_recovery_use_labelimg",
                ITEMS_BEFORE_AFTER: "comp_recovery_have_labelimg"
            },
            HALF: {
                POINTS_BEFORE_AFTER: "harf_recovery_use_labelimg",
                ITEMS_BEFORE_AFTER: "harf_recovery_have_labelimg"
            }
        },
        POPUP_METHODS: {
            setItemFull: function(e) {
                this._itemFull = e
            },
            setItemHalf: function(e) {
                this._itemHalf = e
            },
            setCurrentQuestPoints: function(e) {
                this._currentQuestPoints = e
            },
            setMaxQuestPoints: function(e) {
                this._maxQuestPoints = e
            },
            setQuestPointType: function(e) {
                this._questPointType = e
            },
            createPulldowns: function() {
                this._createPulldownFull(),
                this._createPulldownHalf()
            },
            onUse: function(e) {
                this._onUse = e
            },
            cleanUp: function() {
                return this._pulldownFull.releaseMenu(),
                this._pulldownHalf.releaseMenu(),
                Q.all(t(this.WIDGET_NAMES.FULL).values().concat(t.values(this.WIDGET_NAMES.HALF)).map(function(e) {
                    var t = {};
                    return t[e] = "",
                    this.setHtmlStrings(t, n.GameConfig.POPUP_CSS)
                }, this).value())
            },
            _setBeforeAndAfterCount: function(e, t, i) {
                var a = {};
                return a[this.WIDGET_NAMES[i].ITEMS_BEFORE_AFTER] = this._generateAmountBoxContent(e, t),
                this.setHtmlStrings(a, n.GameConfig.POPUP_CSS)
            },
            _setBeforeAndAfterQuestPoint: function(e, t, i) {
                var a = {};
                return a[this.WIDGET_NAMES[i].POINTS_BEFORE_AFTER] = this._generateAmountBoxContent(e, t),
                this.setHtmlStrings(a, n.GameConfig.POPUP_CSS)
            },
            _generateAmountBoxContent: function(e, t) {
                return '<table class="nb"><tr><td class="numbox_middle_mini"><span class="white">' + e + '&rarr;</span><span class="' + this._getAmountAfterTextColor(e, t) + '">' + t + "</span></td></tr></table>"
            },
            _getAmountAfterTextColor: function(e, t) {
                return t > e ? "yellow" : e > t ? "red" : "white"
            },
            _getMaxPossibleItemUses: function(e) {
                var t = this._maxQuestPoints - this._currentQuestPoints
                  , n = Math.ceil(t / this._getItemRecoveryValue(e));
                return Math.min(n, e.num)
            },
            _getPulldownChoices: function(e) {
                return t.map(t.range(this._getMaxPossibleItemUses(e) + 1), function(e) {
                    return {
                        text: e.toString(),
                        value: e
                    }
                })
            },
            _createPulldownFull: function() {
                this._pulldownFull = this._createPulldown(this.seekWidgetByPath("group_panel_0.btn_pulldown"), this._getPulldownChoices(this._itemFull), this._onPulldownSelectFull, this)
            },
            _createPulldownHalf: function() {
                this._pulldownHalf = this._createPulldown(this.seekWidgetByPath("group_panel_1.btn_pulldown"), this._getPulldownChoices(this._itemHalf), this._onPulldownSelectHalf, this)
            },
            _createPulldown: function(e, t, i, a) {
                var s = e.seekWidgetByName("amount_label")
                  , o = new n.Pulldown({
                    button: e,
                    label: s,
                    menuBase: !0,
                    choice: !0
                },t);
                return o.onChange(i, a),
                o.selectValue(0),
                o
            },
            _onPulldownSelectFull: function(e) {
                this._onPulldownSelect(e, "FULL")
            },
            _onPulldownSelectHalf: function(e) {
                this._onPulldownSelect(e, "HALF")
            },
            _onPulldownSelect: function(e, t) {
                var n = "FULL" === t ? this._itemFull : this._itemHalf
                  , i = 0 === e.value
                  , a = "FULL" === t ? this._pulldownHalf : this._pulldownFull;
                this._setItemSelectedNumber(e.value, t),
                this._setBeforeAndAfterCount(n.num, n.num - e.value, t),
                this._setBeforeAndAfterQuestPoint(this._currentQuestPoints, this._getQuestPointsAfter(e.value, n), t),
                i || a.selectValue(0),
                this._updateButtonStatus()
            },
            _setItemSelectedNumber: function(e, t) {
                "FULL" === t ? this._itemFullSelected = e : this._itemHalfSelected = e
            },
            _getItemRecoveryValue: function(e) {
                return e.recovery_amount - this._currentQuestPoints
            },
            _getQuestPointsAfter: function(e, t) {
                return this._currentQuestPoints + e * this._getItemRecoveryValue(t)
            },
            _updateButtonStatus: function() {
                var e = this._itemFullSelected + this._itemHalfSelected > 0;
                n.pc.roles.UIUtility._setEnableButton(this.blueBtn, e)
            },
            _useItems: function() {
                var t = this._getSelectedItemInfo()
                  , i = this._getSelectedItemAmount()
                  , a = t.a_item_id
                  , s = {
                    item: t,
                    beforeAP: this._currentQuestPoints,
                    onUse: this._onUse
                };
                return n.createInstance("apiAItems").useItem(a, i).then(function(e) {
                    return s.countBefore = e.body.num + i,
                    s.count = e.body.num,
                    this._updateQuestPoints()
                }
                .bind(this)).then(function(e) {
                    s.afterAP = e[this._questPointType.toLowerCase()];
                    var t = n.createInstance("popupFactoryComUseResult").create({});
                    return t.open(s)
                }
                .bind(this)).fail(function(t) {
                    e.console.error(t)
                })
            },
            _getSelectedItemInfo: function() {
                return this._itemFullSelected > this._itemHalfSelected ? this._itemFull : this._itemHalf
            },
            _getSelectedItemAmount: function() {
                return this._itemFullSelected || this._itemHalfSelected
            },
            _updateQuestPoints: function() {
                var e = cc.director.getRunningScene();
                return e._delegate && t.isFunction(e._delegate.updateQuestPoints) ? e._delegate.updateQuestPoints() : e.headerDelegate && t.isFunction(e.headerDelegate.updateQuestPoints) ? e.headerDelegate.updateQuestPoints() : Q.reject("KHPopupFactoryComNeedApBp1._updateQuestPoints: no quest point updater found")
            }
        },
        onPopupOpened: function(e, i) {
            e.WIDGET_NAMES = this.WIDGET_NAMES,
            e.BUTTON_FRAME_NAMES = this.BUTTON_FRAME_NAMES;
            var a = (i.property || "bp").toUpperCase()
              , s = i.questTitle || "クエストタイトル"
              , o = i.item || {}
              , r = i.itemLittleRecover || {};
            e.setItemFull(o),
            e.setItemHalf(r),
            e.setQuestPointType(a),
            e.setCurrentQuestPoints(i.currentQuestPoints),
            e.setMaxQuestPoints(i.maxQuestPoints),
            e.onUse(i.onUse),
            e.createPulldowns(),
            e.loadTextures({
                comp_recovery_img: n.Img("corecard", "item", t.padZero(o.item_id, 4)).jpg,
                harf_recovery_img: n.Img("corecard", "item", t.padZero(r.item_id, 4)).jpg
            });
            var c = new RegExp("{{([^}]+)}}","g")
              , u = function(e) {
                return function(t, n) {
                    return e[n]
                }
            };
            e.setTitle("{{property}}が足りません！".replace(c, u({
                property: a
            })));
            e.setHtmlStrings({
                none_labelimg: '「{{questTitle}}」を開始するには<br /><span class="red">{{property}}が足りません。</span><br />アイテムを使用して{{property}}を回復しますか？'.replace(c, u({
                    questTitle: s,
                    property: a
                }))
            }, n.GameConfig.POPUP_CSS);
            o.count <= 0 && e.seekWidgetByName("comp_recovery_img").setColor(cc.color("#808080")),
            r.count <= 0 && e.seekWidgetByName("harf_recovery_img").setColor(cc.color("#808080")),
            e.setStrings({
                comp_recovery_label: o.name,
                harf_recovery_label: r.name
            })
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.console;
    n.PopupFactoryComNeedApBp2 = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_need_ap_bp_2",
            title: "APが足りません！",
            buttonLabels: {
                blackBtn: "キャンセル"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, i) {
            this.popup = e;
            var a = (i.property || "bp").toUpperCase()
              , s = i.questTitle || "クエストタイトル"
              , o = i.item || {}
              , r = i.itemLittleRecover || {}
              , c = i.component
              , u = i.navigateOnly || !1;
            this._property = a,
            n.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_stone_chenge": function() {
                    this.popup.setVisible(!1),
                    this._exchangeWithStone(i, o, u)
                },
                "TOUCH_ENDED btn_shop": function() {
                    this.popup.setVisible(!1),
                    this._gotoShop(a, c, u)
                }
            }, this),
            e.loadTextures({
                comp_recovery_img: n.Img("corecard", "item", t.padZero(o.item_id, 4)).jpg,
                harf_recovery_img: n.Img("corecard", "item", t.padZero(r.item_id, 4)).jpg
            });
            var _ = new RegExp("{{([^}]+)}}","g")
              , l = function(e) {
                return function(t, n) {
                    return e[n]
                }
            };
            e.setTitle("{{property}}が足りません！".replace(_, l({
                property: a
            }))),
            e.setHtmlStrings({
                none_labelimg: '「{{questTitle}}」を開始するには<br /><span class="red">{{property}}が足りません。</span><br />{{item}}を使用すると{{property}}を最大まで回復できます。'.replace(_, l({
                    questTitle: s,
                    item: "AP" === a ? n.w("elixir") : n.w("energyLeaf"),
                    property: a
                }))
            }, n.GameConfig.POPUP_CSS),
            e.setStrings({
                comp_recovery_label: o.name,
                harf_recovery_label: r.name
            })
        },
        _exchangeWithStone: function(e, t, i) {
            return i ? void n.createInstance("router").navigate("shop/sh_003") : void n.createInstance("apiAPlayers").getCurrency().then(function(i) {
                var a = i.body;
                a.stone < 100 ? n.createInstance("popupFactoryNeedStone").create({}).open({
                    stone: a.stone,
                    name: t.name,
                    onClose: function() {
                        this.popup.setVisible(!0)
                    }
                    .bind(this)
                }) : n.createInstance("apiShop")["AP" === e.property ? "getGoodsStoneApGain" : "getGoodsStoneBpGain"]().then(function(e) {
                    var t = e.body.data[0]
                      , i = n.createInstance("popupFactoryStoneCheck").create({})
                      , s = this._getBuyCheckPopupParameters(t);
                    s.stones = t.stones,
                    s.currency = a,
                    i.open(s)
                }
                .bind(this))
            }
            .bind(this))
        },
        _gotoShop: function(e, t, a) {
            return a ? void n.createInstance("router").navigate("shop/sh_002") : void n.createInstance("apiShop")["AP" === e ? "getGoodsPointApGain" : "getGoodsPointBpGain"]().then(function(e) {
                var i = e.body.data[0]
                  , a = n.createInstance("popupFactoryBuyCheck").create({})
                  , s = this._getBuyCheckPopupParameters(i);
                s.price = i.price,
                s.options = {
                    component: t
                },
                a.open(s)
            }
            .bind(this)).fail(function(e) {
                i.error(e)
            })
        },
        _getBuyCheckPopupParameters: function(e) {
            var t = {};
            return t.name = e.name,
            t.description = e.description,
            t.shop_item_id = e.shop_item_id,
            t.buy_max_num = e.buy_max_num,
            t.onClose = function() {
                this.popup.setVisible(!0)
            }
            .bind(this),
            t.onBuy = this._onBuyCallback.bind(this),
            t
        },
        _onBuyCallback: function() {
            Q.all([n.createInstance("apiAItems")["get" + ("AP" === this._property ? "Ap" : "Bp") + "Gain"](), this.popup.dismiss()]).spread(function(e) {
                n.createInstance("popupFactoryComNeedApBp").create({
                    items: e.body
                }).open()
            }
            .bind(this)).fail(function(e) {
                i.error(e && e.stack ? e.stack : e)
            })
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComRaidCheck = n.PopupFactoryTextOnly.extend({
        POPUP_PROPERTIES: {
            title: "未確認バトルがあります",
            content: '<span class="red">結果が未確認のレイドバトルがあります</span>',
            buttonLabels: {
                blueBtn: "確認する",
                blackBtn: "キャンセル"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss().then(function() {
                        n.createInstance("router").navigate("quest/q_007")
                    })
                },
                blackBtn: function() {
                    this.dismiss()
                }
            },
            buttonSounds: {
                blueBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED
            }
        },
        POPUP_METHODS: {},
        _addMethodsToPopup: function(e) {
            n.PopupFactoryTextOnly.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComUseResult = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_use_result",
            title: "アイテム使用完了",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss().then(function() {
                        return t.isFunction(this._onUse) ? this._onUse(this._afterQuestPoints) : void n.createInstance("sceneManager").reloadScene()
                    }
                    .bind(this))
                }
            },
            buttonSounds: {
                blueBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, i) {
            var a = i.item || {}
              , s = i.count
              , o = null != i.countBefore ? i.countBefore : s + 1
              , r = "ap_gain" === i.item.type ? !0 : !1
              , c = i.beforeAP
              , u = i.afterAP
              , _ = new RegExp("{{([^}]+)}}","g")
              , l = function(e) {
                return function(t, n) {
                    return e[n]
                }
            };
            e._onUse = i.onUse,
            e._afterQuestPoints = u;
            var d = '<table class="nb"><tr><td class="numbox_middle_mini"><span class="white">{{before}}&rarr;</span><span class="yellow">{{after}}</span></td></tr></table>';
            e.setHtmlStrings({
                ap_bp_labelimg: d.replace(_, l({
                    before: c,
                    after: u
                })),
                have_labelimg: d.replace(_, l({
                    before: o,
                    after: s
                }))
            }, n.GameConfig.POPUP_CSS),
            e.loadTextures({
                elixir_or_elixir_half_img: n.Img("corecard", "item", t.padZero(a.item_id, 4)).jpg
            }),
            e.setStrings({
                ap_bp_heal_label: r ? "APを回復しました。" : "BPを回復しました。",
                elixir_or_elixir_half_have_label: "{{item}}\n所持数".replace(_, l({
                    item: a.name
                }))
            })
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComQuestInfo = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-q_info",
            title: "クエスト情報",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttonSounds: {
                blueBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED
            },
            buttons: {
                blueBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        WIDGET_NAMES: {},
        POPUP_METHODS: {},
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        },
        onPopupOpened: function(e, t) {
            console.log(e, t),
            e.seekWidgetByName("title_label").setString(t.title),
            e.seekWidgetByName("synopsis_label").setString(t.description),
            e.seekWidgetByName("condition_label").setString(t.start_condition)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    e.cc,
    e.ccui;
    n.PopupFactoryBuyCheck = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-sh_buy_check",
            title: "購入確認",
            buttonLabels: {
                blueBtn: "購入する",
                blackBtn: "キャンセル"
            },
            buttonSounds: {
                blueBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED,
                blackBtn: n.SoundList.BUTTON_TOUCHED_CANCEL
            },
            buttons: {
                blueBtn: function(e) {
                    this.factory.pulldown.releaseMenu(),
                    this.factory._buy()
                },
                blackBtn: function(e) {
                    this.factory.pulldown.releaseMenu();
                    var t = this.factory.onClose;
                    this.factory = null ,
                    this.dismiss().then(t)
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, i) {
            this.popup = e;
            var a = e.seekWidgetByName("item_img")
              , s = e.seekWidgetByName("item_name_label")
              , o = e.seekWidgetByName("item_description_label")
              , r = e.seekWidgetByName("price_label");
            this.options = i.options,
            e.factory = this,
            this.onClose = i.onClose || function() {}
            ;
            var c = n.Img("corecard", "shop-point", t.padZero(i.shop_item_id, 4)).jpg;
            a.loadTexture(c),
            s.setString(i.name),
            o.setString(i.description),
            r.setString(i.price + "ポイント"),
            this.selectedValue = 1,
            this.selectedRecord = i,
            this.onBuy = i.onBuy;
            var u = this._getPulldownCondition(i);
            this.pulldown = new n.Pulldown({
                button: e.seekWidgetByName("btn_pulldown"),
                label: e.seekWidgetByName("amount_label"),
                menuBase: e.seekWidgetByName("gud_sh_sort"),
                choice: ccs.load(res["core-sort-sort_list_ui"]).node
            },u),
            this.pulldown.onChange(function(e) {
                this.selectedValue = e.value,
                r.setString(i.price * this.selectedValue)
            }
            .bind(this))
        },
        _buy: function() {
            var e = {};
            e.num = this.selectedValue,
            e.name = this.selectedRecord.name,
            e.description = this.selectedRecord.description,
            e.price = this.selectedRecord.price,
            e.itemId = this.selectedRecord.shop_item_id,
            n.createInstance("paymentRequest").requestShopItem(e, this.options).then(function(e) {
                return this.popup.dismiss().thenResolve(e)
            }
            .bind(this)).then(function(e) {
                this._showResultPopup(e)
            }
            .bind(this))
        },
        _showResultPopup: function(e) {
            var t = {
                type: "point",
                buyResult: e,
                onClose: this.onBuy
            };
            n.createInstance("popupFactoryBuyResult").create({}).open(t)
        },
        _getPulldownCondition: function(e) {
            var n = [];
            return t.each(t.range(e.buy_max_num), function(e) {
                e++,
                n.push({
                    value: e,
                    text: e
                })
            }),
            n[0].selected = !0,
            n
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.cc;
    e.ccui;
    n.PopupFactoryStoneCheck = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-sh_stone_check",
            title: "購入確認",
            buttonLabels: {
                blueBtn: "交換する",
                blackBtn: "キャンセル"
            },
            buttonSounds: {
                blueBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED,
                blackBtn: n.SoundList.BUTTON_TOUCHED_CANCEL
            },
            buttons: {
                blueBtn: function(e) {
                    this.factory.pulldown.releaseMenu(),
                    this.factory._buy.call(this.factory),
                    this.dismiss()
                },
                blackBtn: function(e) {
                    this.factory.pulldown.releaseMenu();
                    var t = this.factory.onClose;
                    this.factory = null ,
                    this.dismiss().then(t)
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, a) {
            var s = e.seekWidgetByName("item_img")
              , o = e.seekWidgetByName("item_name_label")
              , r = e.seekWidgetByName("item_description_label")
              , c = e.seekWidgetByName("price_labelimg");
            e.factory = this,
            this.onClose = a.onClose || function() {}
            ,
            this.onBuy = a.onBuy || function() {}
            ;
            var u = n.Img("corecard", "shop-stone", t.padZero(a.shop_item_id, 4)).jpg;
            s.loadTexture(u),
            o.setString(a.name),
            r.setString(a.description),
            this.selectedValue = 1,
            this.selectedRecord = a;
            var _ = this._getPulldownCondition(a)
              , l = e.seekWidgetByName("sort_ui");
            if (_ && _.length < 10) {
                var d = 45
                  , p = 24
                  , h = (10 - _.length) * d;
                l.setPositionY(p - h)
            }
            this.pulldown = new n.Pulldown({
                button: e.seekWidgetByName("btn_pulldown"),
                label: e.seekWidgetByName("amount_label"),
                menuBase: e.seekWidgetByName("gud_sh_sort"),
                choice: ccs.load(res["core-sort-sort_list_ui"]).node
            },_),
            this.pulldown.onChange(function(e) {
                this.selectedRecord = a,
                this.selectedValue = e.value,
                g()
            }
            .bind(this));
            var g = function() {
                var e = this.selectedValue * a.stones
                  , t = a.currency.stone - e
                  , s = "<span class='orange'>必要数&nbsp;：&nbsp;</span><span class='white'>" + a.stones + n.w("stone") + "</span><br /><span class='orange'>所持" + n.w("stone") + "&nbsp;：&nbsp;</span><span class='white'>" + a.currency.stone + "&rarr;</span><span class='red'>" + t + "</span>"
                  , o = '<table style="width: 400px;height: 60px;"><tr><td><div class="text_common">' + s + "</div></td></tr></table>";
                n.convertHTMLToTexture(o, i.size(400, 60), n.GameConfig.POPUP_CSS).then(function(e) {
                    c.loadTexture(e)
                }
                .bind(this))
            }
            .bind(this);
            g()
        },
        _buy: function() {
            var e = n.createInstance("apiShop");
            e.buy(this.selectedRecord.shop_item_id, this.selectedValue, "stone").then(function(e) {
                var t = e.body.result;
                if (!t)
                    throw new Error(n.w("stone") + "での購入に失敗しました");
                var a = i.director.getRunningScene();
                null != a.headerDelegate && a.headerDelegate.updateCurrency(),
                this._showResultPopup({
                    num: this.selectedValue,
                    shop_item_id: this.selectedRecord.shop_item_id
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e)
            })
        },
        _getPulldownCondition: function(e) {
            var n = Math.floor(e.currency.stone / e.stones);
            n = e.buy_max_num < n ? e.buy_max_num : n;
            var i = t.map(t.range(n), function(e) {
                return e++,
                {
                    value: e,
                    text: e
                }
            });
            return i[0].selected = !0,
            i
        },
        _showResultPopup: function(e) {
            var t = {
                type: "stone",
                buyResult: e,
                onClose: this.onBuy
            };
            n.createInstance("popupFactoryBuyResult").create({}).open(t)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = (e._,
    e.kh);
    e.cc,
    e.ccui;
    t.PopupFactoryComAgeLimitB = t.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_age_limit_b",
            title: "年齢制限確認",
            buttonLabels: {
                redBtn: "R指定版へ行く",
                blackBtn: "キャンセルする"
            },
            buttonSounds: {
                redBtn: t.SoundList.BUTTON_TOUCHED_DECIDE,
                blackBtn: t.SoundList.BUTTON_TOUCHED_DECIDE
            },
            buttons: {
                redBtn: function(e) {
                    this.dismiss().then(function() {
                        if (t.env.R18GameURL) {
                            var e = document.createEvent("MouseEvents");
                            e.initMouseEvent("click", !0, !0, window, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null );
                            var n = document.createElement("a");
                            n.target = "_top",
                            n.href = t.env.R18GameURL,
                            n.dispatchEvent(e)
                        }
                    })
                },
                blackBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {}
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    e.ccui;
    $staticRes(res["core-popup-ra_quest_appearance"]),
    n.PopupFactoryRaQuestAppearance = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-ra_quest_appearance",
            title: "クエスト出現",
            buttonLabels: {
                blueBtn: "OK"
            }
        },
        POPUP_METHODS: {
            setData: function(e) {
                this._setQuestImage(e.quest_id),
                this._setRemainingTimeLabel(e.time_left)
            },
            _setQuestImage: function(e) {
                var i = this.seekWidgetByName("questimg");
                if (null !== i) {
                    var a = n.Img("questimg", "event-quest", t.padZero(e, 4), 1).jpg;
                    i.loadTexture(a)
                }
            },
            _setRemainingTimeLabel: function(e) {
                this.setHtmlStrings({
                    limit_no_labelimg: "<span class='white'>残り時間：</span><span class='yellow'>" + e + "</span>"
                }, n.GameConfig.POPUP_CSS)
            },
            clearData: function() {}
        },
        onPopupOpened: function(e, t) {
            null != t && e.setData(t)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.UIUtility = {
        _setEnableButton: function(e, t) {
            var a = null ;
            if (i.isObject(e))
                a = e;
            else {
                var s = n.director.getRunningScene();
                a = s.seekWidgetByName(e)
            }
            a.setEnabled(t),
            a.setColor(t ? n.color("#FFFFFF") : n.color("#808080"))
        },
        _setGrayOutButton: function(e, t) {
            var a = null ;
            a = i.isObject(e) ? e : this.seekWidgetByName(e),
            a.setColor(t ? n.color("#FFFFFF") : n.color("#808080"))
        },
        _showNothingLabel: function(e) {
            if (i.isUndefined(e) || i.isNull(e))
                return void console.warn("[ERROR] Could not access scene object.");
            var t = e.seekWidgetByName("nothing_label");
            return null === t ? void console.warn("[ERROR] Could not find noghing label.") : void t.setVisible(!0)
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.ImagesCommon = {
        _setIntroduceCharaImage: function(e) {
            var a = n.director.getRunningScene();
            if (!i.isUndefined(e.character_id) && null !== a.seekWidgetByName("introduceimg_chara")) {
                var s = t.Img("introduceimg", "chara", i.padZero(e.character_id, 4), e.skin || 0).jpg;
                a.seekWidgetByName("introduceimg_chara").loadTexture(s)
            }
        },
        _setIntroduceJobImage: function(e) {
            var a = n.director.getRunningScene();
            if (!i.isUndefined(e.job_id) && null !== a.seekWidgetByName("introduceimg_job")) {
                var s = t.Img("introduceimg", "job", i.padZero(e.job_id, 4), e.skin || 0).jpg;
                a.seekWidgetByName("introduceimg_job").loadTexture(s)
            }
        },
        _setIntroduceWeaponImage: function(e) {
            var a = n.director.getRunningScene();
            if (!i.isUndefined(e.weapon_id) && null !== a.seekWidgetByName("introduceimg_weapon")) {
                var s = t.Img("introduceimg", "weapon", i.padZero(e.weapon_id, 4), e.skin || 0).jpg;
                a.seekWidgetByName("introduceimg_weapon").loadTexture(s)
            }
        },
        _setIntroduceSummonImage: function(e) {
            var a = n.director.getRunningScene();
            if (!i.isUndefined(e.summon_id) && null !== a.seekWidgetByName("introduceimg_summon")) {
                var s = t.Img("introduceimg", "summon", i.padZero(e.summon_id, 4), e.skin || 0).jpg;
                a.seekWidgetByName("introduceimg_summon").loadTexture(s)
            }
        },
        _setIntroduceGuardianImage: function(e) {
            var a = n.director.getRunningScene();
            if (!i.isUndefined(e.guardian_id) && null !== a.seekWidgetByName("introduceimg_guardian")) {
                var s = t.Img("introduceimg", "guardian", i.padZero(e.guardian_id, 4), e.skin || 0).jpg;
                a.seekWidgetByName("introduceimg_guardian").loadTexture(s)
            }
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.StringsCommon = {
        _setCardStrings: function(e, t) {
            n.isUndefined(t.name) || null === e.seekWidgetByName("name_label") || e.setStrings({
                name_label: t.name
            }),
            n.isUndefined(t.attack) || null === e.seekWidgetByName("attack_no") || e.setStrings({
                attack_no: t.attack
            }),
            n.isUndefined(t.min_attack) || null === e.seekWidgetByName("attack_min_no_label") || e.setStrings({
                attack_min_no_label: t.min_attack
            }),
            n.isUndefined(t.min_attack) || null === e.seekWidgetByName("attack_min_no") || e.setStrings({
                attack_min_no: t.min_attack
            }),
            n.isUndefined(t.max_attack) || null === e.seekWidgetByName("attack_max_no_label") || e.setStrings({
                attack_max_no_label: t.max_attack
            }),
            n.isUndefined(t.max_attack) || null === e.seekWidgetByName("attack_max_no") || e.setStrings({
                attack_max_no: t.max_attack
            }),
            n.isUndefined(t.hp) || null === e.seekWidgetByName("hp_no") || e.setStrings({
                hp_no: t.hp
            }),
            n.isUndefined(t.min_hp) || null === e.seekWidgetByName("hp_min_no_label") || e.setStrings({
                hp_min_no_label: t.min_hp
            }),
            n.isUndefined(t.min_hp) || null === e.seekWidgetByName("hp_min_no") || e.setStrings({
                hp_min_no: t.min_hp
            }),
            n.isUndefined(t.max_hp) || null === e.seekWidgetByName("hp_max_no_label") || e.setStrings({
                hp_max_no_label: t.max_hp
            }),
            n.isUndefined(t.max_hp) || null === e.seekWidgetByName("hp_max_no") || e.setStrings({
                hp_max_no: t.max_hp
            }),
            n.isUndefined(t.level) || null === e.seekWidgetByName("level_label") || e.setStrings({
                level_label: t.level
            }),
            n.isUndefined(t.level) || null === e.seekWidgetByName("level_now_label") || e.setStrings({
                level_now_label: t.level
            }),
            n.isUndefined(t.max_level) || null === e.seekWidgetByName("level_max_label") || e.setStrings({
                level_max_label: "MAX " + t.max_level
            }),
            n.isUndefined(t.next_exp) || null === e.seekWidgetByName("exp_next_label") || e.setStrings({
                exp_next_label: "NEXT:" + t.next_exp
            }),
            n.isUndefined(t.level) || n.isUndefined(t.max_level) || null === e.seekWidgetByName("exp_next_label") || e.seekWidgetByName("exp_next_label").setVisible(t.level < t.max_level),
            n.isUndefined(t.bonus) || null === e.seekWidgetByName("plus_no") || e.setStrings({
                plus_no: t.bonus < 1 ? "" : "+" + t.bonus
            }),
            n.isUndefined(t.description) || null === e.seekWidgetByName("flavor_label") || e.setStrings({
                flavor_label: t.description
            })
        },
        _setSummonAttackEffectStrings: function(e, t) {
            n.isUndefined(t.attack_info) || (n.isUndefined(t.attack_info.name) || null === e.seekWidgetByName("attack_name_label") || e.setStrings({
                attack_name_label: t.attack_info.name
            }),
            n.isUndefined(t.attack_info.description) || null === e.seekWidgetByName("attack_description_label") || e.setStrings({
                attack_description_label: t.attack_info.description
            }),
            n.isUndefined(t.attack_info.turn) || null === e.seekWidgetByName("interval_label") || e.setStrings({
                interval_label: "使用間隔：" + t.attack_info.turn + "ターン"
            })),
            n.isUndefined(t.effect_info) || (n.isUndefined(t.effect_info.name) || null === e.seekWidgetByName("support_name_label") || e.setStrings({
                support_name_label: t.effect_info.name
            }),
            n.isUndefined(t.effect_info.description) || null === e.seekWidgetByName("support_description_label") || e.setStrings({
                support_description_label: t.effect_info.description
            })),
            n.isUndefined(t.attack) || (n.isUndefined(t.attack.name) || null === e.seekWidgetByName("attack_name_label") || e.setStrings({
                attack_name_label: t.attack.name
            }),
            n.isUndefined(t.attack.description) || null === e.seekWidgetByName("attack_description_label") || e.setStrings({
                attack_description_label: t.attack.description
            }),
            n.isUndefined(t.attack.turn) || null === e.seekWidgetByName("interval_label") || e.setStrings({
                interval_label: "使用間隔：" + t.attack.turn + "ターン"
            })),
            n.isUndefined(t.effect) || (n.isUndefined(t.effect.name) || null === e.seekWidgetByName("support_name_label") || e.setStrings({
                support_name_label: t.effect.name
            }),
            n.isUndefined(t.effect.description) || null === e.seekWidgetByName("support_description_label") || e.setStrings({
                support_description_label: t.effect.description
            }))
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.GaugesCommon = {
        _setExpGauge: function(e, t) {
            if (!(n.isUndefined(t.exp) || n.isUndefined(t.next_exp) || n.isUndefined(t.level) || n.isUndefined(t.max_level) || null === e.seekWidgetByName("exp-gauge"))) {
                var i = t.level === t.max_level ? 100 : t.exp / (t.next_exp + t.exp) * 100;
                e.seekWidgetByName("exp-gauge").percent = i
            }
        },
        _setStarGauge: function(e, t) {
            if (!n.isUndefined(t.max_overlimit_count) && !n.isUndefined(t.overlimit_count)) {
                var i = this.__getStarGaugeBlankNode(e, t)
                  , a = this.__getStarGaugeNode(e, t);
                i && a && (t.is_aroused ? this.__setAppearanceStarGaugeAroused(e) : this.__setAppearanceStarGaugeNormal(e),
                i.percent = 20 * t.max_overlimit_count,
                a.percent = 20 * t.overlimit_count)
            }
        },
        __setAppearanceStarGaugeAroused: function(e) {
            var t = this.__getStarGaugeFrameNode(e);
            t && t.setAppearance("star_gauge_arousal")
        },
        __setAppearanceStarGaugeNormal: function(e) {
            var t = this.__getStarGaugeFrameNode(e);
            t && t.setAppearance("star_gauge")
        },
        __getStarGaugeFrameNode: function(e) {
            return e.seekWidgetByName("mainparts_star_gauge_ui")
        },
        __getStarGaugeBlankNode: function(e, t) {
            return t.is_aroused ? e.seekWidgetByName("star_gauge_blank_arousal") : e.seekWidgetByName("star_gauge_blank")
        },
        __getStarGaugeNode: function(e, t) {
            return t.is_aroused ? e.seekWidgetByName("star_gauge_arousal") : e.seekWidgetByName("star_gauge")
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.IconsCommon = {
        _setRarityIcon: function(e, t) {
            if (!n.isUndefined(t.rare) && null !== e.seekWidgetByName("rarity_icon")) {
                var i = t.rare;
                if (t.is_aroused && (i += "_arousal"),
                !n.contains(["N", "R", "SR", "SSR", "SR_arousal", "SSR_arousal"], i))
                    return void console.error("Invalid rarity type: " + i);
                var a = "core/res/icon/rarityicon_" + i + ".png";
                e.seekWidgetByName("rarity_icon").loadTexture(a, ccui.Widget.PLIST_TEXTURE)
            }
        },
        _setRarityBar: function(e, t) {
            if (!n.isUndefined(t.rare) && null !== e.seekWidgetByName("name_base")) {
                var i = t.rare;
                if (!n.contains(["N", "R", "SR", "SSR"], i))
                    return void console.error("Invalid rarity type: " + i);
                var a = "core/res/introduce/introduce_raritybar_" + i + ".png";
                e.seekWidgetByName("name_base").loadTexture(a, ccui.Widget.PLIST_TEXTURE)
            }
        },
        _setElementIcon: function(e, t, i) {
            if (!n.isUndefined(t.element_type) && null !== e.seekWidgetByName("element_icon")) {
                var a = t.element_type;
                if (!n.contains([0, 1, 2, 3, 4, 5, 6], a))
                    return void console.error("Invalid element type: " + a);
                i = i || "core/res/introduce/introduce_element_";
                var s = i + a + ".png";
                e.seekWidgetByName("element_icon").loadTexture(s, ccui.Widget.PLIST_TEXTURE)
            }
        },
        _setElementIconCommonRes: function(e, t) {
            this._setElementIcon(e, t, "core/res/icon/elementicon_")
        },
        _setStatustypeIcon: function(e, t) {
            if (!n.isUndefined(t.character_type) && null !== e.seekWidgetByName("statustype_icon")) {
                var i = t.character_type;
                if (!n.contains(["attack", "balance", "defense", "special", "heal"], i))
                    return void console.error("Invalid character type: " + i);
                var a = "core/res/icon/statustypeicon_" + i + ".png";
                e.seekWidgetByName("statustype_icon").loadTexture(a, ccui.Widget.PLIST_TEXTURE)
            }
        },
        _setJobStatustypeIcon: function(e, t) {
            n.isUndefined(t.type) || (t.character_type = t.type,
            this._setStatustypeIcon(e, t))
        },
        _setWeaponIcon: function(e, t, i) {
            if (i = i || "weapontype_icon",
            !n.isUndefined(t.weapon_type) && null !== e.seekWidgetByName(i)) {
                var a = t.weapon_type;
                if (!n.contains(["sword", "special_sword", "spear", "ax", "staff", "hammer", "gun", "bow", "magic_item"], a))
                    return void console.error("Invalid weapon type: " + a);
                var s = "core/res/icon/weapontypeicon_" + a + ".png";
                e.seekWidgetByName(i).loadTexture(s, ccui.Widget.PLIST_TEXTURE)
            }
        },
        _setWeaponsIcon: function(e, t) {
            return n.isUndefined(t.familiar_weapon_types) ? void 0 : void n.each(t.familiar_weapon_types, function(t, n) {
                this._setWeaponIcon(e, {
                    weapon_type: t
                }, "weapontypeicon_" + n)
            }, this)
        },
        _setForteIcon: function(e, t) {
            return null === e ? void console.error("iconNode is null.") : n.isUndefined(t) ? void console.error("weaponName is undefined.") : void e.loadTexture("core/res/icon/weapontypeicon_" + t + ".png", ccui.Widget.PLIST_TEXTURE)
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.CoreCardCommon = {
        _setCharacterCoreCardElementRarity: function(e, n, i) {
            var a = t.createInstance("CoreCardCharacterUI", ["e_r"]);
            i = i || "corecard_ui";
            var s = e.seekWidgetByName(i);
            a.setAroused(n.is_aroused);
            var o = this._setCoreCardBasic(s, a, n, "character");
            o.seekWidgetByName("plus_no").setVisible(!1),
            s.removeAllChildren(),
            s.addChild(o),
            s.setVisible(!0)
        },
        _setCharacterCoreCardFull: function(e, i, a) {
            var s = t.createInstance("CoreCardCharacterUI", ["full"]);
            a = a || "corecard_ui";
            var o = e.seekWidgetByName(a);
            n.isUndefined(i.is_aroused) || s.setAroused(i.is_aroused),
            n.isUndefined(i.is_equipped) || s.setIconEquipped(i.is_equipped),
            n.isUndefined(i.is_locked) || s.setIconProtected(i.is_locked),
            n.isUndefined(i.max_overlimit_count) || s.setStarGauge(20 * i.max_overlimit_count, 20 * i.overlimit_count);
            var r = this._setCoreCardBasic(o, s, i, "character");
            null !== r && (s.setPlusNoVisible(!0),
            o.removeAllChildren(),
            o.addChild(r),
            o.setVisible(!0))
        },
        _setWeaponCoreCardElementRarity: function(e, n, i) {
            var a = t.createInstance("CoreCardWeaponUI", ["e_r"]);
            i = i || "corecard_ui";
            var s = e.seekWidgetByName(i)
              , o = this._setCoreCardBasic(i, a, n, "weapon");
            null !== o && (a.setPlusNoVisible(!0),
            s.removeAllChildren(),
            s.addChild(o),
            s.setVisible(!0))
        },
        _setWeaponCoreCardFull: function(e, i, a) {
            var s = t.createInstance("CoreCardWeaponUI", ["full"]);
            a = a || "corecard_ui";
            var o = e.seekWidgetByName(a);
            n.isUndefined(i.is_equipped) || s.setIconEquipped(i.is_equipped),
            n.isUndefined(i.is_locked) || s.setIconProtected(i.is_locked),
            n.isUndefined(i.max_overlimit_count) || s.setStarGauge(20 * i.max_overlimit_count, 20 * i.overlimit_count);
            var r = this._setCoreCardBasic(a, s, i, "weapon");
            null !== r && (s.setPlusNoVisible(!0),
            o.removeAllChildren(),
            o.addChild(r),
            o.setVisible(!0))
        },
        _setSummonCoreCardElementRarity: function(e, n, i) {
            var a = t.createInstance("CoreCardSummonUI", ["e_r"]);
            i = i || "corecard_ui";
            var s = e.seekWidgetByName(i)
              , o = this._setCoreCardBasic(i, a, n, "summon");
            null !== o && (a.setPlusNoVisible(!0),
            s.removeAllChildren(),
            s.addChild(o),
            s.setVisible(!0))
        },
        _setSummonCoreCardFull: function(e, i, a) {
            var s = t.createInstance("CoreCardSummonUI", ["full"]);
            a = a || "corecard_ui";
            var o = e.seekWidgetByName(a);
            n.isUndefined(i.is_equipped) || s.setIconEquipped(i.is_equipped),
            n.isUndefined(i.is_locked) || s.setIconProtected(i.is_locked),
            n.isUndefined(i.max_overlimit_count) || s.setStarGauge(20 * i.max_overlimit_count, 20 * i.overlimit_count);
            var r = this._setCoreCardBasic(a, s, i, "summon");
            null !== r && (s.setPlusNoVisible(!0),
            o.removeAllChildren(),
            o.addChild(r),
            o.setVisible(!0))
        },
        _setCoreCardBasic: function(e, t, i, a) {
            if (null === e)
                return console.warn("[ERROR] Could not find targetNode: " + targetNodeName),
                null ;
            if (null === t)
                return console.warn("[ERROR] Could not read CoreCardUI."),
                null ;
            if (!n.contains(["character", "weapon", "summon"], a))
                return void console.warn("Invalid card type: " + a);
            var s = i[a + "_id"] || i.id;
            if (!n.isUndefined(s)) {
                var o = i.skin || 0;
                t.setImg(s, o)
            }
            return n.isUndefined(i.bonus) || t.setPlusNo(0 < i.bonus ? "+" + i.bonus : ""),
            n.isUndefined(i.element_type) || t.setIconElement(i.element_type),
            n.isUndefined(i.rare) || t.setIconRarity(i.rare),
            t.getResult()
        },
        _setItemCoreCard: function(e, i, a) {
            var s = t.createInstance("CoreCardItemUI", ["plain"]);
            a = a || "corecard_ui";
            var o = e.seekWidgetByPath(a)
              , r = i.item_id || i.id;
            n.isUndefined(r) || s.setImg(r),
            o.removeAllChildren(),
            o.addChild(s.getResult()),
            o.setVisible(!0)
        },
        _setItemCoreCardAmount: function(e, i, a) {
            var s = t.createInstance("CoreCardItemUI", ["amount"]);
            a = a || "corecard_ui";
            var o = e.seekWidgetByName(a);
            n.isUndefined(i.item_id) || s.setImg(i.item_id),
            n.isUndefined(i.num) || s.setAmount(i.num),
            o.removeAllChildren(),
            o.addChild(s.getResult()),
            o.setVisible(!0)
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.list = t.pc.list || {},
    t.pc.list.roles = t.pc.list.roles || {},
    t.pc.list.roles.SliderCommon = {
        _setSlider: function(e, i, a, s, o, r, c, u) {
            var _ = e.seekWidgetByName(i);
            if (null === _)
                return void console.warn("[ERROR] Could not find a parent node: " + i);
            _.removeAllChildren();
            var l = [];
            n.each(a, function(t, n) {
                var i = this._createSliderNode(e, t, s, o, r, n);
                i && l.push(i)
            }, this);
            var d = new t.PageView;
            d.initialize(l, function(t, i) {
                n.isFunction(this[c]) && this[c](e, i, a[i - 1])
            }, this),
            d.setDirection(ccui.ScrollView.DIR_HORIZONTAL),
            _.addChild(d);
            var p = [];
            p[t.PAGE_CONTROLLER_CONTROLS.NEXT_BUTTON] = "btn_next",
            p[t.PAGE_CONTROLLER_CONTROLS.PREVIOUS_BUTTON] = "btn_prev";
            (new t.PageController).init(e, p, d);
            if (!n.isUndefined(u) && !n.isUndefined(u.interval))
                if (n.isNumber(u.interval)) {
                    d.setLoopContent(!0);
                    var h = this;
                    h.carouselTimer = n.delay(this._autoScroll, u.interval, u.interval, h, d)
                } else
                    console.log("[ERROR] Invalid interval param.");
            return d.gotoFirstPage(),
            d
        },
        _autoScroll: function(e, t, i) {
            i.gotoNextPage(),
            t.carouselTimer = n.delay(t._autoScroll, e, e, t, i)
        },
        _stopAutoScroll: function() {
            this.carouselTimer && (clearTimeout(this.carouselTimer),
            this.carouselTimer = null )
        },
        _createSliderNode: function(e, t, i, a, s, o) {
            if (n.isUndefined(res[i]))
                return console.warn("[ERROR] Could not find slider resource: " + i),
                null ;
            var r = ccs.load($dynamicRes(res[i])).node;
            return null === r ? (console.debug("[ERROR] Could not find slider: " + i),
            null ) : (n.isUndefined(s) || n.isUndefined(s.nodeName) || n.isUndefined(s.funcName) || (null === r.seekWidgetByName(s.nodeName) ? console.warn("[WARN] Could not find a touchable node name: " + s.nodeName) : n.isFunction(this[s.funcName]) ? r.seekWidgetByName(s.nodeName).addTouchEventListener(function(n, i) {
                i === ccui.Widget.TOUCH_ENDED && this[s.funcName](e, r, t)
            }, this) : console.warn("[WARN] Could not find a slot function: " + s.funcName)),
            n.isFunction(this[a]) && this[a](e, r, t),
            r)
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.list = t.pc.list || {},
    t.pc.list.roles = t.pc.list.roles || {},
    t.pc.list.roles.UserListCommon = {
        _setUserList: function(e, a, s, o) {
            if (!i.contains(["blue_only", "red_only", "blue_red", "guild_blue_only", "guild_red_only", "guild_plain"], s))
                return void console.warn("[ERROR] Invalid button pattern type: " + s);
            var r = e.getActionByTag(e.tag);
            if (r) {
                if (i.isUndefined(r.animationInfo[s]))
                    return void console.warn("[ERROR] Could not find button animation in userlist: " + s);
                r.gotoFrameAndPause(r.animationInfo[s].startIndex)
            }
            !i.isUndefined(a.name) && e.seekWidgetByName("username_label") && e.setStrings({
                username_label: a.name + " Rank" + a.rank
            }),
            i.isUndefined(a.name) || i.isUndefined(a.rank) || !e.seekWidgetByName("player_name_rank_label") || e.setStrings({
                player_name_rank_label: a.name + "\nRank" + a.rank
            }),
            !i.isUndefined(a.raid_points) && e.seekWidgetByName("total_point_no") && e.setStrings({
                total_point_no: a.raid_points
            }),
            !i.isUndefined(a.damage_done) && e.seekWidgetByName("total_damage_no") && e.setStrings({
                total_damage_no: a.damage_done
            });
            var c = a.last_login_date_time || a.login_date;
            if (!i.isUndefined(c) && e.seekWidgetByName("login_label") && e.setStrings({
                login_label: "最終ログイン：" + c
            }),
            !i.isUndefined(a.union_position) && e.seekWidgetByName("icon_guild_position"))
                if (i.contains(["leader", "member", "officer", "sub_leader"], a.union_position)) {
                    n.spriteFrameCache.addSpriteFrames(res["guild-icon_guild_position"]);
                    var u = e.seekWidgetByName("icon_guild_position");
                    u.setVisible(!0),
                    u.loadTexture("guild/res/icon_guild_position_" + a.union_position + ".png", ccui.Widget.PLIST_TEXTURE)
                } else
                    console.error("Invalid union position type: " + a.union_position);
            if (!i.isUndefined(a.summon_id) && e.seekWidgetByName("playercard_summon") && e.loadTextures({
                playercard_summon: t.Img("playercard", "summon", i.padZero(a.summon_id, 4), 0).png
            }),
            !i.isUndefined(a.job_id) && e.seekWidgetByName("playercard_job") && e.loadTextures({
                playercard_job: t.Img("playercard", "job", i.padZero(a.job_id, 4), 0).png
            }),
            i.isUndefined(a.a_friend_offer_id) ? i.isUndefined(a.a_friend_id) || (e.tag = a.a_friend_id) : e.tag = a.a_friend_offer_id,
            !i.isUndefined(o)) {
                var _ = n.director.getRunningScene();
                i.isFunction(this[o.user]) && t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED btn_user": function() {
                        this[o.user](e, a, _)
                    }
                    .bind(this)
                }, this),
                t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED btn_blue_s": function() {
                        i.isFunction(this[o.blue]) && this[o.blue](e, a, _)
                    }
                    .bind(this),
                    "TOUCH_ENDED btn_red_s": function() {
                        i.isFunction(this[o.red]) && this[o.red](e, a, _)
                    }
                    .bind(this)
                }, this),
                i.isFunction(this[o.check]) && t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED CheckBox_1": function() {
                        i.isFunction(this[o.check]) && this[o.check](e, a, !e.seekWidgetByName("CheckBox_1").selected, _)
                    }
                    .bind(this)
                }, this)
            }
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh;
    e.cc,
    e._,
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.RoutingCommon = {
        _consoleErrorRouterParams: function(e) {
            if (t.env.riseErrorOnRoutingValidation)
                throw new Error("Routing parameter validation failed. requires " + e + " .");
            console.debug("[CAUTION] Created temporary router param for debug: " + e + "."),
            console.debug("          If you define this parameter, this caution will be cleared.")
        },
        _consoleErrorRoutingAbort: function(e) {
            console.debug("[CAUTION] Not defined router parameters: " + e),
            console.debug("          Routing aborted.")
        },
        _navigateToPresent: function(e) {
            t.createInstance("router").navigate("present/prs_001", e)
        },
        _navigateToGachaTop: function(e) {
            t.createInstance("router").navigate("gacha", e)
        },
        _navigateToGemGacha: function(e) {
            t.createInstance("router").navigate("gacha/ga_004", e)
        },
        _navigateToQuest: function(e) {
            t.createInstance("router").navigate("quest", e)
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.roles = t.pc.quest.roles || {},
    t.pc.quest.roles.Routing = {
        _navigateTo007: function(e) {
            var n = t.createInstance("router")
              , i = -1 !== ["q_006", "q_007", "q_008"].indexOf(n.currentScene);
            return i ? void e._delegate.show007() : void t.createInstance("router").navigate("quest/q_007")
        },
        _navigateTo002: function(e, i, a) {
            return n.isUndefined(i) || n.isUndefined(i.a_quest_id) || n.isUndefined(i.type) ? void this._consoleErrorRoutingAbort("record.a_quest_id") : void t.createInstance("router").navigate("quest/q_002", {
                q_002: {
                    target: "quest",
                    a_quest_id: i.a_quest_id,
                    quest_type: i.type,
                    episode_num: a
                }
            })
        },
        _navigate001To006: function(e, n) {
            var i = {};
            n && (i = {
                tab: n
            }),
            t.createInstance("router").navigate("quest/q_006", i)
        },
        _navigate001To009: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_quest_id) || n.isUndefined(i.type) ? void this._consoleErrorRoutingAbort("record.a_quest_id") : void t.createInstance("router").navigate("quest/q_009", {
                q_009: {
                    target: "quest",
                    a_quest_id: i.a_quest_id,
                    quest_type: i.type
                }
            })
        },
        _navigate004To009: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_quest_id) || n.isUndefined(i.type) ? void this._consoleErrorRoutingAbort("record.a_quest_id") : void t.createInstance("router").navigate("quest/q_009", {
                q_009: {
                    target: "quest",
                    a_quest_id: i.a_quest_id,
                    quest_type: i.type
                }
            })
        },
        _navigate006To009: function(e, i) {
            return n.isUndefined(e) || n.isUndefined(e.a_quest_id) || n.isUndefined(e.quest_type) || n.isUndefined(e.battle_bp) ? void this._consoleErrorRoutingAbort("record.a_quest_id") : void t.createInstance("router").navigate("quest/q_009", {
                q_009: {
                    target: "raid",
                    quest_id: e.quest_id,
                    a_quest_id: e.a_quest_id,
                    a_battle_id: e.a_battle_id,
                    a_player_id: i,
                    is_own_raid: e.is_own_raid,
                    quest_type: e.quest_type,
                    raid_boss: e.enemy_name,
                    battle_bp: e.battle_bp
                }
            })
        },
        _verifyRouterParams002: function(e) {
            (n.isUndefined(e.routerParams) || n.isUndefined(e.routerParams.q_002)) && (e.routerParams.q_002 = {},
            e.routerParams.q_002.a_quest_id = 1,
            e.routerParams.q_002.quest_type = "main",
            e.routerParams.q_002.episode_num = 1,
            this._consoleErrorRouterParams("routerParams.q_002, .a_quest_id, .quest_type, .episode_num"))
        },
        _navigate002ToParty: function(e) {
            var n = e.routerParams.q_002;
            n.a_supporter_id = this._supporterData.a_supporter_id,
            t.createInstance("router").navigate("party/par_001", {
                party: {
                    party_id: e._delegate.currentDeck.a_party_id,
                    returnQuestRoute: "quest/q_002"
                },
                q_002: n
            })
        },
        _navigate009ToParty: function(e) {
            var n = e.routerParams.q_009;
            n.a_supporter_id = this._supporterData.a_supporter_id,
            t.createInstance("router").navigate("party/par_001", {
                party: {
                    party_id: e._delegate.currentDeck.a_party_id,
                    returnQuestRoute: "quest/q_009"
                },
                q_009: n
            })
        },
        _navigate009ToQuestTop: function(e, n, i) {
            "event_union_demon_raid" === n ? t.createInstance("router").navigate("unionraid/uniraid_002", {}, {
                event_id: i
            }) : t.createInstance("router").navigate("quest/q_001", {})
        },
        _verifyRouterParams003_001: function(e) {
            n.isUndefined(e.routerParams.a_battle_id) && (e.routerParams.a_battle_id = 1,
            this._consoleErrorRouterParams("routerParams.a_battle_id")),
            n.isUndefined(e.routerParams.quest_type) && (e.routerParams.quest_type = "event_raid",
            this._consoleErrorRouterParams("routerParams.quest_type"))
        },
        _navigate003_001To003_002: function(e, i) {
            n.isUndefined(i.a_battle_id) && (i.a_battle_id = 1,
            this._consoleErrorRoutingAbort("routerParams.a_battle_id")),
            n.isUndefined(i.quest_type) && (i.quest_type = "main",
            this._consoleErrorRoutingAbort("routerParams.quest_type")),
            t.createInstance("router").navigate("quest/q_003_2", i)
        },
        _verifyRouterParams003_002: function(e) {
            n.isUndefined(e.routerParams.a_battle_id) && (e.routerParams.a_battle_id = 1,
            this._consoleErrorRouterParams("routerParams.a_battle_id")),
            n.isUndefined(e.routerParams.quest_type) && (e.routerParams.quest_type = "main",
            this._consoleErrorRouterParams("routerParams.quest_type"))
        },
        _navigate003_002To001: function(e, n) {
            t.createInstance("router").navigate("quest/q_001", n)
        },
        _navigate003_2ToRa002: function(e, n) {
            t.createInstance("router").navigate("raidevent/ra_002", {
                ra_002: {
                    event_id: n
                }
            })
        },
        _navigate003_002ToUniraid004: function(e, n) {
            t.createInstance("router").navigate("unionraid/uniraid_004", {}, {
                event_id: n
            })
        },
        _navigate003_002ToUniraid002: function(e, n) {
            t.createInstance("router").navigate("unionraid/uniraid_002", {}, {
                event_id: n
            })
        },
        _navigate003_002To004: function(e, n) {
            t.createInstance("router").navigate("quest/q_004", n)
        },
        _navigateToEpi_001_new: function(e) {
            t.createInstance("router").navigate("epi", {
                epi_001: {
                    tab: "new"
                }
            })
        },
        _navigate007To003: function(e) {
            t.createInstance("router").navigate("quest/q_003_1", {
                a_battle_id: e.a_battle_id,
                quest_type: e.quest_type
            })
        },
        _navigate008To001: function(e) {
            t.createInstance("router").navigate("quest/q_001", {})
        },
        _navigate008To010: function(e) {
            t.createInstance("router").navigate("quest/q_010", {
                q_010: {
                    quest_id: e.quest_id,
                    a_battle_id: e.a_battle_id,
                    quest_type: e.quest_type,
                    had_won: e.had_won
                }
            })
        },
        _verifyRouterParams010: function(e) {
            return n.isUndefined(e.routerParams.q_010) ? (e.routerParams.q_010 = e.routerParams.q_010 || {},
            e.routerParams.q_010.quest_id = 1,
            e.routerParams.q_010.a_battle_id = 2,
            e.routerParams.q_010.quest_type = "event_raid",
            e.routerParams.q_010.had_won = !1,
            void this._consoleErrorRouterParams("routerParams.q_010, .a_battle_id, .quest_type, .had_won .quest_id")) : (n.isUndefined(e.routerParams.q_010.a_battle_id) && (e.routerParams.q_010 = e.routerParams.q_010 || {},
            e.routerParams.q_010.a_battle_id = 1,
            this._consoleErrorRouterParams("routerParams.q_010, .a_battle_id")),
            n.isUndefined(e.routerParams.q_010.quest_type) && (e.routerParams.q_010 = e.routerParams.q_010 || {},
            e.routerParams.q_010.quest_type = "raid",
            this._consoleErrorRouterParams("routerParams.q_010, .quest_type")),
            n.isUndefined(e.routerParams.q_010.had_won) && (e.routerParams.q_010 = e.routerParams.q_010 || {},
            e.routerParams.q_010.had_won = !0,
            this._consoleErrorRouterParams("routerParams.q_010, .had_won")),
            void (n.isUndefined(e.routerParams.q_010.quest_id) && (e.routerParams.q_010 = e.routerParams.q_010 || {},
            e.routerParams.q_010.quest_id = 1,
            this._consoleErrorRouterParams("routerParams.q_010, .quest_id"))))
        },
        _navigateToPrf001: function(e) {
            var n = e.a_player_id
              , i = "me" === n;
            t.createInstance("router").navigate("profile/prf_001" + (i ? "a" : "b"), {
                prf_001: {
                    id: n
                }
            })
        },
        _navigate010To008: function() {
            t.createInstance("router").navigate("quest/q_008", {})
        }
    },
    n.assign(t.pc.quest.roles.Routing, t.pc.roles.RoutingCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.list = t.pc.list || {},
    t.pc.list.roles = t.pc.list.roles || {},
    t.pc.list.roles.PageListControllerCommon = {
        _fillupList: function(e, i, a, s, o, r, c) {
            if (n.isUndefined(a))
                return void console.debug("[ERROR] Could not read record.");
            if (n.isUndefined(s))
                return void console.debug("[ERROR] Could not read recordMax.");
            if (n.isUndefined(i) && (i = {}),
            n.isUndefined(i.viewParent) && (i.viewParent = "page_list"),
            n.isUndefined(i.subPageRes) && (i.subPageRes = "gacha-ga_000-ga_bannerlist_ui",
            $staticRes(res["gacha-ga_000-ga_bannerlist_ui"])),
            n.isUndefined(res[i.subPageRes]))
                return void console.debug("[ERROR] Could not find resource. " + i.subPageRes);
            n.isUndefined(i.panelsPerPage) && (i.panelsPerPage = 3);
            var u = e.seekWidgetByName(i.viewParent);
            if (null === u)
                return void console.debug("[ERROR] Could not find page view parent.");
            var _ = i.panelsPerPage;
            this._pageMax = Math.floor(s / _);
            var l = n.map(n.range(0, Math.ceil(s / _)), function(e) {
                var t = ccs.load($dynamicRes(res[i.subPageRes])).node;
                return n.each(t.getChildren(), function(t, n) {
                    _ * e + n >= s ? t.setVisible(!1) : t.setVisible(!0)
                }, this),
                t
            }, this);
            n.each(a, function(e, t) {
                var i = l[Math.floor(t / _)].children[t % _];
                if (!n.isUndefined(r) && n.isFunction(r) && r(i, e, t),
                !n.isUndefined(o) && !n.isUndefined(o.targetNode)) {
                    var a = i.seekWidgetByName(o.targetNode);
                    if (null === a)
                        return void console.debug("[NOTICE] Could not find touching target." + o.targetNode);
                    if (n.isUndefined(o.touchEventFuncName) || !n.isFunction(this[o.touchEventFuncName]))
                        return void console.debug("[NOTICE] Could not find touch function.");
                    a.addTouchEventListener(function(t, n) {
                        n === ccui.Widget.TOUCH_ENDED && this[o.touchEventFuncName](i, e)
                    }
                    .bind(this))
                }
            }, this);
            var d = new t.PageView;
            d.initialize(l, function(e, t) {
                !n.isUndefined(c) && n.isFunction(c) && c(e, t)
            }, this),
            u.removeAllChildren(),
            u.addChild(d);
            var p = [];
            p[t.PAGE_CONTROLLER_CONTROLS.NEXT_BUTTON] = "btn_down",
            p[t.PAGE_CONTROLLER_CONTROLS.PREVIOUS_BUTTON] = "btn_up",
            p[t.PAGE_CONTROLLER_CONTROLS.NUMBER_DISPLAY] = "page_current_num.page_max_num";
            (new t.PageControllerEx).init(e, p, d);
            d.gotoFirstPage()
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryAbilityAcquired = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-q_003_getability",
            buttonLabels: {
                blueBtn: "OK"
            }
        },
        WIDGET_NAMES: {
            coreCard: "corecard_ui",
            abilityIcon: "ability_img",
            label: "ability_name_labelimg"
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e);
            var i = this.WIDGET_NAMES;
            e._setData = function(e, t) {
                this._setStrings(e, t),
                this._setTextures(e, t),
                this._setCoreCard(e, t)
            }
            ,
            e._setStrings = function(t, a) {
                var s = t.ability_name
                  , o = {};
                o[i.label] = "<span class='white'>" + t[a + "_name"] + "が</span><br /><span class='yellow'>「" + s + "」</span><span class='white'>を習得した！</span>",
                e.contentNode.setHtmlStrings(o, n.GameConfig.POPUP_CSS)
            }
            ,
            e._setTextures = function(a, s) {
                var o = a.ability_type
                  , r = {};
                r[i.abilityIcon] = n.Img("coreimg", "abilityicon", t.padZero(o, 4)).png,
                e.contentNode.loadTextures(r)
            }
            ,
            e._setCoreCard = function(t, a) {
                var s = "job" === a ? n.createInstance("CoreCardJobUI", ["plain"]) : n.createInstance("CoreCardCharacterUI", ["plain"]);
                s.setImg(t[a + "_id"], t.skin || 0),
                e.seekWidgetByName(i.coreCard).addChild(s.getResult())
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryCharacterAbilityImproved = n.PopupFactoryAbilityAcquired.extend({
        CHARA_POPUP_PROPERTIES: {
            title: "アビリティ覚醒"
        },
        create: function(e, i) {
            return n.PopupFactoryAbilityAcquired.prototype.create.call(this, t.assign(e, this.CHARA_POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryAbilityAcquired.prototype._addMethodsToPopup.call(this, e);
            var t = this.WIDGET_NAMES;
            e.setData = function(i) {
                var a = (i.ability_name,
                {});
                a[t.label] = "<span class='white'>" + i.character_name + "の「" + i.ability_name_before + "」が</span><br /><span class='yellow'>「" + i.ability_name_after + "」</span><span class='white'>になった！</span>",
                e.contentNode.setHtmlStrings(a, n.GameConfig.POPUP_CSS),
                this._setTextures({
                    chara_id: i.character_id,
                    ability_type: i.ability_type,
                    skin: i.skin
                }, "chara"),
                this._setCoreCard({
                    chara_id: i.character_id,
                    skin: i.skin
                }, "chara")
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryJobAbilityAcquired = n.PopupFactoryAbilityAcquired.extend({
        JOB_POPUP_PROPERTIES: {
            title: "アビリティ取得"
        },
        create: function(e, i) {
            return n.PopupFactoryAbilityAcquired.prototype.create.call(this, t.assign(e, this.JOB_POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryAbilityAcquired.prototype._addMethodsToPopup.call(this, e),
            e.setData = function(e) {
                this._setData(e, "job")
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    e.ccui;
    n.PopupFactoryJobMaxBonus = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-q_003_masterbonus",
            title: "MASTERボーナス習得",
            buttonLabels: {
                blueBtn: "OK"
            }
        },
        WIDGET_NAMES: {
            bonusImage: "bonus_img",
            bonusLabel: "bonus_label",
            bonusAquiredTextLabel: "top_label"
        },
        BONUS_AQUIRED_TEXT: {
            PRE: "英霊LvがMAXになりました。\n",
            POST: "のMASTERボーナス"
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e);
            var i = this.WIDGET_NAMES
              , a = this.BONUS_AQUIRED_TEXT;
            e.setData = function(s) {
                var o = s.type
                  , r = s.job_name
                  , c = s.description
                  , u = {};
                u[i.bonusImage] = n.Img("coreimg", "job-bonusicon", t.padZero(o, 4)).png,
                e.loadTextures(u);
                var _ = {};
                _[i.bonusAquiredTextLabel] = a.PRE + r + a.POST,
                _[i.bonusLabel] = c,
                e.setStrings(_)
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.ccui;
    n.PopupFactoryMvp = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-q_mvp",
            title: "MVP",
            buttonLabels: {
                blueBtn: "OK"
            }
        },
        WIDGET_NAMES: {
            initiator: "q_010_player_discoverer_ui",
            first: "q_010_player_mvp_ui",
            second: "q_010_player_mvp_second_ui"
        },
        CARD_WIDGET_NAMES: {
            nameAndRank: "player_name_rank_label",
            points: "total_point_no",
            damage: "total_damage_no",
            jobTexture: "playercard_job",
            summonTexture: "playercard_summon"
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e);
            var a = this.WIDGET_NAMES
              , s = this.CARD_WIDGET_NAMES;
            e.setAppearanceDiscover = function() {
                var e = this.getAnimationNode();
                e && e.setAppearance("discoverer_mvp")
            }
            ,
            e.setAppearanceNotDiscover = function() {
                var e = this.getAnimationNode();
                e && e.setAppearance("only_mvp")
            }
            ,
            e.getAnimationNode = function() {
                var e = this.seekWidgetByName("q_010_player_discoverer_ui");
                return e ? e.parent : null
            }
            ,
            e.setData = function(o) {
                o.initiator ? this.setAppearanceDiscover() : this.setAppearanceNotDiscover(),
                t.each(a, function(a, r) {
                    var c = o[r]
                      , u = i.helper.seekWidgetByName(e, a);
                    if (u.setVisible(!!c),
                    null != c) {
                        var _ = {};
                        _[s.nameAndRank] = c.name + "\nRank " + c.rank,
                        _[s.points] = c.raid_points,
                        _[s.damage] = c.damage_done,
                        u.setStrings(_);
                        var l = {};
                        l[s.jobTexture] = n.Img("playercard", "job", t.padZero(c.job_id, 4), 0).png,
                        l[s.summonTexture] = n.Img("playercard", "summon", t.padZero(c.summon_id, 4), 0).png,
                        u.loadTextures(l)
                    }
                })
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    e.ccui;
    n.PopupFactoryRankUp = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-q_levelup",
            title: "RANK UP!",
            buttonLabels: {
                blueBtn: "OK"
            }
        },
        WIDGET_NAMES: {
            rankLevel: "rankup_labelimg",
            questPoints: "bonus_labelimg",
            jobPoints: "get_job_point_labelimg"
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e);
            var t = this.WIDGET_NAMES;
            e.setData = function(i) {
                var a = i.rankUpData
                  , s = i.rankLevelBefore
                  , o = i.rankLevelAfter
                  , r = {};
                r[t.rankLevel] = "<table class='nb'><tr><td class='numbox_long'><span class='white'>Rank&nbsp;" + s + "→</span><span class='yellow'>" + o + "</span></td></tr></table>",
                r[t.questPoints] = "<span class='white'>最大AP</span> <span class='orange'>" + a.ap_before + "→" + a.ap_after + "</span><br /><span class='white'>最大HP</span> <span class='orange'>+" + a.hp_increase + "</span>",
                r[t.jobPoints] = "<span class='white'>獲得英霊P</span> <span class='blue'>+" + a.job_points_gained + "</span><br /><span class='white'>(所持英霊P</span> <span class='blue'>" + a.job_points_total + "</span><span class='white'>)</span>",
                e.contentNode.setHtmlStrings(r, n.GameConfig.POPUP_CSS)
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryCharacterAbilityAcquired = n.PopupFactoryAbilityAcquired.extend({
        CHARA_POPUP_PROPERTIES: {
            title: "アビリティ習得"
        },
        create: function(e, i) {
            return n.PopupFactoryAbilityAcquired.prototype.create.call(this, t.assign(e, this.CHARA_POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryAbilityAcquired.prototype._addMethodsToPopup.call(this, e);
            this.WIDGET_NAMES;
            e.setData = function(e) {
                this._setData({
                    chara_id: e.character_id,
                    chara_name: e.character_name,
                    ability_type: e.ability_type,
                    ability_name: e.ability_name,
                    skin: e.skin || 0
                }, "chara")
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryCharacterAcquired = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_new_member",
            title: "神姫加入",
            buttonLabels: {
                blueBtn: "OK"
            }
        },
        WIDGET_NAMES: {
            characterCard: "corecard_chara_ui",
            descriptionLabel: "party_join_label"
        },
        CHARACTER_ACQUIRED_TEXT: "がパーティに加入しました！",
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e);
            var t = this.WIDGET_NAMES
              , i = this.CHARACTER_ACQUIRED_TEXT
              , a = function(e) {
                return n.createInstance("apiCharacters").get(e).fail(function(e) {
                    console.error(e.stack)
                })
            };
            e.setData = function(s) {
                a(s.character_id).then(function(a) {
                    var s = a.body;
                    n.pc.roles.CoreCardCommon._setCharacterCoreCardElementRarity(e, s, t.characterCard);
                    var o = {};
                    o[t.descriptionLabel] = s.name + i,
                    e.contentNode.setStrings(o)
                })
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryFriendRequest = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-q_003_fapp",
            title: "フレンド申請",
            buttonLabels: {
                blueBtn: "OK",
                blackBtn: "キャンセル"
            }
        },
        WIDGET_NAMES: {
            userLabel: "user_info_label",
            jobImage: "job_img",
            summonImage: "summon_img"
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e);
            var i = this.WIDGET_NAMES;
            e.setData = function(a) {
                var s = {};
                s[i.jobImage] = n.Img("playercard", "job", t.padZero(a.job_id, 4), 0).png,
                s[i.summonImage] = n.Img("playercard", "summon", t.padZero(a.summon_id, 4), 0).png,
                e.contentNode.loadTextures(s);
                var o = {};
                o[i.userLabel] = a.name + "\nRank" + a.rank + "\n" + a.summon_name,
                e.contentNode.setStrings(o)
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryNewItemAcquired = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-q_newitem",
            title: "新アイテム獲得",
            buttonLabels: {
                blueBtn: "OK"
            }
        },
        WIDGET_NAMES: {
            newLabel: "new_itemget_labelimg",
            itemIcon: "item_img",
            descriptionLabel: "item_description_label"
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e);
            var i = this.WIDGET_NAMES;
            e.setData = function(a) {
                var s = {};
                s[i.newLabel] = "<span class='red'>「" + a.name + "」</span><span class='white'>を獲得しました。</span>",
                e.contentNode.setHtmlStrings(s, n.GameConfig.POPUP_CSS);
                var o = ["corecard", a.treasure_type, t.padZero(a.id, 4)];
                ("weapon" === a.treasure_type || "summon" === a.treasure_type) && o.push(a.skin || "0");
                var r = {};
                r[i.itemIcon] = n.Img.apply(null , o).jpg,
                e.contentNode.loadTextures(r);
                var c = {};
                c[i.descriptionLabel] = a.description,
                e.contentNode.setStrings(c)
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryQuestClearBonusItemsAcquired = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-q_003_comp",
            title: "クエストコンプリート報酬",
            buttonLabels: {
                blueBtn: "OK"
            }
        },
        WIDGET_NAMES: {
            itemIcon: "item_img",
            quantityLabel: "get_label"
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e);
            var i = this.WIDGET_NAMES;
            e.setData = function(a) {
                var s = ["corecard", a.treasure_type, t.padZero(a.id, 4)];
                "weapon" === a.treasure_type && s.push(a.skin || "0");
                var o = {};
                o[i.itemIcon] = n.Img.apply(null , s).jpg,
                e.contentNode.loadTextures(o);
                var r = {};
                r[i.quantityLabel] = a.name + "を" + a.quantity + "個獲得！",
                e.contentNode.setStrings(r)
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.roles = t.pc.quest.roles || {},
    t.pc.quest.roles.QuestSelectCommon = t.pc.quest.roles.QuestSelectCommon || {},
    t.pc.quest.roles.QuestSelectCommon.popups = {
        _popups: {
            comNeedApBp1: {
                factoryName: "popupFactoryComNeedApBp1"
            },
            comNeedApBp2: {
                factoryName: "popupFactoryComNeedApBp2"
            },
            comApRestart: {
                factoryName: "popupFactoryComApRestart"
            },
            com_raid_check: {
                factoryName: "popupFactoryBlackBlue",
                title: "未確認バトルがあります",
                content: "<span class='red'>未確認のレイドバトルがあります</span>",
                buttonLabels: {
                    blueBtn: "確認する",
                    blackBtn: "キャンセル"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss(),
                        t.createInstance("router").navigate("quest/q_007")
                    },
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            q_multi_start: {
                factoryName: "popupFactoryTextOnly",
                resource: "text_button_only.json",
                title: "クエスト開始条件",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss(),
                        e._delegate.selectQuest(e)
                    }
                }
            },
            q_multi_limit: {
                factoryName: "popupFactoryBlue",
                title: "注意",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            q_caution_2: {
                factoryName: "popupFactoryBlue",
                title: "注意",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            q_caution_3: {
                factoryName: "popupFactoryTextOnlyVariableSize",
                name: "q_caution_3",
                id: "300",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            q_001_select: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-q_001_select",
                title: "後で設定する",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            q_001_story: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-q_001_story",
                title: "後で設定する",
                buttonLabels: {
                    blueBtn: "OK",
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blueBtn: function(e) {
                        e.popups.q_001_select.dismiss(),
                        this.dismiss(),
                        e._delegate.selectQuest(e)
                    },
                    blackBtn: function(e) {
                        e.popups.q_001_select.setVisible(!0),
                        this.dismiss()
                    }
                }
            },
            popupExistUnconfirmBattle: {
                factoryName: "popupFactoryBlackBlue",
                title: "未確認バトルがあります",
                content: "<span class='red'>未確認のレイドバトルがあります</span>",
                buttonLabels: {
                    blueBtn: "確認する",
                    blackBtn: "キャンセル"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss(),
                        e._delegate._navigateTo007(e)
                    },
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        }
    },
    t.pc.quest.roles.QuestSelectCommon.methods = {
        _questInfo: null ,
        startCheckQuestState: function(e, t) {
            this._selectQuest = t,
            this._popupState = 0,
            this._selectedEpisodeNum = null ,
            this.selectQuest(e)
        },
        selectQuest: function(e) {
            var t = {
                AP_SHORT: 0,
                CHALLENGE_LIMIT: 2,
                RANK_LIMIT: 4,
                EPISODE_SELECT: 8,
                EXIST_UNVERIFY_RAID: 16
            }
              , n = [{
                flag: t.EXIST_UNVERIFY_RAID,
                method: this._unverifyRaidPopup.bind(this, e)
            }, {
                flag: t.RANK_LIMIT,
                method: this._rankLimitPopup.bind(this, e)
            }, {
                flag: t.CHALLENGE_LIMIT,
                method: this._challengeLimitPopup.bind(this, e)
            }, {
                flag: t.AP_SHORT,
                method: this._apShortPopup.bind(this, e)
            }, {
                flag: t.EPISODE_SELECT,
                method: this._episodeSelectPopup.bind(this, e)
            }]
              , a = i.some(n, function(e) {
                return this._popupState & e.flag || !e.method() ? void 0 : (this._popupState |= e.flag,
                !0)
            }, this);
            a || this.startQuest(e, this._selectQuest, this._selectedEpisodeNum)
        },
        _unverifyRaidPopup: function(e) {
            if (!this._questInfo || !this._questInfo.has_unverified)
                return !1;
            var t = e.popups.com_raid_check;
            return t.open().fail(function(e) {
                console.error(e.stack)
            }),
            !0
        },
        _apShortPopup: function(e) {
            if (this._selectQuest.quest_ap <= this._questPoints.ap)
                return !1;
            var n = t.createInstance("apiAItems");
            return a.all([n.getApGain(), this.updateQuestPoints()]).spread(function(e, n) {
                this._needApBpPopupFactory = t.createInstance("popupFactoryComNeedApBp"),
                this._needApBpPopupFactory.create({
                    property: "AP",
                    questTitle: this._selectQuest.title,
                    questPoints: n,
                    items: e.body,
                    component: "quest",
                    onUse: this._onUseApItem.bind(this)
                }).open()
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            !0
        },
        _onUseApItem: function(e) {
            this._questPoints.ap = e,
            this.selectQuest(n.director.getRunningScene())
        },
        _rankLimitPopup: function(e) {
            if (!this._selectQuest || !this._selectQuest.limit_info || "number" != typeof this._selectQuest.limit_info.rank)
                return !1;
            var t = this._selectQuest.limit_info.rank;
            if (t <= this._player.rank)
                return !1;
            var n = e.popups.q_caution_2;
            return n.open().then(function() {
                var e = "<p>Rank" + t + "に達していないため<br />このクエストを開始することができません。</p><p class='red'>[開始条件]<br />Rank" + t + "以上</p>";
                n.setContent(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            !0
        },
        _challengeLimitPopup: function(e) {
            if (!this._selectQuest || !this._selectQuest.limit_info || "number" != typeof this._selectQuest.limit_info.remaining_challenge_count)
                return !1;
            var t = this._selectQuest.limit_info.remaining_challenge_count;
            return 0 >= t ? this.__multiLimitPopup(e) : this.__multiStartPopup(e, t),
            !0
        },
        __multiLimitPopup: function(e) {
            var n = e.popups.q_multi_limit;
            n.open().then(function() {
                var e = "<p class='red'>回数制限に達しているため<br />このクエストを開始することができません！<p>回数制限は<span class='red'>" + t.w("popupQuestMultiLimitResetTime") + "</span>にリセットされます。</p>";
                n.setContent(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        __multiStartPopup: function(e, t) {
            var n = e.popups.q_multi_start;
            n.open().then(function() {
                var e = "このクエストはあと<br /><span class='red'>" + t + "回</span><br />挑戦できます。";
                n.setContent(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _episodeSelectPopup: function(e) {
            return !this._selectQuest || !this._selectQuest.is_cleared || this._selectQuest.episodes.length <= 1 ? !1 : (e.popups.q_001_select.open().then(function() {
                var n = e.popups.q_001_select;
                n.blueBtn.setEnabled(!1),
                this._changeEventSkipBtn(e);
                var s = e.seekWidgetByName("btn_eventskip");
                s.addTouchEventListener(function(n, i) {
                    if (i === ccui.Widget.TOUCH_ENDED) {
                        var a = t.createInstance("playerGameConfig")
                          , s = a.getEpisodeEventSkip();
                        a.setEpisodeEventSkip(!s),
                        this._changeEventSkipBtn(e)
                    }
                }
                .bind(this)),
                i.invoke(i.map(i.range(4), function(t) {
                    return e.seekWidgetByName("episode_" + t)
                }), "setVisible", !1),
                i.each(this._selectQuest.episodes, function(n, i) {
                    var s = e.seekWidgetByName("episode_" + i);
                    s.setVisible(!0);
                    var o = s.seekWidgetByName("btn_episode")
                      , r = s.seekWidgetByName("episode_label");
                    r.setString(t.w("episode") + (i + 1)),
                    o.addTouchEventListener(function(s, o) {
                        o === ccui.Widget.TOUCH_ENDED && (this._selectedEpisodeNum = this._selectQuest.episodes[i].num,
                        e.popups.q_001_select.setVisible(!1),
                        a.all([t.createInstance("playerGameConfig").updateGameConfig(), e.popups.q_001_story.open()]).then(function() {
                            var i = e.popups.q_001_story
                              , a = i.seekWidgetByName("synopsis_label");
                            a.setString(n.description),
                            i.setTitle(this._selectQuest.quest_num + t.w("chapter") + "「" + this._selectQuest.title + "」")
                        }
                        .bind(this)))
                    }
                    .bind(this))
                }, this),
                n.setTitle(this._selectQuest.quest_num + t.w("chapter") + "「" + this._selectQuest.title + "」")
            }
            .bind(this)),
            !0)
        },
        _qCaution3Popup: function(e, i) {
            var a = e.popups.q_caution_3;
            a.open().then(function() {
                var e = "";
                (null != i.limit_info.rank || null != i.limit_info.remaining_challenge_count) && (e = "<span class='red'>【開始条件】<br /></span>"),
                null != i.limit_info.rank && (e += "<span class='red'>Rank&nbsp;" + i.limit_info.rank + "&nbsp;以上<br /></span>"),
                null != i.limit_info.remaining_challenge_count && (e += "<span class='red'>回数制限&nbsp;あと&nbsp;" + i.limit_info.remaining_challenge_count + "回<br /></span>",
                e += "<span class='mini'>※回数制限は" + t.w("popupQuestMultiLimitResetTime") + "にリセットされます。</span>"),
                i.limit_info.elixir && (e += "<p class='red'>【使用制限】<br />",
                e += 0 !== i.limit_info.elixir ? "エリクサー使用制限:" + i.limit_info.elixir + "回</p>" : "エリクサー使用不可</p>"),
                a.setContent(e, n.size(a.getSize().width, 260)),
                a.setTitle(i.title)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _changeEventSkipBtn: function(e) {
            var i = t.createInstance("playerGameConfig").getEpisodeEventSkip()
              , a = e.seekWidgetByName("btn_eventskip");
            a.setColor(n.color(i ? "#FFFFFF" : "#808080")),
            a.setBright(!i)
        },
        _cleanUpPaymentId: function() {
            var e = n.director.getRunningScene();
            if (null != e.routerParams.payment_id) {
                var i = t.createInstance("router");
                i.permanentlyRemoveRouterParam("payment_id")
            }
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.roles = t.pc.quest.roles || {},
    t.pc.quest.roles.QuestMainPageListPopups = {
        _popups: {
            comQuestInfo: {
                factoryName: "popupFactoryComQuestInfo"
            }
        }
    },
    t.pc.quest.roles.QuestMainPageListController = {
        _fillupQuestMainList: function(e, n, a) {
            if (!i.contains(["main", "free"], n))
                return void console.warn("Invalid quest type: " + n);
            var s = e.seekWidgetByName(n + "_quest_node");
            if (null === s)
                return void console.warn("[ERROR] Could not find a page parent: " + n + "_quest_node");
            var o = e.seekWidgetByName("q_001_questlist_page_ui");
            null !== o && o.removeFromParent();
            var r = "main" == n ? "getMainQuestsInCurrentArea" : "getFreeQuestsInCurrentArea"
              , c = t.createInstance("apiAAreas")
              , u = "main" == n ? this._initFuncMainQuestPanel.bind(this) : this._initFuncFreeQuestPanel.bind(this);
            this._tmpWidgetRecords = [];
            var _ = c[r]().then(function(e) {
                console.log(e.body);
                var n = {
                    targetNode: "quest_base",
                    touchEventFuncName: a
                };
                return this._fillupList(s, {
                    viewParent: t.PageListParams.QUEST_LIST.viewParent,
                    subPageRes: t.PageListParams.QUEST_LIST.subPageRes,
                    panelsPerPage: t.PageListParams.QUEST_LIST.perPage
                }, e.body.data, e.body.max_record_count, n, u),
                e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return _
        },
        _initFuncMainQuestPanel: function(e, t, n) {
            console.log(e, t, n),
            this._tmpWidgetRecords.push({
                widget: e,
                record: t
            }),
            this._initFuncMainQuestpanelCommon(e, t)
        },
        _initFuncFreeQuestPanel: function(e, t, n) {
            console.log(e, t, n),
            this._tmpWidgetRecords.push({
                widget: e,
                record: t
            }),
            this._initFuncMainQuestpanelCommon(e, t)
        },
        _initFuncMainQuestpanelCommon: function(e, t) {
            if (!i.isUndefined(t.type) && !i.contains(["main", "free", "raid"], t.type))
                return void console.warn("Invalid card type: " + t.type);
            var n = e.getActionByTag(e.tag);
            console.log(n),
            n && n.gotoFrameAndPause(n.animationInfo[t.type].startIndex),
            this._initFuncQuestpanelCommon(e, t)
        },
        _initFuncQuestpanelCommon: function(e, n, a) {
            a = void 0 === a && !0;
            var s = e.seekWidgetByName("questimg");
            if (null !== s && !i.isUndefined(n.type) && !i.isUndefined(n.quest_id)) {
                var o = t.Img("questimg", n.type + "-quest", i.padZero(n.quest_id, 4), 1).jpg;
                s.loadTexture(o)
            }
            var r = e.seekWidgetByName("quest_header_label");
            null === r || i.isUndefined(n.quest_num) || i.isUndefined(n.title) || r.setString("main" === n.type ? "第" + n.quest_num + t.w("chapter") + " " + n.title : n.title);
            var c = e.seekWidgetByName("cons_ap_label");
            null === c || i.isUndefined(n.quest_ap) || c.setString("AP" + n.quest_ap);
            var u = e.seekWidgetByName("cons_label");
            null === u || i.isUndefined(n.event_info) || i.isUndefined(n.event_info.type) || "quest_ap_half" === n.event_info.type && (u.setString("現在消費AP1/2"),
            u.setVisible(!0));
            var _ = e.seekWidgetByName("progress_label");
            null === _ || i.isUndefined(n.now_progress) || i.isUndefined(n.max_progress) || _.setString("進行度：" + n.now_progress + "/" + n.max_progress);
            var l = 4
              , d = e.seekWidgetByName("gauge_base");
            null === d || i.isUndefined(n.max_progress) || d.setPercent(100 * n.max_progress / l);
            var p = e.seekWidgetByName("gauge_rate");
            null === p || i.isUndefined(n.now_progress) || i.isUndefined(n.max_progress) || p.setPercent(100 * n.now_progress / l);
            var h = e.seekWidgetByName("quest_reward");
            if (null !== h && !i.isUndefined(n.reward_info) && !i.isUndefined(n.reward_info.item_id)) {
                var g = i.isNumber(n.now_progress) && i.isNumber(n.max_progress) && n.now_progress === n.max_progress;
                if (!g) {
                    var m = t.Img("rewardicon", "item", i.padZero(n.reward_info.item_id, 4)).png;
                    h.loadTexture(m)
                }
                h.setVisible(!g)
            }
            var f = e.seekWidgetByName("quest_time_label");
            null === f || i.isUndefined(n.time_left) || f.setString(n.time_left);
            var b = e.seekWidgetByName("img_quest_info_icon");
            if (b && a) {
                if (!i.isUndefined(n.is_new) && !i.isUndefined(n.is_cleared)) {
                    var v = n.is_new || n.is_cleared
                      , y = n.is_new ? "quest/res/q_icon_quest_new.png" : n.is_cleared ? "quest/res/q_icon_quest_clear.png" : "";
                    b.loadTexture(y, ccui.Widget.PLIST_TEXTURE),
                    b.setVisible(v)
                }
                var P = this._questInfo;
                (P && P.in_progress && P.in_progress.own_quest && n.a_quest_id === P.in_progress.own_quest.a_quest_id && n.type === P.in_progress.own_quest.type || P && P.in_progress && P.in_progress.own_raid && n.a_quest_id === P.in_progress.own_raid.a_quest_id) && (b.setVisible(!0),
                b.loadTexture("quest/res/q_icon_quest_now.png", ccui.Widget.PLIST_TEXTURE))
            }
            "raid" === n.type ? this._setRaidIconBallonAndTouchEvent(e, n) : this._setCommonIconBallonAndTouchEvent(e, n)
        },
        _setCommonIconBallonAndTouchEvent: function(e, t) {
            var n = this._getBtnIconBalloonNode(e);
            if (null !== n) {
                if (t.is_cleared)
                    return void n.setVisible(!1);
                n.relationQuest = t,
                n.addTouchEventListener(this._comQuestInfo.bind(this))
            }
        },
        _setRaidIconBallonAndTouchEvent: function(e, t) {
            var n = this._getBtnIconBalloonNode(e);
            null !== n && (n.relationQuest = t,
            n.addTouchEventListener(this._raidInfoPopup.bind(this)))
        },
        _getBtnIconBalloonNode: function(e) {
            return null == e ? null : e.seekWidgetByName("btn_icon_balloon")
        },
        _fillupSpecialQuestList: function(e, n) {
            var i = e.seekWidgetByName("q_004_questlist_page_ui");
            null !== i && i.removeFromParent();
            var a = e.seekWidgetByName("window_gray")
              , s = t.createInstance("apiAQuests").getListSpecialQuest("special").then(function(e) {
                console.log(e.body);
                var i = {
                    targetNode: "quest_base",
                    touchEventFuncName: n
                };
                return this._fillupList(a, {
                    viewParent: t.PageListParams.SP_QUEST_LIST.viewParent,
                    subPageRes: t.PageListParams.SP_QUEST_LIST.subPageRes,
                    panelsPerPage: t.PageListParams.SP_QUEST_LIST.perPage
                }, e.body.data, e.body.max_record_count, i, this._initFuncSpecialQuestpanelCommon.bind(this)),
                e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return s
        },
        _initFuncSpecialQuestpanelCommon: function(e, t) {
            if (!i.isUndefined(t.type) && !i.contains(["raid", "daily", "guerrilla", "event"], t.type))
                return void console.warn("Invalid card type: " + t.type);
            var n = e.getActionByTag(e.tag);
            console.log(n),
            n && n.gotoFrameAndPause(n.animationInfo[t.type].startIndex),
            this._initFuncQuestpanelCommon(e, t)
        },
        _raidInfoPopup: function(e, t) {
            if (t === ccui.Widget.TOUCH_ENDED) {
                var i = n.director.getRunningScene()
                  , a = e.relationQuest;
                this._qCaution3Popup(i, a)
            }
        },
        _comQuestInfo: function(e, t) {
            var i = e.relationQuest;
            if (t === ccui.Widget.TOUCH_ENDED) {
                var a = n.director.getRunningScene()
                  , s = a.popups.comQuestInfo
                  , o = i.title
                  , r = "";
                null != i.limit_info && null != i.limit_info.rank && (r = "[開始条件]\nRank " + i.limit_info.rank + "以上"),
                s.open({
                    title: o,
                    description: i.description,
                    start_condition: r
                }).then(function() {}
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
        }
    },
    i.assign(t.pc.quest.roles.QuestMainPageListController, t.pc.list.roles.PageListControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.roles = t.pc.quest.roles || {},
    t.pc.quest.roles.QuestSupportPageListController = {
        _fillupSupportSummonList: function(e, n) {
            var i = e.seekWidgetByName("q_004_questlist_page_ui");
            null !== i && i.removeFromParent();
            var a = t.createInstance("apiASummons").getSupporters().then(function(i) {
                console.log(i.body);
                var a = {
                    targetNode: "supportlist_base",
                    touchEventFuncName: n
                };
                return this._fillupList(e, {
                    viewParent: t.PageListParams.SUPPORT_SUMMON_LIST.viewParent,
                    subPageRes: t.PageListParams.SUPPORT_SUMMON_LIST.subPageRes,
                    panelsPerPage: t.PageListParams.SUPPORT_SUMMON_LIST.perPage
                }, i.body.data, i.body.max_record_count, a, this._initFuncSupportSummonPanelCommon.bind(this)),
                i.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return a
        },
        _initFuncSupportSummonPanelCommon: function(e, t) {
            if (!n.isUndefined(t.summon_info)) {
                var i = t.summon_info;
                this._setSummonCoreCardElementRarity(e, i, "corecard_summon_ui")
            }
            var a = e.seekWidgetByName("user_name_label");
            null === a || n.isUndefined(t.player_info) || n.isUndefined(t.player_info.name) || n.isUndefined(t.player_info.rank) || a.setString(t.player_info.name + " Rank " + t.player_info.rank);
            var s = e.seekWidgetByName("summon_name_label");
            null === s || n.isUndefined(t.summon_info) || n.isUndefined(t.summon_info.name) || n.isUndefined(t.summon_info.level) || s.setString("Lv" + t.summon_info.level + " " + t.summon_info.name);
            var o = e.seekWidgetByName("summon_support_label");
            null === o || n.isUndefined(t.summon_info) || n.isUndefined(t.summon_info.effect_description) || o.setString(t.summon_info.effect_description);
            var r = e.seekWidgetByName("last_login_label");
            null === r || n.isUndefined(t.login_state_str) || r.setString(t.login_state_str.replace("にログイン", "に\nログイン"));
            var c = e.seekWidgetByName("friend_icon");
            null === c || n.isUndefined(t.is_friend) || c.setVisible(t.is_friend)
        },
        getSelectedSupporterData: function(e, t) {
            if (null != this._supporterData)
                return this._supporterData;
            var i = this.getSelectedSupporterId(e)
              , a = n.find(t, {
                a_supporter_id: i
            });
            return this._supporterData = a,
            a
        }
    },
    n.assign(t.pc.quest.roles.QuestSupportPageListController, t.pc.roles.CoreCardCommon, t.pc.list.roles.PageListControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.roles = t.pc.quest.roles || {},
    t.pc.quest.roles.QuestRaidPageListController = {
        _fillupRaidBattleList: function(e, i, a) {
            if (!n.contains(["request", "unverify", "history"], i))
                return void console.warn("Invalid quest type: " + i);
            var s = "q_006_node"
              , o = t.PageListParams.RAID_REQUEST_LIST.pageUIResPrefix
              , r = t.PageListParams.RAID_REQUEST_LIST.pageUIResName
              , c = "getRaidRequestList"
              , u = this._initFuncRaidPanel.bind(this);
            "unverify" === i ? (s = "q_007_node",
            o = t.PageListParams.RAID_UNVERIFIED_LIST.pageUIResPrefix,
            r = t.PageListParams.RAID_UNVERIFIED_LIST.pageUIResName,
            c = "getUnverifiedList",
            u = this._initFuncUnverifyPanel.bind(this)) : "history" === i && (s = "q_008_node",
            o = t.PageListParams.RAID_HISTORY_LIST.pageUIResPrefix,
            r = t.PageListParams.RAID_HISTORY_LIST.pageUIResName,
            c = "getHistoryList",
            u = this._initFuncHistoryPanel.bind(this));
            var _ = e.seekWidgetByName(s);
            if (null === _)
                return void console.warn("[ERROR] Could not find a list parent node.");
            var l = e.seekWidgetByName(r);
            null !== l && l.removeFromParent();
            var d = t.createInstance("apiABattles")[c]().then(function(e) {
                console.log(e.body);
                var i = {
                    targetNode: "quest_base",
                    touchEventFuncName: a
                };
                return this._fillupList(_, {
                    viewParent: t.PageListParams.RAID_LIST.viewParent,
                    subPageRes: o + r,
                    panelsPerPage: t.PageListParams.RAID_LIST.perPage
                }, e.body.data, e.body.max_record_count, i, u),
                0 === e.body.max_record_count && (n.isFunction(this._showNothingLabel) ? this._showNothingLabel(_) : console.warn("[ERROR] You sould assign UIUtility role.")),
                e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return d
        },
        _initFuncRaidPanel: function(e, t) {
            if (!n.isUndefined(t.has_union_member) && t.has_union_member === !0) {
                var i = e.getActionByTag(e.tag);
                console.log(i),
                i && i.gotoFrameAndPause(i.animationInfo.union.startIndex)
            }
            this._initFuncRaidBattlePanelCommon(e, t)
        },
        _initFuncUnverifyPanel: function(e, t) {
            if (!n.isUndefined(t.had_won) && t.had_won === !1) {
                var i = e.getActionByTag(e.tag);
                console.log(i),
                i && i.gotoFrameAndPause(i.animationInfo.failed.startIndex)
            }
            this._initFuncRaidBattlePanelCommon(e, t, "unverify")
        },
        _initFuncHistoryPanel: function(e, t) {
            if (!n.isUndefined(t.had_won) && t.had_won === !1) {
                var i = e.getActionByTag(e.tag);
                console.log(i),
                i && i.gotoFrameAndPause(i.animationInfo.failed.startIndex)
            }
            this._initFuncRaidBattlePanelCommon(e, t, "history")
        },
        _initFuncRaidBattlePanelCommon: function(e, i, a) {
            a = a || "raid";
            var s = e.seekWidgetByName("questimg_raid-quest");
            if (null !== s && !n.isUndefined(i.quest_id)) {
                var o = 0 === i.quest_type.indexOf("event") ? "event-quest" : "raid-quest"
                  , r = t.Img("questimg", o, n.padZero(i.quest_id, 4), 1).jpg;
                s.loadTexture(r)
            }
            var c = e.seekWidgetByName("quest_header_label");
            null === c || n.isUndefined(i.enemy_level) || n.isUndefined(i.enemy_name) || c.setString("Lv" + i.enemy_level + " " + i.enemy_name);
            var u = e.seekWidgetByName("hp_gauge");
            null === u || n.isUndefined(i.enemy_hp) || (u.percent = i.enemy_hp / i.enemy_max * 100);
            var _ = e.seekWidgetByName("bp_base")
              , l = e.seekWidgetByName("bp_cons_gauge");
            null === _ || null === l || n.isUndefined(i.battle_bp) || (_.setVisible(!0),
            l.percent = 100 * i.battle_bp / 5);
            var d = e.seekWidgetByName("help_label");
            if (null !== d && !n.isUndefined(i.help_requested_player_name)) {
                var p = i.is_own_raid ? "自分が発生させたレイドバトルです" : i.help_requested_player_name + "からの救援依頼";
                d.setString(p)
            }
            var h = e.seekWidgetByName("join_count_label");
            null === h || n.isUndefined(i.participants) || h.setString(i.participants.toString());
            var g = e.seekWidgetByName("time_rest_label");
            null === g || n.isUndefined(i.time_left) || g.setString(i.time_left);
            var m = e.seekWidgetByName("defeat_date_label");
            null === m || n.isUndefined(i.end_date) || m.setString(i.end_date);
            var f = e.seekWidgetByName("cons_label");
            null === f || n.isUndefined(i.event_info) || n.isUndefined(i.event_info.type) || "quest_ap_half" === i.event_info.type && (f.setString("現在消費BP1/2"),
            f.setVisible(!0));
            var b = e.seekWidgetByName("reward_label");
            null !== b && "unverify" === a ? (b.setString("報酬を確認できます▶▶"),
            b.setVisible(!0)) : null != b && "history" === a && (b.setString("詳細結果を確認できます▶▶"),
            b.setVisible(!0));
            var v = e.seekWidgetByName("img_quest_info_icon");
            if (null !== v && !n.isUndefined(i.is_new) && !n.isUndefined(i.is_cleared)) {
                var y = i.is_new || i.is_cleared
                  , P = i.is_new ? "quest/res/q_icon_quest_new.png" : i.is_cleared ? "quest/res/q_icon_quest_clear.png" : "";
                v.loadTexture(P, ccui.Widget.PLIST_TEXTURE),
                v.setVisible(y)
            }
            null === v || n.isUndefined(i.is_joined) || i.is_joined !== !0 || (v.loadTexture("quest/res/q_icon_quest_enter-war.png", ccui.Widget.PLIST_TEXTURE),
            v.setVisible(!0))
        }
    },
    n.assign(t.pc.quest.roles.QuestRaidPageListController, t.pc.roles.CoreCardCommon, t.pc.list.roles.PageListControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = (e.Q,
    e.console);
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.roles = t.pc.quest.roles || {},
    t.pc.quest.roles.QuestStart = t.pc.quest.roles.QuestStart || {},
    t.pc.quest.roles.QuestStart = {
        _targetParam: null ,
        questStart: function(e, n) {
            var i = t.createInstance("router");
            i.setNavigateOption({
                party: null
            }),
            this._targetParam = e.routerParams[i.currentScene];
            var a = {
                quest: this._startQuest,
                raid: this._startRaid
            };
            t.createInstance("apiAParties").changeDeck(n).then(a[this._targetParam.target].bind(this, e, n))
        },
        _startQuest: function(e, a) {
            t.createInstance("apiAQuests").startQuest(this._targetParam.a_quest_id, this._targetParam.quest_type, a, this._supporterData.summon_info.a_summon_id, this._isLatestEpisode ? void 0 : this.selectedEpisode.num).then(function(a) {
                i.log(a.body);
                var s = a.body;
                if (n.isUndefined(s.cannot_progress_info)) {
                    var o = a.body
                      , r = {
                        talk: {
                            page: "scenario/scenario-play",
                            idName: "id"
                        },
                        "harem-character": {
                            page: "scenario/harem-play",
                            idName: "id"
                        },
                        "harem-job": {
                            page: "scenario/harem-play",
                            idName: "id"
                        },
                        "harem-summon": {
                            page: "scenario/harem-play",
                            idName: "id"
                        },
                        "harem-story": {
                            page: "scenario/harem-play",
                            idName: "id"
                        },
                        battle: {
                            page: "battle",
                            idName: "a_battle_id"
                        },
                        battle_result: {
                            page: "quest/q_003",
                            idName: "a_battle_id"
                        },
                        finish: {
                            page: "quest/q_001",
                            idName: "id"
                        }
                    }
                      , c = r[o.next_info.next_kind]
                      , u = {};
                    u[c.idName] = o.next_info.id,
                    u.a_quest_id = this._targetParam.a_quest_id,
                    u.quest_type = this._targetParam.quest_type,
                    ("raid" === u.quest_type || "event_raid" === u.quest_type) && (u.is_own_raid = !0),
                    delete e.routerParams.q_002,
                    delete e.routerParams.q_009,
                    t.createInstance("router").navigate(c.page, u, n.merge({
                        ignoreImplicitRoute: /^scenario/.test(c.page)
                    }, u))
                } else if ("cannot_use_character" === s.cannot_progress_info.type) {
                    var _ = e.popups.popupCaution
                      , l = n.clone(s.cannot_progress_info.data.names)
                      , d = l.shift();
                    n.each(l, function(e, t) {
                        var n = t % 2 === 0 ? ", " : "<br />";
                        d = d + n + e
                    }),
                    _.setContent("<p>以下のキャラがパーティに編成されているため、<br />クエストを開始することができません。</p><p class='red'>[禁止条件]<br />" + d + "<br />" + s.cannot_progress_info.data.reason + "</p>"),
                    _.open()
                } else if ("sp_quest_timeover" === s.cannot_progress_info.type) {
                    var _ = e.popups.popupCaution;
                    _.setTitle("SPクエスト出現時間終了"),
                    _.setContent("選択したSPクエストは、出現時間終了のため<br />クエストを開始することができませんでした。"),
                    _.open(),
                    _.blueBtn.addTouchEventListener(function(e, n) {
                        n === ccui.Widget.TOUCH_ENDED && (i.log(n),
                        t.createInstance("router").navigate("quest/q_001", {}))
                    }
                    .bind(this))
                } else if ("already_finished" === s.cannot_progress_info.type) {
                    var _ = e.popups.popupCaution;
                    _.setTitle("このクエストは終了しました"),
                    _.setContent("このクエストはすでに終了しました。"),
                    _.open(),
                    _.blueBtn.addTouchEventListener(function(e, n) {
                        n === ccui.Widget.TOUCH_ENDED && (i.log(n),
                        t.createInstance("router").navigate("quest/q_001", {}))
                    }
                    .bind(this))
                } else if ("does_not_have_enough_ap" === s.cannot_progress_info.type) {
                    var _ = e.popups.popupCaution;
                    _.setTitle("APが不足しています"),
                    _.setContent("クエスト開始に必要なAPが不足しています。"),
                    _.open(),
                    _.blueBtn.addTouchEventListener(function(e, n) {
                        n === ccui.Widget.TOUCH_ENDED && (i.log(n),
                        t.createInstance("router").navigate("quest/q_001", {}))
                    }
                    .bind(this))
                } else if ("challenge_limit_reached" === s.cannot_progress_info.type) {
                    var _ = e.popups.popupCaution
                      , p = "<p class='red'>回数制限に達しているため<br />このクエストを開始することができません！<p>回数制限は<span class='red'>" + t.w("popupQuestMultiLimitResetTime") + "</span>にリセットされます。</p>";
                    _.setContent(p),
                    _.open(),
                    _.blueBtn.addTouchEventListener(function(e, n) {
                        n === ccui.Widget.TOUCH_ENDED && t.createInstance("router").navigate("quest/q_001", {})
                    }
                    .bind(this))
                } else
                    t.createInstance("questStateManager").gotoNextQuestState()
            }
            .bind(this)).fail(function(e) {
                i.error(e.stack)
            })
        },
        _startRaid: function(e, a) {
            t.createInstance("apiABattles").joinBattle(this._targetParam.a_battle_id, this._supporterData.summon_info.a_summon_id, a, this._targetParam.quest_type).then(function(a) {
                i.log(a.body);
                var s = a.body
                  , o = this._targetParam.event_id
                  , r = this._targetParam.quest_type;
                if (n.isUndefined(s.cannot_progress_info))
                    t.createInstance("router").navigate("battle", {
                        quest_type: this._targetParam.quest_type,
                        a_battle_id: this._targetParam.a_battle_id,
                        a_player_id: this._targetParam.a_player_id,
                        a_quest_id: this._targetParam.a_quest_id,
                        is_own_raid: this._targetParam.is_own_raid
                    });
                else if ("already_participants_max" === s.cannot_progress_info.type) {
                    var c = e.popups.popupCaution;
                    c.setTitle("最大参戦人数に達しています"),
                    c.setContent("レイドバトルの参戦人数が最大参戦人数に達しているため、<br />バトルに参加できません。"),
                    c.open(),
                    c.blueBtn.addTouchEventListener(function(e, n) {
                        n === ccui.Widget.TOUCH_ENDED && (i.log(n),
                        t.createInstance("router").navigate("quest/q_006", {}))
                    }
                    .bind(this))
                } else if ("already_finished" === s.cannot_progress_info.type) {
                    var c = e.popups.popupCaution;
                    c.setTitle("このバトルは終了しました"),
                    c.setContent("このバトルはすでに終了しました。"),
                    c.open(),
                    c.blueBtn.addTouchEventListener(function(a, s) {
                        s === ccui.Widget.TOUCH_ENDED && (i.log(s),
                        n.isFunction(this._navigate009ToQuestTop) ? this._navigate009ToQuestTop(e, r, o) : t.createInstance("router").navigate("quest/q_001", {}))
                    }
                    .bind(this))
                } else if ("has_unconfirmed_battle" === s.cannot_progress_info.type) {
                    var c = e.popups.popupCaution;
                    c.setTitle("未確認バトルがあります"),
                    c.setContent("<span class='red'>未確認のレイドバトルがあります</span>"),
                    c.open(),
                    c.blueBtn.addTouchEventListener(function(e, n) {
                        t.createInstance("router").navigate("quest/q_007")
                    })
                } else if ("does_not_have_enough_bp" === s.cannot_progress_info.type) {
                    var c = e.popups.popupCaution;
                    c.setTitle("BPが不足しています"),
                    c.setContent("参戦に必要なBPが不足しています。"),
                    c.open(),
                    c.blueBtn.addTouchEventListener(function(e, n) {
                        n === ccui.Widget.TOUCH_ENDED && (i.log(n),
                        t.createInstance("router").navigate("quest/q_006", {}))
                    }
                    .bind(this))
                } else if ("has_unconfirmed_battle" === s.cannot_progress_info.type) {
                    var c = e.popups.popupCaution;
                    c.setTitle("未確認バトルがあります"),
                    c.setContent("<span class='red'>未確認のレイドバトルがあります</span>"),
                    c.open(),
                    c.blueBtn.addTouchEventListener(function(e, n) {
                        t.createInstance("router").navigate("quest/q_007")
                    })
                } else if ("challenge_limit_reached" === s.cannot_progress_info.type) {
                    var c = e.popups.popupCaution
                      , u = "<p class='red'>回数制限に達しているため<br />このクエストを開始することができません！<p>回数制限は<span class='red'>" + t.w("popupQuestMultiLimitResetTime") + "</span>にリセットされます。</p>";
                    c.setContent(u),
                    c.open(),
                    c.blueBtn.addTouchEventListener(function(e, n) {
                        n === ccui.Widget.TOUCH_ENDED && t.createInstance("router").navigate("quest/q_001", {})
                    }
                    .bind(this))
                } else
                    t.createInstance("router").navigate("battle", {
                        quest_type: this._targetParam.quest_type,
                        a_battle_id: this._targetParam.a_battle_id,
                        a_player_id: this._targetParam.a_player_id,
                        a_quest_id: this._targetParam.a_quest_id,
                        is_own_raid: this._targetParam.is_own_raid
                    })
            }
            .bind(this)).fail(function(e) {
                i.error(e.stack)
            })
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.roles = t.pc.quest.roles || {},
    t.pc.quest.roles.QuestSupportPopupCommon = {
        _popups: {
            popupQuestSup: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-q_002_sup",
                title: "パーティ編成",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "クエストへ行く"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        e._delegate.questStart(e, e._delegate.currentDeck.a_party_id),
                        this.dismiss()
                    }
                }
            },
            popupConfirmGoToParty001: {
                factoryName: "popupFactoryBlackBlue",
                title: "パーティ編成変更確認",
                content: "パーティ編成を変更しますか？",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss(),
                        e._delegate.navigateToParty(e)
                    }
                }
            },
            popupConfirmAutoOrgWithElement: {
                factoryName: "popupFactoryBlackBlue",
                title: "おすすめ編成",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupCaution: {
                factoryName: "popupFactoryBlue",
                title: "注意",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        supportCommonSettings: {
            isRaid: !1,
            hasInit: !1
        },
        getPartyData: function() {
            var e = t.createInstance("apiAParties").getDecks().then(function(e) {
                return this.deckList = e.body.decks,
                e
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return e
        },
        setSupportCommonisRaid: function(e) {
            this.supportCommonSettings.isRaid = e,
            this.supportCommonSettings.hasInit = !1
        },
        openPartySelector: function(e, a, s) {
            var o = n.director.getRunningScene()
              , r = o.popups.popupQuestSup;
            r.open().then(function() {
                this.supportCommonSettings.isRaid && !this.supportCommonSettings.hasInit && (r.seekWidgetByName("blue_btn").setTitleText("レイドバトルへ"),
                this.supportCommonSettings.hasInit = !0);
                var n = 0;
                this._changePopupByPartyId(r, n);
                var c = r.seekWidgetByName("deck_list_page");
                c.removeAllChildren();
                var u = []
                  , _ = 0;
                i.each(this.deckList, function(e, t) {
                    u.push(this._createPartyNode(e, t)),
                    e.selected && (_ = t)
                }, this);
                var l = new t.PageView;
                l.initialize(u, function(e, t) {
                    console.log("changed page to: " + t),
                    console.log(this.deckList[t - 1].party_name),
                    this._changePopupByPartyId(r, t - 1),
                    this.currentDeckPage = e,
                    this.currentDeck = this.deckList[t - 1],
                    this._changePartyBtn(r, this.currentDeck.in_use, 6 === this.selectedEpisode.recommended_element_type)
                }, this),
                l.setDirection(ccui.ScrollView.DIR_HORIZONTAL),
                c.addChild(l);
                var d = [];
                d[t.PAGE_CONTROLLER_CONTROLS.NEXT_BUTTON] = "btn_next_page",
                d[t.PAGE_CONTROLLER_CONTROLS.PREVIOUS_BUTTON] = "btn_prev_page";
                (new t.PageController).init(o, d, l);
                l.gotoFirstPage(),
                l.gotoPageByIndex(_),
                t.setTouchEventHandlers(r, {
                    "TOUCH_ENDED btn_organize_party": function() {
                        o.popups.popupConfirmGoToParty001.open()
                    }
                    .bind(this),
                    "TOUCH_ENDED btn_organize_advice": function() {
                        this._showpopupConfirmAutoOrgWithElement(this.selectedEpisode)
                    }
                    .bind(this)
                }),
                this._panelAppearanceForPopup(r.seekWidgetByName("support_base"), e);
                var p = "";
                null != a.limit_info.elixir && (p = 0 == a.limit_info.elixir ? "<span class='red'>エリクサーの使用不可</span>" : "<span class='red'>エリクサーの使用制限：" + a.limit_info.elixir + "回</span>"),
                r.seekWidgetByName("ap_or_bp_labelimg").setVisible(!0);
                var h = this.supportCommonSettings.isRaid && o.routerParams.q_009.battle_bp
                  , g = h ? "BP" : "AP"
                  , m = Number(s[h ? "bp" : "ap"])
                  , f = m - Number(h ? o.routerParams.q_009.battle_bp : a.quest_ap);
                console.log("STYLE で無理やり調整しているため最終的には CSS で解決するべし - 2015.06.17 藤原殿に報告済み");
                var b = "<div style='padding-top: 8px;'>" + p + this._getApBpLabelHtmlContent(g, m, f);
                r.setHtmlStrings({
                    ap_or_bp_labelimg: b
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _getApBpLabelHtmlContent: function(e, t, n) {
            return "<table class='nb'><tr><td class='numbox_long'><span class='white'>" + e + t + "&rarr;</span><span class='yellow'>" + n + "</span></td></tr></table>"
        },
        _changePopupByPartyId: function(e, t) {
            this._setPopupQuestSubTitle(e, this.deckList[t].party_name),
            this._setCurrentIcon(e, t),
            this._setButtonStatus(e, t)
        },
        _setPopupQuestSubTitle: function(e, t) {
            e.seekWidgetByName("title_label").setString("パーティ編成[" + i.last(t) + "]")
        },
        _setCurrentIcon: function(e, t) {
            i.each(i.range(6), function(n) {
                e.seekWidgetByName("party_current_icon_" + n).setVisible(n == t)
            }, this)
        },
        _setButtonStatus: function(e, t) {},
        _createPartyNode: function(e, t) {
            var n = ccs.load(res["core-popup-party_change_page_ui"]).node;
            return this._fillupPartyNode(n, e, t)
        },
        _fillupPartyNode: function(e, n, a) {
            var s = n.job
              , o = t.createInstance("CoreCardJobUI");
            o.setImg(s.id, 0),
            o.setIconElement(s.element_type);
            var r = o.getResult();
            e.seekWidgetByName("corecard_job_ui").addChild(r),
            e.seekWidgetByName("corecard_job_ui").setVisible(!0);
            var c = 6;
            i.each(i.range(c), function(t) {
                e.seekWidgetByName("corecard_chara_ui_" + t).setVisible(!1)
            });
            var u = 4;
            n.job.element_type;
            i.each(n.characters.slice(0, u), function(n, a) {
                if (!i.isUndefined(n.id) || !i.isUndefined(n.character_id)) {
                    n.id = n.id || n.character_id;
                    var s = e.seekWidgetByName("corecard_chara_ui_" + a)
                      , o = t.createInstance("CoreCardCharacterUI", ["e_r"]);
                    o.setAroused(n.is_aroused),
                    o.setImg(n.id, n.skin || 0),
                    o.setIconElement(n.element_type),
                    o.setIconRarity(n.rare);
                    var r = o.getResult();
                    s.addChild(r),
                    s.setVisible(!0)
                }
            });
            var _ = u;
            i.each(n.characters.slice(_, c), function(n, a) {
                if (!i.isUndefined(n.id) || !i.isUndefined(n.character_id)) {
                    n.id = n.id || n.character_id;
                    var s = e.seekWidgetByName("corecard_chara_ui_" + (a + _))
                      , o = t.createInstance("CoreCardCharacterUI");
                    o.setAroused(n.is_aroused),
                    o.setImg(n.id, n.skin || 0),
                    o.setIconElement(n.element_type),
                    o.setIconRarity(n.rare);
                    var r = o.getResult();
                    s.addChild(r),
                    s.setVisible(!0)
                }
            });
            var l = t.createInstance("CoreCardSummonUI");
            l.setImg(n.leader_summon.id, n.leader_summon.skin || 0),
            l.setIconElement(n.leader_summon.element_type),
            l.setIconRarity(n.leader_summon.rare);
            var d = l.getResult();
            return e.seekWidgetByName("corecard_summon_ui").addChild(d),
            e.seekWidgetByName("corecard_summon_ui").setVisible(!0),
            e.setStrings({
                summon_name_level: "Lv" + n.leader_summon.level + " " + n.leader_summon.name,
                summon_attack: n.leader_summon.attack_description,
                summon_support: n.leader_summon.effect_description
            }),
            e
        },
        _changePartyBtn: function(e, t, n) {
            var i = {
                setVisible: function() {}
            }
              , a = e.seekWidgetByName("btn_organize_advice") || i
              , s = e.seekWidgetByName("btn_organize_party") || i
              , o = e.seekWidgetByName("random_enemy_label") || i
              , r = e.seekWidgetByName("busy_party_label") || i;
            s._origX || (s._origX = s.x),
            t ? (a.setVisible(!1),
            s.setVisible(!1),
            o.setVisible(!1),
            r.setVisible(!0)) : (s.setVisible(!0),
            n ? (o.setVisible(!0),
            a.setVisible(!1),
            s.x = s._origX + 30) : (o.setVisible(!1),
            a.setVisible(!0),
            s.x = s._origX),
            r.setVisible(!1))
        },
        _panelAppearanceForPopup: function(e, t) {
            this._setSummonCoreCardElementRarity(e, t.summon_info, "corecard_summon_ui"),
            e.setStrings({
                plus_no: t.summon_info.bonus > 0 ? "+" + t.summon_info.bonus : "",
                name_label: t.player_info.name + " Rank " + t.player_info.rank,
                summon_name_label: "Lv" + t.summon_info.level + " " + t.summon_info.name,
                summon_attack_label: t.summon_info.attack_description,
                summon_support_label: t.summon_info.effect_description,
                last_login_label: t.login_state_str
            }),
            e.seekWidgetByName("friend_icon").setVisible(t.is_friend),
            e.seekWidgetByName("nofriend_label_panel").setVisible(!t.is_friend)
        },
        _showpopupConfirmAutoOrgWithElement: function(e) {
            var t = n.director.getRunningScene()
              , i = t.popups.popupConfirmAutoOrgWithElement;
            i.open().then(function() {
                var t = ""
                  , n = e.recommended_element_type;
                switch (n) {
                case 0:
                    t = "<span class='red_shadow'>火属性</span>";
                    break;
                case 1:
                    t = "<span class='blue_shadow'>水属性</span>";
                    break;
                case 2:
                    t = "<span class='green_shadow'>風属性</span>";
                    break;
                case 3:
                    t = "<span class='yellow_shadow'>雷属性</span>";
                    break;
                case 4:
                    t = "<span class='dark_shadow'>闇属性</span>";
                    break;
                default:
                    t = "<span class='light_shadow'>光属性</span>"
                }
                t = "<p>" + t + "が有利なバトルです。<br />" + t + "のパラメーターを優先して<br />パーティ・ウェポン・幻獣を編成します。</p><p class='red mini'>※現在のパーティ編成は上書きされます。</p>",
                i.setContent(t),
                i.blueBtn.addTouchEventListener(function(e, t) {
                    t === ccui.Widget.TOUCH_ENDED && (console.log(t),
                    this._makeRecommendedDeck(n))
                }
                .bind(this))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _makeRecommendedDeck: function(e) {
            var n = t.createInstance("apiAParties");
            n.makeRecommendedDeck(this.currentDeck.a_party_id, "all", e).then(function(e) {
                console.debug(e.body),
                this.selectedDeck = e.body.deck;
                var t = this.selectedDeck.summons[0];
                this.currentDeck.characters = this.selectedDeck.characters,
                this.currentDeck.leader_summon.bonus_point = t.bonus,
                this.currentDeck.leader_summon.element_type = t.element_type,
                this.currentDeck.leader_summon.id = t.summon_id,
                this.currentDeck.leader_summon.level = t.level,
                this.currentDeck.leader_summon.name = t.name,
                this.currentDeck.leader_summon.rare = t.rare,
                this.currentDeck.leader_summon.skin = t.skin || 0,
                i.isUndefined(t.attack_info) || i.isUndefined(t.attack_info.description) || (this.currentDeck.leader_summon.attack_description = t.attack_info.description),
                i.isUndefined(t.effect_info) || i.isUndefined(t.attack_info.description) || (this.currentDeck.leader_summon.effect_description = t.effect_info.description),
                this.currentDeck.job.id = this.selectedDeck.job.job_id,
                i.isUndefined(this.selectedDeck.job.element_type) || (this.currentDeck.job.element_type = this.selectedDeck.job.element_type),
                this._fillupPartyNode(this.currentDeckPage, this.currentDeck, 3)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    },
    i.assign(t.pc.quest.roles.QuestSupportPopupCommon, t.pc.roles.CoreCardCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = (e.cc,
    e.ccui,
    e.kh)
      , n = e.res
      , i = e._;
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.roles = t.pc.quest.roles || {},
    $staticRes(n["quest-q_010-q_010_reward_get_player_ui"]),
    t.pc.quest.roles.QuestResultPlayerSlider = {
        BACKGROUND_NAMES: {
            initiator: "q_resultlist_discover",
            first: "q_resultlist_mvp",
            second: "q_resultlist_mvp-second"
        },
        _fillPlayerSlider: function(e, t) {
            var n = [];
            if (i.isNull(t.initiator) || i.isNull(t.first))
                return void console.debug("[ERROR] Could not read MVP data.");
            var a = t.initiator;
            a && (a.type = "initiator",
            n.push(a));
            var s = t.first;
            if (s.type = "first",
            n.push(s),
            t.second) {
                var o = t.second;
                o.type = "second",
                n.push(o)
            }
            this._setSlider(e, "get_player_page", n, "quest-q_010-q_010_reward_get_player_ui", "_setPlayerSliderPanel", {}, "_slidePlayerPanel")
        },
        _setPlayerSliderPanel: function(e, t, n) {
            i.isUndefined(n.type) || i.isUndefined(this.BACKGROUND_NAMES[n.type]) || i.isUndefined(t.seekWidgetByName(this.BACKGROUND_NAMES[n.type])) || t.seekWidgetByName(this.BACKGROUND_NAMES[n.type]).setVisible(!0);
            var a = {
                user: "_onTouchUserButton"
            };
            this._setUserList(t, n, "blue_only", a)
        },
        _slidePlayerPanel: function(e, t) {
            i.each(i.range(3), function(n) {
                e.seekWidgetByName("current_icon_" + n).setVisible(n === t - 1)
            }, this)
        }
    },
    i.assign(t.pc.quest.roles.QuestResultPlayerSlider, t.pc.list.roles.SliderCommon, t.pc.list.roles.UserListCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_001 = t.pc.quest.q_001 || {},
    t.pc.quest.q_001.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("q_001/q_001.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: q_001/q_001.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            btn_main_quest: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("main_quest_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("main_quest_node").setVisible(!1),
                e.seekWidgetByPath("free_quest_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnMainQuest";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            btn_free_quest: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("free_quest_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("main_quest_node").setVisible(!1),
                e.seekWidgetByPath("free_quest_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnFreeQuest";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "q001Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["quest", "q_001"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnMap"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_map", t.createInstance("router").navigate.bind(t.createInstance("router"), "quest/q_005")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSpQuest"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_sp_quest", t.createInstance("router").navigate.bind(t.createInstance("router"), "quest/q_004")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRaid02"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_raid_02", function() {
                alert("{{q_006_7_8 tab_0(q_006)へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRaid01"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_raid_01", function() {
                alert("{{q_006_7_8 tab_0(q_006)へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackQuestbannerEvent"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "questbanner_event", function() {
                alert("{{開催中のイベントページへ遷移}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_001 = t.pc.quest.q_001 || {},
    t.pc.quest.q_001.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            comBackCheck: {
                factoryName: "popupFactoryComBackCheck"
            },
            comApRestart: {
                factoryName: "popupFactoryComApRestart"
            },
            q_001_ap_next: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-q_001_ap_next",
                title: "後で設定する",
                buttonLabels: {
                    blueBtn: "OK",
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss(),
                        e._delegate.startCheckQuestState(e, this._selectQuestData)
                    },
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            q_001_ap_open: {
                factoryName: "popupFactoryBlue",
                title: "クエスト" + t.w("release") + "!",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            q_newworld: {
                factoryName: "popupFactoryBlue",
                title: "異世界" + t.w("release") + "!",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss(),
                        t.createInstance("router").navigate("quest/q_005")
                    }
                }
            },
            q_quest_stop: {
                factoryName: "popupFactoryBlue",
                title: "次のメインクエストがありません",
                content: "現在進められるメインクエストはありません。<br />次回のアップデートをお待ちください。",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        questCommonDelegate: new t.QuestScenePcCommonDelegate,
        onSceneInit: function(e) {
            return this._cleanUpPaymentId(),
            t.createInstance("apiAQuestInfo").get().then(function(t) {
                this._apiAQuestInfo_get(e, t.body)
            }
            .bind(this)).then(function() {
                var n = [];
                n.push(this._fillupQuestMainList(e, "main", "_touchQuestPanel").then(function(e) {
                    this._mainQuestList = i.filter(e.data, function(e) {
                        return "main" === e.type
                    })
                }
                .bind(this))),
                n.push(this._fillupQuestMainList(e, "free", "_touchQuestPanel").then(function(e) {
                    this._freeQuestList = i.filter(e.data, function(e) {
                        return "free" === e.type
                    })
                }
                .bind(this)));
                var s = t.createInstance("apiAPlayers")
                  , o = a.all([s.getQuestPoints(), s.getMe(), s.getGameConfig(), t.createInstance("apiABanners").getQuestBanners()]).spread(function(t, n, i, a) {
                    this._questPoints = t.body.quest_points,
                    this._player = n.body,
                    this.gameConfig = i.body.game_config,
                    this._updateEventBanner(e, a.body)
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                });
                return n.push(o),
                a.all(n).then(this._onDataRetrieved.bind(this, e)),
                a.resolve()
            }
            .bind(this))
        },
        _onDataRetrieved: function(e) {
            e === n.director.getRunningScene() && (this.questCommonDelegate.owner = e,
            this.questCommonDelegate.setAreaAnimation(this._mainQuestList, this._questInfo),
            this.questCommonDelegate.setMainMoveNextIcon(this._questInfo, this._tmpWidgetRecords),
            this.questCommonDelegate.setMainNewLabel(this._mainQuestList),
            this.questCommonDelegate.setFreeNewLabel(this._freeQuestList),
            this.questCommonDelegate.setMainMoveNextIcon(this._questInfo, this._tmpWidgetRecords),
            this.questCommonDelegate.checkComApRestartPopup(this._questInfo),
            e.tabDelegateList[0].selectTab(e.seekWidgetByName("btn_main_quest")),
            t.createInstance("BurstTimeCountDownPanel").show())
        },
        onSceneEnter: function(e) {
            a.defer();
            return t.env.isSp || e.contentLayer.bake(),
            a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return this.questCommonDelegate.onExit(),
            this._needApBpPopupFactory && (this._needApBpPopupFactory.cleanup(),
            this._needApBpPopupFactory = null ),
            a.resolve()
        },
        btnCallbackBtnMap: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnSpQuest: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnRaid02: function(e) {
            var t = a.defer()
              , n = this._questInfo.has_unverified ? "unclaimed" : "arrival";
            return this._navigate001To006(e, n),
            t.reject(this._override),
            t.promise
        },
        btnCallbackBtnRaid01: function(e) {
            var t = a.defer();
            return this._navigate001To006(e),
            t.reject(this._override),
            t.promise
        },
        btnCallbackQuestbannerEvent: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            t.promise
        },
        _updateEventBanner: function(e, n) {
            if (!(n.data.length <= 0)) {
                var a = n.data[0];
                e.seekWidgetByName("banner_btn_panel").setVisible(!0);
                var s = t.Img("eventimg", "banner", i.padZero(a.banner_id, 4)).png
                  , o = e.seekWidgetByName("questbanner_event");
                o.loadTextures(s, s, s),
                o.addTouchEventListener(function(e, n) {
                    if (n === ccui.Widget.TOUCH_ENDED) {
                        var s = a.navigate_page
                          , o = i.last(s.split("/"))
                          , r = {};
                        r[o] = {
                            event_id: a.event_id
                        },
                        t.createInstance("router").navigate(s, r, {
                            event_id: a.event_id
                        })
                    }
                }
                .bind(this))
            }
        },
        _apiAQuestInfo_get: function(e, n) {
            this._questInfo = n;
            var a = t.Img("questtop", "area", i.padZero(n.current_area_id, 4), 0)
              , s = e.seekWidgetByName("questtop_area");
            s.loadTexture(a.jpg);
            var o = e.seekWidgetByName("icon_sp_quest_uncon");
            o.setVisible(n.has_temp_quest);
            var r = e.seekWidgetByName("raid_ui");
            r.seekWidgetByPath("raid_ui.info_icon").setVisible(n.has_unverified),
            n.has_new_raid_request && r.animate("raid_effect_start", !0)
        },
        _touchQuestPanel: function(e, t) {
            var i = n.director.getRunningScene()
              , a = this.questCommonDelegate.restartCheckInProgressQuest(t, this._questInfo);
            a || this.startCheckQuestState(i, t)
        },
        startQuest: function(e, t, n) {
            "raid" === this._selectQuest.type ? this._navigate001To009(e, t) : this._navigateTo002(e, t, n)
        },
        updateQuestPoints: function() {
            return n.director.getRunningScene().headerDelegate.updateQuestPoints().then(function(e) {
                return this._questPoints = e,
                e
            }
            .bind(this))
        },
        update: function() {
            var e = t.createInstance("sceneManager");
            e.reloadScene()
        }
    }),
    i.assign(t.pc.quest.q_001.SceneDelegate.prototype._popups, t.pc.quest.roles.QuestSelectCommon.popups._popups, t.pc.quest.roles.QuestMainPageListPopups._popups),
    i.assign(t.pc.quest.q_001.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.quest.roles.Routing, t.pc.quest.roles.QuestMainPageListController, t.pc.quest.roles.QuestSelectCommon.methods)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_002 = t.pc.quest.q_002 || {},
    t.pc.quest.q_002.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("q_002/q_002.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: q_002/q_002.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "q002Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["quest", "q_002"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_002 = t.pc.quest.q_002 || {},
    t.pc.quest.q_002.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParams002(e),
            this.setSupportCommonisRaid(!1);
            var a = i.all([t.createInstance("apiAQuests").getQuest(e.routerParams.q_002.a_quest_id, e.routerParams.q_002.quest_type), t.createInstance("apiAPlayers").getQuestPoints(), this.getPartyData(), this._fillupSupportSummonList(e, "_touchSupportSummonPanel")]).spread(function(t, i, a, s) {
                this.questData = t.body,
                this.selectedEpisode = n.find(this.questData.episodes, function(t) {
                    return t.num === e.routerParams.q_002.episode_num
                }
                .bind(this)),
                this.selectedEpisode || (this._isLatestEpisode = !0,
                this.selectedEpisode = n.last(this.questData.episodes)),
                this.questPoints = i.body.quest_points,
                this._isSupporterSelected(e) && this.openPartySelector(this.getSelectedSupporterData(e, s.data), this.questData, this.questPoints)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return a
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        _touchSupportSummonPanel: function(e, t, n) {
            console.log(t),
            this._supporterData = t,
            this.openPartySelector(t, this.questData, this.questPoints)
        },
        _isSupporterSelected: function(e) {
            return null != e.routerParams.q_002.a_supporter_id || null != this._supporterData
        },
        getSelectedSupporterId: function(e) {
            return null != this._supporterData ? this._supporterData.a_supporter_id : null != e.routerParams.q_002.a_supporter_id ? e.routerParams.q_002.a_supporter_id : -1
        },
        navigateToParty: function(e) {
            this._navigate002ToParty(e)
        }
    }),
    n.assign(t.pc.quest.q_002.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.quest.roles.Routing, t.pc.quest.roles.QuestSupportPageListController, t.pc.quest.roles.QuestStart, t.pc.quest.roles.QuestSupportPopupCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.ccui
      , i = (e.res,
    e.console)
      , a = e.khutil;
    a = e.khutil;
    var s = function(e) {
        return function() {
            alert("未実装です: " + e)
        }
    };
    t.q_003_1 = t.q_003_1 || {},
    t.q_003_1.Properties = {
        className: "KH_Q_003_1_Scene",
        GAUGE_ANIMATION_PERCENT_PER_SEC: 50,
        WIDGET_NAMES: {
            RANK_NUM: "q_003_1_result_rank_no",
            RANK_GAUGE: "q_003_1_result_rank_gauge",
            RANK_UP: "q_003_1_result_rank_up",
            JOB_LVL_NUM: "q_003_1_result_job_level_no",
            JOB_LVL_GAUGE: "q_003_1_result_job_level_gauge",
            JOB_LVL_MASTER: "q_003_1_result_level_master",
            JOB_LVL_UP: "q_003_1_result_level_up",
            JOB_CARD: "corecard_job_ui",
            CHARACTER_CARDS: {
                COUNT: 5,
                NAME: "q_003_1_chara_"
            },
            CORECARD_JOB: "corecard_job_ui",
            CORECARD_CHARACTER: "corecard_chara_ui",
            RANK_POINT_GAINED: "q_003_1_result_rank_point_no",
            EXP_GAINED: "q_003_1_result_exp_no",
            NEXT_BUTTON: "q_003_1_next",
            MONSTERS_SLAIN_REWARD: "q_003_1_result_gem_monster_no",
            CONVERT_REWARD: "q_003_1_result_gem_convert_no",
            TOTAL_REWARD: "q_003_1_result_gem_sum_no"
        },
        CHARACTER_CARD_WIDGET_NAMES: {
            TEXTURE: "q_003_1_chara_img",
            ENJOYMENT_BASE: "q_003_1_chara_enjoyment_base",
            ENJOYMENT: "q_003_1_chara_enjoyment_label",
            LVL_NUM: "q_003_1_chara_level_no",
            LVL_GAUGE: "q_003_1_chara_level_gauge",
            LVL_UP: "q_003_1_chara_level_up"
        },
        SOUND_EFFECT_IDS: {
            LEVEL_UP: 1
        },
        resourceName: "quest-q_003-q_003_1",
        footerDelegate: new t.FooterDelegate
    },
    t.q_003_1.Popups = {
        _popups: {
            raidMvp: {
                factoryName: "popupRaidMvp",
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(e._popupDefer.resolve)
                    }
                }
            },
            rankUp: {
                factoryName: "popupRankUp",
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(e._popupDefer.resolve)
                    }
                }
            },
            jobAbilityAcquired: {
                factoryName: "popupJobAbilityAcquired",
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(e._popupDefer.resolve)
                    }
                }
            },
            jobMaxBonus: {
                factoryName: "popupJobMaxBonus",
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(e._popupDefer.resolve)
                    }
                }
            },
            characterAbilityImproved: {
                factoryName: "popupCharacterAbilityImproved",
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(e._popupDefer.resolve)
                    }
                }
            },
            popupRaQuestAppearance: {
                factoryName: "popupFactoryRaQuestAppearance",
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(e._popupDefer.resolve)
                    }
                }
            }
        }
    },
    t.q_003_1.Methods = {
        _init: function() {
            this._initData(),
            this._start()
        },
        _hideBackButton: function() {
            this.mainMenuDelegate && this.mainMenuDelegate.setBackButtonVisible(!1)
        },
        _initData: function() {
            (null == this.routerParams.a_battle_id || null == this.routerParams.quest_type) && this._redirect("quest"),
            this._widgets = {},
            this._clearValues(),
            this._battleResultDataPromise = this._getBattleResultData(this.routerParams.a_battle_id, this.routerParams.quest_type).then(this._verifyData.bind(this)),
            this._soundEffectsPromise = this._loadSound()
        },
        _start: function() {
            Q.all([this._battleResultDataPromise.then(this._setStartingData.bind(this)).then(this._showRaidMvpPopup.bind(this)), this._soundEffectsPromise]).spread(this._animateGauges.bind(this)).then(this._showRewardPopups.bind(this)).then(this._showPopupIfSuddenQuestRewardExist.bind(this)).then(this._addNextButtonEventListener.bind(this, this._gotoQ0032.bind(this))).fail(function(e) {
                i.error(e.stack)
            })
        },
        getBattleId: function() {
            return this.routerParams.a_battle_id
        },
        _redirectOnFail: function(e) {
            409 !== e.status && (s("goto error page"),
            i.error("html error: " + e.status)),
            "harem" === this.routerParams.quest_type ? this._redirect("harem") : this._redirect("quest")
        },
        _getWidget: function(e) {
            return null == this._widgets[e] && (this._widgets[e] = this.seekWidgetByName(e)),
            this._widgets[e]
        },
        _getBattleResultData: function(e, n) {
            if (t.gVal.quest = t.gVal.quest || {},
            t.gVal.quest.battleResultData) {
                var i = t.gVal.quest.battleResultData;
                if (i.a_battle_id === e && i.quest_type === n)
                    return Q.resolve(i)
            }
            var a = t.createInstance("apiABattles");
            return a.getBattleResult(e, n).fail(this._redirectOnFail.bind(this)).then(this._cacheData.bind(this))
        },
        _loadSound: function() {
            var e = Q.defer()
              , n = t.createInstance("seLoader");
            return this._seList = {},
            n.loadLevelUpSe(this.SOUND_EFFECT_IDS.LEVEL_UP).then(function(e) {
                this._seList.levelUp = e
            }
            .bind(this)).fail(function(e) {
                i.log(e.stack || e)
            })["finally"](function() {
                e.resolve()
            }),
            e.promise
        },
        _cacheData: function(e) {
            var n = e.body;
            return n.a_battle_id = this.routerParams.a_battle_id,
            n.quest_type = this.routerParams.quest_type,
            t.gVal.quest.battleResultData = n,
            e.body
        },
        _verifyData: function(e) {
            var t = 0
              , n = e.gems_gained
              , i = e.points_gained
              , a = e.job
              , s = e.characters
              , o = e.player
              , r = e.raid_stats && !_.isEmpty(e.raid_stats.mvp) ? 1 : 0
              , c = function(e) {
                null != e.level_data_before && null != e.level_data_after && (t |= e.level_data_after.level - e.level_data_before.level || 0,
                t |= e.level_data_after.gauge - e.level_data_before.gauge || 0)
            };
            return null != n && (t |= n.monsters_slain || 0,
            t |= n.prizes || 0,
            t |= n.converts || 0,
            t |= n.total || 0),
            null != i && (t |= i.experience || 0,
            t |= i.rank || 0),
            null != a && c(a),
            null != s && _.each(s, c),
            null != o && null != o.rank_data_before && null != o.rank_data_after && (t |= o.rank_data_after.level - o.rank_data_before.level || 0,
            t |= o.rank_data_after.gauge - o.rank_data_before.gauge || 0),
            t |= r,
            t ? e : (this._gotoQ0032(),
            e)
        },
        _setStartingData: function(e) {
            this._setRankLevel(e.player.rank_data_before.level, e.player.rank_data_before.max),
            this._setRankLevelGauge(e.player.rank_data_before.gauge),
            this._setJobLevel(e.job.level_data_before.level, e.job.level_data_before.max),
            this._setJobLevelGauge(e.job.level_data_before.gauge);
            var n = this._createJobCorecardHandler(this.seekWidgetByName(this.WIDGET_NAMES.CORECARD_JOB));
            this._loadJobCardTexture(n, e.job.job_id, e.job.job_skin),
            this._setJobElement(n, e.job.element_type),
            _.each(e.characters, function(e, t) {
                var n = this._getCharacterCardWidget(t);
                if (null == n)
                    return void i.warn("q_003_1.Scene._setStartingData: character widget not found");
                var a = this._createCharacterCorecardHandler(n.seekWidgetByName(this.WIDGET_NAMES.CORECARD_CHARACTER));
                a.setAroused(e.is_aroused),
                this._loadCharacterCardTexture(a, e.character_id, e.character_skin),
                this._setCharacterBonus(a, e.bonus),
                this._setCharacterElement(a, e.element_type),
                this._setCharacterRarity(a, e.rare),
                this._setCharacterCardLevel(n, e.level_data_before.level, e.level_data_before.max),
                this._setCharacterCardLevelGauge(n, e.level_data_before.gauge),
                this._setCharacterCardEnjoyment(n, e.enjoyment),
                n.setVisible(!0)
            }, this);
            var a = {};
            return t.env.isSp ? (a[this.WIDGET_NAMES.RANK_POINT_GAINED] = "RANKポイント +" + e.points_gained.rank,
            a[this.WIDGET_NAMES.EXP_GAINED] = "EXP +" + e.points_gained.experience) : (a[this.WIDGET_NAMES.RANK_POINT_GAINED] = "【RANKポイント】\n+" + e.points_gained.rank,
            a[this.WIDGET_NAMES.EXP_GAINED] = "【EXP】\n+" + e.points_gained.experience),
            a[this.WIDGET_NAMES.MONSTERS_SLAIN_REWARD] = "+" + e.gems_gained.monsters_slain,
            a[this.WIDGET_NAMES.CONVERT_REWARD] = "+" + e.gems_gained.converts,
            a[this.WIDGET_NAMES.TOTAL_REWARD] = "合計 +" + e.gems_gained.total,
            this.setStrings(a),
            e
        },
        _clearValues: function() {
            this._getWidget(this.WIDGET_NAMES.JOB_CARD).setVisible(!1),
            this._setRankLevel("", !1),
            this._setRankLevelGauge(0),
            this._setJobLevel("", !1),
            this._setJobLevelGauge(0);
            var e = {};
            e[this.WIDGET_NAMES.RANK_POINT_GAINED] = "",
            e[this.WIDGET_NAMES.EXP_GAINED] = "",
            e[this.WIDGET_NAMES.MONSTERS_SLAIN_REWARD] = "",
            e[this.WIDGET_NAMES.CONVERT_REWARD] = "",
            e[this.WIDGET_NAMES.TOTAL_REWARD] = "",
            this.setStrings(e)
        },
        _showRaidMvpPopup: function(e) {
            return null == e.raid_stats || null == e.raid_stats.mvp ? e : this._showPopup(this.popups.raidMvp, e.raid_stats.mvp).then(function() {
                return e
            })
        },
        _showPopup: function(e, t) {
            return this._popupDefer = Q.defer(),
            e.open().then(e.setData.bind(e, t)),
            this._popupDefer.promise
        },
        _animateGauges: function(e) {
            var t = function(e, t) {
                return 100 * (t.level - e.level) + t.gauge % 100
            }
              , n = _.compact(_.map(e.characters, function(e, n) {
                var a = this._getCharacterCardWidget(n);
                return null == a ? (i.warn("q_003_1.Scene._setStartingData: character widget not found"),
                null ) : this._animateCharacterCardLevelGauge(a, t(e.level_data_before, e.level_data_after))
            }, this))
              , a = this._animateRankLevelGauge(t(e.player.rank_data_before, e.player.rank_data_after))
              , s = this._animateJobLevelGauge(t(e.job.level_data_before, e.job.level_data_after));
            return _(n).pluck("promise").each(function(t, n) {
                t.then(this._showCharacterEndData.bind(this, n, e.characters[n]))
            }, this),
            a.promise.then(this._showRankEndData.bind(this, e)),
            s.promise.then(this._showJobEndData.bind(this, e.job)),
            this._addNextButtonEventListener(function() {
                _.invoke(n, "interrupt"),
                a.interrupt(),
                s.interrupt()
            }),
            Q.all(_.pluck(n, "promise").concat([a.promise, s.promise])).then(function() {
                return e
            })
        },
        _showRankEndData: function(e) {
            var t = e.player.rank_data_before
              , n = e.player.rank_data_after;
            this._setRankLevelGauge(n.gauge),
            this._setRankLevel(n.level, n.max),
            null != t.level && null != n.level && t.level !== n.level && this._showRankUpLabel()
        },
        _showJobEndData: function(e) {
            var t = e.level_data_before
              , n = e.level_data_after;
            this._setJobLevelGauge(n.gauge),
            this._setJobLevel(n.level, n.max),
            null != t.level && null != n.level && t.level !== n.level && (this._setJobLevelUpLabelVisible(!n.max),
            n.max && this._showJobMasterLabel())
        },
        _showCharacterEndData: function(e, t) {
            var n = t.level_data_before
              , i = t.level_data_after
              , a = this._getCharacterCardWidget(e);
            this._setCharacterCardLevelGauge(a, i.gauge),
            this._setCharacterCardLevel(a, i.level, i.max),
            null != n.level && null != i.level && n.level !== i.level && this._showCharacterLevelUpLabel(a)
        },
        _showPopupIfSuddenQuestRewardExist: function(e) {
            return _.isEmpty(e.sudden_quest_appeared) ? Q.resolve(e) : this._showPopup(this.popups.popupRaQuestAppearance, e.sudden_quest_appeared).thenResolve(e)
        },
        _showRewardPopups: function(e) {
            var t = [];
            return null != e.rank_up && t.push(this._showRankUpPopup.bind(this, e.rank_up, e.player.rank_data_before.level, e.player.rank_data_after.level)),
            null != e.new_job_abilities_gained && t.push(this._showJobAbilitiesAcquiredPopups.bind(this, e.new_job_abilities_gained, e.job.job_id)),
            null != e.job_max_bonus && t.push(this._showJobMaxBonusPopup.bind(this, e.job_max_bonus)),
            null != e.character_ability_upgrades && t.push(this._showCharacterAbilityImprovedPopups.bind(this, e.character_ability_upgrades)),
            t.push(function() {
                return e
            }),
            t.reduce(Q.when, Q())
        },
        _showRankUpPopup: function(e, t, n) {
            return this._showPopup(this.popups.rankUp, {
                rankUpData: e,
                rankLevelBefore: t,
                rankLevelAfter: n
            })
        },
        _showJobAbilitiesAcquiredPopups: function(e, t) {
            return _.map(e, function(e) {
                return this._showPopup.bind(this, this.popups.jobAbilityAcquired, _.assign(e, {
                    job_id: t
                }))
            }, this).reduce(Q.when, Q())
        },
        _showJobMaxBonusPopup: function(e) {
            return this._showPopup(this.popups.jobMaxBonus, e)
        },
        _showCharacterAbilityImprovedPopups: function(e) {
            return _.map(e, function(e) {
                return this._showPopup.bind(this, this.popups.characterAbilityImproved, e)
            }, this).reduce(Q.when, Q())
        },
        _createJobCorecardHandler: function(e) {
            e.setVisible(!0);
            var n = t.createInstance("CoreCardJobUI", ["e"]);
            return e.addChild(n.getResult()),
            n
        },
        _loadJobCardTexture: function(e, t, n) {
            e.setImg(t, n || 0)
        },
        _setJobElement: function(e, t) {
            return null == t ? void i.warn("q_003_1.Scene._setJobElement: element data not found") : void e.setIconElement(t)
        },
        _setRankLevel: function(e, t) {
            this._getWidget(this.WIDGET_NAMES.RANK_NUM).string = t ? e + "(MAX)" : e
        },
        _increaseRankLevel: function() {
            var e = this._getWidget(this.WIDGET_NAMES.RANK_NUM);
            e.string = parseInt(e.string) + 1
        },
        _setRankLevelGauge: function(e) {
            this._getWidget(this.WIDGET_NAMES.RANK_GAUGE).percent = e
        },
        _animateRankLevelGauge: function(e) {
            if (0 === e)
                return {
                    interrupt: function() {},
                    promise: Q.resolve()
                };
            var t = Q.defer()
              , n = function(n) {
                (n !== Math.ceil(e / 100) - 1 || e % 100 === 0) && (this._increaseRankLevel(),
                this._showRankUpLabel(),
                this._playLevelUpSound()),
                n === Math.ceil(e / 100) - 1 && t.resolve()
            }
              , i = this._getWidget(this.WIDGET_NAMES.RANK_GAUGE).animateRecursive(e, this.GAUGE_ANIMATION_PERCENT_PER_SEC, n, this)
              , a = function() {
                i(),
                t.resolve()
            };
            return {
                interrupt: a,
                promise: t.promise
            }
        },
        _showRankUpLabel: function() {
            this._playFlashAnimation(this._getWidget(this.WIDGET_NAMES.RANK_UP))
        },
        _setJobLevel: function(e, t) {
            this._getWidget(this.WIDGET_NAMES.JOB_LVL_NUM).string = t ? e + "(MAX)" : e
        },
        _increaseJobLevel: function() {
            var e = this._getWidget(this.WIDGET_NAMES.JOB_LVL_NUM);
            e.string = parseInt(e.string) + 1
        },
        _setJobLevelGauge: function(e) {
            this._getWidget(this.WIDGET_NAMES.JOB_LVL_GAUGE).percent = e
        },
        _animateJobLevelGauge: function(e) {
            if (0 === e)
                return {
                    interrupt: function() {},
                    promise: Q.resolve()
                };
            var t = Q.defer()
              , n = function(n) {
                (n !== Math.ceil(e / 100) - 1 || e % 100 === 0) && (this._increaseJobLevel(),
                this._setJobLevelUpLabelVisible(!0),
                this._playLevelUpSound()),
                n === Math.ceil(e / 100) - 1 && t.resolve()
            }
              , i = this._getWidget(this.WIDGET_NAMES.JOB_LVL_GAUGE).animateRecursive(e, this.GAUGE_ANIMATION_PERCENT_PER_SEC, n, this)
              , a = function() {
                i(),
                t.resolve()
            };
            return {
                interrupt: a,
                promise: t.promise
            }
        },
        _showJobMasterLabel: function() {
            this._playFlashAnimation(this._getWidget(this.WIDGET_NAMES.JOB_LVL_MASTER))
        },
        _setJobLevelUpLabelVisible: function(e) {
            var t = this._getWidget(this.WIDGET_NAMES.JOB_LVL_UP);
            e ? this._playFlashAnimation(t) : t.stopAllActions(),
            t.setVisible(e)
        },
        _getCharacterCardWidget: function(e) {
            return this._getWidget(this.WIDGET_NAMES.CHARACTER_CARDS.NAME + e)
        },
        _createCharacterCorecardHandler: function(e) {
            return e.setVisible(!0),
            t.createInstance("CoreCardCharacterUI", ["e_r", e])
        },
        _loadCharacterCardTexture: function(e, t, n) {
            e.setImg(t, n || 0)
        },
        _setCharacterElement: function(e, t) {
            return null == t ? void i.warn("q_003_1.Scene._setCharacterElement: element data not found") : void e.setIconElement(t)
        },
        _setCharacterRarity: function(e, t) {
            return null == t ? void i.warn("q_003_1.Scene._setCharacterRarity: rarity data not found") : void e.setIconRarity(t)
        },
        _setCharacterBonus: function(e, t) {
            e.setPlusNo(t ? "+" + t : ""),
            e.setPlusNoVisible(!!t)
        },
        _setCharacterCardEnjoyment: function(e, t) {
            return _.isUndefined(t) || _.isNull(t) ? void e.seekWidgetByName(this.CHARACTER_CARD_WIDGET_NAMES.ENJOYMENT_BASE).setVisible(!1) : void (e.seekWidgetByName(this.CHARACTER_CARD_WIDGET_NAMES.ENJOYMENT).string = t)
        },
        _setCharacterCardLevel: function(e, t, n) {
            e.seekWidgetByName(this.CHARACTER_CARD_WIDGET_NAMES.LVL_NUM).string = n ? t + "(MAX)" : t
        },
        _increaseCharacterLevel: function(e) {
            var t = e.seekWidgetByName(this.CHARACTER_CARD_WIDGET_NAMES.LVL_NUM);
            t.string = parseInt(t.string) + 1
        },
        _setCharacterCardLevelGauge: function(e, t) {
            e.seekWidgetByName(this.CHARACTER_CARD_WIDGET_NAMES.LVL_GAUGE).percent = t
        },
        _animateCharacterCardLevelGauge: function(e, t) {
            if (0 === t)
                return {
                    interrupt: function() {},
                    promise: Q.resolve()
                };
            var n = Q.defer()
              , i = function(i) {
                (i !== Math.ceil(t / 100) - 1 || t % 100 === 0) && (this._increaseCharacterLevel(e),
                this._showCharacterLevelUpLabel(e),
                this._playLevelUpSound()),
                i === Math.ceil(t / 100) - 1 && n.resolve()
            }
              , a = e.seekWidgetByName(this.CHARACTER_CARD_WIDGET_NAMES.LVL_GAUGE).animateRecursive(t, this.GAUGE_ANIMATION_PERCENT_PER_SEC, i, this)
              , s = function() {
                a(),
                n.resolve()
            };
            return {
                interrupt: s,
                promise: n.promise
            }
        },
        _showCharacterLevelUpLabel: function(e) {
            this._playFlashAnimation(e.seekWidgetByName(this.CHARACTER_CARD_WIDGET_NAMES.LVL_UP))
        },
        _playLevelUpSound: function() {
            return this._seList.levelUp && "" !== this._seList.levelUp ? void this._playSound(this._seList.levelUp) : void (t.createInstance("playerGameConfig").isSeOn() && this._loadSound().then(function() {
                this._playSound(this._seList.levelUp)
            }
            .bind(this)))
        },
        _playSound: function(e) {
            null != e && "" !== e && (new t.SE).play(e)
        },
        _createLevelUpFlashAnimation: function(e) {
            var n = t.createInstance("frameAnimationHelper");
            return n.createAction(30, [n.createAlphaTimeline([{
                fi: 0,
                alpha: 75
            }, {
                fi: 6,
                alpha: 255
            }, {
                fi: 20,
                alpha: 255
            }, {
                fi: 30,
                alpha: 75
            }])], e)
        },
        _playFlashAnimation: function(e) {
            if (null != e && !e.actionManager.numberOfRunningActionsInTarget(e)) {
                this._centerWidget(e);
                var t = this._createLevelUpFlashAnimation(e);
                e.setVisible(!0),
                e.runAction(t),
                t.gotoFrameAndPlay(0, !0)
            }
        },
        _centerWidget: function(e) {
            var t = e.anchorX
              , n = e.anchorY
              , i = e.width
              , a = e.height;
            .5 !== t && (e.x = e.x - i * t + i / 2,
            e.anchorX = .5),
            .5 !== n && (e.y = e.y - a * n + a / 2,
            e.anchorY = .5)
        },
        _addNextButtonEventListener: function(e, t) {
            this._getWidget(this.WIDGET_NAMES.NEXT_BUTTON).addTouchEventListener(function(t, i) {
                i === n.Widget.TOUCH_ENDED && e && e.call(this)
            }, t)
        },
        _redirect: function(e, n) {
            t.createInstance("router").navigate(e, n)
        },
        _gotoQ0032: function() {
            var e = {};
            e.a_battle_id = this.routerParams.a_battle_id,
            e.quest_type = this.routerParams.quest_type,
            this._redirect("quest/q_003_2", e)
        }
    },
    t.q_003_1.Scene = t.BaseScene.extend(_.assign(t.q_003_1.Popups, t.q_003_1.Properties, t.q_003_1.Methods))
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_003_001 = t.pc.quest.q_003_001 || {},
    t.pc.quest.q_003_001.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("q_003/q_003_1.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: q_003/q_003_1.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "q003001Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["quest", "q_003_001"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNext"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_next", t.createInstance("router").navigate.bind(t.createInstance("router"), "quest/q_003_2")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_003_001 = t.pc.quest.q_003_001 || {},
    t.pc.quest.q_003_001.Properties = n.assign(t.q_003_1.Properties, {
        WIDGET_NAMES: {
            RANK_NUM: "rank_no_label",
            RANK_GAUGE: "rank_gauge",
            RANK_UP: "labelicon_rankup",
            JOB_LVL_NUM: "job_level_no_label",
            JOB_LVL_GAUGE: "job_level_gauge",
            JOB_LVL_MASTER: "labelicon_master",
            JOB_LVL_UP: "labelicon_levelup",
            JOB_CARD: "corecard_job_ui",
            CHARACTER_CARDS: {
                COUNT: 6,
                NAME: "q_003_1_chara_ui_"
            },
            CORECARD_JOB: "corecard_job_ui",
            CORECARD_CHARACTER: "corecard_chara_ui",
            RANK_POINT_GAINED: "get_rank_label",
            EXP_GAINED: "get_exp_label",
            NEXT_BUTTON: "btn_next",
            MONSTERS_SLAIN_REWARD: "gem_monster_no_label",
            CONVERT_REWARD: "gem_convert_no_label",
            TOTAL_REWARD: "gem_sum_no_label"
        },
        CHARACTER_CARD_WIDGET_NAMES: {
            TEXTURE: "q_003_1_chara_img",
            ENJOYMENT_BASE: "enjoyment_base",
            ENJOYMENT: "enjoyment_label",
            LVL_NUM: "level_no_label",
            LVL_GAUGE: "level_gauge",
            LVL_UP: "labelicon_levelup"
        }
    }),
    t.pc.quest.q_003_001.Methods = n.assign(t.q_003_1.Methods, {
        _navigate003_001To003_002: t.pc.quest.roles.Routing._navigate003_001To003_002,
        _gotoQ0032: function() {
            var e = {};
            e.a_battle_id = this.routerParams.a_battle_id,
            e.quest_type = this.routerParams.quest_type,
            this._navigate003_001To003_002(this, e)
        }
    }),
    t.pc.quest.q_003_001.SceneDelegate = t.pc.BaseSceneDelegate.extend(n.assign(t.q_003_1.Popups, {
        onSceneInit: function(e) {
            return i.resolve()
        },
        onSceneEnter: function(e) {
            this._verifyRouterParams003_001(e);
            var a = n.assign(t.pc.quest.q_003_001.Properties, t.q_003_1.Methods);
            return n.assign(e, a, function(e, t) {
                return e || t
            }, e),
            e._hideBackButton(),
            e._initData(),
            i.resolve()
        },
        onPageInAnimationEnd: function(e) {
            return e._start()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnNext: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            t.promise
        }
    })),
    n.assign(t.pc.quest.q_003_001.SceneDelegate.prototype, t.pc.quest.roles.Routing)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.ccui
      , i = e.console;
    t.q_003_2 = t.q_003_2 || {},
    t.q_003_2.Properties = {
        className: "KH_Q_003_2_Scene",
        PAGE_VIEW_BASE: "page_q_003_2_prize_list",
        PAGE_VIEW_CONTROLS: _.invert({
            q_003_2_change_page_right: t.PAGE_CONTROLLER_CONTROLS.NEXT_BUTTON,
            q_003_2_change_page_left: t.PAGE_CONTROLLER_CONTROLS.PREVIOUS_BUTTON
        }),
        PAGE_VIEW_ITEMS_PER_PAGE: 16,
        PAGE_VIEW_DIRECTION: n.ScrollView.DIR_HORIZONTAL,
        SUBPAGE_WIDGET: "corecard_blank_4_4_ui",
        SUBPAGE_WIDGET_NAMES: {
            RECORD_BASE: {
                COUNT: 16,
                NAME: "list_blank_"
            }
        },
        CORECARD_WIDGET: "corecard_ui",
        NO_PRIZE_WIDGET: "q_003_2_no_prize_label",
        TO_TOP_BUTTON: "q_003_2_quest_top",
        BUTTON_TEXT: {
            harem: (t.env.isSp ? "◀ " : "") + "エピソード一覧へ",
            "default": (t.env.isSp ? "◀ " : "") + "クエストTOPへ戻る",
            event_main: (t.env.isSp ? "◀ " : "") + "イベントクエスト一覧へ",
            event_raid: (t.env.isSp ? "◀ " : "") + "イベントクエスト一覧へ",
            event_union_lilim_raid: (t.env.isSp ? "◀ " : "") + "リリムバトルへ戻る",
            event_union_demon_raid: (t.env.isSp ? "◀ " : "") + "デーモンバトルへ戻る",
            event: (t.env.isSp ? "◀ " : "") + "SPクエスト一覧へ"
        },
        resourceName: "quest-q_003-q_003_2",
        footerDelegate: new t.FooterDelegate
    },
    t.q_003_2.Popups = {
        _popups: {
            newItemAcquired: {
                factoryName: "popupNewItemAcquired",
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(e._popupDefer.resolve)
                    }
                }
            },
            characterAcquired: {
                factoryName: "popupCharacterAcquired",
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(e._popupDefer.resolve)
                    }
                }
            },
            characterAbilityAcquired: {
                factoryName: "popupCharacterAbilityAcquired",
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(e._popupDefer.resolve)
                    }
                }
            },
            questClearBonusItemsAcquired: {
                factoryName: "popupQuestClearBonusItemsAcquired",
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(e._popupDefer.resolve)
                    }
                }
            },
            friendRequest: {
                factoryName: "popupFriendRequest",
                buttons: {
                    blueBtn: function(e) {
                        var t, n = function(e) {
                            t = e
                        }, i = function() {
                            t = t || {
                                error: "default"
                            },
                            e._popupDefer.resolve(t)
                        };
                        e._makeFriendRequest().then(n).then(this.dismiss.bind(this)).then(i)
                    },
                    blackBtn: function(e) {
                        this.dismiss().then(e._popupDefer.resolve.bind(e, !1))
                    }
                }
            },
            friendRequestResult: {
                factoryName: "popupFactoryTextOnly",
                title: "フレンド申請",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(e._popupDefer.resolve)
                    }
                }
            },
            sh_summon_info: {
                factoryName: "popupFactoryShSummonInfo"
            },
            sh_weapon_info: {
                factoryName: "popupFactoryShWeaponInfo"
            },
            sh_item_info: {
                factoryName: "popupFactoryShItemInfo"
            }
        }
    },
    t.q_003_2.Events = {
        _events: {
            "TOUCH_ENDED q_003_2_quest_top": "__gotoQuestTop"
        }
    },
    t.q_003_2.Methods = {
        _init: function() {
            if (null == t.gVal.quest)
                return this._redirect("quest");
            var e = t.gVal.quest.battleResultData
              , n = this.routerParams.a_battle_id;
            return this.quest_type = this.routerParams.quest_type,
            this.event_id = e.event_id,
            null == e || e.a_battle_id !== n || e.quest_type !== this.quest_type ? (this._clearCache(),
            this._redirect("quest")) : (this._setReturnButtonTitle(this.quest_type),
            null != e.quest_cleared && (this._questClearedId = e.quest_cleared.quest_id),
            this._supporterAPlayerId = e.supporter.a_player_id,
            this._showItemsGained(e.items_gained),
            void this._showNewItemAcquiredPopups(e.new_items_gained || []))
        },
        _setReturnButtonTitle: function(e) {
            var t = _.find(this.BUTTON_TEXT, function(t, n) {
                return -1 !== e.search(n)
            }, this);
            this.seekWidgetByName(this.TO_TOP_BUTTON_LABEL).string = t || this.BUTTON_TEXT["default"]
        },
        _showItemsGained: function(e) {
            if (null == e || 0 === e.length)
                return this.seekWidgetByName(this.NO_PRIZE_WIDGET).setVisible(!0),
                this.seekWidgetByName(this.PAGE_VIEW_BASE).setVisible(!1),
                void this._hidePageviewControls();
            var n, i = e.slice(0), a = this._divideItemDataByPage(i), s = this._createSubPages(a);
            n = t.createInstance("PageView").initialize(s),
            n.setDirection(this.PAGE_VIEW_DIRECTION),
            this.seekWidgetByName(this.PAGE_VIEW_BASE).addChild(n),
            t.createInstance("PageController").init(this.resource.node, this.PAGE_VIEW_CONTROLS, n),
            n.gotoFirstPage(),
            null == n.getNextPage() && this._hidePageviewControls()
        },
        _hidePageviewControls: function() {
            _.each(this.PAGE_VIEW_CONTROLS, function(e) {
                this.resource.node.seekWidgetByName(e).setVisible(!1)
            }, this)
        },
        _divideItemDataByPage: function(e) {
            var t = Math.ceil(e.length / this.PAGE_VIEW_ITEMS_PER_PAGE);
            return _.map(_.range(t), function() {
                var t = Math.min(e.length, this.PAGE_VIEW_ITEMS_PER_PAGE);
                return _.map(_.range(t), function() {
                    return e.shift()
                }, this)
            }, this)
        },
        _createSubPages: function(e) {
            var t = this.seekWidgetByName(this.SUBPAGE_WIDGET)
              , n = _.map(e, function(e) {
                var n = t.clone();
                return this._initSubPage(n, e),
                n
            }, this);
            return t.removeAllChildren(),
            t.removeFromParent(),
            n
        },
        _initSubPage: function(e, t) {
            _.each(t, function(t, n) {
                var i = e.seekWidgetByName(this.SUBPAGE_WIDGET_NAMES.RECORD_BASE.NAME + n)
                  , a = i.seekWidgetByName(this.CORECARD_WIDGET);
                i.setVisible(!0),
                a.setVisible(!0);
                var s = this["_create" + _.capitalize(t.treasure_type) + "CorecardHandler"](a, t);
                a.addChild(s.uiNode),
                this["_fill" + _.capitalize(t.treasure_type) + "CorecardHandler"](s, t),
                this["_add" + _.capitalize(t.treasure_type) + "CorecardTouchEvent"](s, t)
            }, this),
            e.setVisible(!0)
        },
        _createItemCorecardHandler: function(e, n) {
            var i = n.amount > 1 ? "treasure_amount" : "treasure";
            return t.createInstance("CoreCardItemUI", [i])
        },
        _createWeaponCorecardHandler: function(e, n) {
            var i = n.amount > 1 ? "treasure_amount" : "treasure";
            return t.createInstance("CoreCardWeaponUI", [i])
        },
        _createSummonCorecardHandler: function(e, n) {
            var i = n.amount > 1 ? "treasure_amount" : "treasure";
            return t.createInstance("CoreCardSummonUI", [i])
        },
        _addItemCorecardTouchEvent: function(e, t) {
            this.__addCorecardTouchEvent("item", e, t)
        },
        _addWeaponCorecardTouchEvent: function(e, t) {
            this.__addCorecardTouchEvent("weapon", e, t)
        },
        _addSummonCorecardTouchEvent: function(e, t) {
            this.__addCorecardTouchEvent("summon", e, t)
        },
        __addCorecardTouchEvent: function(e, i, a) {
            i.addTouchEventListener(function(i, s) {
                if (s == n.Widget.TOUCH_ENDED) {
                    var o = {
                        weapon: "sh_weapon_info",
                        summon: "sh_summon_info",
                        item: "sh_item_info"
                    }[e]
                      , r = this.popups[o];
                    Q.all([t.createInstance("api" + _.capitalize(e) + "s").get(a.id), r.open()]).spread(function(t) {
                        "weapon" === e || "summon" === e ? r.setData(r, t.body) : r.setData(t.body)
                    })
                }
            }, this)
        },
        _fillCorecardHandlerBase: function(e, t) {
            e.setTreasureBox(t.box_type || "none"),
            t.amount > 1 && e.setAmount("x" + t.amount, !0)
        },
        _fillCorecardHandlerExtended: function(e, t) {
            this._fillCorecardHandlerBase(e, t),
            null != t.element_type ? e.setIconElement(t.element_type) : i.warn("q_003_2.Scene._fillCorecardHandlerExtended: element data not found"),
            null != t.rare ? e.setIconRarity(t.rare) : i.warn("q_003_2.Scene._fillCorecardHandlerExtended: rarity data not found"),
            e.setPlusNo(t.bonus ? "+" + t.bonus : ""),
            e.setImg(t.id, t.skin || 0)
        },
        _fillItemCorecardHandler: function(e, t) {
            this._fillCorecardHandlerBase(e, t),
            e.setImg(t.id)
        },
        _fillWeaponCorecardHandler: function(e, t) {
            this._fillCorecardHandlerExtended(e, t)
        },
        _fillSummonCorecardHandler: function(e, t) {
            this._fillCorecardHandlerExtended(e, t)
        },
        _clearCache: function() {
            t.gVal.quest.battleResultData = null
        },
        _showPopup: function(e, t) {
            return this._popupDefer = Q.defer(),
            e.open().then(e.setData.bind(e, t)),
            this._popupDefer.promise
        },
        _showEndPopups: function(e) {
            var t = [];
            return null != e.new_characters_gained && t.push(this._showCharacterAcquiredPopups.bind(this, e.new_characters_gained)),
            null != e.quest_cleared && t.push(this._showQuestClearBonusPopups.bind(this, e.quest_cleared)),
            null != e.supporter && e.supporter.can_friend_request && (t.push(this._showFriendRequestPopup.bind(this, e.supporter)),
            t.push(this._showFriendRequestResultPopup.bind(this))),
            t.reduce(Q.when, Q())
        },
        _showNewItemAcquiredPopups: function(e) {
            return _.map(e, function(e) {
                return this._showPopup.bind(this, this.popups.newItemAcquired, e)
            }, this).reduce(Q.when, Q())
        },
        _showCharacterAcquiredPopups: function(e) {
            return _.map(e, function(e) {
                return this._showPopup.bind(this, this.popups.characterAcquired, e)
            }, this).reduce(Q.when, Q())
        },
        _showQuestClearBonusPopups: function(e) {
            var t = [];
            return null != e.bonus_items && t.push(this._showQuestClearBonusItemsAcquiredPopups.bind(this, e.bonus_items)),
            null != e.new_character_abilities_gained && t.push(this._showCharacterAbilityAcquiredPopups.bind(this, e.new_character_abilities_gained)),
            t.reduce(Q.when, Q())
        },
        _showQuestClearBonusItemsAcquiredPopups: function(e) {
            return _.map(e, function(e) {
                return this._showPopup.bind(this, this.popups.questClearBonusItemsAcquired, e)
            }, this).reduce(Q.when, Q())
        },
        _showCharacterAbilityAcquiredPopups: function(e) {
            return _.map(e, function(e) {
                return this._showPopup.bind(this, this.popups.characterAbilityAcquired, e)
            }, this).reduce(Q.when, Q())
        },
        _showFriendRequestPopup: function(e) {
            return this._showPopup(this.popups.friendRequest, e)
        },
        _showFriendRequestResultPopup: function(e) {
            if (!e)
                return Q.resolve();
            this._popupDefer = Q.defer();
            var n;
            n = e.offer_made ? t.WordBook.FRIEND_REQUEST_SEND : t.WordBook.FRIEND_REQUEST_ERROR_MESSAGE[e.error];
            var i = this.popups.friendRequestResult;
            return i.open().then(i.setContent.bind(i, n)),
            this._popupDefer.promise
        },
        _makeFriendRequest: function() {
            return t.createInstance("apiAFriendOffers").makeOffer(this._supporterAPlayerId).then(function(e) {
                return e.body
            }).fail(function(e) {
                i.error("apiAFriendOffers.makeOffer error: " + e.stack)
            })
        },
        _redirect: function(e, n) {
            t.createInstance("router").navigateAndPreventHistoryBack(e, n)
        },
        __gotoQuestTop: function() {
            this._showEndPopups(t.gVal.quest.battleResultData).then(function() {
                this._clearCache(),
                this._redirect.apply(this, this._getNavigateArguments())
            }
            .bind(this)).fail(function(e) {
                i.error(e.stack)
            })
        },
        _getNavigateArguments: function() {
            return -1 !== this.quest_type.search("harem") ? ["epi", {
                epi_001: {
                    tab: "new"
                }
            }] : ["quest", {
                quest_cleared_id: this._questClearedId
            }]
        }
    },
    t.q_003_2.Scene = t.BaseScene.extend(_.assign(t.q_003_2.Popups, t.q_003_2.Events, t.q_003_2.Properties, t.q_003_2.Methods))
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_003_002 = t.pc.quest.q_003_002 || {},
    t.pc.quest.q_003_002.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("q_003/q_003_2.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: q_003/q_003_2.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "q003002Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["quest", "q_003_002"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBackTop"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_back_top", function() {
                alert("{{条件によってボタン文言、遷移先分岐。仕様書参照}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.ccui
      , i = e._
      , a = e.Q
      , s = e.console;
    t.pc = t.pc || {},
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_003_002 = t.pc.quest.q_003_002 || {},
    t.pc.quest.q_003_002.Properties = i.assign(t.q_003_2.Properties, {
        PAGE_VIEW_BASE: "page_prize_list",
        PAGE_VIEW_CONTROL_BASE: "btn_change_page_a_ui",
        PAGE_VIEW_CONTROLS: i.invert({
            btn_down: t.PAGE_CONTROLLER_CONTROLS.NEXT_BUTTON,
            btn_up: t.PAGE_CONTROLLER_CONTROLS.PREVIOUS_BUTTON,
            "page_current_num.page_max_num": t.PAGE_CONTROLLER_CONTROLS.NUMBER_DISPLAY
        }),
        PAGE_VIEW_ITEMS_PER_PAGE: t.BtnsPageListParams.QUEST_RESULT_PRIZES.perPage,
        PAGE_VIEW_DIRECTION: n.ScrollView.DIR_VERTICAL,
        SUBPAGE_WIDGET: t.BtnsPageListParams.QUEST_RESULT_PRIZES.panelName,
        SUBPAGE_WIDGET_NAMES: {
            RECORD_BASE: {
                COUNT: t.BtnsPageListParams.QUEST_RESULT_PRIZES.perPage,
                NAME: "list_blank_"
            }
        },
        CORECARD_WIDGET: "corecard_ui",
        NO_PRIZE_WIDGET: "nothing_label",
        TO_TOP_BUTTON: "btn_back_top",
        TO_TOP_BUTTON_LABEL: "back_top_label",
        RETURN_ROUTES: {
            "default": "_routeToDefault",
            harem: "_routeToHarem",
            event_main: "_routeToRaidEvent",
            event_raid: "_routeToRaidEvent",
            event_union_lilim_raid: "_routeToLilimRaid",
            event_union_demon_raid: "_routeToDemonRaid",
            event: "_routeToEvent"
        }
    }),
    t.pc.quest.q_003_002.Methods = i.assign(t.q_003_2.Methods, {
        _navigateToEpi_001_new: t.pc.quest.roles.Routing._navigateToEpi_001_new,
        _navigate003_002To001: t.pc.quest.roles.Routing._navigate003_002To001,
        _navigate003_002To004: t.pc.quest.roles.Routing._navigate003_002To004,
        __gotoQuestTop: function() {
            this._showEndPopups(t.gVal.quest.battleResultData).then(function() {
                this._clearCache();
                var e = i.find(this.RETURN_ROUTES, function(e, t) {
                    return -1 !== this.quest_type.search(t)
                }, this);
                e ? this[e]() : this[this.RETURN_ROUTES["default"]]()
            }
            .bind(this)).fail(function(e) {
                s.error(e.stack)
            })
        },
        _routeToHarem: function() {
            this._navigateToEpi_001_new(this)
        },
        _routeToEvent: function() {
            this._navigate003_002To004(this)
        },
        _routeToRaidEvent: function() {
            var e = this.event_id || this._delegate._findRaidEventId(this);
            return null != e ? (delete this.event_id,
            this._delegate._navigate003_2ToRa002(this, e)) : void this._navigate003_002To004(this)
        },
        _routeToLilimRaid: function() {
            var e = this.event_id;
            return null != e ? (delete this.event_id,
            this._delegate._navigate003_002ToUniraid004(this, e)) : void this._navigate003_002To004(this)
        },
        _routeToDemonRaid: function() {
            var e = this.event_id;
            return null != e ? (delete this.event_id,
            this._delegate._navigate003_002ToUniraid002(this, e)) : void this._navigate003_002To004(this)
        },
        _routeToDefault: function() {
            this._navigate003_002To001(this, {
                quest_cleared_id: this._questClearedId
            })
        },
        _hidePageviewControls: function() {
            this.seekWidgetByName(this.PAGE_VIEW_CONTROL_BASE).setVisible(!1)
        }
    }),
    t.pc.quest.q_003_002.SceneDelegate = t.pc.BaseSceneDelegate.extend(i.assign(t.q_003_2.Popups, {
        onSceneInit: function(e) {
            return a.resolve()
        },
        onSceneEnter: function(e) {
            this._verifyRouterParams003_002(e);
            var n = i.assign(t.pc.quest.q_003_002.Properties, t.q_003_2.Methods);
            return i.assign(e, n, function(e, t) {
                return e || t
            }, e),
            e.__init = t.q_003_2.Methods._init,
            a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            return e.__init(),
            a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return t.createInstance("httpCache").clearAllCache(),
            a.resolve()
        },
        btnCallbackBtnBackTop: function(e) {
            var t = a.defer();
            return e.__gotoQuestTop(),
            t.reject(this._override),
            t.promise
        },
        _findRaidEventId: function(e) {
            var t = e.routerParams.quest_type;
            if (-1 == ["event_main", "event_raid"].indexOf(t))
                return null ;
            var n = e.routerParams.ra_002 || e.routerParams.ra_001 || {};
            return n.event_id || null
        }
    })),
    i.assign(t.pc.quest.q_003_002.SceneDelegate.prototype, t.pc.quest.roles.Routing)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_004 = t.pc.quest.q_004 || {},
    t.pc.quest.q_004.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("q_004/q_004.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: q_004/q_004.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "q004Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["quest", "q_004"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBackConTop"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_back_con_top", t.createInstance("router").navigate.bind(t.createInstance("router"), "conquest/con_001")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_004 = t.pc.quest.q_004 || {},
    t.pc.quest.q_004.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        questCommonDelegate: new t.QuestScenePcCommonDelegate,
        btnCallbackBtnBackConTop: function(e) {
            var n = a.defer();
            return this.conquestEvent ? t.createInstance("router").navigate("conquest/con_001", {
                con_001: {
                    event_id: this.conquestEvent.event_id
                }
            }) : console.debug("!!! this.conquestEvent is null !!!"),
            n.reject(this._override),
            n.promise
        },
        _showNavigateQuestEventTopBtn: function() {
            var e = n.director.getRunningScene()
              , a = e.seekWidgetByName("btn_back_con_top");
            return a ? (a.setVisible(!1),
            this.conquestEvent = null ,
            void t.createInstance("apiABanners").getMypageBanners().then(function(e) {
                var t = e.body.data
                  , n = i.reduce(t, function(e, t, n) {
                    return "conquest/con_001" === t.navigate_page && (this.conquestEvent = t,
                    e += 1),
                    e
                }
                .bind(this), 0);
                1 === n && a.setVisible(!0)
            }
            .bind(this))) : void console.debug("!!! btn_back_con_top is null !!!")
        },
        onSceneInit: function(e) {
            this._cleanUpPaymentId(),
            this.questCommonDelegate.owner = e;
            var n = t.createInstance("apiAPlayers")
              , i = t.createInstance("apiAQuestInfo")
              , s = i.get().then(function(e) {
                this._questInfo = e.body
            }
            .bind(this)).then(function() {
                return a.all([n.getQuestPoints(), n.getMe(), this._fillupSpecialQuestList(e, "_touchSpecialQuestPanel")]).spread(function(e, t, n) {
                    this._questPoints = e.body.quest_points,
                    this._player = t.body,
                    this._showNavigateQuestEventTopBtn()
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this));
            return s
        },
        onSceneEnter: function(e) {
            a.defer();
            return t.env.isSp || e.contentLayer.bake(),
            a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return i.isFunction(this.questCommonDelegate.onExit) ? this.questCommonDelegate.onExit() : this.questCommonDelegate.owner = null ,
            a.resolve()
        },
        _touchSpecialQuestPanel: function(e, t) {
            var i = n.director.getRunningScene()
              , a = this.questCommonDelegate.restartCheckInProgressQuest(t, this._questInfo);
            a || this.startCheckQuestState(i, t)
        },
        startQuest: function(e, t, n) {
            "raid" === this._selectQuest.type ? this._navigate004To009(e, t) : this._navigateTo002(e, t, n)
        },
        updateQuestPoints: function() {
            return n.director.getRunningScene().headerDelegate.updateQuestPoints().then(function(e) {
                return this._questPoints = e,
                e
            }
            .bind(this))
        },
        update: function() {
            var e = t.createInstance("sceneManager");
            e.reloadScene()
        }
    }),
    i.assign(t.pc.quest.q_004.SceneDelegate.prototype._popups, t.pc.quest.q_001.SceneDelegate.prototype._popups, t.pc.quest.roles.QuestSelectCommon.popups._popups, t.pc.quest.roles.QuestMainPageListPopups._popups),
    i.assign(t.pc.quest.q_004.SceneDelegate.prototype, t.pc.quest.roles.QuestSelectCommon.methods, t.pc.roles.UIUtility, t.pc.quest.roles.Routing, t.pc.quest.roles.QuestMainPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_005 = t.pc.quest.q_005 || {},
    t.pc.quest.q_005.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("q_005/q_005.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: q_005/q_005.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "q005Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["quest", "q_005"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnShiftMap"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_shift_map", function() {
                alert("{{現在進行中のクエストがある場合でタップしたとき、q_005_backcheck を表示進行中のクエストが無い場合、q_001　を表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnPrevMap"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_prev_map", function() {
                alert("{{現在のマップの前のマップへ表示を切り替え}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNextMap"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_next_map", function() {
                alert("{{現在のマップの次のマップへ表示を切り替え}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e.ccs
      , a = e.ccui
      , s = e._
      , o = e.Q
      , r = e.console;
    t.pc = t.pc || {},
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_005 = t.pc.quest.q_005 || {};
    var c = e.res;
    $staticRes(c["quest-q_005-q_005_map_1_ui"]),
    $staticRes(c["quest-q_005-q_005_map_2_ui"]),
    $staticRes(c["quest-q_005-q_005_map_3_ui"]),
    $staticRes(c["quest-q_005-area_mist"]),
    t.pc.quest.q_005.NODE_NAMES = {
        CURRENT_MAP: "map_panel_0.map_ui",
        NEXT_MAP: "map_panel_1.map_ui",
        BTN_PREV_MAP: "btn_prev_map",
        BTN_NEXT_MAP: "btn_next_map"
    },
    t.pc.quest.q_005.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupBackCheck: {
                factoryName: "popupFactoryBlackRed",
                title: "クエストリタイア確認",
                content: "<p>進行中のクエストがあります。<br />別の世界へ移動するには<br />進行中のクエストからリタイアする必要があります。</p><p class='red'>クエストからリタイアしますか？</p>",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    redBtn: "リタイア"
                },
                buttonSounds: {
                    redBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    redBtn: function(e) {
                        e._delegate.giveupQuest(e),
                        this.dismiss()
                    }
                }
            }
        },
        onSceneInit: function(e) {
            var n = t.createInstance("apiAWorlds").getAreas()
              , i = t.createInstance("apiAQuestInfo").get();
            return e.seekWidgetByName("btn_shift_map").setSound(t.SoundList.BUTTON_TOUCHED_CONFIRMED),
            this._disableCtrlBtns(e),
            o.all([n, i]).spread(function(n, i) {
                if (this._mapDelegate = new t.MapDelegate(i.body,n.body.a_areas),
                this._mapDelegate.hasUnlockedArea()) {
                    var a = this._mapDelegate.getMapNoOfUnlockedArea();
                    this._mapDelegate.setCurrentMapNo(a)
                }
                this._updateCurrentMap(e),
                this._updateAreaInfo(e, this._getSelectedAreaId())
            }
            .bind(this)).fail(function(e) {
                r.error(e.stack)
            })
        },
        onSceneEnter: function(e) {
            o.defer();
            return o.resolve()
        },
        onSceneExit: function(e) {
            o.defer();
            return o.resolve()
        },
        btnCallbackBtnShiftMap: function(e) {
            var t = o.defer();
            return t.reject(this._override),
            this._getSelectedAAreaId() ? this._otherAreaHasQuestInProgress() ? (e.popups.popupBackCheck.open(),
            t.promise) : (this.moveToOtherArea(),
            t.promise) : t.promise
        },
        btnCallbackBtnPrevMap: function(e) {
            var t = this._mapDelegate.getCurrentMapNo();
            return this._mapDelegate.setCurrentMapNo(t - 1),
            this._updateCurrentMap(e),
            o.reject(this._override)
        },
        btnCallbackBtnNextMap: function(e) {
            var t = this._mapDelegate.getCurrentMapNo();
            return this._mapDelegate.setCurrentMapNo(t + 1),
            this._updateCurrentMap(e),
            o.reject(this._override)
        },
        _otherAreaHasQuestInProgress: function() {
            var e = this._getAQuestInfo();
            return e.in_progress && (e.in_progress.own_quest || e.in_progress.own_raid) ? e.current_a_area_id !== this._getSelectedAAreaId() : !1
        },
        moveToOtherArea: function() {
            t.createInstance("apiAQuestInfo").moveArea(this._getSelectedAAreaId()).then(function(e) {
                r.log(e),
                t.createInstance("router").navigate("quest")
            }
            .bind(this)).fail(function(e) {
                r.error(e.stack)
            })
        },
        giveupQuest: function(e) {
            var n = this._getAQuestInfo().in_progress.own_quest || this._getAQuestInfo().in_progress.own_raid;
            n.type = n.type || "raid",
            t.createInstance("apiAQuests").giveupQuest(n.a_quest_id, n.type).then(function(e) {
                var i = t.createInstance("popupFactoryComBackResult").create({});
                i.open({
                    type: n.type
                }),
                t.createInstance("apiAQuestInfo").get().then(function(e) {
                    this._questInfo = e.body,
                    this._updateProgressTag(this._getInProgressTagNode(), this._inProgressArea)
                }
                .bind(this)).fail(function(e) {
                    r.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                r.error(e.stack)
            })
        },
        _getInProgressTagNode: function() {
            if (null == this._inProgressArea)
                return null ;
            var e = n.director.getRunningScene()
              , t = "area_" + s.padZero(this._inProgressArea.area_id, 2);
            return e.seekWidgetByPath(t + ".Node")
        },
        _disableCtrlBtns: function(e) {
            s.each([t.pc.quest.q_005.NODE_NAMES.BTN_PREV_MAP, t.pc.quest.q_005.NODE_NAMES.BTN_NEXT_MAP], function(t) {
                var i = e.seekWidgetByName(t);
                i && (i.setColor(n.color("#808080")),
                i.setTouchEnabled(!1))
            })
        },
        _updateCurrentMap: function(e) {
            this._setMap(e, t.pc.quest.q_005.NODE_NAMES.CURRENT_MAP, this._mapDelegate.getCurrentMapNo()),
            t.env.isSp || this._setMap(e, t.pc.quest.q_005.NODE_NAMES.NEXT_MAP, this._mapDelegate.getCurrentMapNo() + 1),
            this._disableCtrlBtns(e),
            this._enableBtnPrevIfHasPrev(e),
            this._enableBtnNextIfHasNext(e),
            this._setEachArea(e).then(function() {
                this._playAreaAnimation(e),
                this._setAreaTouchEvent(e),
                this._updatePageNum(e)
            }
            .bind(this))
        },
        _setMap: function(e, t, n) {
            return new o.Promise(function(a) {
                var s = "quest-q_005-q_005_map_" + n + "_ui"
                  , o = i.load($dynamicRes(c[s]));
                if (!o.node)
                    return r.warn("[WARN] resouce not found: " + s),
                    void a();
                o.action && o.node.runAction(o.action);
                var u = e.seekWidgetByPath(t);
                return u ? (u.removeAllChildren(),
                u.addChild(o.node),
                void a()) : void a()
            }
            ).fail(function(e) {
                r.warn(e)
            })
        },
        _enableBtnPrevIfHasPrev: function(e) {
            if (this._mapDelegate.hasPrev()) {
                var i = e.seekWidgetByName(t.pc.quest.q_005.NODE_NAMES.BTN_PREV_MAP);
                i && (i.setColor(n.color.WHITE),
                i.setTouchEnabled(!0))
            }
        },
        _enableBtnNextIfHasNext: function(e) {
            if (this._mapDelegate.hasNext()) {
                var i = e.seekWidgetByName(t.pc.quest.q_005.NODE_NAMES.BTN_NEXT_MAP);
                i && (i.setColor(n.color.WHITE),
                i.setTouchEnabled(!0))
            }
        },
        _setEachArea: function(e) {
            this._worldNodes = {};
            var n = this._mapDelegate.getAAreasOnCurrentMap();
            return t.env.isSp || Array.prototype.push.apply(n, this._mapDelegate.getAAreasOnNextMap()),
            o.all(s.map(n, function(t) {
                var n = e.seekWidgetByName("area_" + s.padZero(t.area_id, 2));
                if (n)
                    return this._loadAreaIcon(n, t)
            }, this))
        },
        _loadAreaIcon: function(e, n) {
            var a = "../quest/res/q_005/area_[% areaId %].json".replace(/\[%\sareaId\s%\]/g, function(e, t) {
                return s.padZero(n.area_id, 2)
            });
            return t.loader.load([a]).then(function() {
                var t = i.load(a);
                t.node.runAction(t.action),
                e.addChild(t.node),
                this._updateProgressTag(t.node, n),
                this._worldNodes[n.a_area_id] = t.node;
                var o = s.reduce(n.not_clear_quest_info, function(e, t) {
                    return e + t
                });
                o > 0 && (e.seekWidgetByName("count_base").setVisible(!0),
                e.seekWidgetByName("count_label").setString(o)),
                n.a_area_id === this._getSelectedAAreaId() && this.showWorldNaviCharacter(n.a_area_id)
            }
            .bind(this)).fail(function(e) {
                return r.warn(e.stack),
                o.reject(e)
            })
        },
        showWorldNaviCharacter: function(e) {
            this._setWorldNaviCharacterVisible(e, !0)
        },
        hideWorldNaviCharacter: function(e) {
            this._setWorldNaviCharacterVisible(e, !1)
        },
        _setWorldNaviCharacterVisible: function(e, t) {
            var n = this._worldNodes[e];
            if (null != n) {
                var i = n.seekWidgetByName("q_map_chara")
                  , a = i.getActionByTag(i.tag);
                t ? a.gotoFrameAndPlay(0, a.getDuration(), !0) : a.gotoFrameAndPause(0),
                i.setVisible(t)
            }
        },
        _updateProgressTag: function(e, t) {
            if (null != e) {
                var n = this._getAQuestInfo().in_progress.own_quest || {};
                n.a_area_id = n.a_area_id || null ,
                t.a_area_id === n.a_area_id ? (this._inProgressArea = t,
                e.seekWidgetByName("rate_icon").loadTexture("quest/res/q_icon_quest_now.png", a.Widget.PLIST_TEXTURE),
                e.seekWidgetByName("rate_icon").setVisible(!0)) : t.a_area_id === this._getAQuestInfo().next_a_area_id ? (e.seekWidgetByName("rate_icon").loadTexture("quest/res/q_icon_quest_next.png", a.Widget.PLIST_TEXTURE),
                e.seekWidgetByName("rate_icon").setVisible(!0)) : e.seekWidgetByName("rate_icon").setVisible(!1)
            }
        },
        _playAreaAnimation: function(e) {
            var n = this._getAQuestInfo()
              , i = this._mapDelegate.getAAreasOnCurrentMap();
            t.env.isSp || Array.prototype.push.apply(i, this._mapDelegate.getAAreasOnNextMap()),
            s.each(i, function(t) {
                0 != t.is_released && (!this._hasPlayedReleaseAnimation && n.has_unlocked_area && t.a_area_id === n.next_a_area_id ? (this._playAreaReleaseAnimation(e, t),
                this._hasPlayedReleaseAnimation = !0) : this._playAreaDefaultAnimation(e, t))
            }, this)
        },
        _playAreaReleaseAnimation: function(e, n) {
            var a = s.padZero(n.area_id, 2)
              , u = "area_" + a
              , _ = e.seekWidgetByPath(u)
              , l = e.seekWidgetByPath(u + ".Node");
            if (l) {
                l.changeFrame(1),
                l.setVisible(!1);
                var d = i.load(c["quest-q_005-area_mist"])
                  , p = d.node;
                p.runAction(d.action),
                _.addChild(p);
                var h = p.seekWidgetByName("icon_map");
                h.initWithSpriteFrameName("quest/res/q_005/icon_map_" + s.padZero(n.area_id, 2) + "_01.png"),
                p.setStrings({
                    area_name_label: n.area_name
                }),
                o.delay(10).then(function() {
                    p.animate("area_open", !1).delay(1e3).then(function() {
                        p.removeFromParent(),
                        this._playAreaDefaultAnimation(e, n),
                        t.createInstance("apiAQuestInfo").confirmUnlockedAreaPopup()
                    }
                    .bind(this)).fail(function(e) {
                        r.error(e.stack)
                    })
                }
                .bind(this))
            }
        },
        _playAreaDefaultAnimation: function(e, t) {
            var n = s.padZero(t.area_id, 2)
              , i = "area_" + n
              , a = "area_" + n + "_ani"
              , o = e.seekWidgetByPath(i + ".Node");
            o && (o.setVisible(!0),
            o.animate(a, !0))
        },
        _setAreaTouchEvent: function(e) {
            var t = this._mapDelegate.getAAreasOnCurrentMap();
            s.each(t, function(n) {
                var i = s.padZero(n.area_id, 2)
                  , o = "area_" + i
                  , r = e.seekWidgetByPath(o + "..map_btn");
                r && r.addTouchEventListener(function(i, o) {
                    o === a.Widget.TOUCH_ENDED && (this._mapDelegate.setSelectedArea(n),
                    s(t).pluck("a_area_id").each(this.hideWorldNaviCharacter, this),
                    this.showWorldNaviCharacter(n.a_area_id),
                    this._updateAreaInfo(e, n.area_id))
                }
                .bind(this))
            }, this)
        },
        _updateAreaInfo: function(e) {
            var n = this._mapDelegate.getSelectedArea();
            if (n) {
                e.loadTextures({
                    worldimg_area: t.Img("worldimg", "area", s.padZero(n.area_id, 4), 0).png,
                    worldtreasure_area: t.Img("worldtreasure", "area", s.padZero(n.area_id, 4), 0).png
                }),
                e.setStrings({
                    map_name_label: n.area_name,
                    world_description_label: n.description
                }),
                e.seekWidgetByPath("main_quest_base.rest_count_label").setString(n.not_clear_quest_info.main_num.toString(10)),
                e.seekWidgetByPath("free_quest_base.rest_count_label").setString(n.not_clear_quest_info.free_num.toString(10)),
                e.seekWidgetByPath("raid_quest_base.rest_count_label").setString(n.not_clear_quest_info.raid_num.toString(10));
                var i = 3
                  , a = {
                    undiscovered: 0,
                    discovered: 1,
                    slain: 2
                };
                s.each(s.range(i), function(i) {
                    var o = e.seekWidgetByName("q_005_enemyicon_ui_" + i);
                    if (!n || !n.rare_enemy_info || i >= n.rare_enemy_info.length)
                        return void o.setVisible(!1);
                    var r = n.rare_enemy_info[i];
                    o.loadTextures({
                        "iconene_enemy-looks": t.Img("iconene", "enemy-looks", s.padZero(r.id, 4)).png
                    }),
                    o.seekWidgetByName("subdued_icon").setVisible(r.state === a.slain),
                    o.setVisible(!0)
                }, this)
            }
        },
        _updatePageNum: function(e) {
            var t = e.seekWidgetByName("page_num");
            if (t) {
                var n = this._mapDelegate.getCurrentMapNo()
                  , i = this._mapDelegate.getMaxMapNo();
                t.setString([n, i].join("/"))
            }
        },
        _getAQuestInfo: function() {
            return this._mapDelegate.getAQuestInfo()
        },
        _getSelectedAAreaId: function() {
            return (this._mapDelegate.getSelectedArea() || {}).a_area_id
        },
        _getSelectedAreaId: function() {
            return (this._mapDelegate.getSelectedArea() || {}).area_id
        }
    }),
    s.assign(t.pc.quest.q_005.SceneDelegate.prototype, t.pc.quest.roles.Routing)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._
      , i = e.console
      , a = e.cc
      , s = !1;
    s && i.warn("[!! WARN !!] ENABLE DEBUG MODE"),
    t.MapDelegate = a.Class.extend({
        DEFAULT_MAP_NO: 1,
        ctor: function(e, t) {
            this._aQuestInfo = e,
            this._aAreas = t
        },
        getMapNumbers: function() {
            return this._mapNumbers ? this._mapNumbers : (this._mapNumbers = n(this.getAAreas()).pluck("map_no").uniq().value().sort(function(e, t) {
                return e - t
            }) || [],
            this._mapNumbers)
        },
        getAQuestInfo: function() {
            return s ? {
                current_area_id: 2,
                current_a_area_id: 2,
                has_unlocked_area: !0,
                next_a_area_id: 5,
                in_progress: {
                    own_quest: {
                        a_area_id: 1
                    }
                }
            } : this._aQuestInfo
        },
        getAAreas: function() {
            return s ? [].concat(n(n.range(4)).map(function(e) {
                var t = e + 1;
                return {
                    area_name: "エリア" + t,
                    description: "この世でないどこか" + t,
                    a_area_id: t,
                    area_id: t,
                    map_no: 1,
                    not_clear_quest_info: {
                        main_num: t,
                        raid_num: t,
                        free_num: t
                    },
                    rare_enemy_info: [{
                        id: 120 + t,
                        state: 0
                    }, {
                        id: 120 + t,
                        state: 0
                    }],
                    treasure_ids: n.range(t + 4)
                }
            }).value(), n(n.range(4)).map(function(e) {
                var t = e + 5;
                return {
                    area_name: "エリア" + t,
                    description: "この世でないどこか" + t,
                    a_area_id: t,
                    area_id: t,
                    map_no: 2,
                    not_clear_quest_info: {
                        main_num: t,
                        raid_num: t,
                        free_num: t
                    },
                    rare_enemy_info: [{
                        id: 120 + t,
                        state: 0
                    }, {
                        id: 120 + t,
                        state: 0
                    }],
                    treasure_ids: n.range(t + 4)
                }
            }).value()) : this._aAreas
        },
        findAAreaByAreaId: function(e) {
            return n.find(this.getAAreas(), function(t) {
                return e === t.area_id
            }) || {}
        },
        findAAreaByAAreaId: function(e) {
            return n.find(this.getAAreas(), function(t) {
                return e === t.a_area_id
            }) || {}
        },
        findCurrentAArea: function() {
            var e = this.getAQuestInfo().current_area_id;
            return this.findAAreaByAreaId(e)
        },
        getSelectedArea: function() {
            return this._selectedArea ? this._selectedArea : (this.setSelectedArea(this.findCurrentAArea()),
            this._selectedArea)
        },
        setSelectedArea: function(e) {
            this._selectedArea = e
        },
        getCurrentMapNo: function() {
            return this._currentMapNo ? this._currentMapNo : (this.setCurrentMapNo((this.getSelectedArea() || {}).map_no),
            this._currentMapNo || 1)
        },
        setCurrentMapNo: function(e) {
            this._currentMapNo = e
        },
        getPrevMapNo: function() {
            var e = this.getCurrentMapNo()
              , t = this.getMapNumbers()
              , n = t.indexOf(e);
            return 0 >= n ? null : t[n - 1]
        },
        getNextMapNo: function() {
            var e = this.getCurrentMapNo()
              , t = this.getMapNumbers()
              , n = t.indexOf(e);
            return 0 > n ? null : t.length - 1 <= n ? null : t[n + 1]
        },
        getMaxMapNo: function() {
            var e = this.getMapNumbers();
            return e.length < 1 ? -1 : e[e.length - 1]
        },
        hasPrev: function() {
            return n.isNumber(this.getPrevMapNo())
        },
        hasNext: function() {
            return n.isNumber(this.getNextMapNo())
        },
        getAAreasOnCurrentMap: function() {
            var e = this.getCurrentMapNo();
            return n.filter(this.getAAreas(), function(t) {
                return t.map_no === e
            }) || []
        },
        getAAreasOnNextMap: function() {
            var e = this.getNextMapNo();
            return n.filter(this.getAAreas(), function(t) {
                return t.map_no === e
            }) || []
        },
        hasUnlockedArea: function() {
            return this.getAQuestInfo().has_unlocked_area
        },
        getMapNoOfUnlockedArea: function() {
            if (!this.hasUnlockedArea)
                return null ;
            var e = this.getAQuestInfo().next_a_area_id
              , i = n.find(this.getAAreas(), function(t) {
                return t.a_area_id === e
            }) || {
                map_no: t.KHMapDelegate.DEFAULT_MAP_NO
            };
            return i.map_no
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        q_006_attention: {
            factoryName: "popupFactoryTextOnly",
            content: "q_006_attentionを表示します。",
            title: "注意事項",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss()
                }
            }
        }
    };
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_006_007_008 = t.pc.quest.q_006_007_008 || {},
    t.pc.quest.q_006_007_008.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("q_006_7_8/q_006_7_8.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: q_006_7_8/q_006_7_8.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("q_006_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("q_006_node").setVisible(!1),
                e.seekWidgetByPath("q_007_node").setVisible(!1),
                e.seekWidgetByPath("q_008_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("q_007_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("q_006_node").setVisible(!1),
                e.seekWidgetByPath("q_007_node").setVisible(!1),
                e.seekWidgetByPath("q_008_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_2: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab3のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("q_008_node");
                if (!t)
                    return void alert("tab.tab3のcontent-nodeが見つかりません");
                e.seekWidgetByPath("q_006_node").setVisible(!1),
                e.seekWidgetByPath("q_007_node").setVisible(!1),
                e.seekWidgetByPath("q_008_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab2";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "q006007008Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["quest", "q_006_007_008"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnHint"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_hint", function(e) {
                this.popups.q_006_attention.open(e)
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_006_007_008 = t.pc.quest.q_006_007_008 || {},
    t.pc.quest.q_006_007_008.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            comNeedApBp1: {
                factoryName: "popupFactoryComNeedApBp1"
            },
            comNeedApBp2: {
                factoryName: "popupFactoryComNeedApBp2"
            },
            comRaidCheck: {
                factoryName: "popupFactoryComRaidCheck"
            },
            comUseResult: {
                factoryName: "popupFactoryComUseResult"
            },
            q_006_attention: {
                factoryName: "popupFactoryBlue",
                title: "注意事項",
                content: ['<div style="text-align: left; font-size: 20px">', "・結果が未確認のバトルが１件以上残っている場合、<br />　クエストの開始・レイドバトルへの参加ができなくなります。</span>", "</div>"].join(""),
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                },
                onPopupOpened: function(e) {
                    e.seekWidgetByName("popup_base").height = 375,
                    e.seekWidgetByName("title_label").y = 300,
                    e.seekWidgetByName("popup_labelimg").y = 210,
                    e.seekWidgetByName("popup_labelimg").height = 220
                }
            },
            popupReachedRaidMax: {
                factoryName: "popupFactoryBlue",
                title: "参加制限",
                content: "同時に救援依頼から参加できるレイドバトルは<span class='red'>最大3つまで</span>です。",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            com_need_bp_2: {
                factoryName: "popupFactoryTextOnly",
                action: {
                    "アイテム画像について": {
                        id: "501",
                        "json名": "",
                        "アニメーション内容": "エナジーリーフ画像（アップロード画像）をセット　　corecard_item_ID番号",
                        "オブジェクト名": ""
                    },
                    "ショップへをタップ()": {
                        id: "503",
                        "json名": "",
                        "アニメーション内容": "sh_002へ遷移",
                        "オブジェクト名": ""
                    },
                    "メイン文言": {
                        id: "499",
                        "json名": "",
                        "アニメーション内容": "CSS有り",
                        "オブジェクト名": ""
                    },
                    "魔宝石と交換をタップ()": {
                        id: "502",
                        "json名": "",
                        "アニメーション内容": "sh_003へ遷移",
                        "オブジェクト名": ""
                    }
                },
                id: "497",
                name: "com_need_bp_2",
                page: ["q_006_a"],
                resource: "",
                title: "BPが足りません！"
            },
            q_multi_overdo: {
                factoryName: "popupFactoryTextOnly",
                action: {
                    "OKをタップ(blue)": {
                        id: "436",
                        "json名": "btn.json",
                        "アニメーション内容": "ボタン文言「OK」　　　q_multi_overdoを閉じる",
                        "オブジェクト名": "blue_btn"
                    },
                    "q_multi_overdoについて": {
                        id: "435",
                        "json名": "text_button_only.json ",
                        "アニメーション内容": "同時に救援できるレイドバトルが３個までであることを文章で表記 CSS有り",
                        "オブジェクト名": "popup_labelimg"
                    }
                },
                id: "433",
                name: "q_multi_overdo",
                page: ["q_006_a"],
                resource: "text_button_only.json",
                title: "レイドバトル"
            }
        },
        _tabNode: {
            q_006: "tab_0",
            q_007: "tab_1",
            q_008: "tab_2"
        },
        onSceneInit: function(e) {
            this._cleanUpPaymentId();
            var n = t.createInstance("apiAPlayers")
              , s = a.all([this._fillupRaidBattleList(e, "request", "_touchRaidPanel"), this._fillupRaidBattleList(e, "unverify", "_touchUnverifyPanel"), this._fillupRaidBattleList(e, "history", "_touchHistoryPanel"), n.getQuestPoints(), n.getMeNumeric()]).spread(function(e, t, n, a, s) {
                this.joinCount = i.filter(e.data, function(e) {
                    return e.is_joined && !e.is_own_raid
                }).length,
                this.unverifyCount = t.data.length,
                this.questPoint = a.body.quest_points,
                this.player = s.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return this._selectInitialTab(e),
            s
        },
        _selectInitialTab: function(e) {
            var n = t.createInstance("router").currentScene;
            null != this._tabNode[n] && this._showTabByTabName(this._tabNode[n])
        },
        show006: function() {
            this._showTabByTabName("tab_0")
        },
        show007: function() {
            this._showTabByTabName("tab_1")
        },
        show008: function() {
            this._showTabByTabName("tab_2")
        },
        _showTabByTabName: function(e) {
            var t = n.director.getRunningScene();
            t.tabDelegateList[0].selectTab(t.seekWidgetByName(e))
        },
        onSceneEnter: function(e) {
            a.defer();
            return t.env.isSp || e.contentLayer.bake(),
            a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return this._needApBpPopupFactory && (this._needApBpPopupFactory.cleanup(),
            this._needApBpPopupFactory = null ),
            a.resolve()
        },
        btnCallbackBtnHint: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        _touchRaidPanel: function(e, i) {
            var s = n.director.getRunningScene();
            if (i.is_joined)
                return void t.createInstance("router").navigate("battle", {
                    quest_type: i.quest_type,
                    a_quest_id: i.a_quest_id,
                    a_battle_id: i.a_battle_id,
                    is_own_raid: i.is_own_raid,
                    a_player_id: this.player.a_player_id
                });
            if (this.joinCount >= 3)
                this._showPopupReachedRaidMax(s);
            else if (this.unverifyCount)
                this._showPopupExistUnconfirmBattle(s);
            else {
                if (!(this.questPoint.bp < i.battle_bp))
                    return void this._navigate006To009(i, this.player.a_player_id);
                var o = t.createInstance("apiAItems");
                a.all([o.getBpGain(), this.updateQuestPoints()]).spread(function(n, a) {
                    this._needApBpPopupFactory = t.createInstance("popupFactoryComNeedApBp"),
                    this._needApBpPopupFactory.create({
                        property: "BP",
                        questTitle: "Lv" + i.enemy_level + " " + i.enemy_name,
                        questPoints: this.questPoint,
                        items: n.body,
                        component: "quest",
                        onUse: this._onUseBpItem.bind(this, e, i)
                    }).open()
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
        },
        _onUseBpItem: function(e, t, n) {
            this.questPoint.bp = n,
            this._touchRaidPanel(e, t)
        },
        _touchUnverifyPanel: function(e, t, n) {
            this._navigate007To003(t)
        },
        _touchHistoryPanel: function(e, t, n) {
            this._navigate008To010(t)
        },
        _showPopupReachedRaidMax: function(e) {
            var t = e.popups.popupReachedRaidMax;
            t.open()
        },
        _showPopupExistUnconfirmBattle: function(e) {
            var t = e.popups.popupExistUnconfirmBattle;
            t.open()
        },
        updateQuestPoints: function() {
            return n.director.getRunningScene().headerDelegate.updateQuestPoints().then(function(e) {
                return this.questPoint = e,
                e
            }
            .bind(this))
        }
    }),
    i.assign(t.pc.quest.q_006_007_008.SceneDelegate.prototype._popups, t.pc.quest.roles.QuestSelectCommon.popups._popups),
    i.assign(t.pc.quest.q_006_007_008.SceneDelegate.prototype, t.pc.quest.roles.QuestSelectCommon.methods, t.pc.roles.UIUtility, t.pc.quest.roles.Routing, t.pc.quest.roles.QuestRaidPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_009 = t.pc.quest.q_009 || {},
    t.pc.quest.q_009.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("q_009/q_009.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: q_009/q_009.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "q009Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["quest", "q_009"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_009 = t.pc.quest.q_009 || {},
    t.pc.quest.q_009.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this.setSupportCommonisRaid(!0);
            var a = i.all([t.createInstance("apiAQuests").getQuest(e.routerParams.q_009.a_quest_id, e.routerParams.q_009.quest_type), t.createInstance("apiAPlayers").getQuestPoints(), this.getPartyData(), this._fillupSupportSummonList(e, "_touchSupportSummonPanel")]).spread(function(t, i, a, s) {
                this._isLatestEpisode = !0,
                this.questData = t.body,
                this.selectedEpisode = n.last(this.questData.episodes),
                this.questPoints = i.body.quest_points,
                this._setRaidBase(e),
                this._isSupporterSelected(e) && this.openPartySelector(this.getSelectedSupporterData(e, s.data), this.questData, this.questPoints)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return a
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        _touchSupportSummonPanel: function(e, t, n) {
            console.log(t),
            this._supporterData = t,
            this.openPartySelector(t, this.questData, this.questPoints)
        },
        _isSupporterSelected: function(e) {
            return null != e.routerParams.q_009.a_supporter_id || null != this._supporterData
        },
        _setRaidBase: function(e) {
            if (!this.questData.raid_info)
                return void console.warn("this.questData.raid_info is not defined !!");
            var i = this.questData.raid_info
              , a = i.enemy_level;
            e.routerParams.q_009 && e.routerParams.q_009.enemy_level && (a = e.routerParams.q_009.enemy_level,
            delete e.routerParams.q_009.enemy_level);
            var s = e.seekWidgetByName("raid_base")
              , o = s.seekWidgetByName("questimg_raid-quest")
              , r = 0 === this.questData.type.indexOf("event") ? "event-quest" : "raid-quest"
              , c = t.Img("questimg", r, n.padZero(this.questData.quest_id, 4), 1).jpg;
            o.loadTexture(c);
            var u = s.seekWidgetByName("raid_label");
            u.setString("Lv" + a + "\n「" + i.enemy_name + "」\nに挑戦します。")
        },
        getSelectedSupporterId: function(e) {
            return null != this._supporterData ? this._supporterData.a_supporter_id : null != e.routerParams.q_009.a_supporter_id ? e.routerParams.q_009.a_supporter_id : -1
        },
        navigateToParty: function(e) {
            this._navigate009ToParty(e)
        }
    }),
    n.assign(t.pc.quest.q_009.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.quest.roles.Routing, t.pc.quest.roles.QuestSupportPageListController, t.pc.quest.roles.QuestStart, t.pc.quest.roles.QuestSupportPopupCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_010 = t.pc.quest.q_010 || {},
    t.pc.quest.q_010.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("q_010/q_010.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: q_010/q_010.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "q010Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["quest", "q_010"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.quest = t.pc.quest || {},
    t.pc.quest.q_010 = t.pc.quest.q_010 || {},
    t.pc.quest.q_010.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParams010(e);
            var n = e.routerParams.q_010.had_won;
            this._baseNodeName = n ? "q_010_result_succeed_ui" : "q_010_result_failed_ui";
            var i = n ? "_fillupPageSuccess" : "_fillupPageFail"
              , a = e.routerParams.q_010.a_battle_id
              , s = e.routerParams.q_010.quest_type;
            return t.createInstance("apiABattles").battleResult(a, s).then(function(t) {
                console.log(t.body),
                this[i](e, t.body)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        onPageInAnimationEnd: function(e) {
            i.defer();
            return e.seekWidgetByName("q_010_result_succeed_ui").setVisible(e.routerParams.q_010.had_won),
            e.seekWidgetByName("q_010_result_failed_ui").setVisible(!e.routerParams.q_010.had_won),
            e.seekWidgetByName(this._baseNodeName).animate("layer_in", !1),
            i.resolve()
        },
        _fillupPageSuccess: function(e, t) {
            var n = e.seekWidgetByName(this._baseNodeName)
              , i = e.routerParams.q_010.quest_id;
            this._fillupCommon(n, t, i),
            n.seekWidgetByName("get_items_label").setString(this._createItemString(t.items_gained)),
            this._fillPlayerSlider(e, t.raid_stats.mvp)
        },
        _fillupPageFail: function(e, t) {
            var n = e.seekWidgetByName(this._baseNodeName)
              , i = e.routerParams.q_010.quest_id;
            this._fillupCommon(n, t, i)
        },
        _fillupCommon: function(e, i, a) {
            var s = 0 === (i.raid_stats.quest_type || i.raid_stats.type || "").indexOf("event") ? "event-quest" : "raid-quest"
              , o = t.Img("questimg", s, n.padZero(a, 4), 1).jpg;
            e.loadTextures({
                "questimg_raid-quest": o
            }),
            e.setStrings({
                raid_name_label: "Lv" + i.raid_stats.boss_lvl + " " + i.raid_stats.boss_name,
                date_label: "バトル終了 " + i.raid_stats.end_date,
                join_label: "参加人数 " + i.raid_stats.participant_number + "人",
                get_rank_label: "Rankポイント：" + i.points_gained.rank,
                get_exp_label: "EXP：" + i.points_gained.experience,
                damage_no_label: n.isUndefined(i.raid_stats.damage_done) ? "0" : i.raid_stats.damage_done.toString()
            })
        },
        _createItemString: function(e) {
            if (n.isUndefined(e))
                return "";
            var t = [];
            return n.each(e, function(e) {
                t.push(e.name)
            }),
            t.join("/")
        },
        _onTouchUserButton: function(e, t, n) {
            this._navigateToPrf001(t)
        }
    }),
    n.assign(t.pc.quest.q_010.SceneDelegate.prototype, t.pc.quest.roles.QuestResultPlayerSlider, t.pc.quest.roles.Routing)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "ACharacters"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/a_characters/" + e
            })
        },
        getList: function(e, t) {
            return this._http.get({
                url: "/a_characters/",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        getListEnhanceBase: function(e, t, n) {
            return this._http.get({
                url: "/a_characters",
                json: {
                    selectable_base_filter: "enhance",
                    sort: e,
                    page: t,
                    per_page: n
                }
            })
        },
        getEnhanceMaterials: function(e, t, n) {
            return this._http.get({
                url: "/a_characters/" + e + "/enhance_materials",
                json: {
                    page: t,
                    per_page: n
                }
            })
        },
        getRecommendEnhanceMaterials: function(e) {
            return this._http.get({
                url: "/a_characters/" + e + "/recommend_enhance_materials"
            })
        },
        confirmEnhanceMaterials: function(e, t) {
            return this._http.get({
                url: "/a_characters/" + e + "/confirm_enhance_materials",
                json: {
                    ids: t
                }
            })
        },
        enhance: function(e, t) {
            return this._http.post({
                url: "/a_characters/" + e + "/enhance",
                json: {
                    ids: t
                }
            })
        },
        getListEvolveBase: function(e, t, n) {
            return this._http.get({
                url: "/a_characters",
                json: {
                    selectable_base_filter: "evolve",
                    sort: e,
                    page: t,
                    per_page: n
                }
            })
        },
        getEvolveMaterials: function(e) {
            return this._http.get({
                url: "/a_characters/" + e + "/evolve_material"
            })
        },
        evolve: function(e) {
            return this._http.post({
                url: "/a_characters/" + e + "/evolve"
            })
        },
        getEnhanceEvolveInfo: function(e) {
            return this._http.get({
                url: "/a_characters/" + e + "/enhance_evolve_info"
            })
        },
        getListArouseBase: function(e, t, n) {
            return this._http.get({
                url: "/a_characters",
                json: {
                    selectable_base_filter: "arousal",
                    sort: e,
                    page: t,
                    per_page: n
                }
            })
        },
        getArouseMaterials: function(e) {
            return this._http.get({
                url: "/a_characters/" + e + "/arouse_material"
            })
        },
        arouse: function(e) {
            return this._http.post({
                url: "/a_characters/" + e + "/arouse"
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiACharacters",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AWeapons"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/a_weapons/" + e
            })
        },
        lock: function(e) {
            return this._http.put({
                url: "/a_weapons/" + e,
                json: {
                    is_locked: !0
                }
            })
        },
        unlock: function(e) {
            return this._http.put({
                url: "/a_weapons/" + e,
                json: {
                    is_locked: !1
                }
            })
        },
        getList: function(e, t) {
            return this._http.get({
                url: "/a_weapons/",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        getListEnhanceBase: function(e, t, n) {
            return this._http.get({
                url: "/a_weapons",
                json: {
                    selectable_base_filter: "enhance",
                    sort: e,
                    page: t,
                    per_page: n
                }
            })
        },
        getEnhanceMaterials: function(e, t, n) {
            return this._http.get({
                url: "/a_weapons/" + e + "/enhance_materials",
                json: {
                    page: t,
                    per_page: n
                }
            })
        },
        getRecommendGuardianDonationMaterials: function() {
            return this._http.get({
                url: "/a_weapons",
                json: {
                    guardian_enhance_recommended: !0
                }
            })
        },
        getRecommendEnhanceMaterials: function(e) {
            return this._http.get({
                url: "/a_weapons/" + e + "/recommend_enhance_materials"
            })
        },
        confirmEnhanceMaterials: function(e, t) {
            return this._http.get({
                url: "/a_weapons/" + e + "/confirm_enhance_materials",
                json: {
                    ids: t
                }
            })
        },
        enhance: function(e, t) {
            return this._http.post({
                url: "/a_weapons/" + e + "/enhance",
                json: {
                    ids: t
                }
            })
        },
        getListEvolveBase: function(e, t, n) {
            return this._http.get({
                url: "/a_weapons",
                json: {
                    selectable_base_filter: "evolve",
                    sort: e,
                    page: t,
                    per_page: n
                }
            })
        },
        getEvolveMaterials: function(e, t, n) {
            return this._http.get({
                url: "/a_weapons/" + e + "/evolve_materials",
                json: {
                    page: t,
                    per_page: n
                }
            })
        },
        confirmEvolveMaterial: function(e, t) {
            return this._http.get({
                url: "/a_weapons/" + e + "/confirm_evolve_material",
                json: {
                    id: t
                }
            })
        },
        evolve: function(e, t) {
            return this._http.post({
                url: "/a_weapons/" + e + "/evolve",
                json: {
                    id: t
                }
            })
        },
        confirmSellPrice: function(e) {
            return this._http.get({
                url: "/a_weapons_sale_selection",
                json: {
                    ids: e
                }
            })
        },
        sell: function(e) {
            return this._http.post({
                url: "/a_weapons_sale",
                json: {
                    ids: e
                }
            })
        },
        getSellableList: function(e, t) {
            return this._http.get({
                url: "/a_weapons",
                json: {
                    selectable_base_filter: "sellable",
                    page: e,
                    per_page: t
                }
            })
        },
        getRecommendSellableList: function() {
            return this._http.get({
                url: "/a_weapons",
                json: {
                    sale_recommended: !0
                }
            })
        },
        getEnhanceEvolveInfo: function(e) {
            return this._http.get({
                url: "/a_weapons/" + e + "/enhance_evolve_info"
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAWeapons",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AJobs"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/a_jobs/" + e
            })
        },
        getListAcquired: function(e) {
            return this._http.get({
                url: "/a_jobs",
                json: {
                    acquired: !0,
                    rank: e
                }
            })
        },
        getListUnacquired: function(e) {
            return this._http.get({
                url: "/a_jobs",
                json: {
                    acquired: !1,
                    rank: e
                }
            })
        },
        compare: function(e, t) {
            return this._http.get({
                url: ["/a_jobs", e, "compare_to", t].join("/")
            })
        },
        release: function(e) {
            return this._http.post({
                url: "/a_jobs",
                json: {
                    job_id: e
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAJobs",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "ASubTutorialPages"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/a_sub_tutorial_pages/" + e
            })
        },
        visited: function(e) {
            return this._http.put({
                url: "/a_sub_tutorial_pages/" + e,
                json: {
                    visited: !0
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiASubTutorialPages",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = (e.cc,
    e.ccui);
    n.PopupFactoryComConfirmBonus = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-p_bonus_info",
            title: "ボーナス確認",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            this._popup = e,
            this._bonus = t.bonus,
            console.log(t),
            this._initPopupLayout(),
            this._loadBonusList()
        },
        _loadBonusList: function() {
            var e = this._popup.seekWidgetByName("contents_panel");
            e.setLayoutType(i.Layout.LINEAR_VERTICAL),
            e.removeAllChildren();
            var a = ccs.load(res["core-popup-p_bonus_list_ui"]).node;
            t.each(this._bonus, function(i, s) {
                var o = a.clone();
                o.seekWidgetByName("bonus_img").loadTexture(n.Img("coreimg", "job-bonusicon", t.padZero(i.type, 4)).png),
                o.seekWidgetByName("bonus_label").setString(i.description),
                e.height = e.height + o.height,
                e.addChild(o),
                this._adjustPopupLayout(o)
            }, this),
            this._initializedPopup = !0
        },
        _initPopupLayout: function() {
            this._popup.seekWidgetByName("popup_base").height = 274,
            this._popup.seekWidgetByName("main_panel").y = 123,
            this._popup.seekWidgetByName("title_label").y = 244,
            this._popup.seekWidgetByName("contents_panel").height = 8
        },
        _adjustPopupLayout: function(e) {
            this._popup.seekWidgetByName("popup_base").height = this._popup.seekWidgetByName("popup_base").height + e.height,
            this._popup.seekWidgetByName("main_panel").y = this._popup.seekWidgetByName("main_panel").y + e.height,
            this._popup.seekWidgetByName("title_label").y = this._popup.seekWidgetByName("title_label").y + e.height
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    e.cc,
    e.ccui;
    n.PopupFactoryComCharChange = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-p_chara_change",
            title: "神姫編成",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttonSounds: {
                blueBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED
            },
            buttons: {
                blueBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, i) {
            this._popup = e,
            this._character = i.character,
            console.log(i);
            var a = n.createInstance("voiceLoader")
              , s = n.IDList.VOICES.JOIN_PARTY;
            a.loadCharacterVoices(this._character.character_id, s.LOWER, s.UPPER).then(function(e) {
                n.createInstance("soundPlayer").playVoice(t.sample(e))
            }),
            this._loadContent()
        },
        _loadContent: function() {
            var e = this._character
              , t = n.createInstance("CoreCardCharacterUI", ["e_r"]);
            t.setAroused(e.is_aroused),
            t.setImg(e.character_id, 0),
            t.setIconElement(e.element_type),
            t.setIconRarity(e.rare);
            var i = t.getResult();
            this._popup.seekWidgetByName("chara_img").addChild(i),
            this._popup.seekWidgetByName("formation_label").setString(e.name + "\nをパーティに加えました"),
            this._initializedPopup = !0
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    e.cc,
    e.ccui;
    n.PopupFactoryComOpenJobEpisode = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_open_episode",
            title: "ハーレムエピソード解放",
            buttonLabels: {
                blackBtn: "閉じる"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, i) {
            this._popup = e,
            this._job = i.job,
            console.log(i);
            var a = n.createInstance("voiceLoader")
              , s = n.IDList.VOICES.JOIN_PARTY;
            a.loadJobVoices(this._job.job_id, s.LOWER, s.UPPER).then(function(e) {
                n.createInstance("soundPlayer").playVoice(t.sample(e))
            }),
            this._loadContent()
        },
        _loadContent: function() {
            var e = this._popup
              , t = this._job
              , i = n.createInstance("CoreCardJobUI");
            i.setImg(t.job_id, 0);
            var a = i.getResult();
            e.seekWidgetByName("core_img").addChild(a),
            e.seekWidgetByName("core_img").setVisible(!0),
            e.setStrings({
                harlem_release_label: t.name + "のハーレムエピソードが解放されました！"
            })
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.cc
      , a = e.ccui;
    n.PopupFactoryComPartyAutoOrg = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-p_001_autoorg",
            title: "パーティおまかせ編成",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "編成する"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                },
                blueBtn: function(e) {}
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, n) {
            console.log(n),
            t.isUndefined(this._initializedPopup) && this._initPopup(e, n)
        },
        _initPopup: function(e, a) {
            a.autoOrgButtonHandler(),
            this._clearElementSelector(e),
            this._updateElementSelector(e.seekWidgetByName("btn_set_element_0"), !1),
            this._addEventElementSelector(e),
            this._addEventExtraOption(e, "btn_with_weapon"),
            this._addEventExtraOption(e, "btn_with_summon"),
            n.setTouchEventHandlers(e, {
                "TOUCH_ENDED blue_btn": function() {
                    var s = i.director.getRunningScene();
                    t.isFunction(s._selectPartyAutoOrg) && s._selectPartyAutoOrg("character", e),
                    t.isUndefined(a.doneEventName) || n.createInstance("notificationCenter").dispatchEvent(a.doneEventName, ["character", e])
                }
                .bind(this)
            }, this)
        },
        _updateElementSelector: function(e, t) {
            e.setEnabled(t),
            e.setBright(t)
        },
        _clearElementSelector: function(e) {
            t.each(t.range(6), function(t) {
                this._updateElementSelector(e.seekWidgetByName("btn_set_element_" + t), !0)
            }, this)
        },
        _addEventElementSelector: function(e) {
            t.each(t.range(6), function(t) {
                e.seekWidgetByName("btn_set_element_" + t).addTouchEventListener(function(t, n) {
                    n === a.Widget.TOUCH_ENDED && (this._clearElementSelector(e),
                    this._updateElementSelector(t, !1))
                }, this)
            }, this)
        },
        _addEventExtraOption: function(e, t) {
            e.seekWidgetByName(t).addTouchEventListener(function(e, t) {
                t === a.Widget.TOUCH_ENDED && e.setBright(!e.bright)
            }, this)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.cc
      , a = e.ccui;
    n.PopupFactoryComWeaponSummonAutoOrg = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-p_autoorg",
            title: "ウェポンおまかせ編成",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "編成する"
            },
            buttonSounds: {
                blueBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                },
                blueBtn: function(e) {}
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, n) {
            this._target = n.target,
            console.log(n),
            t.isUndefined(this._initializedPopup) && this._initPopup(e, n)
        },
        _initPopup: function(e, a) {
            a.autoOrgButtonHandler(),
            e.setTitle(n.w(this._target) + "おまかせ編成");
            var s = i.director.getRunningScene();
            t.isFunction(s._showPopupAutoOrgDescription) && s._showPopupAutoOrgDescription(e),
            this._clearElementSelector(e),
            this._updateElementSelector(e.seekWidgetByName("btn_set_element_0"), !1),
            this._addEventElementSelector(e),
            n.setTouchEventHandlers(e, {
                "TOUCH_ENDED blue_btn": function() {
                    var s = i.director.getRunningScene();
                    t.isFunction(s._selectPartyAutoOrg) && s._selectPartyAutoOrg(this._target, e),
                    t.isUndefined(a.doneEventName) || n.createInstance("notificationCenter").dispatchEvent(a.doneEventName, [this._target, e])
                }
                .bind(this)
            }, this)
        },
        _updateElementSelector: function(e, t) {
            e.setEnabled(t),
            e.setBright(t)
        },
        _clearElementSelector: function(e) {
            t.each(t.range(6), function(t) {
                this._updateElementSelector(e.seekWidgetByName("btn_set_element_" + t), !0)
            }, this)
        },
        _addEventElementSelector: function(e) {
            t.each(t.range(6), function(t) {
                e.seekWidgetByName("btn_set_element_" + t).addTouchEventListener(function(t, n) {
                    n === a.Widget.TOUCH_ENDED && (this._clearElementSelector(e),
                    this._updateElementSelector(t, !1))
                }, this)
            }, this)
        },
        _addEventExtraOption: function(e, t) {
            e.seekWidgetByName(t).addTouchEventListener(function(e, t) {
                t === a.Widget.TOUCH_ENDED && e.setBright(!e.bright)
            }, this)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.cc
      , a = e.ccui;
    n.PopupFactoryComPartyChange = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-p_party_change",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                },
                blueBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            this._decks = t.decks,
            this._seldeck = t.seldeck,
            console.log(t),
            this._loadContent(e, t)
        },
        _loadContent: function(e, i) {
            this._setPopupQuestSubTitle(e, this._decks[0].party_name),
            this._setCurrentIcon(e, 0),
            this._setButtonStatus(e, 0);
            var s = e.seekWidgetByName("page_panel");
            s.removeAllChildren();
            var o = []
              , r = 0;
            t.each(this._decks, function(e, t) {
                o.push(this._createPartyNode(e, t)),
                e.a_party_id === this._seldeck && (r = t)
            }, this);
            var c = new n.PageView;
            c.initialize(o, function(t, n) {
                this._setEnabledButton(e.seekWidgetByName("blue_btn"), r == n - 1 ? !1 : !0),
                this._setPopupQuestSubTitle(e, this._decks[n - 1].party_name),
                this._setCurrentIcon(e, n - 1),
                this._setButtonStatus(e, n - 1),
                this._currentDeckPage = t,
                this._currentDeck = this._decks[n - 1]
            }, this),
            c.setDirection(a.ScrollView.DIR_HORIZONTAL),
            s.addChild(c);
            var u = [];
            u[n.PAGE_CONTROLLER_CONTROLS.NEXT_BUTTON] = "btn_page_next",
            u[n.PAGE_CONTROLLER_CONTROLS.PREVIOUS_BUTTON] = "btn_page_back";
            (new n.PageController).init(e, u, c);
            c.gotoPageByIndex(r),
            this._setBlueButtonCallback(e),
            this._initializedPopup = !0
        },
        _setBlueButtonCallback: function(e) {
            n.setTouchEventHandlers(e, {
                "TOUCH_ENDED blue_btn": function() {
                    var n = i.director.getRunningScene();
                    return t.isFunction(n._changeParty) ? void n._changeParty(e, this._currentDeck.a_party_id) : (n._delegate._changeParty(n, this._currentDeck.a_party_id),
                    void e.dismiss())
                }
            }, this)
        },
        _setEnabledButton: function(e, t) {
            e.setColor(i.color(t ? "#FFFFFF" : "#808080")),
            e.setEnabled(t)
        },
        _setPopupQuestSubTitle: function(e, n) {
            e.seekWidgetByName("title_label").setString("パーティ編成[" + t.last(n) + "]")
        },
        _setCurrentIcon: function(e, n) {
            t.each(t.range(6), function(t) {
                e.seekWidgetByName("party_current_icon_" + t).setVisible(t == n ? !0 : !1)
            }, this)
        },
        _setButtonStatus: function(e, t) {
            e.seekWidgetByName("btn_page_back").setVisible(0 == t ? !1 : !0),
            e.seekWidgetByName("btn_page_next").setVisible(t >= 5 ? !1 : !0)
        },
        _createPartyNode: function(e, t) {
            var n = ccs.load(res["core-popup-party_change_page_ui"]).node;
            return this._fillupPartyNode(n, e, t)
        },
        _fillupPartyNode: function(e, i, a) {
            var s = i.job
              , o = n.createInstance("CoreCardJobUI");
            o.setImg(s.id, 0),
            o.setIconElement(s.element_type);
            var r = o.getResult();
            e.seekWidgetByName("corecard_job_ui").addChild(r),
            e.seekWidgetByName("corecard_job_ui").setVisible(!0);
            var c = 6;
            t.each(t.range(c), function(t) {
                e.seekWidgetByName("corecard_chara_ui_" + t).setVisible(!1)
            });
            var u = 4;
            i.job.element_type;
            t.each(i.characters.slice(0, u), function(i, a) {
                if (!t.isUndefined(i.id)) {
                    var s = e.seekWidgetByName("corecard_chara_ui_" + a)
                      , o = n.createInstance("CoreCardCharacterUI", ["e_r"]);
                    o.setAroused(i.is_aroused),
                    o.setImg(i.id, 0),
                    o.setIconElement(i.element_type),
                    o.setIconRarity(i.rare);
                    var r = o.getResult();
                    s.addChild(r),
                    s.setVisible(!0)
                }
            });
            var _ = u;
            t.each(i.characters.slice(_, c), function(i, a) {
                if (!t.isUndefined(i.id)) {
                    var s = e.seekWidgetByName("corecard_chara_ui_" + (a + _))
                      , o = n.createInstance("CoreCardCharacterUI");
                    o.setAroused(i.is_aroused),
                    o.setImg(i.id, 0),
                    o.setIconElement(i.element_type),
                    o.setIconRarity(i.rare);
                    var r = o.getResult();
                    s.addChild(r),
                    s.setVisible(!0)
                }
            });
            var l = n.createInstance("CoreCardSummonUI");
            l.setImg(i.leader_summon.id, 0),
            l.setIconElement(i.leader_summon.element_type),
            l.setIconRarity(i.leader_summon.rare);
            var d = l.getResult();
            return e.seekWidgetByName("corecard_summon_ui").addChild(d),
            e.seekWidgetByName("corecard_summon_ui").setVisible(!0),
            e.setStrings({
                summon_name_level: "Lv" + i.leader_summon.level + " " + i.leader_summon.name,
                summon_attack: i.leader_summon.attack_description,
                summon_support: i.leader_summon.effect_description
            }),
            e
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._,
    e.Q);
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.AnimationCommon = {
        _setEndAnimationEvent: function(e, t, i) {
            var a = new ccs.Timeline
              , s = new ccs.EventFrame;
            i = i || "endAnimation",
            s.setEvent(i),
            s.setFrameIndex(t),
            a.addFrame(s),
            e.addTimeline(a);
            var o = n.defer();
            return e.setFrameEventCallFunc(function(t) {
                t.getEvent() === i && o.resolve(e)
            }),
            o.promise
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.AllOverUI = {
        _openAllOverPanel: function(e, a, s) {
            var o = n.director.getRunningScene()
              , r = o.seekWidgetByName("all_over_ui");
            if (null === r)
                return void console.warn("[ERROR] Could not find all_over_ui.");
            if (!i.contains(["chara", "weapon", "summon", "job", "guardian", "npc"], s))
                return void console.error("Invalid image type: " + s);
            var c = r.seekWidgetByName("illustzoom")
              , u = r.seekWidgetByName("illustface")
              , _ = r.seekWidgetByName("btn_faceup");
            if (null === c)
                return void console.warn("[ERROR] Could not find illustzoom | btn_faceup.");
            a = a || 0,
            c.loadTexture(t.Img("illustzoom", s, i.padZero(e, 4), a).png),
            r.setVisible(!0),
            _ && u && (u.loadTexture(t.Img("illustface", s, i.padZero(e, 4), a).png),
            this._setZoomEvent(r, e, a, s));
            var l = r.seekWidgetByName("btn_close");
            l && this._setCloseEvent(r)
        },
        _setZoomEvent: function(e, n, i, a) {
            t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_faceup": function() {
                    this._changeZoomView(e, "faceup")
                }
                .bind(this)
            }, this)
        },
        _changeZoomView: function(e, t) {
            var n = e.getActionByTag(e.tag);
            n && n.gotoFrameAndPause(n.animationInfo[t].startIndex)
        },
        _setCloseEvent: function(e) {
            t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_close": function() {
                    e.setVisible(!1),
                    this._onTouchClose(e)
                }
                .bind(this)
            }, this)
        },
        _onTouchClose: function(e) {
            var t = n.director.getRunningScene()
              , i = t.seekWidgetByName("all_over_ui");
            return null === i ? void console.warn("[ERROR] Could not find all_over_ui.") : (e.seekWidgetByName("illustface") && this._changeZoomView(e, "zoom"),
            void i.setVisible(!1))
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.status = t.pc.status || {},
    t.pc.status.roles = t.pc.status.roles || {},
    t.pc.status.roles.AbilityCommon = {
        _appendAbility: function(e, i, a, s, o) {
            if (n.isUndefined(i.abilities))
                return 0;
            n.isUndefined(o) && (o = $staticRes(res["core-statuslist-statuslist_ability_ui"])),
            n.isUndefined(s) && (s = "statuslist_ui_"),
            n.isUndefined(a) && (a = 0);
            var r = i.abilities.length
              , c = /\/(?:prf_004|ga_008|sh_009)$/.test(t.createInstance("router").getCurrentFragment());
            return n.each(i.abilities, function(r, u) {
                var _ = ccs.load($dynamicRes(o)).node;
                this._setAbilityPanelStrings(_, r);
                var l = _.seekWidgetByName("ability_learn_level_0")
                  , d = _.seekWidgetByName("ability_learn_level_1");
                if (!n.isUndefined(r.available_level) && null !== l && null !== d) {
                    var p = "習得Lv" + r.available_level;
                    l.setString(p),
                    d.setString(p);
                    var h = !n.isUndefined(r.episode_cleared) && r.episode_cleared
                      , g = !n.isUndefined(r.available_level) && r.available_level > 1;
                    if (c || h ? (console.debug(r.name, "cleared"),
                    l.setVisible(g),
                    d.setVisible(!1)) : g && (console.debug(r.name, "lv1over", i.level < r.available_level),
                    l.setVisible(!1),
                    d.setVisible(!0),
                    this.__setEpisodeButton(_, i, r)),
                    _.seekWidgetByName("coreimg_abilityicon").loadTexture(t.Img("coreimg", "abilityicon", n.padZero(r.type, 4)).png),
                    null !== e.seekWidgetByName(s + (u + a)) && e.seekWidgetByName(s + (u + a)).addChild(_),
                    !n.isUndefined(r.is_ex_ability) && !n.isUndefined(r.available_level)) {
                        var m = _.seekWidgetByName("ability_learn_level_0");
                        if (null !== m && r.is_ex_ability && (m.setVisible(!0),
                        m.setString("EX設定可")),
                        i.level < r.available_level && n.contains([5, 10, 15], r.available_level) === !0) {
                            null !== _.seekWidgetByName("icon_filter") && _.seekWidgetByName("icon_filter").setVisible(!0);
                            var f = _.seekWidgetByName("get_lv_textimg");
                            null !== f && f.loadTexture("core/res/introduce/statuslist/statuslist_icon_lv" + r.available_level + ".png", ccui.Widget.PLIST_TEXTURE)
                        }
                    }
                }
            }, this),
            r
        },
        __setEpisodeButton: function(e, t, i) {
            var a = e.seekWidgetByName("ability_list_ep_btn");
            if (null !== a)
                return n.isUndefined(t.job_id) ? (a.setVisible(!0),
                t.level < i.available_level ? void this._setEnableButton(a, !1) : void a.addTouchEventListener(function(e, t) {
                    t === ccui.Widget.TOUCH_ENDED && this._touchEPButton()
                }, this)) : void a.setVisible(!1)
        },
        _appendExAbility: function(e, i, a, s, o) {
            if (n.isUndefined(i.selected_ex_ability) || n.isUndefined(i.can_set_ex_ability))
                return 0;
            n.isUndefined(o) && (o = $staticRes(res["core-statuslist-statuslist_ex-ability_ui"])),
            n.isUndefined(s) && (s = "statuslist_ui_"),
            n.isUndefined(a) && (a = 0);
            var r = 1
              , c = i.selected_ex_ability;
            if (n.isUndefined(c.type)) {
                var u = ccs.load(res["core-statuslist-statuslist_ex-ability_blank_ui"]).node;
                if (null !== !e.seekWidgetByName(s + a))
                    return e.seekWidgetByName(s + a).addChild(u),
                    r
            }
            var u = ccs.load($dynamicRes(o)).node;
            return this._setExAbilityPanelStrings(u, c),
            u.seekWidgetByName("coreimg_abilityicon").loadTexture(t.Img("coreimg", "abilityicon", n.padZero(c.type, 4)).png),
            null !== e.seekWidgetByName(s + a) && e.seekWidgetByName(s + a).addChild(u),
            r
        },
        _setAbilityPanelStrings: function(e, t) {
            e.setStrings({
                ability_list_name: t.name,
                ability_list_description: t.description,
                ability_list_interval_label: this._getAbilityInterval(t),
                ability_list_duration_label: this._getAbilityDuration(t)
            })
        },
        _setExAbilityPanelStrings: function(e, t) {
            e.setStrings({
                ex_ability_list_name: t.name,
                ex_ability_list_description: t.description,
                ex_ability_list_interval_label: this._getAbilityInterval(t),
                ex_ability_list_duration_label: this._getAbilityDuration(t)
            })
        },
        _setExAbilityIsSet: function(e, t) {
            e.seekWidgetByName("ex_ability_list_setting_up").setVisible(t.is_set)
        },
        _setExAbilityIcon: function(e, t) {
            e.seekWidgetByName("coreimg_abilityicon").loadTexture(this._getAbilityIconImg(t))
        },
        _getAbilityInterval: function(e) {
            return "使用間隔：" + e.recast + "ターン"
        },
        _getAbilityDuration: function(e) {
            var t = [];
            return n.isEmpty(e.turn) || t.push(e.turn + "ターン"),
            n.isEmpty(e.second) || t.push(e.second + "秒"),
            t.length > 0 ? "効果時間：" + t.join("") : ""
        },
        _getAbilityIconImg: function(e) {
            return t.Img("coreimg", "abilityicon", n.padZero(e.type, 4)).png
        },
        _touchEPButton: function() {
            t.createInstance("router").navigate("epi/epi_001", {
                epi_001: {
                    tab: "new"
                }
            })
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.status = t.pc.status || {},
    t.pc.status.roles = t.pc.status.roles || {},
    t.pc.status.roles.BurstCommon = {
        _appendBurst: function(e, i, a, s, o) {
            var r = 0;
            if (n.isUndefined(i.burst))
                return r;
            n.isUndefined(o) && (o = $staticRes(res["core-statuslist-statuslist_burst_ui"])),
            n.isUndefined(s) && (s = "statuslist_ui_"),
            n.isUndefined(a) && (a = 0);
            var c = ccs.load($dynamicRes(o)).node
              , u = i.burst.name || "[バースト付与効果]";
            c.setStrings({
                burst_list_name: u,
                burst_list_description: i.burst.description
            });
            var _ = c.seekWidgetByName("coreimg_bursticon");
            return null !== _ && _.loadTexture(t.Img("coreimg", "bursticon", n.padZero(1, 4)).png),
            null !== e.seekWidgetByName(s + a) && (e.seekWidgetByName(s + a).addChild(c),
            e.seekWidgetByName(s + a).setVisible(!0)),
            r++,
            r
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.status = t.pc.status || {},
    t.pc.status.roles = t.pc.status.roles || {},
    t.pc.status.roles.AssistCommon = {
        _appendAssist: function(e, i, a, s, o) {
            return n.isUndefined(i.assists) ? 0 : (n.isUndefined(o) && (o = $staticRes(res["core-statuslist-statuslist_assist_ui"])),
            n.isUndefined(s) && (s = "statuslist_ui_"),
            n.isUndefined(a) && (a = 0),
            n.each(i.assists, function(i, r) {
                var c = ccs.load($dynamicRes(o)).node;
                c.setStrings({
                    assist_list_name: i.name,
                    assist_list_description: i.description
                });
                var u = c.seekWidgetByName("coreimg_assisticon");
                null !== u && u.loadTexture(t.Img("coreimg", "assisticon", n.padZero(1, 4)).png),
                null !== e.seekWidgetByName(s + (r + a)) && e.seekWidgetByName(s + (r + a)).addChild(c)
            }, this),
            i.assists.length)
        },
        _getAssistAbilityIconImg: function() {
            return t.Img("coreimg", "assisticon", n.padZero(1, 4)).png
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.status = t.pc.status || {},
    t.pc.status.roles = t.pc.status.roles || {},
    t.pc.status.roles.WeaponSkillCommon = {
        _appendWeaponSkill: function(e, i, a, s, o) {
            var r = 0;
            return n.isUndefined(i.skills) ? r : (n.isUndefined(o) && (o = res["core-statuslist-statuslist_weapon-skill_ui"]),
            n.isUndefined(s) && (s = "statuslist_ui_"),
            n.isUndefined(a) && (a = 0),
            n.each(i.skills, function(i, r) {
                var c = ccs.load($dynamicRes(o)).node;
                if (c.setStrings({
                    skill_name: i.name,
                    skill_description: i.description
                }),
                i.level > 0) {
                    var u = c.seekWidgetByName("level_no_label");
                    null !== u && (u.setString("スキルLv" + i.level),
                    u.setVisible(!0))
                }
                var _ = c.seekWidgetByName("coreimg_weapon-skillicon");
                null !== _ && _.loadTexture(t.Img("coreimg", "weapon-skillicon", n.padZero(i.type, 4)).png),
                null !== e.seekWidgetByName(s + (r + a)) && (e.seekWidgetByName(s + (r + a)).addChild(c),
                e.seekWidgetByName(s + (r + a)).setVisible(!0))
            }, this),
            r = i.skills.length)
        },
        _setWeaponSkillBase: function(e, t) {
            n.isUndefined(t.skills) || null !== e.seekWidgetByName("skill_base_0") && n.each(t.skills, function(t, i) {
                var a = e.seekWidgetByName("skill_base_" + i);
                if (null !== a && null !== a.seekWidgetByName("skill_name_label")) {
                    var s = t.name + (n.isUndefined(t.level) ? "" : "　LV" + t.level);
                    a.setStrings({
                        skill_name_label: s
                    }),
                    a.setVisible(!0)
                }
            }, this)
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc.scene = t.pc.scene || {},
    t.pc.scene.roles = t.pc.scene.roles || {},
    $staticRes(res["party-jobget_ani-jobget_ani"]),
    t.pc.scene.roles.SceneJobCommon = {
        _popups: {
            popupComIllustUp: {
                factoryName: "popupFactoryIllustUp",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupConfirmLvUpBonus: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-p_level_bonus",
                title: "習得可能ボーナス一覧",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupAbilityNone: {
                factoryName: "popupFactoryBlue",
                title: "EXアビリティ設定",
                content: "設定できるEXアビリティがありません。",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupNeedJobPoint: {
                factoryName: "popupFactoryPopupCommon",
                title: "取得条件",
                resourceName: "core-popup-p_need_point",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupConfirmGetJob: {
                factoryName: "popupFactoryPopupCommon",
                title: "英霊解放確認",
                resourceName: "core-popup-p_job_get",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "解放する"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss(),
                        e._delegate._releaseJob.call(e._delegate)
                    }
                }
            },
            popupSubTutorial: {
                factoryName: "popupFactorySubTutorial",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        jobReleaseAnimationInfo: {
            animation: null ,
            zOrder: 100,
            resource: "party-jobget_ani-jobget_ani"
        },
        _loadJob: function(e, n) {
            var s = null ;
            return s = i.isUndefined(n) ? t.createInstance("apiAJobs").get(e) : t.createInstance("apiAParties").getJobsByParty(n, e),
            a.all(s).then(function(e) {
                return console.log(e.body),
                this._job = e.body,
                this._loadCompleteJob = !0,
                i.isUndefined(n) ? this._fillupJobStatus("introduce_job_status_0_ui") : this._fillupJobStatus(),
                e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            s
        },
        _fillupJobStatus: function(e) {
            return i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1 ? void console.debug("You should call _loadJob method first.") : (this._setStatusBonusRecord(e),
            void this._setStatusBurstAbilityAssist())
        },
        _setStatusBonusRecord: function(e) {
            i.isUndefined(e) && (e = "introduce_job_status_1_ui");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName(e);
            return null === a ? void console.debug("Could not find " + e + ".") : (this._setIntroduceJobImage(this._job),
            this._setMasterIcon4Title(a, this._job),
            this._setMasterIcon4Exp(a, this._job),
            this._setJobStatustypeIcon(a, this._job),
            this._setWeaponsIcon(a, this._job),
            this._setExpGauge(a, this._job),
            this._setCardStrings(a, this._job),
            this._fillupJobLvupBonus(a, this._job),
            this._fillupJobMasterBonus(a, this._job),
            void this._fillupJobExBonus(a, this._job))
        },
        _setMasterIcon4Title: function(e, t) {
            if (i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1)
                return void console.debug("You should call _loadJob method first.");
            if (!i.isUndefined(t.level) && !i.isUndefined(t.max_level) && t.level === t.max_level) {
                var n = e.seekWidgetByName("master_icon");
                null !== n && n.setVisible(!0)
            }
        },
        _setMasterIcon4Exp: function(e, t) {
            if (i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1)
                return void console.debug("You should call _loadJob method first.");
            if (!i.isUndefined(t.exp) && !i.isUndefined(t.next_exp) && t.exp === t.next_exp) {
                var n = e.seekWidgetByName("job_master_icon");
                null !== n && n.setVisible(!0);
                var a = e.seekWidgetByName("exp_next_label");
                null !== a && a.setVisible(!1)
            }
        },
        _fillupJobLvupBonus: function(e, n) {
            return i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1 ? void console.debug("You should call _loadJob method first.") : void (i.isUndefined(n.bonus) || i.isUndefined(n.bonus.level_up_bonus) || i.each(n.bonus.level_up_bonus, function(n, a) {
                var s = e.seekWidgetByName("job-bonusicon_lv-up_" + a);
                if (null !== s) {
                    var o = s.seekWidgetByName("lv-up_bonus_label");
                    null !== o && (s.seekWidgetByName("lv-up_bonus_label").setString(n.description),
                    s.loadTexture(t.Img("coreimg", "job-bonusicon", i.padZero(n.type, 4)).png),
                    s.setVisible(!0))
                }
            }))
        },
        _fillupJobMasterBonus: function(e, n) {
            return i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1 ? void console.debug("You should call _loadJob method first.") : void (i.isUndefined(n.bonus) || i.isUndefined(n.bonus.max_level_bonus) || i.each(n.bonus.max_level_bonus, function(n, a) {
                var s = e.seekWidgetByName("job-bonusicon_master_" + a);
                if (null !== s) {
                    var o = s.seekWidgetByName("master_bonus_label");
                    null !== o && (s.seekWidgetByName("master_bonus_label").setString(n.description),
                    s.loadTexture(t.Img("coreimg", "job-bonusicon", i.padZero(n.type, 4)).png),
                    s.setVisible(!0))
                }
            }))
        },
        _fillupJobExBonus: function(e, n) {
            return i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1 ? void console.debug("You should call _loadJob method first.") : void (null !== e.seekWidgetByName("bonus-textimg_job") && (i.isUndefined(n) || i.isUndefined(n.job_id) || i.isFunction(e.seekWidgetByName("bonus-textimg_job").loadTexture) !== !1 && e.loadTextures({
                "bonus-textimg_job": t.Img("bonus-textimg", "job", i.padZero(n.job_id, 4)).png
            })))
        },
        _setStatusBurstAbilityAssist: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("introduce_statuslist_list_7_ui")
              , i = 0;
            i += this._appendBurst(t, this._job),
            i += this._appendAbility(t, this._job, i),
            i += this._appendExAbility(t, this._job, i),
            i += this._appendAssist(t, this._job, i)
        },
        _setUpControls: function() {
            if (i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1)
                return void console.debug("You should call _loadJob method first.");
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_enh");
            null !== t && this._job.level >= this._job.max_level && this._job.bonus >= 99 && this._setEnableButton(t, !1);
            var a = e.seekWidgetByName("btn_evo");
            null !== a && this._job.overlimit_count >= this._job.max_overlimit_count && this._setEnableButton(a, !1)
        },
        _showImageZoomPopup: function() {
            return i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1 ? void console.debug("You should call _loadJob method first.") : void this._openAllOverPanel(this._job.job_id, this._job.skin, "job")
        },
        _showSetupExtraAbility: function() {
            if (i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1)
                return void console.debug("You should call _loadJob method first.");
            var e = n.director.getRunningScene()
              , a = e.popups.popupAbilityNone;
            return i.isUndefined(a) ? void console.debug("Could not find popup: popupAbilityNone.") : i.isUndefined(this._job.can_set_ex_ability) ? void console.debug("Could not find job param: can_set_ex_ability.") : void (this._job.can_set_ex_ability ? t.createInstance("router").navigate("party/par_005") : a.open())
        },
        _showPopupBonus: function() {
            if (i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1)
                return void console.error("You should call _loadJob method first.");
            var e = n.director.getRunningScene()
              , a = e.popups.popupConfirmLvUpBonus;
            return i.isUndefined(a) ? void console.error("Could not find popup: popupConfirmLvUpBonus.") : void a.open().then(function() {
                a.loadTextures({
                    "bonus-textimg_job": t.Img("bonus-textimg", "job", i.padZero(this._job.job_id, 4)).png
                })
            }
            .bind(this))
        },
        _showPopupConfirmGetJobWithNeedItem: function(e) {
            var a = e.have_num
              , s = e.num
              , o = e.name
              , r = n.director.getRunningScene()
              , c = r.popups.popupConfirmGetJob
              , u = a - s;
            c._getConfirmLabel = function() {
                return this.seekWidgetByName("confirm_label")
            }
            ,
            c.replaceConfirmLabel = function(e) {
                var t = this._getConfirmLabel();
                if (null !== t) {
                    var n = t.getString().replace("英霊P", e);
                    t.setString(n)
                }
            }
            ,
            c.open().then(function() {
                c.replaceConfirmLabel(o),
                c.loadTextures({
                    get_job_img: t.Img("joblist", "job", i.padZero(this._job.job_id, 4), 0).png
                }),
                c.setHtmlStrings({
                    job_point_fall_labelimg: e.name + ":" + a + "→<span class='red'>" + u + "</span>"
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this))
        },
        _showPJobGetOrPNeedPoint: function() {
            if (this._player.job_point < this._job.release_need_job_point)
                this._popupNeedJobPoint();
            else {
                var e = n.director.getRunningScene()
                  , a = e.popups.popupConfirmGetJob
                  , s = this._player.job_point - this._job.release_need_job_point;
                a.open().then(function() {
                    a.loadTextures({
                        get_job_img: t.Img("joblist", "job", i.padZero(this._job.job_id, 4), 0).png
                    }),
                    a.setHtmlStrings({
                        job_point_fall_labelimg: "英霊P:" + this._player.job_point + "→<span class='red'>" + s + "</span>"
                    }, t.GameConfig.POPUP_CSS)
                }
                .bind(this))
            }
        },
        _popupNeedJobPoint: function() {
            var e = n.director.getRunningScene()
              , a = e.popups.popupNeedJobPoint;
            a.open().then(function() {
                this._job.need_jobs.forEach(function(e, n) {
                    var s = a.seekWidgetByName("job_clippanel_" + n);
                    s.seekWidgetByName("need_job").loadTexture(t.Img("joblist", "job", i.padZero(e.job_id, 4), 0).png);
                    var o = a.seekWidgetByName("condition_base_" + n)
                      , r = e.is_acquired ? e.level === e.max_level ? "MASTER" : "Lv:" + e.level + "/" + e.max_level : "未取得";
                    o.seekWidgetByName("condition_label").setString(r)
                }, this),
                a.setHtmlStrings({
                    condition_notice_labelimg: "<span class='orange'>必要英霊P：</span><span class='white'>" + this._job.release_need_job_point + "英霊P</span><br /><span class='red'>英霊をマスターする必要があります</span>"
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _releaseJob: function() {
            t.createInstance("apiAJobs").release(this._job.job_id).then(function(e) {
                console.log(e),
                this._playReleaseAnimation()
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _playReleaseAnimation: function() {
            var a = new n.Node;
            a.setName("aniRoot");
            var s = n.director.getRunningScene();
            s.addChild(a),
            t.createInstance("soundPlayer").init(t.createInstance("playerGameConfig")),
            this.jobReleaseAnimationInfo.animation = t.createInstance("WindowVisualEffect").init(e.res[this.jobReleaseAnimationInfo.resource]);
            var o = this.jobReleaseAnimationInfo.animation;
            t.createInstance("Sound2Event", [o]),
            o.setAnimationNameEndCallback("release_ani", function() {
                o.playByName("touch_ani", a, n.p(0, 0), this.jobReleaseAnimationInfo.zOrder, !0),
                o.removeAnimationEndCallback(),
                a.seekWidgetByName("touch_btn").setVisible(!0),
                t.setTouchEventHandlers(a, {
                    "TOUCH_ENDED touch_btn": function() {
                        var e = {
                            par_006_007: {
                                released_job: this._job
                            }
                        }
                          , n = {
                            par_006_007: {
                                id: s.routerParams.par_006_007.id
                            }
                        };
                        t.createInstance("router").navigate("party/par_007", n, e)
                    }
                }, this)
            }, this),
            o.playByName("release_ani", a, n.p(0, 0), this.jobReleaseAnimationInfo.zOrder, !1);
            var r = s.seekWidgetByName("job_panel_01")
              , c = s.seekWidgetByName("job_panel_02");
            r.loadTextures({
                "jobget-sp_job": t.Img("jobget-sp", "job", i.padZero(this._job.job_id, 4)).png
            }),
            c.loadTextures({
                "jobget-sp_job": t.Img("jobget-sp", "job", i.padZero(this._job.job_id, 4)).png
            })
        },
        _playLoopAnimation: function(e, t, n, a, s) {
            var o = null ;
            if (i.isObject(e))
                var o = e;
            else
                var o = ccs.load($dynamicRes(e));
            o.node.runAction(o.action),
            t.addChild(o.node);
            var r = null ;
            if (a)
                var r = this._setEndAnimationEvent(o.action, n.end);
            return "object" == typeof n ? o.action.gotoFrameAndPlay(n.start, n.end, s) : "number" == typeof n && o.action.gotoFrameAndPlay(n, s),
            r
        }
    },
    i.assign(t.pc.scene.roles.SceneJobCommon, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.status.roles.BurstCommon, t.pc.status.roles.AbilityCommon, t.pc.status.roles.AssistCommon, t.pc.roles.AnimationCommon, t.pc.roles.AllOverUI)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc.scene = t.pc.scene || {},
    t.pc.scene.roles = t.pc.scene.roles || {},
    t.pc.scene.roles.SceneCharacterCommon = {
        _popups: {
            popupComIllustUp: {
                factoryName: "popupFactoryIllustUp",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupSceneCheck: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-ga_scene_check",
                title: "エピソード紹介",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        charaVoiceUrls: [],
        _loadACharacter: function(e) {
            var n = t.createInstance("apiACharacters").get(e).then(function(e) {
                return console.log(e.body),
                this._character = e.body,
                this._loadCompleteACharacter = !0,
                this._setUpControls(),
                this._fillupACharacterStatus().thenResolve(e.body)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        _loadCharacter: function(e) {
            var n = t.createInstance("apiCharacters").get(e).then(function(e) {
                return console.log(e.body),
                this._character = e.body,
                this._loadCompleteACharacter = !0,
                this.__loadCharacterVoices(),
                this._fillupACharacterStatus("introduce_chara_status_0_ui").thenResolve(e.body)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        __loadCharacterVoices: function(e) {
            var n = t.createInstance("voiceLoader")
              , i = t.IDList.VOICES.NOTE;
            n.loadCharacterVoices(this._character.character_id, i.LOWER, i.UPPER).then(function(e) {
                this.charaVoiceUrls = e
            }
            .bind(this))
        },
        _fillupACharacterStatus: function(e) {
            return i.isUndefined(this._loadCompleteACharacter) || this._loadCompleteACharacter === !1 ? void console.error("You should call _loadACharacter method first.") : (this._setStatusBonusRecord(e),
            this._setStatusBurstAbilityAssist(),
            this._loadedAvatar && (this._unloadAvatar(this._loadedAvatar),
            this._loadedAvatar = null ),
            this._loadAvatar().then(function(e) {
                this._loadedAvatar = e
            }
            .bind(this)))
        },
        _setStatusBonusRecord: function(e) {
            i.isUndefined(e) && (e = "introduce_chara_status_1_ui");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName(e);
            return null === a ? void console.debug("Could not find " + e + ".") : (this._setIntroduceCharaImage(this._character),
            this._setRarityIcon(a, this._character),
            this._setRarityBar(a, this._character),
            this._setElementIcon(a, this._character),
            this._setStatustypeIcon(a, this._character),
            this._setExpGauge(a, this._character),
            this._setCardStrings(a, this._character),
            void this._setStarGauge(a, this._character))
        },
        _setStatusBurstAbilityAssist: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("introduce_statuslist_list_7_ui");
            this._clearAbilityList();
            var i = 0;
            i += this._appendBurst(t, this._character),
            i += this._appendAbility(t, this._character, i),
            i += this._appendAssist(t, this._character, i)
        },
        _setUpControls: function() {
            if (i.isUndefined(this._loadCompleteACharacter) || this._loadCompleteACharacter === !1)
                return void console.error("You should call _loadACharacter method first.");
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_enh");
            null !== t && this._character.level >= this._character.max_level && this._character.bonus >= 99 && this._setEnableButton(t, !1),
            this._character.can_arouse ? (this.__setAppearanceEvoArousalUICanArouse(e),
            this.__setEnableArouseButton(e, !0)) : this._character.overlimit_count < this._character.max_overlimit_count ? (this.__setAppearanceEvoArousalUICanEvolve(e),
            this.__setEnableEvolveButton(e, !0)) : (this.__setAppearanceEvoArousalUICanEvolve(e),
            this.__setEnableEvolveButton(e, !1))
        },
        __setEnableArouseButton: function(e, t) {
            var n = e.seekWidgetByName("btn_arousal");
            n && this._setEnableButton(n, t)
        },
        __setEnableEvolveButton: function(e, t) {
            var n = e.seekWidgetByName("btn_evo");
            n && this._setEnableButton(n, t)
        },
        __setAppearanceEvoArousalUICanArouse: function(e) {
            var t = this.__getEvoArousalUINode(e);
            t && t.setAppearance("arousal")
        },
        __setAppearanceEvoArousalUICanEvolve: function(e) {
            var t = this.__getEvoArousalUINode(e);
            t && t.setAppearance("evo")
        },
        __getEvoArousalUINode: function(e) {
            return e.seekWidgetByName("introduce_btn_evolution_arousal_ui")
        },
        _touchEnhButton: function() {
            t.createInstance("router").navigate("enh_evo/enh_008", {
                enh_008: {
                    id: this._character.a_character_id
                }
            })
        },
        _touchEvoButton: function() {
            t.createInstance("router").navigate("enh_evo/evo_013", {
                evo_013: {
                    id: this._character.a_character_id
                }
            })
        },
        _touchArouseButton: function() {
            t.createInstance("router").navigate("enh_evo/arousal_002", {}, {
                arousal_002: {
                    id: this._character.a_character_id
                }
            })
        },
        _showImageZoomPopup: function() {
            return i.isUndefined(this._loadCompleteACharacter) || this._loadCompleteACharacter === !1 ? void console.error("You should call _loadACharacter method first.") : null == this._character.character_id && null != this._character.other_character_id ? void this._openAllOverPanel(this._character.other_character_id, this._character.skin, "npc") : void this._openAllOverPanel(this._character.character_id, this._character.skin, "chara")
        },
        _touchPlayVoiceButton: function() {
            if (!(this.charaVoiceUrls.length < 1 || this._voiceCooldown)) {
                this._cooldownVoice();
                var e = i.shuffle(this.charaVoiceUrls)
                  , n = e[0];
                t.createInstance("soundPlayer").playVoice(n)
            }
        },
        _cooldownVoice: function() {
            this._voiceCooldown = !0,
            a.delay(1e3).then(function() {
                this._voiceCooldown = !1
            }
            .bind(this))
        },
        _loadAvatar: function() {
            var e = n.director.getRunningScene()
              , i = e.seekWidgetByName("avatar_position_node");
            return null == i ? a.resolve() : t.createInstance("BasicAvatarSceneObject").init(this._character.character_id, !1, this._character.skin).then(function(e) {
                var t = e.getAvatar();
                return t.appendTo(i),
                t.playStandByAnimation(),
                t
            })
        },
        _unloadAvatar: function(e) {
            e && e.cleanup()
        },
        _showPopupEpisode: function() {
            if (i.isUndefined(this._loadCompleteACharacter) || this._loadCompleteACharacter === !1)
                return void console.error("You should call _loadACharacter method first.");
            var e = n.director.getRunningScene();
            return i.isUndefined(this._character) || i.isUndefined(this._character.character_id) ? void console.debug("[ERROR] Could not find this._character | .character_id") : void t.createInstance("apiGacha").getHaremEpisodeCharacter(this._character.character_id).then(function(n) {
                var a = e.popups.popupSceneCheck
                  , s = n.body;
                return i.isUndefined(a) ? void console.debug("[ERROR] Could not load popupSceneCheck.") : void a.open().then(function() {
                    a.setTitle(s.title),
                    a.loadTextures({
                        scene_img: t.Img("scene-check", "chara", i.padZero(s.character_id, 4)).png
                    }),
                    a.setStrings({
                        synopsis_label: s.description
                    })
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _clearAbilityList: function() {
            var e = n.director.getRunningScene();
            i(i.range(0, 7)).map(function(t) {
                return e.seekWidgetByName("statuslist_ui_" + t)
            }).filter(function(e) {
                return e
            }).invoke("removeAllChildren").value()
        }
    },
    i.assign(t.pc.scene.roles.SceneCharacterCommon, t.pc.roles.UIUtility, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.status.roles.BurstCommon, t.pc.status.roles.AbilityCommon, t.pc.status.roles.AssistCommon, t.pc.roles.AllOverUI)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc.scene = t.pc.scene || {},
    t.pc.scene.roles = t.pc.scene.roles || {},
    t.pc.scene.roles.SceneWeaponCommon = {
        _popups: {
            popupComIllustUp: {
                factoryName: "popupFactoryIllustUp",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupProtect: {
                factoryName: "popupFactoryBlue",
                buttonLabels: {
                    blueBtn: "OK"
                },
                title: "保護設定",
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function() {
                        this.dissmiss()
                    }
                }
            }
        },
        _loadAWeapon: function(e) {
            var n = a.all([t.createInstance("apiAWeapons").get(e), t.createInstance("apiAWeapons").getEnhanceEvolveInfo(e)]).spread(function(e, t) {
                return console.log(e.body, t.body),
                this._weapon = e.body,
                this._loadCompleteWeapons = !0,
                this._fillupAWeaponStatus(),
                this._protectFlag = this._weapon.is_locked,
                this._setLockStatus(this._weapon.is_locked),
                this._enhanceableFlag = t.body.enhanceable,
                this._evolvableFlag = t.body.evolvable,
                this._setControls(),
                e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        _loadWeapon: function(e, i) {
            var a = t.createInstance("apiWeapons").get(e).then(function(e) {
                console.log(e.body),
                this._weapon = e.body,
                this._loadCompleteWeapons = !0;
                var t = n.director.getRunningScene();
                null === t.seekWidgetByName("introduce_weapon_status_0_ui") ? this._fillupAWeaponStatus("introduce_weapon_status_2_ui") : this._fillupAWeaponStatus("introduce_weapon_status_0_ui");
                var a = t.seekWidgetByName("plus_no");
                if (null !== a) {
                    var s = i > 0 ? "+" + i : "";
                    a.setString(s)
                }
                return e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return a
        },
        _fillupAWeaponStatus: function(e) {
            return i.isUndefined(this._loadCompleteWeapons) || this._loadCompleteWeapons === !1 ? void console.error("You should call _loadAWeapon | _loadWeapon method first.") : (this._setStatusRecord(e),
            void this._setStatusBurstSkill(e))
        },
        _setStatusRecord: function(e) {
            i.isUndefined(e) && (e = "introduce_weapon_status_1_ui");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName(e);
            return null === a ? void console.debug("Could not find " + e + ".") : (this._setIntroduceWeaponImage(this._weapon),
            this._setRarityIcon(a, this._weapon),
            this._setRarityBar(a, this._weapon),
            this._setElementIcon(a, this._weapon),
            this._setWeaponIcon(a, this._weapon),
            this._setStatustypeIcon(a, this._weapon),
            this._setExpGauge(a, this._weapon),
            this._setCardStrings(a, this._weapon),
            void this._setStarGauge(a, this._weapon))
        },
        _setStatusBurstSkill: function(e) {
            i.isUndefined(e) && (e = "introduce_weapon_status_1_ui");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName(e);
            if (null === a)
                return void console.debug("Could not find " + e + ".");
            var s = 0;
            s += this._appendBurst(a, this._weapon),
            s += this._appendWeaponSkill(a, this._weapon, s)
        },
        _setControls: function() {
            if (i.isUndefined(this._loadCompleteWeapons) || this._loadCompleteWeapons === !1)
                return void console.error("You should call _loadAWeapon method first.");
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_enh");
            null !== t && (this._enhanceableFlag || this._setEnableButton(t, !1));
            var a = e.seekWidgetByName("btn_evo");
            null !== a && (this._evolvableFlag || this._setEnableButton(a, !1));
            var s = e.seekWidgetByName("btn_sell_select");
            null !== s && (this._weapon.is_equipped || this._weapon.is_locked) && this._setEnableButton(s, !1)
        },
        _setLockStatus: function(e) {
            if (i.isUndefined(this._loadCompleteWeapons) || this._loadCompleteWeapons === !1)
                return void console.error("You should call _loadAWeapon method first.");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName("btn_protect")
              , s = t.seekWidgetByName("protected_icon");
            if (null !== a && null !== s) {
                a.setTitleText(e ? "保護解除" : "保護する"),
                s.setVisible(e);
                var o = t.seekWidgetByName("btn_sell_select");
                null !== o && (this._weapon.is_equipped === !0 ? this._setEnableButton(o, !1) : this._setEnableButton(o, !e))
            }
        },
        _touchProtect: function() {
            if (i.isUndefined(this._protectFlag))
                return void console.error("You should call _loadAWeapon method first.");
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_protect")
              , a = e.seekWidgetByName("protected_icon");
            return null === t || null === a ? void console.error("Could not find protected control: btn_protect | protected_icon.") : this._protectFlag ? this._unlockWeapon(e) : this._lockWeapon(e)
        },
        _lockWeapon: function(e) {
            var n = t.createInstance("apiAWeapons").lock(this._weapon.a_weapon_id).then(function(t) {
                this._weapon = t.body;
                var n = e.popups.popupProtect;
                return n.setContent("<p>" + this._weapon.name + (this._weapon.bonus < 1 ? " " : "+" + this._weapon.bonus) + "<br />保護しました。</p><p>保護を解除するまで<br />売却や強化素材にすることができません。</p>"),
                n.open(),
                this._protectFlag = !this._protectFlag,
                this._setLockStatus(this._weapon.is_locked),
                this._weapon
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        _unlockWeapon: function(e) {
            var n = t.createInstance("apiAWeapons").unlock(this._weapon.a_weapon_id).then(function(t) {
                this._weapon = t.body;
                var n = e.popups.popupProtect;
                return n.setContent("<p>" + this._weapon.name + (this._weapon.bonus < 1 ? " " : "+" + this._weapon.bonus) + "<br />保護解除しました。</p><p>売却や強化素材にすることができます。</p>"),
                n.open(),
                this._protectFlag = !this._protectFlag,
                this._setLockStatus(this._weapon.is_locked),
                this._weapon
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        _touchEnhButton: function() {
            t.createInstance("router").navigate("enh_evo/enh_007", {
                enh_007: {
                    id: this._weapon.a_weapon_id
                }
            })
        },
        _touchEvoButton: function() {
            t.createInstance("router").navigate("enh_evo/evo_007", {
                evo_007: {
                    id: this._weapon.a_weapon_id
                }
            })
        },
        _showImageZoomPopup: function() {
            return i.isUndefined(this._loadCompleteWeapons) || this._loadCompleteWeapons === !1 ? void console.error("You should call _loadAWeapon method first.") : void this._openAllOverPanel(this._weapon.weapon_id, this._weapon.skin, "weapon")
        }
    },
    i.assign(t.pc.scene.roles.SceneWeaponCommon, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.status.roles.BurstCommon, t.pc.status.roles.WeaponSkillCommon, t.pc.roles.AllOverUI)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.scene = t.pc.scene || {},
    t.pc.scene.roles = t.pc.scene.roles || {},
    t.pc.scene.roles.SceneSummonCommon = {
        _popups: {
            popupComIllustUp: {
                factoryName: "popupFactoryIllustUp",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupProtect: {
                factoryName: "popupFactoryBlue",
                title: "保護設定",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function() {
                        this.dissmiss()
                    }
                }
            },
            popupSceneCheck: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-ga_scene_check",
                title: "エピソード紹介",
                buttonLabels: {
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        _loadASummon: function(e) {
            var n = t.createInstance("apiASummons").get(e).then(function(e) {
                return console.log(e.body),
                this._summon = e.body,
                this._loadCompleteSummon = !0,
                this._fillupASummonStatus(),
                t.createInstance("apiSummons").get(this._summon.summon_id).then(function(e) {
                    e.body.can_sell === !1 ? this._disableProtectButton() : (this._protectFlag = this._summon.is_locked,
                    this._setLockStatus(this._summon.is_locked))
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                }),
                this._setControls(),
                e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        _loadSummon: function(e, i) {
            var a = t.createInstance("apiSummons").get(e).then(function(e) {
                console.log(e.body),
                this._summon = e.body,
                this._loadCompleteSummon = !0;
                var t = n.director.getRunningScene();
                null === t.seekWidgetByName("introduce_summon_status_0_ui") ? this._fillupASummonStatus("introduce_summon_status_2_ui") : this._fillupASummonStatus("introduce_summon_status_0_ui");
                var a = t.seekWidgetByName("plus_no");
                if (null !== a) {
                    var s = i > 0 ? "+" + i : "";
                    a.setString(s)
                }
                return e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return a
        },
        _fillupASummonStatus: function(e) {
            return i.isUndefined(this._loadCompleteSummon) || this._loadCompleteSummon === !1 ? void console.debug("You should call _loadASummon | _loadSummon method first.") : (this._setStatusRecord(e),
            void this._setAttackEffect(e))
        },
        _setStatusRecord: function(e) {
            i.isUndefined(e) && (e = "introduce_summon_status_1_ui");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName(e);
            return null === a ? void console.debug("Could not find " + e + ".") : (this._setIntroduceSummonImage(this._summon),
            this._setRarityIcon(a, this._summon),
            this._setRarityBar(a, this._summon),
            this._setElementIcon(a, this._summon),
            this._setStatustypeIcon(a, this._summon),
            this._setExpGauge(a, this._summon),
            this._setCardStrings(a, this._summon),
            void this._setStarGauge(a, this._summon))
        },
        _setAttackEffect: function(e) {
            i.isUndefined(e) && (e = "introduce_summon_status_1_ui");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName(e);
            return null === a ? void console.debug("Could not find " + e + ".") : void this._setSummonAttackEffectStrings(a, this._summon)
        },
        _setControls: function() {
            if (i.isUndefined(this._loadCompleteSummon) || this._loadCompleteSummon === !1)
                return void console.error("You should call _loadASummon method first.");
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_enh");
            null !== t && this._summon.level >= this._summon.max_level && this._summon.bonus >= 99 && this._setEnableButton(t, !1);
            var a = e.seekWidgetByName("btn_evo");
            null !== a && this._summon.overlimit_count >= this._summon.max_overlimit_count && this._setEnableButton(a, !1);
            var s = e.seekWidgetByName("btn_sell_select");
            null !== s && (this._summon.is_equipped || this._summon.is_locked) && this._setEnableButton(s, !1)
        },
        _disableProtectButton: function() {
            if (i.isUndefined(this._loadCompleteSummon) || this._loadCompleteSummon === !1)
                return void console.error("You should call _loadASummon method first.");
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_protect")
              , a = e.seekWidgetByName("protected_icon");
            if (null !== t && null !== a) {
                t.setTitleText("保護解除"),
                a.setVisible(!0),
                this._setEnableButton(t, !1);
                var s = e.seekWidgetByName("btn_sell_select");
                null !== s && this._setEnableButton(s, !1)
            }
        },
        _setLockStatus: function(e) {
            if (i.isUndefined(this._loadCompleteSummon) || this._loadCompleteSummon === !1)
                return void console.error("You should call _loadASummon method first.");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName("btn_protect")
              , s = t.seekWidgetByName("protected_icon");
            if (null !== a && null !== s) {
                a.setTitleText(e ? "保護解除" : "保護する"),
                s.setVisible(e);
                var o = t.seekWidgetByName("btn_sell_select");
                null !== o && (this._summon.is_equipped === !0 ? this._setEnableButton(o, !1) : this._setEnableButton(o, !e))
            }
        },
        _touchProtect: function() {
            if (i.isUndefined(this._protectFlag))
                return void console.error("You should call _loadASummon method first.");
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_protect")
              , a = e.seekWidgetByName("protected_icon");
            return null === t || null === a ? void console.error("Could not find protected control: btn_protect | protected_icon.") : this._protectFlag ? this._unlockSummon(e) : this._lockSummon(e)
        },
        _lockSummon: function(e) {
            var n = t.createInstance("apiASummons").lock(this._summon.a_summon_id).then(function(t) {
                this._summon = t.body;
                var n = e.popups.popupProtect;
                return n.setContent("<p>" + this._summon.name + (this._summon.bonus < 1 ? " " : "+" + this._summon.bonus) + "<br />保護しました。</p><p>保護を解除するまで<br />売却や強化素材にすることができません。</p>"),
                n.open(),
                this._protectFlag = !this._protectFlag,
                this._setLockStatus(this._summon.is_locked),
                this._summon
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        _unlockSummon: function(e) {
            var n = t.createInstance("apiASummons").unlock(this._summon.a_summon_id).then(function(t) {
                this._summon = t.body;
                var n = e.popups.popupProtect;
                return n.setContent("<p>" + this._summon.name + (this._summon.bonus < 1 ? " " : "+" + this._summon.bonus) + "<br />保護解除しました。</p><p>売却や強化素材にすることができます。</p>"),
                n.open(),
                this._protectFlag = !this._protectFlag,
                this._setLockStatus(this._summon.is_locked),
                this._summon
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        _touchEnhButton: function() {
            t.createInstance("router").navigate("enh_evo/enh_009", {
                enh_009: {
                    id: this._summon.a_summon_id
                }
            })
        },
        _touchEvoButton: function() {
            t.createInstance("router").navigate("enh_evo/evo_010", {
                evo_010: {
                    id: this._summon.a_summon_id
                }
            })
        },
        _showImageZoomPopup: function() {
            return i.isUndefined(this._loadCompleteSummon) || this._loadCompleteSummon === !1 ? void console.error("You should call _loadASummon method first.") : void this._openAllOverPanel(this._summon.summon_id, this._summon.skin, "summon")
        },
        _showPopupEpisode: function() {
            if (i.isUndefined(this._loadCompleteSummon) || this._loadCompleteSummon === !1)
                return void console.error("You should call _loadASummon method first.");
            var e = n.director.getRunningScene();
            return i.isUndefined(this._summon) || i.isUndefined(this._summon.summon_id) ? void console.debug("[ERROR] Could not find this._summon | .summon_id") : void t.createInstance("apiGacha").getHaremEpisodeSummon(this._summon.summon_id).then(function(n) {
                var a = e.popups.popupSceneCheck
                  , s = n.body;
                return i.isUndefined(a) ? void console.debug("[ERROR] Could not load popupSceneCheck.") : void a.open().then(function() {
                    a.setTitle(s.title),
                    a.loadTextures({
                        scene_img: t.Img("scene-check", "summon", i.padZero(s.summon_id, 4)).png
                    }),
                    a.setStrings({
                        synopsis_label: s.description
                    })
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    },
    i.assign(t.pc.scene.roles.SceneSummonCommon, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.roles.AllOverUI)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = (e.ccs,
    e._)
      , a = e.console;
    t.ListBtnsController = n.Class.extend({
        className: "KHListBtnsController",
        init: function(e, s, o) {
            return i.isUndefined(e.baseName) ? void a.error("listInfo.baseName is undefined. KHListBtnsController initialize error.") : null == n.director.getRunningScene().seekWidgetByPath(e.baseName) ? (a.warn("KHListBtnsController.init: base node not found on scene, caller scene is possibly been discarded already."),
            Q.resolve({
                pageCount: 0,
                maxRecord: 0
            })) : (this._baseName = e.baseName,
            i.isUndefined(e.panelName) && a.log("listInfo.panelName is undefined. Selected resource corecard_blank_4_3_ui."),
            this._panelName = e.panelName || "corecard_blank_4_3_ui",
            "corecard_blank_5_3_ui_90" === this._panelName && (this._coreCardScale = t.GameConfig.CORECARD_LIST_SCALE["5x3"]),
            "corecard_blank_6_3_ui" === this._panelName && (this._coreCardScale = t.GameConfig.CORECARD_LIST_SCALE["6x3"]),
            "corecard_blank_5_4_ui" === this._panelName && (this._coreCardScale = t.GameConfig.CORECARD_LIST_SCALE["5x4"]),
            i.isUndefined(e.panelsPerPage) && a.log("listInfo.panelsPerPage is undefined. Selected default number => 12."),
            this._panelsPerpage = e.panelsPerPage || 12,
            i.isUndefined(e.apiName) ? void a.error("listInfo.apiName is undefined. KHListBtnsController initialize error.") : (this._apiName = e.apiName,
            i.isUndefined(e.apiMethod) ? void a.error("listInfo.apiMethod is undefined. KHListBtnsController initialize error.") : (this._apiMethod = e.apiMethod,
            this._apiParams = e.apiParams || [],
            i.isUndefined(e.cardType) ? void a.error("listInfo.cardType is undefined. KHListBtnsController initialize error. You should choose chara | summon | weapon") : (this._cardType = e.cardType,
            i.isUndefined(o) || (this._coreCardInitExtension = o),
            i.isUndefined(e.cardFrame) && a.log("listInfo.cardFrame is undefined. Selected 'plane' as default frame name."),
            this._cardFrame = e.cardFrame || "plane",
            this._sortEvent = e.sortEvent,
            i.isUndefined(e.sortCondition) || (this._sortCondition = e.sortCondition),
            this._onTouchImageCallback = s,
            this._fillupListView()))))
        },
        _clearList: function(e) {
            this._listManager.clear(e),
            t.createInstance("notificationCenter").removeEventListenersByEventName(this._sortEvent)
        },
        _fillupListView: function() {
            var e = n.director.getRunningScene()
              , s = null ;
            if (s = e.seekWidgetByPath(this._baseName),
            null === s)
                return void a.debug("[ERROR] Could not find the base node.");
            var o = s.seekWidgetByName(this._panelName);
            if (null === o)
                return void a.debug("[ERROR] Could not find the node. " + this._panelName);
            o.setVisible(!0);
            var r = new t.ListManager(o.getChildren(),null ,this._recordWidgetInitFunc[this._cardType].bind(this));
            this._listManager = r,
            this._pagerButtons = new t.PagerButtons;
            var c = s.seekWidgetByName("viewpage");
            if (null === c && (c = s.seekWidgetByName("viewpage_ui")),
            null === c)
                return void a.debug("[NOTICE] Could not find viewpage controller.");
            if (this._pagerButtons.init(c, r, function(e, t, n) {
                t.setRecords(e, !0)
            }),
            i.isFunction(e.registerPagerButtons)) {
                var u = [s.getName(), c.getName()].join(s === c.parent ? "." : "..");
                e.registerPagerButtons(u, this._pagerButtons)
            }
            var _ = t.createInstance(this._apiName);
            return this._pager = new t.Pager,
            this._pager.init(_, _[this._apiMethod], this._panelsPerpage, this._apiParams),
            i.isUndefined(this._sortEvent) || t.createInstance("notificationCenter").addEventListener(this._sortEvent, function(e) {
                this._setSortCondition(e),
                this._pagerButtons.refreshPage()
            }, this),
            this._pagerButtons.setPager(this._pager).then(function(e) {
                if (c.disposed || null == c.getAction())
                    return a.warn("KHListBtnsController._fillupListView: widget disposed or action not found, scene has possibly been discarded already."),
                    {
                        pageCount: 0,
                        maxRecord: 0
                    };
                0 === e ? c.setVisible(!1) : c.isVisible() || c.setVisible(!0);
                var t = c.getAction()
                  , n = t.getCurrentFrame();
                return c.changeFrameWithAnimInfo("animation_4", "start"),
                t.gotoFrameAndPause(n),
                {
                    pageCount: e,
                    maxRecord: this._pager._maxRecords
                }
            }
            .bind(this)).fail(function(e) {
                return this._pagerButtons._widget.disposed ? {
                    pageCount: 0,
                    maxRecord: 0
                } : void a.error(e.stack)
            }
            .bind(this))
        },
        updateOptions: function(e) {
            i.isUndefined(this._pager) && a.warn("[ERROR] Could not find pager object."),
            this._pager.updateOptions(e)
        },
        refreshPage: function() {
            return i.isUndefined(this._pagerButtons) ? (a.warn("[ERROR] Could not find pager buttons object."),
            Q.resolve()) : this._pagerButtons.refresh()
        },
        _recordWidgetInitFunc: {
            chara: function(e, n) {
                a.log(n);
                var s = t.createInstance("CoreCardCharacterUI", [this._cardFrame])
                  , o = i.isUndefined(n.is_owned) ? !0 : n.is_owned;
                o && (this._setCharacterImage(s, n),
                "full" === this._cardFrame ? (s.setIconOrganized(n.is_equipped),
                s.setPlusNo(0 < n.bonus ? "+" + n.bonus : ""),
                i.isUndefined(this._setTotalLabel) || s.setTotalLabel(this._setTotalLabel(n)),
                s.setAroused(n.is_aroused),
                s.setIconElement(n.element_type),
                s.setIconRarity(n.rare),
                s.setStarGauge(20 * n.max_overlimit_count, 20 * n.overlimit_count)) : "e_r" === this._cardFrame && (s.setPlusNo(0 < n.bonus ? "+" + n.bonus : ""),
                s.setIconElement(n.element_type),
                s.setIconRarity(n.rare)));
                var r = s.getResult();
                i.isUndefined(this._coreCardScale) || r.setScale(this._coreCardScale),
                this.setUpUI(e, r),
                this.setTouchEvent(e, n, "chara"),
                !i.isUndefined(this._coreCardInitExtension) && i.isFunction(this._coreCardInitExtension) && this._coreCardInitExtension(e, n, "chara")
            },
            summon: function(e, n) {
                a.log(n);
                var s = t.createInstance("CoreCardSummonUI", [this._cardFrame])
                  , o = i.isUndefined(n.is_owned) ? !0 : n.is_owned;
                o && (s.setImg(n.summon_id, n.skin || 0),
                "full" === this._cardFrame ? (s.setIconEquipped(n.is_equipped),
                s.setIconProtected(n.is_locked),
                s.setPlusNo(0 < n.bonus ? "+" + n.bonus : ""),
                i.isUndefined(this._setTotalLabel) || s.setTotalLabel(this._setTotalLabel(n)),
                s.setIconElement(n.element_type),
                s.setIconRarity(n.rare),
                s.setStarGauge(20 * n.max_overlimit_count, 20 * n.overlimit_count)) : "e_r" === this._cardFrame && (s.setPlusNo(0 < n.bonus ? "+" + n.bonus : ""),
                s.setIconElement(n.element_type),
                s.setIconRarity(n.rare)));
                var r = s.getResult();
                i.isUndefined(this._coreCardScale) || r.setScale(this._coreCardScale),
                this.setUpUI(e, r),
                this.setTouchEvent(e, n, "summon"),
                !i.isUndefined(this._coreCardInitExtension) && i.isFunction(this._coreCardInitExtension) && this._coreCardInitExtension(e, n, "summon")
            },
            weapon: function(e, n) {
                a.log(n);
                var s = t.createInstance("CoreCardWeaponUI", [this._cardFrame])
                  , o = i.isUndefined(n.is_owned) ? !0 : n.is_owned;
                o && (s.setImg(n.weapon_id, n.skin || 0),
                "full" === this._cardFrame ? (s.setIconEquipped(n.is_equipped),
                s.setIconProtected(n.is_locked),
                s.setPlusNo(0 < n.bonus ? "+" + n.bonus : ""),
                i.isUndefined(this._setTotalLabel) || s.setTotalLabel(this._setTotalLabel(n)),
                s.setIconElement(n.element_type),
                s.setIconRarity(n.rare),
                s.setStarGauge(20 * n.max_overlimit_count, 20 * n.overlimit_count)) : "e_r" === this._cardFrame && (s.setPlusNo(0 < n.bonus ? "+" + n.bonus : ""),
                s.setIconElement(n.element_type),
                s.setIconRarity(n.rare)));
                var r = s.getResult();
                i.isUndefined(this._coreCardScale) || r.setScale(this._coreCardScale),
                this.setUpUI(e, r),
                this.setTouchEvent(e, n, "weapon"),
                !i.isUndefined(this._coreCardInitExtension) && i.isFunction(this._coreCardInitExtension) && this._coreCardInitExtension(e, n, "weapon")
            },
            job: function(e, n) {
                a.log(n);
                var s = t.createInstance("CoreCardJobUI", [this._cardFrame]);
                s.setImg(n.job_id, n.skin || 0),
                "full" === this._cardFrame || "e_r" === this._cardFrame;
                var o = s.getResult();
                i.isUndefined(this._coreCardScale) || o.setScale(this._coreCardScale),
                this.setUpUI(e, o),
                this.setTouchEvent(e, n, "job"),
                !i.isUndefined(this._coreCardInitExtension) && i.isFunction(this._coreCardInitExtension) && this._coreCardInitExtension(e, n, "job")
            },
            "main-quest-battle": function(e, s) {
                a.log(s),
                e.removeAllChildren(),
                e.parent.setVisible(!0);
                var o = new ccui.ImageView;
                e.addChild(o);
                var r = t.Img("corecard", "main-quest-battle", i.padZero(s.quest_id, 4), s.battle_no).jpg;
                o.loadTexture(r),
                o.setScale(t.GameConfig.CORECARD_LIST_SCALE["5x3"]);
                var c = e.parent.getAnchorPoint();
                o.setAnchorPoint(c),
                e.setAnchorPoint(c);
                var u = i.merge({
                    is_opened: !0,
                    harem_episode_info: {
                        episode_id: s.episode_id
                    }
                }, s)
                  , _ = t.createInstance("QuestButton", ["main_story", u]);
                _.setPopupDelegate(n.director.getRunningScene()._delegate),
                e.addTouchEventListener(_.createListener()),
                e.width = e.parent.width,
                e.height = e.parent.height,
                e.setTouchEnabled(!0),
                e.setSoundEnabled(!0),
                e.setSound(t.SoundList.BUTTON_TOUCHED_DEFAULT),
                a.log(o)
            },
            misc: function(e, t) {
                a.log(t),
                !i.isUndefined(this._coreCardInitExtension) && i.isFunction(this._coreCardInitExtension) && this._coreCardInitExtension(e, t, "misc")
            }
        },
        setUpUI: function(e, t) {
            e.removeAllChildren(),
            e.addChild(t),
            e.parent.setVisible(!0)
        },
        setTouchEvent: function(e, n, s) {
            if (i.isFunction(this._onTouchImageCallback)) {
                var o = e.seekWidgetByName(s + "_img");
                if (i.isUndefined(o))
                    return void a.error("Could not set touch event. " + s + "_img not found.");
                o.setSoundEnabled(!0),
                o.setSound(t.SoundList.BUTTON_TOUCHED_DEFAULT),
                o.addTouchEventListener(function(t, i) {
                    i === ccui.Widget.TOUCH_ENDED && this._onTouchImageCallback(e, n, s)
                }, this)
            }
        },
        _setSortCondition: function(e) {
            this._sortCondition = e
        },
        _setTotalLabel: function(e) {
            if (i.isUndefined(this._sortCondition))
                return "";
            switch (this._sortCondition) {
            case "attack_desc":
            case "attack_asc":
            case "overlimit_count_desc":
            case "overlimit_count_asc":
                return "攻 " + e.attack;
            case "level_desc":
            case "level_asc":
                return "Lv " + e.level;
            case "hp_desc":
            case "hp_asc":
                return "H " + e.hp;
            case "total_desc":
            case "total_asc":
            case "rare_desc":
            case "rare_asc":
            case "new_date":
            case "old_date":
            case "element_type":
            default:
                return "総 " + (e.hp + e.attack)
            }
        },
        _setCharacterImage: function(e, t) {
            var n = t.character_id;
            return i.isNumber(t.aroused_character_id) && -1 < t.aroused_character_id && (n = t.aroused_character_id),
            e.setImg(n, t.skin || 0)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e.ccs
      , a = e._;
    t.PulldownSortConfig = n.Class.extend({
        className: "KHPulldownSortConfig",
        init: function(e, n) {
            if (a.isUndefined(e.sortKey))
                return console.error("sortSet.sortKey is undefined. KHPulldownSortConfig initialize error."),
                Q.resolve();
            if (a.isUndefined(e.parentNodeName) || (this._parentNodeName = e.parentNodeName),
            this._sortKey = e.sortKey,
            this._sortValue = e.sortValue || "attack_asc",
            this._sortButton = e.sortButton || "par_009_13_15_sort",
            this._sortLabel = e.sortLabel || "par_009_13_15_sort_label",
            this._sortMenuBase = e.sortMenuBase || "list_par_009_13_15_sort",
            this._sortChoice = e.sortChoice || "party-par_009_13_15-par_009_13_15_sort_list_ui",
            this._changeEventName = e.changeEventName || "pulldown_sort_config",
            n)
                return this._sortValue = n[this._sortKey],
                this._initPulldown(),
                Q.resolve({
                    sortValue: this._sortValue,
                    sortConfig: this._sortConfig
                });
            var i = t.createInstance("apiAPlayers").getSortConfig().then(function(e) {
                return this._sortConfig = e.body.sort_config,
                this._sortValue = this._sortConfig[this._sortKey],
                this._initPulldown(),
                {
                    sortValue: this._sortValue,
                    sortConfig: this._sortConfig
                }
            }
            .bind(this));
            return i
        },
        getSortConfig: function() {
            return this._sortConfig
        },
        _initPulldown: function() {
            var e = JSON.parse(JSON.stringify(t.WordBook.SORT_CONDITION));
            (this._sortKey.indexOf("weapon") >= 0 || "enhance_character_materials" === this._sortKey) && e.push({
                value: "weapon_kind",
                text: "ウェポン種類順"
            }),
            "evolve_base_characters" === this._sortKey && e.push({
                value: "aroused",
                text: "覚醒済み"
            }),
            "arousal_base_characters" === this._sortKey && (e = a.reject(e, function(e) {
                return "overlimit" === e.value.substr(0, 9)
            })),
            e[0].selected = !1;
            var s = a.findIndex(e, function(e) {
                return e.value == this._sortValue
            }, this);
            a.assign(e[s], {
                selected: !0
            });
            var o = n.director.getRunningScene();
            if (!a.isUndefined(this._parentNodeName) && (o = o.seekWidgetByPath(this._parentNodeName),
            null === o))
                return void console.error("[ERROR] Could not find the node: " + this._parentNodeName);
            var r = new t.Pulldown({
                button: o.seekWidgetByName(this._sortButton),
                label: o.seekWidgetByName(this._sortLabel),
                menuBase: o.seekWidgetByName(this._sortMenuBase),
                choice: i.load($dynamicRes(res[this._sortChoice])).node
            },e);
            r.onChange(function(e) {
                var n = {};
                n[this._sortKey] = e.value,
                t.createInstance("apiAPlayers").updateSortConfig(n).then(function(n) {
                    this._sortConfig = n.body.sort_config,
                    t.createInstance("notificationCenter").dispatchEvent(this._changeEventName, [e.value])
                }
                .bind(this))
            }
            .bind(this))
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.list = t.pc.list || {},
    t.pc.list.roles = t.pc.list.roles || {},
    t.pc.list.roles.PageListBtnsControllerCommon = {
        _fillupButtonList: function(e, n, a, s, o, r, c, u, _) {
            if (i.isUndefined(n))
                return void console.debug("[ERROR] baseNodeName is undefined.");
            if (i.isUndefined(a))
                return void console.debug("[ERROR] Could not find api name.");
            if (i.isUndefined(s))
                return void console.debug("[ERROR] Could not find api method name.");
            if (i.isUndefined(r) || !i.isNumber(r))
                return void console.debug("[ERROR] Could not read perPage.");
            var l = e.seekWidgetByName(n);
            if (null === l)
                return void console.debug("[ERROR] Could not find listbase: " + n);
            o = o || [];
            var d = new t.ListManager(l.getChildren(),null ,function(e, t) {
                var n = e.parent;
                !i.isUndefined(c) && i.isFunction(this[c]) && this[c](n, t),
                n.setVisible(!0)
            }
            .bind(this))
              , p = new t.PagerButtons
              , h = e.seekWidgetByName("viewpage_ui");
            if (null == h)
                return void console.debug("[ERROR] Could not find viewpage_ui in the scene.");
            p.init(h, d, function(e, t, n) {
                i(l.getChildren()).invoke("setVisible", !1),
                t.setRecords(e, !0)
            }),
            i.isFunction(this[u]) && this[u](p);
            var g = t.createInstance(a);
            if (i.isUndefined(g))
                return void console.debug("[ERROR] Could not find api: " + a);
            if (!i.isFunction(g[s]))
                return void console.debug("[ERROR] Could not find api method: " + a + "." + s);
            var m = new t.Pager;
            m.init(g, g[s], r, o);
            var f = p.setPager(m).then(function(e) {
                return !i.isUndefined(_) && i.isFunction(this[_]) ? (this[_](e),
                e) : e
            });
            return f.fail(function(e) {
                return p._widget.disposed ? 0 : void console.error(e.stack)
            }
            .bind(this)),
            f
        },
        _setListBtnsControllerWithArgs: function(e, n, i, a, s) {
            if (a) {
                var o = t.createInstance("PulldownSortConfig").init(a, this._sortConfig).then(function(t) {
                    return console.log(t),
                    this._sortConfig = t.sortConfig,
                    i.sortCondition = t.sortValue,
                    this._setListBtnsControllerWithArgsOrg(e, n, i, s)
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                });
                return o
            }
            return this._setListBtnsControllerWithArgsOrg(e, n, i, s)
        },
        _setListBtnsControllerWithArgsOrg: function(e, a, s, o) {
            var r;
            this.listBtns = r = t.createInstance("ListBtnsController"),
            i.isUndefined(s.controllerName) || (this[s.controllerName] = r);
            var c = r.init(s, function(e, t, s) {
                if (i.isFunction(this[a])) {
                    var o = n.director.getRunningScene();
                    this[a](e, t, o)
                }
            }
            .bind(this), function(e, t, n) {
                i.isFunction(this[o]) && this[o](e, t, n)
            }
            .bind(this)).then(function(e) {
                return e
            });
            return c.fail(function(e) {
                console.debug(e)
            }),
            c
        },
        _initSelectableCardPanel: function(e, t, n) {
            return i.contains(["chara", "weapon", "summon"], e) ? ("chara" === e && (e = "character"),
            this._selectableCardType = e,
            this._selectableCardListResKey = n || "corecard_ui",
            this._selectableCardMax = 20,
            this._initSelectableCardList(),
            this._selectableRecordList = [],
            this._execButtonName = t,
            this._selectableCardInit = !0,
            void this._enableExecButton()) : void console.warn("[ERROR] Invalid card type: " + e)
        },
        _initSelectableCardPanelWidget: function(e, t, n) {
            n = "character" == n ? "chara" : n;
            var a = "a_" + n + "_id";
            if (i.isUndefined(t[a]))
                return void console.warn("[ERROR] Could not find key in this record: " + a);
            if (e.parent.tag = t[a],
            console.log(e, t),
            console.log(e.name),
            console.log(e.tag),
            !i.isUndefined(this._selectableCardList)) {
                var s = this._selectableCardList[t[a]];
                i.isUndefined(s) || this._selectableCardSelected(e, !0, s)
            }
        },
        _touchSelectableCardPanel: function(e, t) {
            if (i.isUndefined(this._selectableCardInit) || !this._selectableCardInit)
                return void console.warn("[ERROR] You should call _initSelectableCardPanel method first.");
            var n = "a_" + this._selectableCardType + "_id";
            return i.isUndefined(t[n]) ? void console.warn("[ERROR] Could not find id in the record: " + n) : void this._setSelectableCardPanelNumber(e, t, t[n])
        },
        _setSelectableCardPanelNumber: function(e, t, n) {
            if (i.isUndefined(this._selectableCardInit) || !this._selectableCardInit)
                return void console.warn("[ERROR] You should call _initSelectableCardPanel method first.");
            if (console.log(this._selectableCardList),
            this._selectableCardList[n])
                this._selectableCardSelected(e, !1),
                delete this._selectableCardList[n],
                delete this._selectableRecordList[n],
                this._adjustSelectedCardArray();
            else if (this._selectableCardMax > i.keys(this._selectableCardList).length) {
                var a = i.keys(this._selectableCardList).length + 1;
                this._selectableCardSelected(e, !0, a),
                this._selectableCardList[n] = a,
                this._selectableRecordList[n] = t
            }
            this._enableExecButton()
        },
        _enableExecButton: function() {
            if (!i.isUndefined(this._execButtonName)) {
                var e = i.keys(this._selectableCardList).length ? !0 : !1
                  , t = n.director.getRunningScene()
                  , a = t.seekWidgetByPath(this._execButtonName);
                if (null === a)
                    return void console.warn("[ERROR] Could not find an execute button: " + this._execButtonName);
                a.setColor(1 == e ? n.color("#FFFFFF") : n.color("#808080")),
                a.setEnabled(e)
            }
        },
        _adjustSelectedCardArray: function() {
            var e = {}
              , t = 1;
            i.each(i.invert(this._selectableCardList), function(n) {
                e[t++] = n
            }),
            console.log(e),
            i.each(e, function(e, t) {
                this._selectableCardList[e] = Number(t)
            }, this),
            console.log(this._selectableCardList),
            this._updateSelectedNumber()
        },
        _updateSelectedNumber: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByPath(this._selectableCardListResKey);
            return null === t ? void console.warn("[ERROR] Could not find the selectable card list: " + this._selectableCardListResKey) : void i.each(t.getChildren(), function(e) {
                console.log(e.name, e.tag, this._selectableCardList[e.tag]),
                this._selectableCardSelected(e, !i.isUndefined(this._selectableCardList[e.tag]), this._selectableCardList[e.tag])
            }, this)
        },
        _initSelectableCardList: function() {
            var e = n.director.getRunningScene()
              , i = e.temporaryRouterParams
              , a = t.createInstance("router").getCurrentFragment();
            a.substr(a.lastIndexOf("/") + 1);
            return this._savedSelected && (this._savedSelected = {}),
            i && i.list ? (this._selectableCardList = i.list,
            void t.createInstance("router").removeCurrentTemporaryParamsFromHistory()) : void (this._selectableCardList = {})
        },
        _getSelectableCardList: function() {
            return i.isUndefined(this._selectableCardInit) || !this._selectableCardInit ? (console.warn("[ERROR] You should call _initSelectableCardPanel method first."),
            {}) : this._selectableCardList
        },
        _getSelectedCardIdListKeys: function() {
            return i.isUndefined(this._selectableCardInit) || !this._selectableCardInit ? (console.warn("[ERROR] You should call _initSelectableCardPanel method first."),
            []) : i.keys(this._selectableCardList)
        },
        _selectableCardSelected: function(e, t, i) {
            console.log(e, e.name, t, this._selectableCardType, i);
            var a = e.seekWidgetByName(this._selectableCardType + "_img");
            if (null === a)
                return void console.debug("[ERROR] Could not find image node: " + this._selectableCardType + "_img");
            a.setColor(1 == t ? n.color("#808080") : n.color("#FFFFFF"));
            var s = e.seekWidgetByName("count_label");
            return null === s ? void console.debug("[ERROR] Could not find count label node.") : (s.setVisible(t),
            void s.setString(t ? i : ""))
        },
        _saveSelected: function() {
            this._savedSelected = {},
            i.each(["_selectableCardList", "_selectableRecordList"], function(e) {
                this._savedSelected[e] = this[e],
                this[e] = []
            }, this)
        },
        _restoreSelected: function() {
            this._savedSelected && (i.each(["_selectableCardList", "_selectableRecordList"], function(e) {
                this._savedSelected[e] && (this[e] = this._savedSelected[e])
            }, this),
            this._savedSelected = {})
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.list = t.pc.list || {},
    t.pc.list.roles = t.pc.list.roles || {},
    t.pc.list.roles.ListCharactersCommon = {
        _setCharacterList: function(e, n, a) {
            n = n || [1, 1];
            var s = "attack_desc"
              , o = {
                baseName: "Scene",
                panelName: t.BtnsPageListParams.CHARACTER_LIST.panelName,
                panelsPerPage: t.BtnsPageListParams.CHARACTER_LIST.perPage,
                apiName: "apiAParties",
                apiMethod: "getSelectableCharactersByParty",
                apiParams: n,
                cardType: "chara",
                cardFrame: "full",
                sortEvent: "pulldown_sort_config",
                sortCondition: s
            };
            t.createInstance("ListBtnsController").init(o, function(t, n, s) {
                console.log(n),
                i.isFunction(this[a]) && this[a](e, n)
            }
            .bind(this)).then(function(e) {
                console.log(e)
            }),
            $staticRes(res["core-pages-sort_list_0_ui"]);
            var r = {
                sortKey: "selectable_characters",
                sortValue: s,
                sortButton: "btn_sort",
                sortLabel: "sort_label",
                sortMenuBase: "sortlist",
                sortChoice: "core-pages-sort_list_0_ui",
                changeEventName: "pulldown_sort_config"
            };
            t.createInstance("PulldownSortConfig").init(r)
        },
        _setSelectableCharacterList: function(e, n, i, a, s, o, r, c, u) {
            n = n || [1];
            var _ = "attack_desc";
            i = i || "apiACharacters",
            a = a || "getEnhanceMaterials",
            r = r || t.BtnsPageListParams.SELECTABLE_CHARACTER_LIST.panelName,
            c = c || t.BtnsPageListParams.SELECTABLE_CHARACTER_LIST.perPage;
            var l = e._name || "Scene"
              , d = {
                baseName: l,
                panelName: r,
                panelsPerPage: c,
                apiName: i,
                apiMethod: a,
                apiParams: n,
                cardType: "weapon",
                cardFrame: "full",
                sortEvent: "pulldown_sort_config",
                controllerName: u
            };
            s = s || "enhance_character_materials",
            $staticRes(res["core-pages-sort_list_0_ui"]);
            var p = {
                parentNodeName: l,
                sortKey: s,
                sortValue: _,
                sortButton: "btn_sort",
                sortLabel: "sort_label",
                sortMenuBase: "sortlist",
                sortChoice: "core-pages-sort_list_0_ui",
                changeEventName: "pulldown_sort_config"
            };
            this._initSelectableCardPanel("weapon", "btn_decision", l + ".." + r);
            var h = this._setListBtnsControllerWithArgs(e, "_touchSelectableCardPanel", d, p, "_initSelectableCardPanelWidget");
            return h
        },
        _setCharacterHeaderLabel: function() {
            var e = n.director.getRunningScene()
              , a = e.seekWidgetByName("header_sub_label");
            return null === a ? void console.debug("[NOTICE] Could not find count label name.") : void t.createInstance("apiAPlayers").get("me").then(function(t) {
                var n = t.body;
                return i.isUndefined(n.character_num) ? void console.debug("[NOTICE] Could not find character_num.") : void e.setStrings({
                    header_sub_label: "人数:" + n.character_num
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    },
    i.assign(t.pc.list.roles.ListCharactersCommon, t.pc.list.roles.PageListBtnsControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.list = t.pc.list || {},
    t.pc.list.roles = t.pc.list.roles || {},
    t.pc.list.roles.ListWeaponsCommon = {
        _setWeaponList: function(e, n, a, s) {
            n = n || [1, 1];
            var o = "attack_desc";
            s = s || {},
            s.panelName = s.panelName || t.BtnsPageListParams.WEAPON_LIST.panelName,
            s.panelsPerPage = s.panelsPerPage || t.BtnsPageListParams.WEAPON_LIST.perPage,
            s.apiName = s.apiName || "apiAParties",
            s.apiMethod = s.apiMethod || "getSelectableWeaponsByParty",
            s.sortKey = s.sortKey || "selectable_weapons";
            var r = {
                baseName: "Scene",
                panelName: s.panelName,
                panelsPerPage: s.panelsPerPage,
                apiName: s.apiName,
                apiMethod: s.apiMethod,
                apiParams: n,
                cardType: "weapon",
                cardFrame: "full",
                sortEvent: "pulldown_sort_config",
                sortCondition: o
            }
              , c = t.createInstance("ListBtnsController").init(r, function(t, n, s) {
                i.isFunction(this[a]) && this[a](e, n)
            }
            .bind(this)).then(function(e) {
                return e
            });
            $staticRes(res["core-pages-sort_list_0_ui"]);
            var u = {
                sortKey: s.sortKey,
                sortValue: o,
                sortButton: "btn_sort",
                sortLabel: "sort_label",
                sortMenuBase: "sortlist",
                sortChoice: "core-pages-sort_list_0_ui",
                changeEventName: "pulldown_sort_config"
            };
            return t.createInstance("PulldownSortConfig").init(u),
            c
        },
        _setSelectableWeaponList: function(e, t, n, i, a, s, o, r, c) {
            t = t || [1];
            var u = "attack_desc";
            n = n || "apiAWeapons",
            i = i || "getEnhanceMaterials",
            o = o || "corecard_blank_5_4_ui",
            r = r || 20;
            var _ = e._name || "Scene"
              , l = {
                baseName: _,
                panelName: o,
                panelsPerPage: r,
                apiName: n,
                apiMethod: i,
                apiParams: t,
                cardType: "weapon",
                cardFrame: "full",
                sortEvent: "pulldown_sort_config",
                controllerName: c
            };
            a = a || "enhance_weapon_materials",
            $staticRes(res["core-pages-sort_list_0_ui"]);
            var d = {
                parentNodeName: _,
                sortKey: a,
                sortValue: u,
                sortButton: "btn_sort",
                sortLabel: "sort_label",
                sortMenuBase: "sortlist",
                sortChoice: "core-pages-sort_list_0_ui",
                changeEventName: "pulldown_sort_config"
            };
            this._initSelectableCardPanel("weapon", "btn_decision", _ + ".." + o);
            var p = this._setListBtnsControllerWithArgs(e, "_touchSelectableCardPanel", l, d, "_initSelectableCardPanelWidget");
            return p
        },
        _setWeaponHeaderLabel: function() {
            var e = n.director.getRunningScene()
              , a = e.seekWidgetByName("header_sub_label");
            return null === a ? void console.debug("[NOTICE] Could not find count label name.") : void t.createInstance("apiAPlayers").get("me").then(function(t) {
                var n = t.body;
                return i.isUndefined(n.weapon_num) || i.isUndefined(n.max_weapon_num) ? void console.debug("[NOTICE] Could not find weapon_num | max_weapon_num.") : void e.setStrings({
                    header_sub_label: "所持数:" + n.weapon_num + "/" + n.max_weapon_num
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    },
    i.assign(t.pc.list.roles.ListWeaponsCommon, t.pc.list.roles.PageListBtnsControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.list = t.pc.list || {},
    t.pc.list.roles = t.pc.list.roles || {},
    t.pc.list.roles.ListSummonsCommon = {
        _setSummonList: function(e, n, a, s) {
            n = n || [1, 1];
            var o = "attack_desc";
            s = s || {},
            s.panelName = s.panelName || t.BtnsPageListParams.SUMMON_LIST.panelName,
            s.panelsPerPage = s.panelsPerPage || t.BtnsPageListParams.SUMMON_LIST.perPage,
            s.apiName = s.apiName || "apiAParties",
            s.apiMethod = s.apiMethod || "getSelectableSummonsByParty",
            s.sortKey = s.sortKey || "selectable_summons";
            var r = {
                baseName: "Scene",
                panelName: s.panelName,
                panelsPerPage: s.panelsPerPage,
                apiName: s.apiName,
                apiMethod: s.apiMethod,
                apiParams: n,
                cardType: "summon",
                cardFrame: "full",
                sortEvent: "pulldown_sort_config",
                sortCondition: o
            }
              , c = t.createInstance("ListBtnsController").init(r, function(t, n, s) {
                i.isFunction(this[a]) && this[a](e, n)
            }
            .bind(this)).then(function(e) {
                return e
            });
            $staticRes(res["core-pages-sort_list_0_ui"]);
            var u = {
                sortKey: s.sortKey,
                sortValue: o,
                sortButton: "btn_sort",
                sortLabel: "sort_label",
                sortMenuBase: "sortlist",
                sortChoice: "core-pages-sort_list_0_ui",
                changeEventName: "pulldown_sort_config"
            };
            return t.createInstance("PulldownSortConfig").init(u),
            c
        },
        _setSelectableSummonList: function(e, n, i, a, s, o, r, c, u) {
            n = n || [1];
            var _ = "attack_desc";
            i = i || "apiASummons",
            a = a || "getEnhanceMaterials",
            r = r || "corecard_blank_5_4_ui",
            c = c || 20;
            var l = e._name || "Scene"
              , d = {
                baseName: l,
                panelName: r,
                panelsPerPage: c,
                apiName: i,
                apiMethod: a,
                apiParams: n,
                cardType: "summon",
                cardFrame: "full",
                sortEvent: "pulldown_summon_sort_config",
                controllerName: u
            };
            s = s || "enhance_summon_materials",
            $staticRes(res["core-pages-sort_list_0_ui"]);
            var p = {
                parentNodeName: l,
                sortKey: s,
                sortValue: _,
                sortButton: "btn_sort",
                sortLabel: "sort_label",
                sortMenuBase: "sortlist",
                sortChoice: "core-pages-sort_list_0_ui",
                changeEventName: "pulldown_summon_sort_config"
            };
            this._initSelectableCardPanel("summon", "btn_decision", l + ".." + r),
            t.createInstance("PulldownSortConfig").init(p);
            var h = this._setListBtnsControllerWithArgs(e, "_touchSelectableCardPanel", d, p, "_initSelectableCardPanelWidget");
            return h
        },
        _setSummonHeaderLabel: function() {
            var e = n.director.getRunningScene()
              , a = e.seekWidgetByName("header_sub_label");
            return null === a ? void console.debug("[NOTICE] Could not find count label name.") : void t.createInstance("apiAPlayers").get("me").then(function(t) {
                var n = t.body;
                return i.isUndefined(n.summon_num) || i.isUndefined(n.max_summon_num) ? void console.debug("[NOTICE] Could not find summon_num | max_summon_num.") : void e.setStrings({
                    header_sub_label: "所持数:" + n.summon_num + "/" + n.max_summon_num
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    },
    i.assign(t.pc.list.roles.ListSummonsCommon, t.pc.roles.CoreCardCommon, t.pc.list.roles.PageListBtnsControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.party = t.pc.party || {},
    t.pc.party.roles = t.pc.roles || {},
    t.pc.party.roles.Routing = {
        _navigateBackToQuest: function(e) {
            var n = e.routerParams.party.returnQuestRoute;
            return null == n ? void this._consoleErrorRoutingAbort("scene.routerParams.party.returnQuestRoute") : void t.createInstance("router").navigate(n)
        },
        _verifyRouterParams004: function(e) {},
        _navigate004To006: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_job_id) ? void this._consoleErrorRoutingAbort("record.a_job_id") : void t.createInstance("router").navigate("party/par_006", {
                par_006_007: {
                    id: i.a_job_id
                }
            })
        },
        _verifyRouterParams005: function(e) {
            n.isUndefined(e.routerParams.party_id)
        },
        _verifyRouterParams006: function(e) {},
        _navigate007To008: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_job_id) ? void this._consoleErrorRoutingAbort("record.a_job_id") : void t.createInstance("router").navigate("party/par_008", {
                par_008: {
                    id: i.a_job_id
                }
            })
        },
        _verifyRouterParams008: function(e) {
            n.isUndefined(e.routerParams.party_id) && (e.routerParams.party_id = 1,
            this._consoleErrorRouterParams("routerParams.party_id")),
            n.isUndefined(e.routerParams.par_008) && (e.routerParams.par_008 = {},
            e.routerParams.par_008.id = 1,
            this._consoleErrorRouterParams("routerParams.par_008, .id"))
        },
        _verifyRouterParams009: function(e) {
            n.isUndefined(e.routerParams.party_id) && (e.routerParams.party_id = 1,
            this._consoleErrorRouterParams("routerParams.party_id")),
            n.isUndefined(e.routerParams.par_009) && (e.routerParams.par_009 = {},
            e.routerParams.par_009.number = 1,
            this._consoleErrorRouterParams("routerParams.par_009, .number"))
        },
        _navigate009To010: function(e, i) {
            if (n.isUndefined(e.routerParams.par_009))
                return void this._consoleErrorRoutingAbort("routerParams.par_009");
            if (n.isUndefined(e.routerParams.par_009.number))
                return void this._consoleErrorRoutingAbort("routerParams.par_009.number");
            if (n.isUndefined(i) || n.isUndefined(i.a_character_id))
                return void this._consoleErrorRoutingAbort("record.a_character_id");
            var a = e.routerParams.par_009;
            t.createInstance("router").navigate("party/par_010", {
                par_010: {
                    number: a.number,
                    id: i.a_character_id
                }
            })
        },
        _verifyRouterParams010: function(e) {
            n.isUndefined(e.routerParams.party_id) && (e.routerParams.party_id = 1,
            this._consoleErrorRouterParams("routerParams.party_id")),
            n.isUndefined(e.routerParams.par_010) && (e.routerParams.par_010 = {},
            e.routerParams.par_010.id = 1,
            e.routerParams.par_010.number = 2,
            this._consoleErrorRouterParams("routerParams.par_010, .id, .number"))
        },
        _move010To001: function(e) {
            if (n.isUndefined(e.routerParams.par_010))
                return void this._consoleErrorRoutingAbort("routerParams.par_010");
            if (n.isUndefined(e.routerParams.par_010.id) || n.isUndefined(e.routerParams.par_010.number))
                return void this._consoleErrorRoutingAbort("routerParams.par_010.id | .number");
            var i = e.routerParams.par_010;
            t.createInstance("apiAParties").changeCharacter(e.routerParams.party_id, i.number, i.id).then(function(e) {
                t.createInstance("router").navigate("party/par_001", {
                    tab: "members"
                }, {
                    par_001: {
                        number: e.body.set_num,
                        id: i.id
                    }
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _verifyRouterParams011: function(e) {
            n.isUndefined(e.routerParams.party_id) && (e.routerParams.party_id = 1,
            this._consoleErrorRouterParams("routerParams.party_id")),
            n.isUndefined(e.routerParams.par_011) && (e.routerParams.par_011 = {},
            e.routerParams.par_011.id = 1,
            e.routerParams.par_011.number = 2,
            this._consoleErrorRouterParams("routerParams.par_011, .id, .number"))
        },
        _move011To001: function(e) {
            if (n.isUndefined(e.routerParams.par_011))
                return void this._consoleErrorRoutingAbort("routerParams.par_011");
            if (n.isUndefined(e.routerParams.par_011.id) || n.isUndefined(e.routerParams.par_011.number))
                return void this._consoleErrorRoutingAbort("routerParams.par_011.id | .number");
            var i = e.routerParams.par_011;
            t.createInstance("apiAParties").changeCharacter(e.routerParams.party_id, i.number, null ).then(function(e) {
                t.createInstance("router").navigate("party/par_001", {
                    tab: "members"
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _move011To009: function(e) {
            if (n.isUndefined(e.routerParams.par_011))
                return void this._consoleErrorRoutingAbort("routerParams.par_011");
            if (n.isUndefined(e.routerParams.par_011.id) || n.isUndefined(e.routerParams.par_011.number))
                return void this._consoleErrorRoutingAbort("routerParams.par_011.id | .number");
            var i = e.routerParams.par_011;
            t.createInstance("router").navigate("party/par_009", {
                par_009: {
                    number: i.number,
                    id: i.id
                }
            })
        },
        _verifyRouterParams012: function(e) {
            n.isUndefined(e.routerParams.party_id) && (e.routerParams.party_id = 1,
            this._consoleErrorRouterParams("routerParams.party_id")),
            n.isUndefined(e.routerParams.par_012) && (e.routerParams.par_012 = {},
            e.routerParams.par_012.id = 1,
            e.routerParams.par_012.number = 2,
            this._consoleErrorRouterParams("routerParams.par_012, .id, .number"))
        },
        _move012To002: function(e) {
            if (n.isUndefined(e.routerParams.par_012))
                return void this._consoleErrorRoutingAbort("routerParams.par_012");
            if (n.isUndefined(e.routerParams.par_012.id) || n.isUndefined(e.routerParams.par_012.number))
                return void this._consoleErrorRoutingAbort("routerParams.par_012.id | .number");
            var i = e.routerParams.par_012;
            t.createInstance("apiAParties").changeWeapon(e.routerParams.party_id, i.number, null ).then(function(e) {
                t.createInstance("router").navigate("party/par_002", {
                    tab: "weapons"
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _move012To013: function(e) {
            if (n.isUndefined(e.routerParams.par_012))
                return void this._consoleErrorRoutingAbort("routerParams.par_012");
            if (n.isUndefined(e.routerParams.par_012.id) || n.isUndefined(e.routerParams.par_012.number))
                return void this._consoleErrorRoutingAbort("routerParams.par_012.id | .number");
            var i = e.routerParams.par_012;
            t.createInstance("router").navigate("party/par_013", {
                par_013: {
                    number: i.number,
                    id: i.id
                }
            })
        },
        _verifyRouterParams013: function(e) {
            n.isUndefined(e.routerParams.party_id) && (e.routerParams.party_id = 1,
            this._consoleErrorRouterParams("routerParams.party_id")),
            n.isUndefined(e.routerParams.par_013) && (e.routerParams.par_013 = {},
            e.routerParams.par_013.number = 1,
            this._consoleErrorRouterParams("routerParams.par_013, .number"))
        },
        _navigate013To014: function(e, i) {
            if (n.isUndefined(e.routerParams.par_013))
                return void this._consoleErrorRoutingAbort("routerParams.par_013");
            if (n.isUndefined(e.routerParams.par_013.number))
                return void this._consoleErrorRoutingAbort("routerParams.par_013.number");
            if (n.isUndefined(i) || n.isUndefined(i.a_weapon_id))
                return void this._consoleErrorRoutingAbort("record.a_weapon_id");
            var a = e.routerParams.par_013;
            t.createInstance("router").navigate("party/par_014", {
                par_014: {
                    number: a.number,
                    id: i.a_weapon_id
                }
            })
        },
        _verifyRouterParams014: function(e) {
            n.isUndefined(e.routerParams.party_id) && (e.routerParams.party_id = 1,
            this._consoleErrorRouterParams("routerParams.party_id")),
            n.isUndefined(e.routerParams.par_014) && (e.routerParams.par_014 = {},
            e.routerParams.par_014.id = 1,
            e.routerParams.par_014.number = 2,
            this._consoleErrorRouterParams("routerParams.par_014, .id, .number"))
        },
        _move014To002: function(e) {
            if (n.isUndefined(e.routerParams.par_014))
                return void this._consoleErrorRoutingAbort("routerParams.par_014");
            if (n.isUndefined(e.routerParams.par_014.id) || n.isUndefined(e.routerParams.par_014.number))
                return void this._consoleErrorRoutingAbort("routerParams.par_014.id | .number");
            var i = e.routerParams.par_014;
            t.createInstance("apiAParties").changeWeapon(e.routerParams.party_id, i.number, i.id).then(function(e) {
                t.createInstance("router").navigate("party/par_002", {
                    tab: "weapons",
                    par_before: {
                        before_hp: e.body.pre_hp,
                        before_attack: e.body.pre_attk
                    }
                }, {
                    par_002: {
                        newnumber: e.body.set_num
                    }
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _verifyRouterParams015: function(e) {
            n.isUndefined(e.routerParams.party_id) && (e.routerParams.party_id = 1,
            this._consoleErrorRouterParams("routerParams.party_id")),
            n.isUndefined(e.routerParams.par_015) && (e.routerParams.par_015 = {},
            e.routerParams.par_015.number = 1,
            this._consoleErrorRouterParams("routerParams.par_015, .number"))
        },
        _navigate015To017: function(e, i) {
            if (n.isUndefined(e.routerParams.par_015))
                return void this._consoleErrorRoutingAbort("routerParams.par_015");
            if (n.isUndefined(e.routerParams.par_015.number))
                return void this._consoleErrorRoutingAbort("routerParams.par_015.number");
            if (n.isUndefined(i) || n.isUndefined(i.a_summon_id))
                return void this._consoleErrorRoutingAbort("record.a_summon_id");
            var a = e.routerParams.par_015;
            t.createInstance("router").navigate("party/par_017", {
                par_017: {
                    number: a.number,
                    id: i.a_summon_id
                }
            })
        },
        _verifyRouterParams016: function(e) {
            n.isUndefined(e.routerParams.party_id) && (e.routerParams.party_id = 1,
            this._consoleErrorRouterParams("routerParams.party_id")),
            n.isUndefined(e.routerParams.par_016) && (e.routerParams.par_016 = {},
            e.routerParams.par_016.id = 1,
            e.routerParams.par_016.number = 2,
            this._consoleErrorRouterParams("routerParams.par_016, .id, .number"))
        },
        _move016To003: function(e) {
            if (n.isUndefined(e.routerParams.par_016))
                return void this._consoleErrorRoutingAbort("routerParams.par_016");
            if (n.isUndefined(e.routerParams.par_016.id) || n.isUndefined(e.routerParams.par_016.number))
                return void this._consoleErrorRoutingAbort("routerParams.par_016.id | .number");
            var i = e.routerParams.par_016;
            t.createInstance("apiAParties").changeSummon(e.routerParams.party_id, i.number, null ).then(function(e) {
                t.createInstance("router").navigate("party/par_003", {
                    tab: "summons"
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _move016To015: function(e) {
            if (n.isUndefined(e.routerParams.par_016))
                return void this._consoleErrorRoutingAbort("routerParams.par_016");
            if (n.isUndefined(e.routerParams.par_016.id) || n.isUndefined(e.routerParams.par_016.number))
                return void this._consoleErrorRoutingAbort("routerParams.par_016.id | .number");
            var i = e.routerParams.par_016;
            t.createInstance("router").navigate("party/par_015", {
                par_015: {
                    number: i.number
                }
            })
        },
        _verifyRouterParams017: function(e) {
            n.isUndefined(e.routerParams.party_id) && (e.routerParams.party_id = 1,
            this._consoleErrorRouterParams("routerParams.party_id")),
            n.isUndefined(e.routerParams.par_017) && (e.routerParams.par_017 = {},
            e.routerParams.par_017.id = 1,
            e.routerParams.par_017.number = 2,
            this._consoleErrorRouterParams("routerParams.par_017, .id, .number"))
        },
        _move017To003: function(e) {
            if (n.isUndefined(e.routerParams.par_017))
                return void this._consoleErrorRoutingAbort("routerParams.par_017");
            if (n.isUndefined(e.routerParams.par_017.id) || n.isUndefined(e.routerParams.par_017.number))
                return void this._consoleErrorRoutingAbort("routerParams.par_017.id | .number");
            var i = e.routerParams.par_017;
            t.createInstance("apiAParties").changeSummon(e.routerParams.party_id, i.number, i.id).then(function(e) {
                t.createInstance("router").navigate("party/par_003", {
                    tab: "summons",
                    par_before: {
                        before_hp: e.body.pre_hp,
                        before_attack: e.body.pre_attk
                    }
                }, {
                    par_003: {
                        newnumber: e.body.set_num
                    }
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _navigateTo001: function() {
            t.createInstance("router").navigate("party/par_001", {
                tab: "chara"
            })
        },
        _navigate005To004: function() {
            t.createInstance("router").navigate("party/par_004")
        }
    },
    n.assign(t.pc.party.roles.Routing, t.pc.roles.RoutingCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc.party = t.pc.party || {},
    t.pc.party.roles = t.pc.party.roles || {},
    t.pc.party.roles.ExAbilityPageListController = {
        _fillupExAbilityList: function(e, a) {
            e.seekWidgetByName("introduce_statuslist_list_7_ui").removeFromParent();
            var s;
            return s = n.isUndefined(e.routerParams.party_id) ? t.createInstance("apiAPlayers").getMe().then(function(t) {
                return e.routerParams.party_id = t.body.selected_party.a_party_id,
                i.resolve(t.body.selected_party.a_party_id)
            }, function(e) {
                console.error(e)
            }) : i.resolve(e.routerParams.party_id),
            s = s.then(function(e) {
                return t.createInstance("apiAParties").getExAbilitiesByParty(e)
            }).then(function(n) {
                console.log(n.body);
                var i = {
                    targetNode: "ex_ability_list_base",
                    touchEventFuncName: a
                };
                return this._fillupList(e, {
                    viewParent: t.PageListParams.EX_ABILITY_LIST.viewParent,
                    subPageRes: t.PageListParams.EX_ABILITY_LIST.subPageRes,
                    panelsPerPage: t.PageListParams.EX_ABILITY_LIST.perPage
                }, n.body.data, n.body.max_record_count, i, this._initExAbilityWidget.bind(this)),
                n.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _initExAbilityWidget: function(e, n, i) {
            var a = ccs.load(res["core-statuslist-statuslist_ex-ability_ui"]).node;
            e.children[0].addChild(a);
            var s = a.seekWidgetByName("ex_ability_list_base");
            s.setSoundEnabled(!0),
            s.setSound(t.SoundList.BUTTON_TOUCHED_DECIDE),
            this._setExAbilityPanelStrings(a, n),
            this._setExAbilityIsSet(a, n),
            this._setExAbilityIcon(a, n)
        }
    },
    n.assign(t.pc.party.roles.ExAbilityPageListController, t.pc.list.roles.PageListControllerCommon, t.pc.status.roles.AbilityCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.party = t.pc.party || {},
    t.pc.party.roles = t.pc.party.roles || {},
    t.pc.party.roles.JobPageListController = {
        _fillupJobList: function(e, i, a, s, o) {
            var r = ["basic", "upper", "uppermost"];
            n.contains(r, o) || console.warn("無効な英霊ランク：" + o);
            var c = s ? "getListAcquired" : "getListUnacquired"
              , u = s ? "_initAccquiredJobWidget" : "_initUnaccquiredJobWidget"
              , _ = e.seekWidgetByName(a);
            _.seekWidgetByName("par_006_7_joblist_page_ui").removeFromParent();
            var l = t.createInstance("apiAJobs")[c](o).then(function(e) {
                console.log(e.body);
                var a = {
                    targetNode: "joblist_job",
                    touchEventFuncName: i
                };
                return this._fillupList(_, {
                    viewParent: t.PageListParams.JOB_LIST.viewParent,
                    subPageRes: t.PageListParams.JOB_LIST.subPageRes,
                    panelsPerPage: t.PageListParams.JOB_LIST.perPage
                }, e.body.data, e.body.max_record_count, a, this[u].bind(this)),
                0 === e.body.max_record_count && (n.isFunction(this._showNothingLabel) ? this._showNothingLabel(_) : console.warn("[ERROR] You should assign UIUtility role.")),
                e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return l
        },
        _initAccquiredJobWidget: function(e, i, a) {
            var s = i.skin || 0
              , o = t.Img("joblist", "job", n.padZero(i.job_id, 4), s).png;
            e.seekWidgetByName("joblist_job").loadTextures(o, o, o);
            var r = i.mex_level === i.level;
            if (r)
                e.seekWidgetByName("master_icon").setVisible(!0);
            else {
                var c = e.seekWidgetByName("level_no");
                c.setVisible(!0),
                c.setString("lv" + i.level)
            }
            this._currentJobId === i.a_job_id && (e.seekWidgetByName("current_job_icon").setVisible(!0),
            this._currentJobWidget = e,
            this._currentJob = i)
        },
        _initUnaccquiredJobWidget: function(e, i, a) {
            var s = i.skin || 0
              , o = t.Img("joblist", "job", n.padZero(i.job_id, 4), s).png;
            e.seekWidgetByName("joblist_job").loadTextures(o, o, o),
            i.is_acquirable ? e.seekWidgetByName("can_learn_icon").setVisible(!0) : this._setGrayOutButton(e, !1)
        }
    },
    n.assign(t.pc.party.roles.JobPageListController, t.pc.list.roles.PageListControllerCommon, t.pc.roles.UIUtility)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        p_bonus_info: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("p_bonus_info.json")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: p_bonus_info.json"),
                e || ""
            }(),
            title: "ボーナス確認",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss()
                }
            }
        },
        q_002_sup_3: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("q_002_sup")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: q_002_sup"),
                e || ""
            }(),
            title: "デッキ編成[パーティー〇]",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "クエストへ行く"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    alert("{{a_q_002へ遷移編成キャラの制限があるクエストで制限されているキャラをパーティに入れている場合 q_caution_1が開くまた時間限定のクエストを選択している状態かつクエスト出現時間が終了した状態でタップした場合q_002_overを表示}}")
                }
            }
        },
        p_skill_info: {
            factoryName: "popupFactoryTextOnly",
            content: "フガ",
            title: "発動中のスキル",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss()
                }
            }
        },
        p_001_autoorg: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("p_001_autoorg")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: p_001_autoorg"),
                e || ""
            }(),
            title: "パーティおまかせ編成",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "編成する"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    alert("popup,p_001_orgend")
                }
            }
        },
        p_001_orgend: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("p_orgend")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: p_orgend"),
                e || ""
            }(),
            title: "おまかせ編成",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss()
                }
            }
        },
        p_002_autoorg: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("p_autoorg")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: p_autoorg"),
                e || ""
            }(),
            title: "ウェポンおまかせ編成",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "編成する"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    alert("popup,p_002_orgend")
                }
            }
        },
        p_002_orgend: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("p_orgend")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: p_orgend"),
                e || ""
            }(),
            title: "ウェポン装備",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss()
                }
            }
        },
        p_003_autoorg: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("p_autoorg")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: p_autoorg"),
                e || ""
            }(),
            title: "幻獣おまかせ編成",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "編成する"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    alert("popup,p_003_orgend")
                }
            }
        },
        p_003_orgend: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("p_orgend")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: p_orgend"),
                e || ""
            }(),
            title: "幻獣装備",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss()
                }
            }
        },
        menu_list: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("menu_chat")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: menu_chat"),
                e || ""
            }(),
            title: "所持リスト",
            buttonLabels: {
                blackBtn: "キャンセル"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        }
    };
    t.pc.party = t.pc.party || {},
    t.pc.party.par_001_002_003 = t.pc.party.par_001_002_003 || {},
    t.pc.party.par_001_002_003.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_001_2_3/par_001_2_3.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_001_2_3/par_001_2_3.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("par_001_ui");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("par_001_ui").setVisible(!1),
                e.seekWidgetByPath("par_002_ui").setVisible(!1),
                e.seekWidgetByPath("par_003_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("par_002_ui");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("par_001_ui").setVisible(!1),
                e.seekWidgetByPath("par_002_ui").setVisible(!1),
                e.seekWidgetByPath("par_003_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_2: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab3のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("par_003_ui");
                if (!t)
                    return void alert("tab.tab3のcontent-nodeが見つかりません");
                e.seekWidgetByPath("par_001_ui").setVisible(!1),
                e.seekWidgetByPath("par_002_ui").setVisible(!1),
                e.seekWidgetByPath("par_003_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab2";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par001002003Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_001_002_003"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackPar001PartyChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "par_001_party_change", function() {
                alert("{{popup p_party_changeを表示。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnPartySwitch"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_party_switch", function() {
                alert("{{現在のメインメンバーの表示が上にスライドしながら消える。同時に下からサブメンバーの表示がスライドインしてくる。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBackQuest"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_back_quest", function() {
                alert("{{parに遷移前に表示していたq_002_sup_1_2_3のいずれかを表示。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBonus"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_bonus", function() {
                alert("pupup")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnMembarAdvice"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_membar_advice", function() {
                alert("pupup")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackPar001UiBtnDetail"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("par_001_ui"), "btn_detail", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_006_a")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSkill"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_skill", function(e) {
                this.popups.p_skill_info.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackJobTouchPanel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "job_touch_panel", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_004_a")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnWeaponAdvice"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_weapon_advice", function() {
                alert("pupup")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnMainWeaponBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_main_weapon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackPartymainWeapon"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "partymain_weapon", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_012_a")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubWeaponBlank0BtnSubWeaponBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_weapon_blank_0"), "btn_sub_weapon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubWeaponBlank1BtnSubWeaponBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_weapon_blank_1"), "btn_sub_weapon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubWeaponBlank2BtnSubWeaponBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_weapon_blank_2"), "btn_sub_weapon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubWeaponBlank3BtnSubWeaponBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_weapon_blank_3"), "btn_sub_weapon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubWeaponBlank4BtnSubWeaponBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_weapon_blank_4"), "btn_sub_weapon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubWeaponBlank5BtnSubWeaponBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_weapon_blank_5"), "btn_sub_weapon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubWeaponBlank6BtnSubWeaponBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_weapon_blank_6"), "btn_sub_weapon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubWeaponBlank7BtnSubWeaponBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_weapon_blank_7"), "btn_sub_weapon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubWeaponBlank8BtnSubWeaponBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_weapon_blank_8"), "btn_sub_weapon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSummonAdvice"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_summon_advice", function() {
                alert("pupup")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnMainSummonBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_main_summon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_015")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackPartymainSummon"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "partymain_summon", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_016")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubSummonBlank0BtnSubSummonBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_summon_blank_0"), "btn_sub_summon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_015")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubSummonBlank1BtnSubSummonBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_summon_blank_1"), "btn_sub_summon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_015")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubSummonBlank2BtnSubSummonBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_summon_blank_2"), "btn_sub_summon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_015")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubSummonBlank3BtnSubSummonBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_summon_blank_3"), "btn_sub_summon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_015")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackSubSummonBlank4BtnSubSummonBlank"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("sub_summon_blank_4"), "btn_sub_summon_blank", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_015")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_001_002_003 = t.pc.party.par_001_002_003 || {},
    t.pc.party.par_001_002_003.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            p_bonus_info: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: function() {
                    var e = n.findKey(res, function(e) {
                        return 0 < e.indexOf("p_bonus_info.json")
                    });
                    return e || alert("該当するポップアップリソースが見つかりませんでした: p_bonus_info.json"),
                    e || ""
                }(),
                title: "ボーナス確認",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function() {
                        this.dissmiss()
                    }
                }
            },
            q_002_sup_3: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: function() {
                    var e = n.findKey(res, function(e) {
                        return 0 < e.indexOf("q_002_sup")
                    });
                    return e || alert("該当するポップアップリソースが見つかりませんでした: q_002_sup"),
                    e || ""
                }(),
                title: "デッキ編成[パーティー〇]",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "クエストへ行く"
                },
                buttons: {
                    blackBtn: function() {
                        this.dissmiss()
                    },
                    blueBtn: function() {
                        alert("{{a_q_002へ遷移編成キャラの制限があるクエストで制限されているキャラをパーティに入れている場合 q_caution_1が開くまた時間限定のクエストを選択している状態かつクエスト出現時間が終了した状態でタップした場合q_002_overを表示}}")
                    }
                }
            },
            p_skill_info: {
                factoryName: "popupFactoryTextOnly",
                content: "フガ",
                title: "発動中のスキル",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function() {
                        this.dissmiss()
                    }
                }
            },
            p_001_autoorg: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: function() {
                    var e = n.findKey(res, function(e) {
                        return 0 < e.indexOf("p_001_autoorg")
                    });
                    return e || alert("該当するポップアップリソースが見つかりませんでした: p_001_autoorg"),
                    e || ""
                }(),
                title: "パーティおまかせ編成",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "編成する"
                },
                buttons: {
                    blackBtn: function() {
                        this.dissmiss()
                    },
                    blueBtn: function() {
                        alert("popup,p_001_orgend")
                    }
                }
            },
            p_001_orgend: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: function() {
                    var e = n.findKey(res, function(e) {
                        return 0 < e.indexOf("p_orgend")
                    });
                    return e || alert("該当するポップアップリソースが見つかりませんでした: p_orgend"),
                    e || ""
                }(),
                title: "おまかせ編成",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function() {
                        this.dissmiss()
                    }
                }
            },
            p_002_autoorg: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: function() {
                    var e = n.findKey(res, function(e) {
                        return 0 < e.indexOf("p_autoorg")
                    });
                    return e || alert("該当するポップアップリソースが見つかりませんでした: p_autoorg"),
                    e || ""
                }(),
                title: t.w("weapon") + "おまかせ編成",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "編成する"
                },
                buttons: {
                    blackBtn: function() {
                        this.dissmiss()
                    },
                    blueBtn: function() {
                        alert("popup,p_002_orgend")
                    }
                }
            },
            p_002_orgend: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: function() {
                    var e = n.findKey(res, function(e) {
                        return 0 < e.indexOf("p_orgend")
                    });
                    return e || alert("該当するポップアップリソースが見つかりませんでした: p_orgend"),
                    e || ""
                }(),
                title: t.w("weapon") + "装備",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function() {
                        this.dissmiss()
                    }
                }
            },
            popupPartyInUse: {
                factoryName: "popupFactoryTextOnly",
                title: "編成不可",
                content: '<p style="line-height: 1.3">実行中のクエストまたは<br />参加しているレイドバトルがあるため、<br />実行中のクエストまたはレイドバトルが<br />終了するまで、このパーティの編成はできません。</p>',
                buttonLabels: {
                    redBtn: "クエストへ",
                    blueBtn: "パーティ変更"
                },
                buttons: {
                    redBtn: function(e) {
                        this.dismiss(),
                        t.createInstance("router").navigate("quest/q_001", {})
                    },
                    blueBtn: function(e) {
                        e._delegate._showPopupPartyChange()
                    }
                }
            },
            popupPartyChange: {
                factoryName: "popupFactoryComPartyChange"
            },
            popupConfirmBonus: {
                factoryName: "popupFactoryComConfirmBonus"
            },
            popupConfirmSkillInfo: {
                factoryName: "popupFactoryBlue",
                title: "発動中のスキル",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupPartyAutoOrg: {
                factoryName: "popupFactoryComPartyAutoOrg"
            },
            popupWeaponSummonAutoOrg: {
                factoryName: "popupFactoryComWeaponSummonAutoOrg"
            },
            popupAutoOrgResult: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-p_orgend",
                title: "おまかせ編成",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupWhatIsAutoOrg: {
                factoryName: "popupFactoryBlue",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupCharChange: {
                factoryName: "popupFactoryComCharChange"
            },
            popupWeaponSummonChange: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-p_weapon_summon_change",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupWeaponMain: {
                factoryName: "popupFactoryPopupCommon",
                title: "メイン" + t.w("weapon") + "編成",
                resourceName: "core-popup-p_weapon_main",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "装備する"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        t.createInstance("router").navigate("party/par_013", {
                            party_id: e._delegate._a_party_id,
                            par_013: {
                                number: 0
                            }
                        }),
                        this.dismiss()
                    }
                }
            },
            popupSubTutorial: {
                factoryName: "popupFactorySubTutorial",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        _popupPartyInUse: null ,
        onSceneInit: function(e) {
            var n = (i.defer(),
            this.getDefaulTab(e))
              , a = "selected";
            e.routerParams.party && (a = e.routerParams.party.party_id,
            this._fromQuest = !0,
            t.createInstance("apiAParties").changeDeck(a)),
            e.seekWidgetByName("btn_back_quest").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL);
            var s = this._loadPartyData(e, !1, n, a)
              , o = t.createInstance("apiASubTutorialPages");
            return o.get("party").then(function(n) {
                return s.then(function() {
                    if (0 == n.body.visited) {
                        var i = e.popups.popupSubTutorial;
                        i.setTypeAndOpen("party", "subtutorial");
                        var a = t.createInstance("apiASubTutorialPages");
                        a.visited("party")
                    }
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        tabCallbackTab0: function(e) {
            e.routerParams.tab = "members"
        },
        tabCallbackTab1: function(e) {
            this._activeWeaponTab(),
            e.routerParams.tab = "weapon"
        },
        tabCallbackTab2: function(e) {
            e.routerParams.tab = "summon"
        },
        btnCallbackPar001PartyChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showPopupPartyChange(e),
            t.promise
        },
        btnCallbackBtnPartySwitch: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this.__showPopupPartyChange(e),
            t.promise
        },
        btnCallbackBtnBackQuest: function(e) {
            return this._navigateBackToQuest(e),
            i.reject(this._override)
        },
        btnCallbackBtnBonus: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this.__showPopupPBonus(e),
            t.promise
        },
        btnCallbackBtnMembarAdvice: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showPopupP001Autoorg(e),
            t.promise
        },
        btnCallbackPar001UiBtnDetail: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this.__gotoPar006A(),
            t.promise
        },
        btnCallbackBtnSkill: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            t.promise
        },
        btnCallbackJobTouchPanel: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this.__gotoPar004A(),
            t.promise
        },
        btnCallbackBtnWeaponAdvice: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showPopupP002Autoorg(e),
            t.promise
        },
        btnCallbackBtnMainWeaponBlank: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            t.promise
        },
        btnCallbackPartymainWeapon: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubWeaponBlank0BtnSubWeaponBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubWeaponBlank1BtnSubWeaponBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubWeaponBlank2BtnSubWeaponBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubWeaponBlank3BtnSubWeaponBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubWeaponBlank4BtnSubWeaponBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubWeaponBlank5BtnSubWeaponBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubWeaponBlank6BtnSubWeaponBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubWeaponBlank7BtnSubWeaponBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubWeaponBlank8BtnSubWeaponBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnSummonAdvice: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showPopupP003Autoorg(e),
            t.promise
        },
        btnCallbackBtnMainSummonBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackPartymainSummon: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubSummonBlank0BtnSubSummonBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubSummonBlank1BtnSubSummonBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubSummonBlank2BtnSubSummonBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubSummonBlank3BtnSubSummonBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSubSummonBlank4BtnSubSummonBlank: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        getDefaulTab: function(e) {
            var t;
            return e.routerParams = e.routerParams || {},
            "members" === e.routerParams.tab ? t = "tab_0" : "weapons" === e.routerParams.tab ? t = "tab_1" : "summons" === e.routerParams.tab ? t = "tab_2" : e.restoreParams || (t = "tab_0"),
            delete e.routerParams.tab,
            t
        },
        _loadPartyData: function(e, n, i, a) {
            return t.createInstance("apiAParties").getDeck(a).then(function(t) {
                if (this._deck = t.body.deck,
                this._a_party_id = t.body.a_party_id,
                e.seekWidgetByName("header_sub_label").setString(this._deck.name || "名称未設定"),
                this._setupMemberTab(e, this._deck),
                this._setupWeaponTab(e, this._deck),
                this._setupSummonTab(e, this._deck),
                this._deck.in_use ? this._popupPartyInUse || this._showPopupP001Doing(e) : (this._popupPartyInUse && this._popupPartyInUse.dismiss(),
                this._popupPartyInUse = null ),
                n === !1) {
                    !this._fromQuest;
                    this._fromQuest === !0 && this._prepareQuestBackButton(e),
                    this._comeFromPar010(e, this._deck),
                    this._comeFromPar014(e, this._deck),
                    this._comeFromPar017(e, this._deck),
                    e.restoreParams || e.tabDelegateList[0].selectTab(e.seekWidgetByName(i))
                }
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    n.assign(t.pc.party.par_001_002_003.SceneDelegate.prototype, t.pc.party.roles.Routing)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    i.assign(t.pc.party.par_001_002_003.SceneDelegate.prototype, {
        _prepareQuestBackButton: function(e) {
            var t = e.seekWidgetByName("btn_back_quest");
            t.setVisible(!0)
        },
        _showPopupP001Doing: function(e) {
            e.popups.popupPartyInUse.open(),
            this._popupPartyInUse = e.popups.popupPartyInUse
        },
        _comeFromPar010: function(e, n) {
            var a = e.temporaryRouterParams.par_001;
            if (!i.isEmpty(a) && !i.isUndefined(a.number) && !i.isUndefined(a.id)) {
                var s = e.popups.popupCharChange;
                s.open({
                    character: n.characters[a.number]
                }),
                t.createInstance("router").removeCurrentTemporaryParamsFromHistory()
            }
        },
        _comeFromPar014: function(e, n) {
            var a = e.temporaryRouterParams.par_002;
            if (!i.isEmpty(a) && !i.isUndefined(a.newnumber)) {
                var s = n.weapons[a.newnumber]
                  , o = e.popups.popupWeaponSummonChange;
                o.setTitle(t.w("weapon") + "装備"),
                o.open().then(function() {
                    var i = t.createInstance("CoreCardWeaponUI", ["e_r"]);
                    i.setImg(s.weapon_id, s.skin),
                    i.setIconElement(s.element_type),
                    i.setIconRarity(s.rare);
                    var a = i.getResult();
                    o.seekWidgetByName("core_img").addChild(a),
                    o.seekWidgetByName("core_img").setVisible(!0),
                    o.seekWidgetByName("equipment_label").setString(s.name + "を装備しました");
                    var r = e.routerParams.par_before.before_hp
                      , c = e.routerParams.par_before.before_attack
                      , u = n.total_weapon_hp - r
                      , _ = n.total_weapon_attack - c;
                    o.setHtmlStrings({
                        hp_calc_labelimg: "<span class='white'>" + r + "→</span><span class='gray'>" + n.total_weapon_hp + "(" + (u > 0 ? "+" : "") + u + ")</span>",
                        attack_calc_labelimg: "<span class='white'>" + c + "→</span><span class='gray'>" + n.total_weapon_attack + "(" + (_ > 0 ? "+" : "") + _ + ")</span>"
                    }, t.GameConfig.POPUP_CSS),
                    t.createInstance("router").removeCurrentTemporaryParamsFromHistory()
                }
                .bind(this))
            }
        },
        _comeFromPar017: function(e, n) {
            var a = e.temporaryRouterParams.par_003;
            if (!i.isEmpty(a) && !i.isUndefined(a.newnumber)) {
                var s = n.summons[a.newnumber]
                  , o = e.popups.popupWeaponSummonChange;
                o.setTitle("幻獣装備"),
                o.open().then(function() {
                    var i = t.createInstance("CoreCardSummonUI");
                    i.setImg(s.summon_id, s.skin),
                    i.setIconElement(s.element_type),
                    i.setIconRarity(s.rare);
                    var a = i.getResult();
                    o.seekWidgetByName("core_img").addChild(a),
                    o.seekWidgetByName("core_img").setVisible(!0),
                    o.seekWidgetByName("equipment_label").setString(s.name + "を装備しました");
                    var r = e.routerParams.par_before.before_hp
                      , c = e.routerParams.par_before.before_attack
                      , u = n.total_summon_hp - r
                      , _ = n.total_summon_attack - c;
                    o.setHtmlStrings({
                        hp_calc_labelimg: "<span class='white'>" + r + "→</span><span class='gray'>" + n.total_summon_hp + "(" + (u > 0 ? "+" : "") + u + ")</span>",
                        attack_calc_labelimg: "<span class='white'>" + c + "→</span><span class='gray'>" + n.total_summon_attack + "(" + (_ > 0 ? "+" : "") + _ + ")</span>"
                    }, t.GameConfig.POPUP_CSS),
                    t.createInstance("router").removeCurrentTemporaryParamsFromHistory()
                }
                .bind(this))
            }
        },
        _showPopupPartyChange: function(e) {
            t.createInstance("apiAParties").getDecks().then(function(e) {
                console.log(e);
                var t = n.director.getRunningScene()
                  , i = t.popups.popupPartyChange;
                i.open({
                    decks: e.body.decks,
                    seldeck: this._a_party_id
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e)
            })
        },
        _changeParty: function(e, n) {
            this._loadPartyData(e, !0, null , n),
            t.createInstance("apiAParties").changeDeck(n)
        },
        _showPopupP001Autoorg: function(e) {
            var t = "popupAutoOrgAll"
              , n = e.popups.popupPartyAutoOrg;
            n.open({
                autoOrgButtonHandler: this._showPopupAutoOrgDescription(n, e.popups.popupWhatIsAutoOrg),
                doneEventName: t
            }),
            this._setAutoorgAddEventListener(t)
        },
        _setAutoorgAddEventListener: function(e) {
            var n = t.createInstance("notificationCenter").addEventListener(e, function(e, i) {
                this._selectPartyAutoOrg(e, i),
                t.createInstance("notificationCenter").removeEventListener(n)
            }, this)
        },
        _selectPartyAutoOrg: function(e, i) {
            "character" === e && (e += i.seekWidgetByName("btn_with_weapon").bright ? "" : "|weapon",
            e += i.seekWidgetByName("btn_with_summon").bright ? "" : "|summon");
            var a = this._findElementSelector(i);
            console.log(e, a),
            t.createInstance("apiAParties").makeRecommendedDeck(this._a_party_id, e, a).then(function(t) {
                var a = n.director.getRunningScene()
                  , s = t.body.deck;
                e.indexOf("character") >= 0 ? (this._showPopupAutoorgResult("おまかせ編成完了", "おまかせ編成完了しました", this._deck.job.hp, this._deck.job.attack, s.job.hp, s.job.attack),
                this._setupMemberTab(a, s),
                this._setupWeaponTab(a, s),
                this._setupSummonTab(a, s)) : "weapon" === e ? (this._showPopupAutoorgResult("おまかせ編成完了", "おまかせ編成完了しました", this._deck.total_weapon_hp, this._deck.total_weapon_attack, s.total_weapon_hp, s.total_weapon_attack),
                this._setupWeaponTab(a, s),
                this._setupMemberTab(a, s)) : "summon" === e && (this._showPopupAutoorgResult("おまかせ編成完了", "おまかせ編成完了しました", this._deck.total_summon_hp, this._deck.total_summon_attack, s.total_summon_hp, s.total_summon_attack),
                this._setupSummonTab(a, s),
                this._setupMemberTab(a, s)),
                this._deck = s,
                i.dismiss(),
                a.headerDelegate.updateBattlePower()
            }
            .bind(this)).fail(function(e) {
                console.error(e)
            })
        },
        _findElementSelector: function(e) {
            var t = 0
              , n = {
                0: 0,
                1: 1,
                2: 2,
                3: 3,
                4: 5,
                5: 4
            };
            return i.each(i.range(6), function(i) {
                !1 === e.seekWidgetByName("btn_set_element_" + i).bright && (t = n[i])
            }, this),
            t
        },
        _showPopupAutoOrgDescription: function(e, n) {
            return function() {
                t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED btn_org_hint": function() {
                        var e = n;
                        e.open().then(function() {
                            e.setTitle("おまかせ編成とは");
                            var n = '<div style="text-align: left;"><br />・おまかせ編成を行うと、選択した属性の攻撃力の高い順で<br />　自動的にパーティが編成されます。<br />・' + t.w("chara") + "," + t.w("weapon") + "," + t.w("summon") + "が属性を重視してそれぞれ選ばれます。<br /><br />・メイン" + t.w("weapon") + "は、英霊の得意" + t.w("weapon") + "と同じ種類の<br />　" + t.w("weapon") + "のみが装備されます。</div>";
                            e.setContent(n),
                            e.seekWidgetByName("popup_base").height = 354,
                            e.seekWidgetByName("title_label").y = 280,
                            e.seekWidgetByName("popup_labelimg").y = 214
                        }).fail(function(e) {
                            console.error(e)
                        })
                    }
                })
            }
        },
        _showPopupP002Autoorg: function(e) {
            var t = "popupAutoOrgWeapon"
              , n = e.popups.popupWeaponSummonAutoOrg;
            n.open({
                target: "weapon",
                autoOrgButtonHandler: this._showPopupAutoOrgDescription(n, e.popups.popupWhatIsAutoOrg),
                doneEventName: t
            }),
            this._setAutoorgAddEventListener(t)
        },
        _showPopupP003Autoorg: function(e) {
            var t = "popupAutoOrgSummon"
              , n = e.popups.popupWeaponSummonAutoOrg;
            n.open({
                target: "summon",
                autoOrgButtonHandler: this._showPopupAutoOrgDescription(n, e.popups.popupWhatIsAutoOrg),
                doneEventName: t
            }),
            this._setAutoorgAddEventListener(t)
        },
        _showPopupAutoorgResult: function(e, i, a, s, o, r) {
            var c = n.director.getRunningScene()
              , u = c.popups.popupAutoOrgResult;
            u.open().then(function() {
                u.seekWidgetByName("title_label").setString(e),
                u.seekWidgetByName("orgend_label").setString(i),
                u.setHtmlStrings({
                    hp_calc_labelimg: "<span class='white'>" + a + "→</span><span class='gray'>" + o + "(" + (o - a) + ")</span>",
                    attack_calc_labelimg: "<span class='white'>" + s + "→</span><span class='gray'>" + r + "(" + (r - s) + ")</span>"
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this)).fail(function(e) {
                console.error(e)
            })
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    i.assign(t.pc.party.par_001_002_003.SceneDelegate.prototype, {
        _setCardStrings: function(e, t) {
            i.isUndefined(t.name) || null === e.seekWidgetByName("name_label") || e.setStrings({
                name_label: t.name
            }),
            i.isUndefined(t.attack) || null === e.seekWidgetByName("attack_no") || e.setStrings({
                attack_no: t.attack
            }),
            i.isUndefined(t.hp) || null === e.seekWidgetByName("hp_no") || e.setStrings({
                hp_no: t.hp
            }),
            i.isUndefined(t.level) || null === e.seekWidgetByName("level_label") || e.setStrings({
                level_label: "Lv " + t.level
            });
            var n = e.seekWidgetByName("plus_no");
            if (!i.isUndefined(t.bonus) && null !== n) {
                var a = t.bonus > 0;
                n.setVisible(a),
                n.setString(a ? "+" + t.bonus : "")
            }
        },
        _setForteIcon: function(e, t) {
            return null === e ? void console.error("iconNode is null.") : i.isUndefined(t) ? void console.error("weaponName is undefined.") : void e.loadTexture("core/res/icon/weapontypeicon_" + t + ".png", ccui.Widget.PLIST_TEXTURE)
        },
        _setupMemberTab: function(e, n) {
            var a = n.job
              , s = e.seekWidgetByName("par_001_ui")
              , o = s.seekWidgetByName("partymain_job");
            o.loadTexture(t.Img("partymain", "job", i.padZero(a.job_id, 4), 0).jpg),
            this._setCardStrings(o, a),
            this._setSkillButton(o, n.job.skill_info);
            var r = e.seekWidgetByName("par_001_membar_page")
              , c = this._makeMainMemberNode(n.characters.slice(0, 4))
              , u = this._makeSubMemberNode(n.characters.slice(4, 6))
              , _ = new t.PageView;
            _.initialize([c, u]),
            r.removeAllChildren(),
            r.addChild(_),
            this._showMainView = !0,
            e.seekWidgetByName("btn_party_switch").addTouchEventListener(function(e, t) {
                t === ccui.Widget.TOUCH_ENDED && (this._showMainView ? _.gotoNextPage() : _.gotoPreviousPage(),
                this._showMainView = !this._showMainView)
            }, this)
        },
        _makeMainMemberNode: function(e) {
            var n = ccs.load(res["party-par_001-par_001_main_member_ui"]).node
              , a = i.map(i.range(0, e.length), function(e) {
                var t = n.seekWidgetByName("main_member_blank_" + e);
                return t.seekWidgetByName("par_001_chara_card_ui")
            });
            $staticRes(res["party-par_001-par_001_chara_card_ui"]);
            var s = t.createInstance("ListManager", [a, "party-par_001-par_001_chara_card_ui", this._memberRecordWidgetInit.bind(this)]);
            return s.setRecords(e),
            i.each(i.range(4), function(e) {
                var i = n.seekWidgetByName("main_member_blank_" + e);
                t.setTouchEventHandlers(i, {
                    "TOUCH_ENDED btn_main_member_blank": function() {
                        t.createInstance("router").navigate("party/par_009", {
                            party_id: this._a_party_id,
                            par_009: {
                                number: e
                            }
                        })
                    }
                    .bind(this)
                }, this)
            }, this),
            n
        },
        _makeSubMemberNode: function(e) {
            var n = ccs.load(res["party-par_001-par_001_sub_member_ui"]).node
              , a = i.map(i.range(0, e.length), function(e) {
                var t = n.seekWidgetByName("sub_member_blank_" + e);
                return t.seekWidgetByName("par_001_chara_card_ui")
            });
            $staticRes(res["party-par_001-par_001_chara_card_ui"]);
            var s = t.createInstance("ListManager", [a, "party-par_001-par_001_chara_card_ui", this._subMemberRecordWidgetInit.bind(this)]);
            return s.setRecords(e),
            i.each(i.range(t.GameConfig.PARTY_SETTINGS.MAX_SUB_COUNT), function(e) {
                var i = n.seekWidgetByName("sub_member_blank_" + e);
                t.setTouchEventHandlers(i, {
                    "TOUCH_ENDED btn_sub_member_blank": function() {
                        t.createInstance("router").navigate("party/par_009", {
                            party_id: this._a_party_id,
                            par_009: {
                                number: t.GameConfig.PARTY_SETTINGS.MAX_CHARACTER_COUNT + e
                            }
                        })
                    }
                    .bind(this)
                }, this)
            }, this),
            n
        },
        _subMemberRecordWidgetInit: function(e, n, i) {
            this._memberRecordWidgetInit(e, n, t.GameConfig.PARTY_SETTINGS.MAX_CHARACTER_COUNT + i)
        },
        _memberRecordWidgetInit: function(e, n, a) {
            return console.log("_memberRecordWidgetInit", n),
            i.isUndefined(n.name) ? void e.setVisible(!1) : (this._setCardStrings(e, n),
            t.setTouchEventHandlers(e, {
                "TOUCH_ENDED touch_panel": function() {
                    t.createInstance("router").navigate("party/par_011", {
                        party_id: this._a_party_id,
                        par_011: {
                            number: a,
                            id: n.a_character_id
                        }
                    })
                }
                .bind(this)
            }, this),
            this._setSkillButton(e, n.skill_info),
            e.loadTextures({
                partysub_chara: t.Img("partysub", "chara", i.padZero(n.character_id, 4), n.skin).jpg
            }),
            void (n.max_overlimit_count >= 3 && n.max_overlimit_count <= 5 && this._setStarGauge(e, n)))
        },
        _setStarGauge: function(e, n) {
            var i = t.createInstance("starGauge");
            i.init(e, {
                isAroused: n.is_aroused,
                blank: n.max_overlimit_count,
                gauge: n.overlimit_count
            })
        },
        _setSkillButton: function(e, n) {
            if (!i.isUndefined(n)) {
                var a = (e.seekWidgetByName("btn_skill"),
                e.seekWidgetByName("skill_label"));
                a.setString("スキル" + n.length),
                0 === n.length ? t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED btn_skill": this.__showPopupNoPSkillInfo.bind(this, n)
                }, this) : t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED btn_skill": this.__showPopupPSkillInfo.bind(this, n)
                }, this)
            }
        },
        __showPopupPBonus: function(e) {
            var t = e.popups.popupConfirmBonus;
            t.open({
                bonus: this._deck.bonus_info
            })
        },
        __gotoPar004A: function() {
            t.createInstance("router").navigate("party/par_004", {
                party_id: this._a_party_id,
                par_004: {
                    id: this._deck.job.a_job_id
                }
            })
        },
        __gotoPar006A: function() {
            t.createInstance("router").navigate("party/par_006", {
                party_id: this._a_party_id,
                par_006_007: {
                    id: this._deck.job.a_job_id
                }
            })
        },
        __showPopupPSkillInfo: function(e) {
            var t = n.director.getRunningScene()
              , a = t.popups.popupConfirmSkillInfo
              , s = ""
              , o = i.map(e, function(e) {
                return e.description
            })
              , r = i.groupBy(o, function(e) {
                return e
            });
            i.each(r, function(e, t) {
                s += "<li>" + t + (e.length > 1 ? " x " + e.length : "") + "</li>"
            }),
            a.open().then(function() {
                var e = "<ul style='list-style-type: disc'>" + s + "</ul>";
                a.setContent(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        __showPopupNoPSkillInfo: function(e) {
            var t = n.director.getRunningScene()
              , i = t.popups.popupConfirmSkillInfo
              , a = "発動中のスキルはありません";
            i.open().then(function() {
                i.setContent(a)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    i.assign(t.pc.party.par_001_002_003.SceneDelegate.prototype, {
        _setupWeaponTab: function(e, n) {
            var a = e.seekWidgetByName("par_002_ui");
            a.setStrings({
                calc_hp_no: n.total_weapon_hp,
                calc_attack_no: n.total_weapon_attack
            });
            var s = (n.weapons,
            n.weapons[0] || {})
              , o = n.weapons.slice(1)
              , r = a.seekWidgetByName("partymain_weapon");
            if (i.isUndefined(s.weapon_id))
                r.setVisible(!1),
                t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED btn_main_weapon_blank": function() {
                        t.createInstance("router").navigate("party/par_013", {
                            party_id: this._a_party_id,
                            par_013: {
                                number: 0
                            }
                        })
                    }
                }, this);
            else {
                r.setVisible(!0);
                var c = t.Img("partymain", "weapon", i.padZero(n.weapons[0].weapon_id, 4), 0).jpg;
                a.seekWidgetByName("partymain_weapon").loadTextures(c, c, c),
                this._setCardStrings(r, s),
                r.addTouchEventListener(function(e, n) {
                    console.log(n),
                    n === ccui.Widget.TOUCH_ENDED && t.createInstance("router").navigate("party/par_012", {
                        party_id: this._a_party_id,
                        par_012: {
                            id: s.a_weapon_id,
                            number: 0
                        }
                    })
                }, this)
            }
            i.each(o, function(e, n) {
                if (!(n >= 9)) {
                    var s = a.seekWidgetByName("sub_weapon_blank_" + n)
                      , o = s.seekWidgetByName("par_002_sub_weapon_ui");
                    return o.removeAllChildren(),
                    i.isUndefined(e.weapon_id) ? void t.setTouchEventHandlers(s, {
                        "TOUCH_ENDED btn_sub_weapon_blank": function() {
                            t.createInstance("router").navigate("party/par_013", {
                                party_id: this._a_party_id,
                                par_013: {
                                    number: n + 1
                                }
                            })
                        }
                    }, this) : void this._makeSubWeaponNode(o, e, n)
                }
            }, this)
        },
        _makeSubWeaponNode: function(e, n, a) {
            var s;
            0 === e.getChildren().length ? (s = ccs.load(res["party-par_002-par_002_sub_weapon_ui"]).node,
            e.addChild(s)) : s = e.getChildren()[0];
            var o = t.Img("partysub", "weapon", i.padZero(n.weapon_id, 4), 0).jpg
              , r = s.seekWidgetByName("partysub_weapon");
            r.loadTextures(o, o, o),
            t.setTouchEventHandlers(r, {
                "TOUCH_ENDED partysub_weapon": function() {
                    t.createInstance("router").navigate("party/par_012", {
                        party_id: this._a_party_id,
                        par_012: {
                            id: n.a_weapon_id,
                            number: a + 1
                        }
                    })
                }
            }, this),
            this._setCardStrings(e, n)
        },
        _activeWeaponTab: function() {
            var e = this._deck.weapons[0] || {};
            i.isUndefined(e.weapon_id) && t.createInstance("apiAJobs").get(this._deck.job.a_job_id).then(function(e) {
                var t = e.body
                  , a = n.director.getRunningScene().popups.popupWeaponMain;
                a.open().then(function() {
                    i.each(t.familiar_weapon_types, function(e, t) {
                        this._setForteIcon(a.seekWidgetByName("forte_icon_" + t), e)
                    }, this)
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    n.assign(t.pc.party.par_001_002_003.SceneDelegate.prototype, {
        _setupSummonTab: function(e, i) {
            var a = e.seekWidgetByName("par_003_ui");
            a.setStrings({
                calc_hp_no: i.total_summon_hp,
                calc_attack_no: i.total_summon_attack
            });
            var s = (i.summons,
            i.summons[0] || {})
              , o = i.summons.slice(1);
            if (!n.isUndefined(s.summon_id)) {
                var r = a.seekWidgetByName("partymain_summon")
                  , c = t.Img("partymain", "summon", n.padZero(s.summon_id, 4), s.skin).jpg;
                r.setVisible(!0),
                r.loadTextures(c, c, c),
                this._setCardStrings(r, s),
                r.addTouchEventListener(function(e, n) {
                    console.log(n),
                    n === ccui.Widget.TOUCH_ENDED && t.createInstance("router").navigate("party/par_016", {
                        party_id: this._a_party_id,
                        par_016: {
                            id: s.a_summon_id,
                            number: 0
                        }
                    })
                }, this)
            }
            n.each(o, function(e, i) {
                if (!(i >= 5)) {
                    var s = a.seekWidgetByName("sub_summon_blank_" + i)
                      , o = s.seekWidgetByName("par_003_sub_summon_ui");
                    return o.removeAllChildren(),
                    n.isUndefined(e.summon_id) ? void t.setTouchEventHandlers(s, {
                        "TOUCH_ENDED btn_sub_summon_blank": function() {
                            t.createInstance("router").navigate("party/par_015", {
                                party_id: this._a_party_id,
                                par_015: {
                                    number: i + 1
                                }
                            })
                        }
                    }, this) : void this._makeSubSummonNode(o, e, i)
                }
            }, this)
        },
        _makeSubSummonNode: function(e, i, a) {
            var s;
            0 === e.getChildren().length ? (s = ccs.load(res["party-par_003-par_003_sub_summon_ui"]).node,
            e.addChild(s)) : s = e.getChildren()[0];
            var o = t.Img("partysub", "summon", n.padZero(i.summon_id, 4), i.skin).jpg
              , r = s.seekWidgetByName("partysub_summon");
            r.loadTextures(o, o, o),
            t.setTouchEventHandlers(r, {
                "TOUCH_ENDED partysub_summon": function() {
                    t.createInstance("router").navigate("party/par_016", {
                        party_id: this._a_party_id,
                        par_016: {
                            id: i.a_summon_id,
                            number: a + 1
                        }
                    })
                }
            }, this),
            this._setCardStrings(e, i)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.party = t.pc.party || {},
    t.pc.party.par_004 = t.pc.party.par_004 || {},
    t.pc.party.par_004.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_004/par_004.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_004/par_004.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_job_status_1_ui");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_job_status_1_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_statuslist_list_7_ui");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_job_status_1_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par004Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_004"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示する}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnHint"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_hint", function() {
                alert("{{com_tutoriaを表示。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnJobChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_job-change", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_006_a")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnOrangeL"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_orange_l", function() {
                alert("{{現在取得しているEXアビリティが１つもない場合　p_ability_noneを表示 それ以外の場合　par_005へ遷移。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBlueL"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_blue_l", function() {
                alert("{{習得可能ボーナスポップアップを表示。}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_004 = t.pc.party.par_004 || {},
    t.pc.party.par_004.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            this._verifyRouterParams004(e),
            this._setRouterParams004(e).then(function() {
                this._loadJob(e.routerParams.par_004.id, e.routerParams.party_id)
            }
            .bind(this)).then(function() {
                e.tabDelegateList[0].selectTab(e.seekWidgetByName("tab_0"))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setRouterParams004: function(e) {
            return n.isUndefined(e.routerParams.party_id) || n.isUndefined(e.routerParams.par_004) ? t.createInstance("apiAParties").getSelectedDeck().then(function(t) {
                e.routerParams.party_id = t.body.a_party_id,
                e.routerParams.par_004 = {},
                e.routerParams.par_004.id = t.body.deck.job.a_job_id
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }) : i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnHint: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            e.popups.popupSubTutorial.setTypeAndOpen("job", "subtutorial"),
            t.promise
        },
        btnCallbackBtnJobChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate004To006(e, this._job),
            t.promise
        },
        btnCallbackBtnOrangeL: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showSetupExtraAbility(),
            t.promise
        },
        btnCallbackBtnBlueL: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showPopupBonus(),
            t.promise
        }
    }),
    n.assign(t.pc.party.par_004.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.party.roles.Routing, t.pc.scene.roles.SceneJobCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.party = t.pc.party || {},
    t.pc.party.par_005 = t.pc.party.par_005 || {},
    t.pc.party.par_005.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_005/par_005.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_005/par_005.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par005Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_005"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_005 = t.pc.party.par_005 || {},
    t.pc.party.par_005.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupAbilityChange: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-p_ability_puton_off",
                title: "EXアビリティ設定",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        e._delegate.setSelectedExAbility(e),
                        this.dismiss()
                    }
                }
            },
            popupAbilityRemove: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-p_ability_puton_off",
                title: "EXアビリティ解除",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    redBtn: "解除する"
                },
                buttonSounds: {
                    redBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    redBtn: function(e) {
                        e._delegate.removeExAbility(e),
                        this.dismiss()
                    }
                }
            }
        },
        onSceneInit: function(e) {
            this._verifyRouterParams005(e);
            var t = this._fillupExAbilityList(e, "btnCallbackExAbilityPanel").then(function(e, t) {
                console.log(t),
                console.log(e),
                this._setExAbility(t),
                this._updateRemoveExAbilityBtn(e)
            }
            .bind(this, e)).fail(function(e) {
                console.error(e.stack)
            });
            return t
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        setSelectedExAbility: function(e) {
            var n = t.createInstance("apiAParties");
            n.setExAbility(e.routerParams.party_id, this._selectedExAbilityId).then(function(n) {
                t.createInstance("router").navigate("party/par_004", {
                    party_id: e.routerParams.party_id
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        removeExAbility: function(e) {
            var n = t.createInstance("apiAParties");
            n.setExAbility(e.routerParams.party_id, null ).then(function(n) {
                t.createInstance("router").navigate("party/par_004", {
                    party_id: e.routerParams.party_id
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setExAbility: function(e) {
            this._exAbility = i.find(e.data, function(e) {
                return e.is_set
            })
        },
        _updateRemoveExAbilityBtn: function(e) {
            var n = e.seekWidgetByName("btn_ex_ability_remove");
            if (n.setVisible(!0),
            null == this._exAbility)
                return void this._setEnableButton(n, !1);
            this._setEnableButton(n, !0),
            n.setSound(t.SoundList.BUTTON_TOUCHED_SWITCH);
            var i = {
                "TOUCH_ENDED btn_ex_ability_remove": this._openAbilityRemovePopup.bind(this, e)
            };
            t.setTouchEventHandlers(e, i, this)
        },
        btnCallbackExAbilityPanel: function(e, t) {
            this._selectedExAbilityId = t.ability_id;
            var i = n.director.getRunningScene()
              , a = i.popups.popupAbilityChange;
            a.open().then(function() {
                a.seekWidgetByName("set_confirm_label").setVisible(!0),
                a.seekWidgetByName("remove_confirm_label").setVisible(!1),
                this._fillAbilityPopup(a, t)
            }
            .bind(this))
        },
        _openAbilityRemovePopup: function(e) {
            var n = e.popups.popupAbilityRemove;
            n.open().then(function() {
                n.seekWidgetByName("set_confirm_label").setVisible(!1),
                n.seekWidgetByName("remove_confirm_label").setVisible(!0),
                n.seekWidgetByName("remove_confirm_label").width = 420,
                this._fillAbilityPopup(n, this._exAbility),
                n.setHtmlStrings({
                    remove_confirm_label: "以下のEXアビリティ設定を<span class='red'>解除</span>します。"
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this))
        },
        _fillAbilityPopup: function(e, t) {
            e.loadTextures({
                ability_img: this._getAbilityIconImg(t)
            });
            var n = this._getAbilityDuration(t);
            e.setStrings({
                ability_name_label: t.name,
                ability_description_label: t.description,
                interval_label: this._getAbilityInterval(t),
                duration_label: n
            }),
            e.seekWidgetByName("duration_base").setVisible("" != n)
        }
    }),
    i.assign(t.pc.party.par_005.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.party.roles.Routing, t.pc.party.roles.ExAbilityPageListController, t.pc.status.roles.AbilityCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.party = t.pc.party || {},
    t.pc.party.par_006_007 = t.pc.party.par_006_007 || {},
    t.pc.party.par_006_007.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_006_7/par_006_7.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_006_7/par_006_7.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("par_006_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("par_006_node").setVisible(!1),
                e.seekWidgetByPath("par_007_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("par_007_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("par_006_node").setVisible(!1),
                e.seekWidgetByPath("par_007_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },""), new t.TabDelegate({
            btn_basic: function() {
                var e = 0 < "par_006_node".length ? this.seekWidgetByPath("par_006_node") : this;
                if (!e)
                    return void alert("tab.tab3のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("par_006_a_node");
                if (!t)
                    return void alert("tab.tab3のcontent-nodeが見つかりません");
                e.seekWidgetByPath("par_006_a_node").setVisible(!1),
                e.seekWidgetByPath("par_006_b_node").setVisible(!1),
                e.seekWidgetByPath("par_006_c_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnBasicPar006Node";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            btn_high: function() {
                var e = 0 < "par_006_node".length ? this.seekWidgetByPath("par_006_node") : this;
                if (!e)
                    return void alert("tab.tab4のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("par_006_b_node");
                if (!t)
                    return void alert("tab.tab4のcontent-nodeが見つかりません");
                e.seekWidgetByPath("par_006_a_node").setVisible(!1),
                e.seekWidgetByPath("par_006_b_node").setVisible(!1),
                e.seekWidgetByPath("par_006_c_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnHighPar006Node";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            btn_highest: function() {
                var e = 0 < "par_006_node".length ? this.seekWidgetByPath("par_006_node") : this;
                if (!e)
                    return void alert("tab.tab5のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("par_006_c_node");
                if (!t)
                    return void alert("tab.tab5のcontent-nodeが見つかりません");
                e.seekWidgetByPath("par_006_a_node").setVisible(!1),
                e.seekWidgetByPath("par_006_b_node").setVisible(!1),
                e.seekWidgetByPath("par_006_c_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnHighestPar006Node";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"par_006_node"), new t.TabDelegate({
            btn_basic: function() {
                var e = 0 < "par_007_node".length ? this.seekWidgetByPath("par_007_node") : this;
                if (!e)
                    return void alert("tab.tab6のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("par_007_a_node");
                if (!t)
                    return void alert("tab.tab6のcontent-nodeが見つかりません");
                e.seekWidgetByPath("par_007_a_node").setVisible(!1),
                e.seekWidgetByPath("par_007_b_node").setVisible(!1),
                e.seekWidgetByPath("par_007_c_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnBasicPar007Node";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            btn_high: function() {
                var e = 0 < "par_007_node".length ? this.seekWidgetByPath("par_007_node") : this;
                if (!e)
                    return void alert("tab.tab7のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("par_007_b_node");
                if (!t)
                    return void alert("tab.tab7のcontent-nodeが見つかりません");
                e.seekWidgetByPath("par_007_a_node").setVisible(!1),
                e.seekWidgetByPath("par_007_b_node").setVisible(!1),
                e.seekWidgetByPath("par_007_c_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnHighPar007Node";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            btn_highest: function() {
                var e = 0 < "par_007_node".length ? this.seekWidgetByPath("par_007_node") : this;
                if (!e)
                    return void alert("tab.tab8のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("par_007_c_node");
                if (!t)
                    return void alert("tab.tab8のcontent-nodeが見つかりません");
                e.seekWidgetByPath("par_007_a_node").setVisible(!1),
                e.seekWidgetByPath("par_007_b_node").setVisible(!1),
                e.seekWidgetByPath("par_007_c_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnHighestPar007Node";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"par_007_node")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par006007Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_006_007"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_006_007 = t.pc.party.par_006_007 || {},
    $staticRes(res["party-jobchange_ani-jobchange_ani"]),
    t.pc.party.par_006_007.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupCurrentJob: {
                factoryName: "popupFactoryBlue",
                title: "英霊変更確認",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupJobChange: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-p_job_change",
                title: "英霊チェンジ",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    buttonSounds: {
                        blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                    },
                    blueBtn: function(e) {
                        e._delegate._changeJob(e),
                        this.dismiss()
                    }
                }
            },
            popupAbility: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-p_ability_assist_info",
                title: "アビリティ詳細",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupAbilityRemove: {
                factoryName: "popupFactoryBlue",
                title: "ＥＸアビリティ削除確認",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss(),
                        e._delegate._confirmGotoPar002(e)
                    }
                }
            },
            popupWeaponSet: {
                factoryName: "popupFactoryBlackBlue",
                title: "編成確認",
                buttonLabels: {
                    blueBtn: "OK",
                    blackBtn: "キャンセル"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss(),
                        t.createInstance("router").navigate("party/par_002", {
                            tab: "weapons",
                            party_id: e.routerParams.party_id
                        })
                    },
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupOpenEpisode: {
                factoryName: "popupFactoryComOpenJobEpisode"
            }
        },
        _nodeSetting: {
            par_006_a_node: {
                acquired: !0,
                rank: "basic"
            },
            par_006_b_node: {
                acquired: !0,
                rank: "upper"
            },
            par_006_c_node: {
                acquired: !0,
                rank: "uppermost"
            },
            par_007_a_node: {
                acquired: !1,
                rank: "basic"
            },
            par_007_b_node: {
                acquired: !1,
                rank: "upper"
            },
            par_007_c_node: {
                acquired: !1,
                rank: "uppermost"
            }
        },
        _tabsForScene: {
            par_006_a: {
                tab: "tab_0",
                tab2: "btn_basic"
            },
            par_006_b: {
                tab: "tab_0",
                tab2: "btn_high"
            },
            par_006_c: {
                tab: "tab_0",
                tab2: "btn_highest"
            },
            par_007_a: {
                tab: "tab_1",
                tab2: "btn_basic"
            },
            par_007_b: {
                tab: "tab_1",
                tab2: "btn_high"
            },
            par_007_c: {
                tab: "tab_1",
                tab2: "btn_highest"
            }
        },
        _currentJobId: null ,
        _currentJob: {},
        _comparedJob: {},
        _currentJobWidget: {},
        _comparedJobWidget: {},
        onSceneInit: function(e) {
            this._verifyRouterParams006(e);
            var n = this._setRouterParams006(e).then(function() {
                this._currentJobId = e.routerParams.par_006_007.id;
                var t = i.map(this._nodeSetting, function(t, n) {
                    var i = t.acquired ? "acquiredJobCallback" : "unacquiredJobCallback";
                    return this._fillupJobList(e, i, n, t.acquired, t.rank)
                }, this);
                return a.all(t)
            }
            .bind(this)).then(function() {
                e.restoreParams || this._selectTabsWithParams(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
              , s = t.createInstance("apiAPlayers").getJobPoint("me").then(function(t) {
                this._setJobPoint(t.body),
                this._updateJobPoint(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return a.all([n, s])
        },
        _selectTabsWithParams: function(e) {
            var n = t.createInstance("router").currentScene
              , a = i.isUndefined(this._tabsForScene[n]) ? e.routerParams.par_006_007 : this._tabsForScene[n]
              , s = a.tab || a.tab1 || "tab_0"
              , o = e.seekWidgetByName(s);
            o && e.tabDelegateList[0].selectTab(o);
            var r = parseInt(s.replace("tab_", ""))
              , c = "par_00" + (6 + r) + "_node"
              , u = 1 + r
              , _ = a.tab2 || "btn_basic";
            o = e.seekWidgetByPath(c + ".." + _),
            o && e.tabDelegateList[u].selectTab(o);
            var l = 3 ^ u
              , d = 1 ^ r
              , p = "par_00" + (6 + d) + "_node";
            e.tabDelegateList[l].selectTab(e.seekWidgetByPath(p + "..btn_basic"))
        },
        _setRouterParams006: function(e) {
            return i.isUndefined(e.routerParams.party_id) || i.isUndefined(e.routerParams.par_006_007) || i.isUndefined(e.routerParams.par_006_007.id) ? t.createInstance("apiAParties").getSelectedDeck().then(function(t) {
                e.routerParams.party_id = t.body.a_party_id,
                e.routerParams.par_006_007 = {},
                e.routerParams.par_006_007.id = t.body.deck.job.a_job_id
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }) : a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            var n = (a.defer(),
            e.temporaryRouterParams.par_006_007);
            if (!i.isEmpty(n) && !i.isUndefined(n.released_job)) {
                console.log("harlem_release_label タイポ要修正");
                var s = e.popups.popupOpenEpisode;
                s.open({
                    job: n.released_job
                }),
                t.createInstance("router").removeCurrentTemporaryParamsFromHistory()
            }
            return a.resolve()
        },
        _setJobPoint: function(e) {
            this._jobPoint = e.job_point
        },
        _updateJobPoint: function(e) {
            e.seekWidgetByName("header_sub_label").setString("所持英霊P:" + this._jobPoint)
        },
        acquiredJobCallback: function(e, t) {
            var i = n.director.getRunningScene();
            return this._currentJobId === t.a_job_id ? void this._openPopupJobCurrent(i) : (this._comparedJob = t,
            this._comparedJobWidget = e,
            void this._openPopupJobChange(i, t))
        },
        _changeJob: function(e) {
            t.createInstance("apiAParties").changeJob(e.routerParams.party_id, this._comparedJob.a_job_id).then(function(t) {
                this._playChangeJobAnimation(e, t)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _playChangeJobAnimation: function(a, s) {
            var o = t.createInstance("WindowVisualEffect").init(e.res["party-jobchange_ani-jobchange_ani"])
              , r = o.getNode();
            r.loadTextures({
                after_job_img: t.Img("jobchange-sp", "job", i.padZero(this._currentJob.job_id, 4), 0).png
            }),
            r.loadTextures({
                before_job_img: t.Img("jobchange-sp", "job", i.padZero(this._comparedJob.job_id, 4), 0).png
            }),
            r.seekWidgetByPath("after_panel_02.after_job_img").loadTexture(t.Img("jobchange-sp", "job", i.padZero(this._comparedJob.job_id, 4), 0).png);
            var c = new n.Node;
            c.setName("aniRoot"),
            a.addChild(c);
            var u = t.createInstance("soundPlayer");
            u.init(t.createInstance("playerGameConfig"));
            var _ = t.createInstance("voiceLoader")
              , l = t.IDList.VOICES.JOIN_PARTY
              , d = _.loadJobVoices(this._comparedJob.job_id, l.LOWER, l.UPPER).then(function(e) {
                return e
            });
            t.createInstance("Sound2Event", [o]),
            o.setAnimationNameEndCallback("change_ani", function() {
                d.then(function(e) {
                    u.playVoice(i.sample(e))
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                }),
                o.playByName("touch_ani", c, n.p(0, 0), 100, !0),
                o.removeAnimationEndCallback(),
                r.seekWidgetByName("touch_btn").setVisible(!0),
                t.setTouchEventHandlers(c, {
                    "TOUCH_ENDED touch_btn": function() {
                        c.removeFromParent(),
                        o.cleanUp(),
                        this._afterChange(a, s)
                    }
                }, this)
            }, this),
            o.play(c, n.p(0, 0), 100, !1),
            o.playByName("change_ani", c, n.p(0, 0), 100, !1)
        },
        _afterChange: function(e, n) {
            this._currentJobWidget.seekWidgetByName("current_job_icon").setVisible(!1),
            this._comparedJobWidget.seekWidgetByName("current_job_icon").setVisible(!0),
            this._currentJob = this._comparedJob,
            this._currentJobWidget = this._comparedJobWidget,
            this._currentJobId = this._currentJob.a_job_id;
            var a = t.createInstance("router");
            a.historyReplace(a.getCurrentFragment(), i.extend(e.routerParams, {
                par_006_007: {
                    id: this._currentJob.a_job_id
                }
            })),
            e.routerParams.par_006_007.id = this._currentJob.a_job_id,
            n.body.reset_ex_ability ? e._openMessagePopup({
                title: "EXアビリティ解除",
                content: "アビリティ重複の為、<br />設定中のEXアビリティが解除されました。",
                buttons: [["blueBtn", "OK"]]
            }) : this._confirmGotoPar002(e)
        },
        _confirmGotoPar002: function(e) {
            var n = e.popups.popupWeaponSet;
            n.setContent("編成で" + t.w("weapon") + "を確認しますか？"),
            n.open()
        },
        _openPopupJobCurrent: function(e) {
            var t = e.popups.popupCurrentJob;
            t.setContent("現在の英霊です。"),
            t.open()
        },
        _openPopupJobChange: function(e, n) {
            var a = t.createInstance("apiAJobs");
            a.compare(this._currentJobId, n.a_job_id).then(function(a) {
                var s = e.popups.popupJobChange;
                s.open().then(function() {
                    this._adjustPopupConfirmChangeJob(s);
                    var e = a.body.before_job_info
                      , o = a.body.after_job_info
                      , r = n.skin || 0;
                    s.loadTextures({
                        job_img: t.Img("joblist", "job", i.padZero(n.job_id, 4), r).png
                    }),
                    s.setHtmlStrings({
                        job_name_ability_labelimg: "<div style='margin-top:0px'><span class='yellow'>" + n.name + "</span><span class='red'>のアビリティ</span></div>"
                    }, t.GameConfig.POPUP_CSS),
                    this._setAbilityInfo4JobChange(s, n),
                    i.each({
                        before: e,
                        after: o
                    }, function(e, t) {
                        this._setPopupConfirmChangeJobBeforeAfter(s, e, t)
                    }, this)
                }
                .bind(this))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _adjustPopupConfirmChangeJob: function(e) {
            var t = e.seekWidgetByName("top_pin_node");
            t.removeAllChildren(),
            t.addChild(ccs.load(res["core-popup-p_job_change"]).node),
            console.log(t.children[0].x, t.children[0].width),
            t.children[0].x = t.children[0].width / 2 * -1,
            e.setInnerHeight(t.children[0].height + 100),
            e.seekWidgetByName("main_panel").y = 0
        },
        _setPopupConfirmChangeJobBeforeAfter: function(e, a, s) {
            console.log(a),
            e.seekWidgetByName(s + "_job_name").setString(a.name);
            var o = e.seekWidgetByName(s + "_job_base")
              , r = ccs.load(res["core-popup-p_job_change_bonus_list_ui"]).node;
            i(i.range(0, 2)).map(function(e) {
                return o.seekWidgetByName("forte_weapon_" + e)
            }).invoke("setVisible", !1);
            var c = i.isUndefined(a.familiar_weapon_types) ? a.weapons : a.familiar_weapon_types;
            i.each(c, function(e, t) {
                var n = o.seekWidgetByName("forte_weapon_" + t);
                n.loadTexture("core/res/icon/weapontypeicon_" + e + ".png", ccui.Widget.PLIST_TEXTURE),
                n.setVisible(!0)
            }, this);
            var u = 0;
            i.each(a.level_up_bonus, function(a, c) {
                var _ = r.clone();
                _.loadTextures({
                    bonus_img: t.Img("coreimg", "job-bonusicon", i.padZero(a.type, 4)).png
                }),
                _.setStrings({
                    bonus_label: a.description
                }),
                "after" === s && _.seekWidgetByName("bonus_label").setColor(n.color("#FFDD33"));
                var l = o.seekWidgetByName("top_panel")
                  , d = o.seekWidgetByName("contents_panel");
                d.addChild(_),
                o.height = o.height + _.height,
                l.y = o.height,
                d.y = c * _.height + d.height + 4,
                _.y = -1 * (c * _.height),
                c > u && (e.setInnerHeight(e.getInnerHeight() + _.height),
                u++)
            })
        },
        _setAbilityInfo4JobChange: function(e, a) {
            i(i.range(a.abilities.length + a.assists.length, 5)).map(function(t) {
                return e.seekWidgetByName("btn_status_img_" + t)
            }).invoke("setVisible", !1),
            i(i.range(a.abilities.length, 3)).map(function(t) {
                return e.seekWidgetByName("learn_level_label_" + t)
            }).invoke("setVisible", !1),
            i.each(a.abilities, function(i, s) {
                var o = e.seekWidgetByName("btn_status_img_" + s)
                  , r = this._getAbilityIconImg(i);
                o.loadTextures(r, r, r);
                var c = e.seekWidgetByName("learn_level_label_" + s);
                c.setString("習得 Lv" + i.available_level),
                a.level < i.available_level && o.setColor(n.color("#808080")),
                e.seekWidgetByName("btn_status_img_" + s).addTouchEventListener(function(e, a) {
                    if (a === ccui.Widget.TOUCH_ENDED) {
                        var s = n.director.getRunningScene()
                          , o = s.popups.popupAbility;
                        o.open().then(function() {
                            o.loadTextures({
                                ability_assist_img: t.pc.status.roles.AbilityCommon._getAbilityIconImg(i)
                            }),
                            o.setStrings({
                                ability_assist_name: i.name,
                                ability_assist_description: i.description
                            })
                        }, this)
                    }
                }, this)
            }, this),
            i.each(a.assists, function(i, s) {
                s += a.abilities.length;
                var o = e.seekWidgetByName("btn_status_img_" + s)
                  , r = this._getAssistAbilityIconImg();
                o.loadTextures(r, r, r),
                e.seekWidgetByName("btn_status_img_" + s).addTouchEventListener(function(e, a) {
                    if (a === ccui.Widget.TOUCH_ENDED) {
                        var s = n.director.getRunningScene()
                          , o = s.popups.popupAbility;
                        o.open().then(function() {
                            o.loadTextures({
                                ability_assist_img: t.pc.status.roles.AssistCommon._getAssistAbilityIconImg()
                            }),
                            o.setStrings({
                                ability_assist_name: i.name,
                                ability_assist_description: i.description
                            })
                        }, this)
                    }
                }, this)
            }, this)
        },
        unacquiredJobCallback: function(e, t) {
            var i = n.director.getRunningScene();
            this._navigate007To008(i, t)
        }
    }),
    i.assign(t.pc.party.par_006_007.SceneDelegate.prototype, t.pc.party.roles.Routing, t.pc.party.roles.JobPageListController, t.pc.status.roles.AbilityCommon, t.pc.status.roles.AssistCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        p_job_get: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("p_job_get")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: p_job_get"),
                e || ""
            }(),
            title: "英霊解放確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    alert("{{p_job_get  を閉じ、英霊の取得アニメーションが流れるアニメ終了後、英霊の名前と変更したことを文章で表記その後、com_open_episodeを開く}}")
                }
            }
        }
    };
    t.pc.party = t.pc.party || {},
    t.pc.party.par_008 = t.pc.party.par_008 || {},
    t.pc.party.par_008.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_008/par_008.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_008/par_008.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_job_status_0_ui");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_job_status_0_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_statuslist_list_7_ui");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_job_status_0_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par008Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_008"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示する}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnJobRelease"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_job-release", function(e) {
                this.popups.p_job_get.open(e)
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_008 = t.pc.party.par_008 || {},
    t.pc.party.par_008.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            a.defer();
            this._verifyRouterParams008(e);
            var n = this._loadJob(e.routerParams.par_008.id)
              , i = this._getPlayerJobPoint();
            return a.all([n, i]).spread(function(n, i) {
                return n.body.is_acquired ? (t.createInstance("router").navigate("party/par_007_a"),
                a.resolve()) : (this._player = i,
                e.tabDelegateList[0].selectTab(e.seekWidgetByName("tab_0")),
                this._job = n.body,
                void this._setJobReleaseInfo(e, this._job))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnJobRelease: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._job.need_item ? this._showPopupConfirmGetJobWithNeedItem(this._job.need_item) : this._showPJobGetOrPNeedPoint.bind(this)(),
            t.promise
        },
        _setJobReleaseInfo: function(e, t) {
            var a = t.need_jobs.length
              , s = e.seekWidgetByName("introduce_job_condition_ui");
            if (2 == a) {
                s.removeAllChildrenWithCleanup();
                var o = ccs.load("../core/res/introduce/introduce_job/introduce_job_condition_1_ui.json").node;
                s.addChild(o)
            } else
                0 == a && e.seekWidgetByName("par_condition_base_1").setVisible(!1);
            i.isEmpty(t.need_item) ? this._setJobPoint(e, this._player.job_point, t.release_need_job_point) : this._setSpecialItem(e, t.need_item);
            var r = 0;
            t.need_jobs.forEach(function(t) {
                var n = e.seekWidgetByName("par_condition_base_" + (r + 1));
                n.seekWidgetByName("lv_label").setString("現在：" + (t.is_acquired ? "Lv" + t.level : "未解放")),
                n.seekWidgetByName("job_label").setString("Lv20\n" + t.name),
                r++
            }
            .bind(this)),
            t.is_acquirable ? (e.seekWidgetByName("btn_job-release").setColor(n.color("#FFFFFF")),
            e.seekWidgetByName("btn_job-release").setEnabled(!0)) : (e.seekWidgetByName("btn_job-release").setColor(n.color("#808080")),
            e.seekWidgetByName("btn_job-release").setEnabled(!1))
        },
        _setJobPoint: function(e, t, n) {
            e.setStrings({
                "job-point_label_0": "英霊P ×" + t,
                "job-point_label_1": "英霊P ×" + n
            })
        },
        _getPlayerJobPoint: function() {
            return t.createInstance("apiAPlayers").getJobPoint("me").then(function(e) {
                return e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setSpecialItem: function(e, t) {
            var n = t.name + " ×";
            e.setStrings({
                "job-point_label_0": n + t.have_num,
                "job-point_label_1": n + t.num
            })
        }
    }),
    i.assign(t.pc.party.par_008.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.party.roles.Routing, t.pc.scene.roles.SceneJobCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.party = t.pc.party || {},
    t.pc.party.par_009 = t.pc.party.par_009 || {},
    t.pc.party.par_009.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_009/par_009.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_009/par_009.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par009Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_009"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSort"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_sort", function() {
                alert("{{sort_0_ui.jsonとsort_list_0_ui.jsonを使用}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_009 = t.pc.party.par_009 || {},
    t.pc.party.par_009.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams009(e),
            i.all([this._setCharacterList(e, [e.routerParams.party_id, e.routerParams.par_009.number], "_navigate009To010"), this._setCharacterHeaderLabel()])
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnSort: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            t.promise
        }
    }),
    n.assign(t.pc.party.par_009.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.party.roles.Routing, t.pc.list.roles.ListCharactersCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        p_chara_change: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("p_chara_change")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: p_chara_change"),
                e || ""
            }(),
            title: "キャラ入れ替え",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    alert("{{p_chara_change　を閉じpar_001　へ遷移該当するキャラクターに応じてpar_001のメンバーの表記、画像を差し替え}}")
                }
            }
        }
    };
    t.pc.party = t.pc.party || {},
    t.pc.party.par_010 = t.pc.party.par_010 || {},
    t.pc.party.par_010.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_010/par_010.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_010/par_010.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_chara_status_1_ui");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_chara_status_1_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_statuslist_list_7_ui");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_chara_status_1_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par010Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_010"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示する}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_change", function(e) {
                this.popups.p_chara_change.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_008")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/evo_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnArousal"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_arousal", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/arousal_002")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_010 = t.pc.party.par_010 || {},
    t.pc.party.par_010.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            p_chara_change: {
                factoryName: "popupFactoryComCharChange",
                title: "キャラ入れ替え",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function() {
                        alert("{{p_chara_change を閉じpar_001 へ遷移該当するキャラクターに応じてpar_001のメンバーの表記、画像を差し替え}}")
                    }
                }
            }
        },
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams010(e),
            this._loadACharacter(e.routerParams.par_010.id).then(function(n) {
                e.tabDelegateList[0].selectTab(e.seekWidgetByName("tab_0")),
                e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._move010To001(e),
            t.promise
        },
        btnCallbackBtnEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchEnhButton(),
            t.promise
        },
        btnCallbackBtnEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchEvoButton(),
            t.promise
        },
        btnCallbackBtnArousal: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchArouseButton(),
            t.promise
        }
    }),
    n.assign(t.pc.party.par_010.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.party.roles.Routing, t.pc.scene.roles.SceneCharacterCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.party = t.pc.party || {},
    t.pc.party.par_011 = t.pc.party.par_011 || {},
    t.pc.party.par_011.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_011/par_011.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_011/par_011.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_chara_status_1_ui");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_chara_status_1_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_statuslist_list_7_ui");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_chara_status_1_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par011Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_011"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示する}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnReject"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_reject", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_001")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_change", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_008")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/evo_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnArousal"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_arousal", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/arousal_002")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_011 = t.pc.party.par_011 || {},
    t.pc.party.par_011.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams011(e),
            this._loadACharacter(e.routerParams.par_011.id).then(function(t) {
                e.tabDelegateList[0].selectTab(e.seekWidgetByName("tab_0"))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnReject: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._move011To001(e),
            t.promise
        },
        btnCallbackBtnChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._move011To009(e),
            t.promise
        },
        btnCallbackBtnEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchEnhButton(),
            t.promise
        },
        btnCallbackBtnEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchEvoButton(),
            t.promise
        },
        btnCallbackBtnArousal: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchArouseButton(),
            t.promise
        }
    }),
    n.assign(t.pc.party.par_011.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.party.roles.Routing, t.pc.scene.roles.SceneCharacterCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.party = t.pc.party || {},
    t.pc.party.par_012 = t.pc.party.par_012 || {},
    t.pc.party.par_012.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_012/par_012.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_012/par_012.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par012Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_012"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示する}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnReject"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_reject", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_002")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_change", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_015")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_007")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/evo_007")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnProtect"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_protect", function() {
                alert("{{通常状態の場合com_protect_onを表示保護状態の場合com_protect_offを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_012 = t.pc.party.par_012 || {},
    t.pc.party.par_012.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams012(e),
            this._loadAWeapon(e.routerParams.par_012.id).then(function(e) {}
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnReject: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._move012To002(e),
            t.promise
        },
        btnCallbackBtnChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._move012To013(e),
            t.promise
        },
        btnCallbackBtnEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchEnhButton(),
            t.promise
        },
        btnCallbackBtnEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchEvoButton(),
            t.promise
        },
        btnCallbackBtnProtect: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchProtect(),
            t.promise
        }
    }),
    n.assign(t.pc.party.par_012.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.party.roles.Routing, t.pc.scene.roles.SceneWeaponCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.party = t.pc.party || {},
    t.pc.party.par_013 = t.pc.party.par_013 || {},
    t.pc.party.par_013.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_013/par_013.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_013/par_013.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par013Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_013"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSort"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_sort", function() {
                alert("{{sort_0_ui.jsonとsort_list_0_ui.jsonを使用}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_013 = t.pc.party.par_013 || {},
    t.pc.party.par_013.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams013(e),
            this._setWeaponList(e, [e.routerParams.party_id, e.routerParams.par_013.number], "_navigate013To014").then(function(t) {
                var n = t.maxRecord > 0 ? "list_node" : "nothing_node"
                  , i = e.seekWidgetByName(n);
                return null === i ? void console.warn("[ERROR] Could not find " + n + " label.") : void i.setVisible(!0)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            this._setWeaponHeaderLabel(),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnSort: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            t.promise
        }
    }),
    n.assign(t.pc.party.par_013.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.party.roles.Routing, t.pc.list.roles.ListWeaponsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        p_weapon_change: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("p_weapon_summon_change")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: p_weapon_summon_change"),
                e || ""
            }(),
            title: "ウェポン装備",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss().then(function() {
                        t.createInstance("router").navigate("party/par_002")
                    })
                }
            }
        }
    };
    t.pc.party = t.pc.party || {},
    t.pc.party.par_014 = t.pc.party.par_014 || {},
    t.pc.party.par_014.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_014/par_014.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_014/par_014.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par014Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_014"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示する}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_change", function(e) {
                this.popups.p_weapon_change.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_013")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_007")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/evo_007")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnProtect"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_protect", function() {
                alert("{{通常状態の場合com_protect_onを表示保護状態の場合com_protect_offを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_014 = t.pc.party.par_014 || {},
    t.pc.party.par_014.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            p_weapon_change: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: function() {
                    var e = n.findKey(res, function(e) {
                        return 0 < e.indexOf("p_weapon_summon_change")
                    });
                    return e || alert("該当するポップアップリソースが見つかりませんでした: p_weapon_summon_change"),
                    e || ""
                }(),
                title: "ウェポン装備",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function() {
                        this.dismiss().then(function() {
                            t.createInstance("router").navigate("party/par_002")
                        })
                    }
                }
            }
        },
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams014(e),
            this._loadAWeapon(e.routerParams.par_014.id).then(function(n) {
                e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._move014To002(e),
            t.promise
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchEnhButton(),
            t.promise
        },
        btnCallbackBtnEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchEvoButton(),
            t.promise
        },
        btnCallbackBtnProtect: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchProtect(),
            t.promise
        }
    }),
    n.assign(t.pc.party.par_014.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.party.roles.Routing, t.pc.scene.roles.SceneWeaponCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.party = t.pc.party || {},
    t.pc.party.par_015 = t.pc.party.par_015 || {},
    t.pc.party.par_015.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_015/par_015.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_015/par_015.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par015Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_015"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSort"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_sort", function() {
                alert("{{sort_0_ui.jsonとsort_list_0_ui.jsonを使用}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_015 = t.pc.party.par_015 || {},
    t.pc.party.par_015.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams015(e),
            this._setSummonList(e, [e.routerParams.party_id, e.routerParams.par_015.number], "_navigate015To017"),
            this._setSummonHeaderLabel(),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnSort: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            t.promise
        }
    }),
    n.assign(t.pc.party.par_015.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.party.roles.Routing, t.pc.list.roles.ListSummonsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.party = t.pc.party || {},
    t.pc.party.par_016 = t.pc.party.par_016 || {},
    t.pc.party.par_016.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_016/par_016.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_016/par_016.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par016Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_016"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示する}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnReject"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_reject", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_003")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_change", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_015")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/evo_010")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnProtect"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_protect", function() {
                alert("{{通常状態の場合com_protect_onを表示保護状態の場合com_protect_offを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_016 = t.pc.party.par_016 || {},
    t.pc.party.par_016.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            if (this._verifyRouterParams016(e),
            0 === e.routerParams.par_016.number) {
                var t = e.seekWidgetByName("btn_reject");
                this._setEnableButton(t, !1)
            }
            return this._loadASummon(e.routerParams.par_016.id).then(function(e) {}
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnReject: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._move016To003(e),
            t.promise
        },
        btnCallbackBtnChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._move016To015(e),
            t.promise
        },
        btnCallbackBtnEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchEnhButton(),
            t.promise
        },
        btnCallbackBtnEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchEvoButton(),
            t.promise
        },
        btnCallbackBtnProtect: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchProtect(),
            t.promise
        }
    }),
    n.assign(t.pc.party.par_016.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.party.roles.Routing, t.pc.scene.roles.SceneSummonCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        p_summon_change: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("p_weapon_summon_change")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: p_weapon_summon_change"),
                e || ""
            }(),
            title: "幻獣装備",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss().then(function() {
                        t.createInstance("router").navigate("party/par_003")
                    })
                }
            }
        }
    };
    t.pc.party = t.pc.party || {},
    t.pc.party.par_017 = t.pc.party.par_017 || {},
    t.pc.party.par_017.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("par_017/par_017.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: par_017/par_017.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "par017Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["party", "par_017"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示する}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_change", function(e) {
                this.popups.p_summon_change.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", t.createInstance("router").navigate.bind(t.createInstance("router"), "party/par_015")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/evo_010")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnProtect"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_protect", function() {
                alert("{{通常状態の場合com_protect_onを表示保護状態の場合com_protect_offを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.party = t.pc.party || {},
    t.pc.party.par_017 = t.pc.party.par_017 || {},
    t.pc.party.par_017.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            p_summon_change: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: function() {
                    var e = n.findKey(res, function(e) {
                        return 0 < e.indexOf("p_weapon_summon_change")
                    });
                    return e || alert("該当するポップアップリソースが見つかりませんでした: p_weapon_summon_change"),
                    e || ""
                }(),
                title: "幻獣装備",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function() {
                        this.dismiss().then(function() {
                            t.createInstance("router").navigate("party/par_003")
                        })
                    }
                }
            }
        },
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams017(e),
            this._loadASummon(e.routerParams.par_017.id).then(function(n) {
                e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._move017To003(e),
            t.promise
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchEnhButton(),
            t.promise
        },
        btnCallbackBtnEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchEvoButton(),
            t.promise
        },
        btnCallbackBtnProtect: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchProtect(),
            t.promise
        }
    }),
    n.assign(t.pc.party.par_017.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.party.roles.Routing, t.pc.scene.roles.SceneSummonCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AUnionAuthority"
      , s = {
        get: function() {
            return this._http.get({
                url: "/a_union_authority",
                json: {}
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAUnionAuthority",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AUnionCheck"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/a_union_check",
                json: {
                    a_player_id: e
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAUnionCheck",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AUnionJoinConditions"
      , s = {
        get: function() {
            return this._http.get({
                url: "/a_union_join_conditions/me",
                json: {}
            })
        },
        "delete": function(e) {
            return this._http.del({
                url: "/a_union_join_conditions/" + e,
                json: {}
            })
        },
        update: function(e, t, n) {
            return this._http.put({
                url: "/a_union_join_conditions/" + e,
                json: {
                    rank_type: t,
                    playstyle_type: n
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAUnionJoinConditions",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AUnionJoinRequests"
      , s = {
        get: function(e, t) {
            return this._http.get({
                url: "/a_union_join_requests",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        getMe: function() {
            return this._http.get({
                url: "/a_union_join_requests",
                json: {
                    a_player_id: "me"
                }
            })
        },
        reject: function(e) {
            return this._http.del({
                url: "/a_union_join_requests",
                json: {
                    ids: e,
                    type: "refuse"
                }
            })
        },
        cancel: function(e) {
            return this._http.del({
                url: "/a_union_join_requests",
                json: {
                    ids: [e],
                    type: "cancel"
                }
            })
        },
        create: function(e) {
            return this._http.post({
                url: "/a_union_join_requests",
                json: {
                    a_union_id: e
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAUnionJoinRequests",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AUnionScoutsSearch"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/a_union_scouts_search",
                json: {
                    recommended: e
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAUnionScoutsSearch",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AUnionScouts"
      , s = {
        getListForMe: function() {
            return this.getListForPlayer("me")
        },
        getListForPlayer: function(e) {
            return this._http.get({
                url: "/a_union_scouts",
                json: {
                    a_player_id: e
                }
            })
        },
        check: function(e) {
            return this._http.get({
                url: "/a_union_scouts",
                json: {
                    a_union_id: e,
                    to_a_player_id: "me"
                }
            })
        },
        getList: function(e, t) {
            return this._http.get({
                url: "/a_union_scouts",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        cancel: function(e, t, n) {
            return this._http.del({
                url: "/a_union_scouts",
                json: {
                    a_union_id: e,
                    to_a_player_id: t,
                    type: n
                }
            })
        },
        create: function(e) {
            return this._http.post({
                url: "/a_union_scouts",
                json: {
                    to_a_player_id: e
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAUnionScouts",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AUnionSearch"
      , s = {
        get: function(e, t, n, i) {
            return this._http.get({
                url: "/a_union_search",
                json: {
                    rank_type: e,
                    playstyle_type: t,
                    page: n,
                    per_page: i
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAUnionSearch",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AFriends"
      , s = {
        getList: function(e, t, n) {
            return this._http.get({
                url: "/a_friends",
                json: {
                    type: e,
                    page: t,
                    per_page: n
                }
            })
        },
        getRecommended: function() {
            return this._http.get({
                url: "/a_friends",
                json: {
                    recommended: !0
                }
            })
        },
        getByDmmId: function(e) {
            return this._http.get({
                url: "/a_friends",
                json: {
                    dmm_id: e
                }
            })
        },
        "delete": function(e) {
            return this._http.del({
                url: "/a_friends",
                json: {
                    ids: e
                }
            })
        },
        accept: function(e) {
            return this._http.post({
                url: "/a_friends",
                json: {
                    from_a_player_id: e
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAFriends",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AStamps"
      , s = {
        get: function() {
            return this._http.get({
                url: "/a_stamps"
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAStamps",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "UnionUnavailableOperation"
      , s = {
        get: function() {
            return this._http.get({
                url: "/union_unavailable_operation"
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiUnionUnavailableOperation",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.cc;
    e.ccui;
    n.PopupFactoryComEnhGuardian = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_005_check_rarecheck",
            title: "一括売却確認",
            buttonLabels: {
                blueBtn: "売却",
                blackBtn: "キャンセル"
            },
            buttons: {
                blueBtn: function(e) {},
                blackBtn: function() {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, n) {
            this._popup = e,
            this._weapons = n.weapons,
            this._ids = n.ids,
            this._custompt = t.reduce(this._weapons, function(e, t, n) {
                return {
                    guardian_custom_pt: e.guardian_custom_pt + t.guardian_custom_pt
                }
            }).guardian_custom_pt,
            this._guardianpt = n.guardianpt,
            console.log(n),
            this._setConfirmText(),
            this._resetContentsPanel(),
            this._adjustCardListPanel(),
            this._adjustBottomPanel(),
            this._loadCardList(),
            this._setMessageText()
        },
        _loadCardList: function() {
            var e = 0;
            t.each(this._weapons, function(t, n) {
                var i = Math.floor(e / 5)
                  , a = e % 5;
                console.log(t, i, a);
                var s = this._popup.seekWidgetByName("cardlist_" + i)
                  , o = s.seekWidgetByName("corecard_ui_" + a);
                this._setWeaponCard(o, t),
                e++
            }, this)
        },
        _setMessageText: function() {
            this._popup.setHtmlStrings({
                pt_labelimg: this._confirmEnhGuardianHtmlString(this._custompt, this._guardianpt)
            }, n.GameConfig.POPUP_CSS)
        },
        _setWeaponCard: function(e, t) {
            console.log(t);
            var i = n.createInstance("CoreCardWeaponUI", ["e_r"]);
            i.setImg(t.weapon_id, t.skin),
            i.setPlusNo(0 < t.bonus ? "+" + t.bonus : ""),
            i.setIconElement(t.element_type),
            i.setIconRarity(t.rare);
            var a = i.getResult();
            e.removeAllChildren(),
            e.addChild(a),
            e.parent.setVisible(!0)
        },
        _setConfirmText: function() {
            this._popup.setTitle(n.w("weapon") + "で強化する");
            var e = 1 == this._isIncludedMoreThanRare() ? "レア以上の武器を素材に使おうとしています。\nよろしいですか？" : "この" + n.w("weapon") + "を使用して強化します。\nよろしいですか？";
            this._popup.seekWidgetByName("check_label").setString(e),
            this._popup.seekWidgetByName("check_label").width = 600,
            this._popup.seekWidgetByName("blue_btn").setTitleText("強化する"),
            n.setTouchEventHandlers(this._popup, {
                "TOUCH_ENDED blue_btn": function() {
                    this._clickBlueButton()
                },
                "TOUCH_ENDED black_btn": function() {
                    this._clickBlackButton()
                }
            }, this)
        },
        _isIncludedMoreThanRare: function() {
            var e = Array("R", "SR", "SSR");
            console.log(e);
            var n = t.find(this._weapons, function(t) {
                return e.indexOf(t.rare) >= 0 ? !0 : void 0
            });
            return t.isUndefined(n) ? !1 : !0
        },
        _clickBlueButton: function() {
            n.createInstance("apiAUnions").guardianDonationWeapons(this._ids).then(function(e) {
                console.log(e);
                var n = e.body.rank_up_info
                  , a = i.director.getRunningScene()
                  , s = a._delegate || a;
                if (n.before_rank < n.after_rank) {
                    var o = [e.body.before_custom_pt, e.body.after_custom_pt, n.before_rank, n.after_rank, n.effect_info.description];
                    s._popupGuardianLevelUp.apply(s, o)
                } else {
                    var o = [e.body.before_custom_pt, e.body.after_custom_pt];
                    s._popupGuardianEnhResult.apply(s, o)
                }
                s._completeEnhGuardian.call(s),
                this._popup.dismiss(),
                t.isFunction(s.updateList) && s.updateList()
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _clickBlackButton: function() {
            this._popup.dismiss()
        },
        _confirmEnhGuardianHtmlString: function(e, t) {
            var n = "<span class='orange'>獲得カスタムPt:</span><span class='white'>" + e + "</span><br /><span class='orange'>守護神のカスタムPt:</span><span class='white'>" + t + "&rarr;</span><span class='red'>" + (t + e) + "</span>";
            return n
        },
        _resetContentsPanel: function() {
            return this._popup.seekWidgetByName("contents_panel").height = 29,
            null !== this._popup.seekWidgetByName("cardlist_0") ? void t.each(t.range(5), function(e) {
                var n = this._popup.seekWidgetByName("cardlist_" + e);
                t.each(t.range(5), function(e) {
                    n.seekWidgetByName("corecard_ui_" + e).removeAllChildren()
                }),
                n.setVisible(!1)
            }, this) : void t.each(t.range(5), function(e) {
                var t = ccs.load(res["core-popup-li_summon_weapon_list_ui"]).node;
                t.setName("cardlist_" + e),
                t.setVisible(!1),
                this._popup.seekWidgetByName("contents_panel").addChild(t)
            }, this)
        },
        _adjustCardListPanel: function() {
            this._popup.seekWidgetByName("popup_base").height = 375,
            this._popup.seekWidgetByName("title_label").y = 345,
            this._popup.seekWidgetByName("top_pin_node").y = 326,
            this._popup.seekWidgetByName("contents_panel").height = 0,
            console.log(t.keys(this._weapons).length);
            var e = Math.floor(t.keys(this._weapons).length / 5) + (t.keys(this._weapons).length % 5 ? 1 : 0);
            this._popup.seekWidgetByName("cardlist_0");
            t.each(t.range(e), function(t) {
                var n = this._popup.seekWidgetByName("cardlist_" + t)
                  , i = (e - (t + 1)) * n.height;
                console.log(i),
                this._popup.seekWidgetByName("popup_base").height += n.height,
                this._popup.seekWidgetByName("title_label").y += n.height,
                this._popup.seekWidgetByName("top_pin_node").y += n.height,
                this._popup.seekWidgetByName("contents_panel").height += n.height,
                n.y = i,
                n.setVisible(!0)
            }, this)
        },
        _adjustBottomPanel: function() {
            var e = this._popup.seekWidgetByName("bottom_panel");
            e.parent.forceDoLayout()
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.cc;
    e.ccui;
    n.PopupFactoryComGreeting = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_edit_greed",
            title: "あいさつ",
            buttonLabels: {
                blueBtn: "送信",
                blackBtn: "キャンセル"
            },
            buttons: {
                blueBtn: function(e) {},
                blackBtn: function() {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        TEXT_RESTRICTION_LABEL: "▼ コメントをXX文字以内で入力してください ▼",
        onPopupOpened: function(e, i) {
            this._popup = e,
            this._inputMaxLength = i.inputMaxLength || 60,
            this._target = "chat",
            t.isUndefined(i.friend) || (this._friend = i.friend,
            this._target = "greet"),
            console.log(i),
            n.setTouchEventHandlers(e, {
                "TOUCH_ENDED tab_chat": function() {
                    this._changeView(0)
                },
                "TOUCH_ENDED tab_stamp": function() {
                    this._changeView(1)
                },
                "TOUCH_ENDED blue_btn": function() {
                    this._clickSendButton()
                }
            }, this),
            e.seekWidgetByName("tab_chat").setSound(n.SoundList.BUTTON_TOUCHED_SWITCH),
            e.seekWidgetByName("tab_stamp").setSound(n.SoundList.BUTTON_TOUCHED_SWITCH),
            this._loadStamps(),
            this._changeView(0, e),
            this._createEditbox()
        },
        _createEditbox: function() {
            var e = this._popup.seekWidgetByName("editbox_0");
            t.isUndefined(this._chatEditBox) || e.removeAllChildrenWithCleanup();
            var a = this._popup.seekWidgetByName("text_restriction_label")
              , s = this._popup.seekWidgetByName("comment_base")
              , o = new i.Scale9Sprite("blank.png")
              , r = i.size(.9 * s.width, .75 * s.height);
            if (this._chatEditBox = new n.EditBox(r,o),
            this._chatEditBox.setFontSize(22),
            this._chatEditBox.setFontColor(i.color("#000000")),
            this._chatEditBox.setText(""),
            this._chatEditBox.setMaxLength(this._inputMaxLength),
            a) {
                var c = this.TEXT_RESTRICTION_LABEL.replace("XX", this._inputMaxLength);
                a.setString(c)
            }
            e.addChild(this._chatEditBox)
        },
        _loadStamps: function() {
            n.createInstance("StampList").init(this._popup.seekWidgetByName("com_edit_stamp_page_ui"), this._popup, function(e) {
                "chat" === this._target ? this._sendStamp(e) : this._sendStamp(this._friend.a_player_id, e)
            }
            .bind(this)).loadStamps()
        },
        _changeView: function(e) {
            console.log(e);
            var n = [!1, !1];
            n[e] = !0,
            this._popup.seekWidgetByName("com_edit_greed_a_ui").setVisible(n[0]),
            this._popup.seekWidgetByName("com_edit_greed_b_ui").setVisible(n[1]),
            t.each(["tab_chat", "tab_stamp"], function(t, n) {
                var i = this._popup.seekWidgetByName(t);
                i.setBright(e !== n),
                i.setEnabled(e !== n)
            }, this),
            this._changeButtonPos(e)
        },
        _changeButtonPos: function(e) {
            var n = this._popup.seekWidgetByName("btn_node");
            t.isUndefined(this._action) && (this._action = n.actionManager.getActionByTag(n.tag, n)),
            this._action.gotoFrameAndPause(0 == e ? 1 : 2),
            this._popup.seekWidgetByName("black_btn").setTitleText(0 == e ? "キャンセル" : "閉じる")
        },
        _enableButton: function(e, t) {
            var n = this._popup.seekWidgetByName(e);
            n.setEnabled(t),
            n.setColor(1 == t ? i.color("#FFFFFF") : i.color("#808080"))
        },
        _invoke: function(e, n) {
            var a = i.director.getRunningScene()
              , s = [];
            a._delegate && (a._delegate.greetingDelegate && s.push(a._delegate.greetingDelegate),
            s.push(a._delegate)),
            s.push(a);
            var o = t.find(s, function(n) {
                return t.isFunction(n[e])
            });
            return o ? o[e].apply(o, n) : void 0
        },
        _clickSendButton: function() {
            console.log(this._chatEditBox.getText().length),
            0 === this._chatEditBox.getText().length ? this._invoke("_showPopupNoText") : "chat" === this._target ? this._invoke("_sendMessage", [this._popup, void 0, this._chatEditBox.getText()]) : this._invoke("_sendMessage", [this._popup, this._friend.a_player_id, this._chatEditBox.getText()])
        },
        _sendStamp: function(e, t) {
            console.log(e, t),
            this._invoke("_sendStamp", [this._popup, e, t])
        },
        _sendStamp4Chat: function(e) {
            console.log(e),
            this._invoke("_sendStamp", [this._popup, e])
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc;
    e._;
    t.BurstTimeSubTutorialPanel = n.Node.extend({
        _popups: {
            popupSubTutorial: {
                factoryName: "popupFactorySubTutorial",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        _widgets: {},
        _khBurstTime: null ,
        _subTutorialPopup: null ,
        show: function() {
            var e = n.director.getRunningScene();
            e.addChild(this),
            this._widgets.base = e.seekWidgetByName("bursttime_period_base_1"),
            this._widgets.label1 = e.seekWidgetByName("bursttime_period_0_label"),
            this._widgets.label2 = e.seekWidgetByName("bursttime_period_1_label"),
            this._widgets.reserved = e.seekWidgetByName("bursttime_period_textimg"),
            this._widgets.button = e.seekWidgetByName("btn_burstinfo"),
            this._widgets.button.addClickEventListener(this.showSubTutorial.bind(this)),
            this._khBurstTime = t.createInstance("burstTime"),
            this._khBurstTime.prepare().then(function() {
                this._khBurstTime.addEventListener("UPDATE_SUCCESS", this.updateDisplay.bind(this)),
                this._initWidgets()
            }
            .bind(this))
        },
        _initWidgets: function() {
            this._khBurstTime.isEnabled() && (this._widgets.base.setVisible(!0),
            this._widgets.label1.setString("【時間1】" + this._khBurstTime.getFirstSelectedBurstTimeInfo().description),
            this._widgets.label2.setString("【時間2】" + this._khBurstTime.getSecondSelectedBurstTimeInfo().description),
            this._khBurstTime.isReserved() && this._widgets.reserved.setVisible(!0))
        },
        updateDisplay: function() {
            this._widgets.reserved.setVisible(!1),
            this._widgets.base.setVisible(!1),
            this._widgets.label1.setString(""),
            this._widgets.label2.setString(""),
            this._initWidgets()
        },
        onExit: function() {
            this._khBurstTime.removeEventListenersByEventName("UPDATE_SUCCESS"),
            this._super()
        },
        showSubTutorial: function() {
            null === this._subTutorialPopup && (this._subTutorialPopup = this._createSubTutorialPopup()),
            this._subTutorialPopup.setTypeAndOpen("bursttime", "subtutorial")
        },
        _createSubTutorialPopup: function() {
            var e = this._popups.popupSubTutorial
              , i = t.createInstance(e.factoryName)
              , a = n.director.getRunningScene()
              , s = [a];
            return i.create(e, s)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.model = t.pc.guild.model || {},
    t.pc.guild.model.GuildControlPermissions = n.Class.extend({
        forbiddenOperations: {},
        prepare: function() {
            return this.forbiddenOperations = {},
            this._getUnionUnavailableOperationPromise().then(function(e) {
                var t = e.body;
                return i.each(t.unavailable_operation, function(e) {
                    this.forbiddenOperations[e] = !0
                }, this),
                this
            }
            .bind(this))
        },
        _getUnionUnavailableOperationPromise: function() {
            return t.createInstance("apiUnionUnavailableOperation").get().fail(function(e) {
                console.error(e)
            })
        },
        canAppointLeaderUnion: function() {
            return !this.forbiddenOperations.appoint_leader
        },
        canRenameUnion: function() {
            return !this.forbiddenOperations.change_name
        },
        canChangeBurstTime: function() {
            return !this.forbiddenOperations.change_burst_time
        },
        canLeave: function() {
            return !this.forbiddenOperations.leave
        },
        canFireMember: function() {
            return !this.forbiddenOperations.fire_member
        },
        canDismissUnion: function() {
            return !this.forbiddenOperations.dismiss_union
        },
        canJoinUnion: function() {
            return !this.forbiddenOperations.join_union
        },
        canCreateUnion: function() {
            return !this.forbiddenOperations.create_union
        },
        canSearchUnion: function() {
            return !this.forbiddenOperations.search_union
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.roles = t.pc.guild.roles || {},
    t.pc.guild.roles.GuildCommon = {
        _setGuildStrings: function(e, i) {
            var a = i.union_me || i.union
              , s = n.isUndefined(a) ? i.guardian_info : a.guardian_info || i.guardian_info;
            if (!n.isUndefined(s)) {
                var o = this._toGuardianFullName(s);
                if (!n.isUndefined(s.level)) {
                    null !== e.seekWidgetByName("guardian_lv_label") && e.setStrings({
                        guardian_lv_label: s.level
                    }),
                    n.isUndefined(s.name) || null === e.seekWidgetByName("guardian_name_lv_label") || e.setStrings({
                        guardian_name_lv_label: o
                    });
                    var r = e.seekWidgetByName("name_label");
                    n.isUndefined(s.name) || null === r || "gud_comment_ui" === r.parent.name || e.setStrings({
                        name_label: o
                    })
                }
                n.isUndefined(s.price) || null === e.seekWidgetByName("price_no") || e.setStrings({
                    price_no: " " + s.price + t.w("gem")
                });
                var c = s.detail_info;
                if (!n.isUndefined(c) && (n.isUndefined(c.custom_pt) || (null !== e.seekWidgetByName("total_pt_label") && e.setStrings({
                    total_pt_label: " " + c.custom_pt
                }),
                null !== e.seekWidgetByName("total_custom_point_no_label") && e.setStrings({
                    total_custom_point_no_label: " " + c.custom_pt
                }),
                null !== e.seekWidgetByName("custom_pt_label_set") && e.setStrings({
                    custom_pt_label_set: "付加カスタムPt: " + c.custom_pt
                })),
                n.isUndefined(c.next_level_pt) || (null !== e.seekWidgetByName("lv_next_label") && e.setStrings({
                    lv_next_label: " " + c.next_level_pt + "Pt"
                }),
                null !== e.seekWidgetByName("lv_next_label_set") && e.setStrings({
                    lv_next_label_set: "次のLvまで: " + c.next_level_pt + "Pt"
                })),
                !n.isUndefined(c.effects))) {
                    var u;
                    n.each(c.effects, function(e, t) {
                        e.is_acquired && !n.isUndefined(e.description) && (u = e.description)
                    }),
                    null === e.seekWidgetByName("guardian_effect_label_0") || n.isUndefined(u) || e.seekWidgetByName("guardian_effect_label_0").setString(u),
                    null === e.seekWidgetByName("guardian_effect_label") || n.isUndefined(u) || e.seekWidgetByName("guardian_effect_label").setString(u)
                }
            }
            n.isUndefined(a) || (n.isUndefined(a.name) || null === e.seekWidgetByName("union_name_label") || e.setStrings({
                union_name_label: a.name
            }),
            n.isUndefined(a.rank) || null === e.seekWidgetByName("union_rank_no") || e.setStrings({
                union_rank_no: a.rank
            }),
            n.isUndefined(a.member_count) || null === e.seekWidgetByName("union_menber_label") || e.setStrings({
                union_menber_label: a.member_count
            }),
            n.isUndefined(a.leader) || n.isUndefined(a.leader.name) || n.isUndefined(a.comment) || (null !== e.seekWidgetByName("gud_comment_ui") && e.seekWidgetByName("gud_comment_ui").setStrings({
                name_label: a.leader.name,
                leader_comment_label: a.comment
            }),
            null !== e.seekWidgetByName("prf_comment_ui") && e.seekWidgetByName("prf_comment_ui").setStrings({
                name_label: a.leader.name,
                leader_comment_label: a.comment
            })));
            var _ = i.donation;
            n.isUndefined(_) || n.isUndefined(_.union_data) || n.isUndefined(_.union_data.current_donation_amount) || null === e.seekWidgetByName("union_jem_label") || e.setStrings({
                union_jem_label: _.union_data.current_donation_amount.toString()
            })
        },
        _setDonationHeader: function(e, i) {
            i = i || "header_sub_label";
            var a = t.createInstance("apiAUnions").getDonationInfo().then(function(a) {
                console.log(a.body);
                var s = e.seekWidgetByPath(i);
                return s && !n.isUndefined(a.body.union_data.current_donation_amount) && s.setString(a.body.union_data.current_donation_amount + t.w("gem")),
                a.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return a
        },
        _getUnionInfoAboutMe: function() {
            var e = t.createInstance("apiAUnions").getMember("me")
              , n = t.createInstance("apiAUnions").get("me")
              , a = i.all([e, n]).then(function(e) {
                return console.log(e[0].body, e[1].body),
                this._myUnionInfo = e[0].body,
                this._maxNumber = e[1].body.max_member_count,
                this._totalNumber = e[1].body.member_count,
                this._unionId = e[1].body.a_union_id,
                e
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return a
        },
        _setUnionHeaderMemberNum: function(e, t) {
            if (t = t || "header_sub_label",
            n.isUndefined(this._myUnionInfo))
                return void console.warn("[ERROR] You should call _getUnionInfoAboutMe() as an union base info.");
            var i = e.seekWidgetByPath(t);
            !i || n.isUndefined(this._totalNumber) || n.isUndefined(this._maxNumber) || i.setString("隊員数：" + this._totalNumber + "/" + this._maxNumber)
        },
        _setFriendHeaderNum: function(e, i) {
            i = i || "header_sub_label";
            var a = t.createInstance("apiAPlayers").getMe().then(function(t) {
                console.log(t.body);
                var a = e.seekWidgetByPath(i);
                return !a || n.isUndefined(t.body.friend_num) || n.isUndefined(t.body.friend_max_num) || a.setString("フレンド：" + t.body.friend_num + "/" + t.body.friend_max_num),
                t.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return a
        },
        _setSelectedGuardianHeader: function(e, t) {
            t = t || "header_sub_label";
            var i = this._myUnionInfo || this._getUnionData();
            if (n.isUndefined(i))
                return void console.warn("[ERROR] You should call _getUnionInfoAboutMe() or _request('union_me') as an union base info.");
            var a = i.guardian_info
              , s = e.seekWidgetByPath(t);
            null === s || n.isUndefined(a) || s.setString(a.name + " Lv" + a.level)
        },
        _setPositionIconsVisibility: function(e, i) {
            var a = t.w("unionRoles");
            n.each(a, function(t, n) {
                var a = e.seekWidgetByName("icon_guild_position_" + n);
                null !== a && a.setVisible("all" === i || i.indexOf(n) >= 0 || i.indexOf(t) >= 0)
            })
        },
        _toGuardianFullName: function(e) {
            if (!e)
                return console.warn("Guardian data is required."),
                "";
            var t = e.guardian_info || e;
            if (n.isUndefined(t.name))
                return console.warn("Invalid guardian record.", t),
                "";
            var i = t.name
              , a = t.prefix_name || ""
              , s = n.isUndefined(t.level) ? "" : "Lv" + t.level;
            return a + "「" + i + "」" + s
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.roles = t.pc.guild.roles || {},
    t.pc.guild.roles.GuildScout = {
        _errorPopupMap: {
            alreadyJoinRequested: "alreadyJoinRequested"
        },
        _scoutMember: function(e) {
            t.createInstance("apiAUnionScouts").create(e.a_player_id).then(function(n) {
                var a = n.body.scout_made ? null : i.camelize(n.body.error)
                  , s = {
                    title: t.WordBook.UNION_SCOUNT_ERROR_TITLE[a] || "スカウト完了",
                    content: t.WordBook.UNION_SCOUNT_ERROR_MESSAGE[a] || e.name + "をスカウトしました"
                };
                this._openPopupResult(s.title, s.content, this._errorPopupMap[a])
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _checkBeforeScout: function(e) {
            var s = a.defer()
              , o = t.createInstance("apiAUnions").getMembers()
              , r = t.createInstance("apiAUnionScouts").getList()
              , c = t.createInstance("apiAUnionScouts").getListForPlayer(e.a_player_id)
              , u = t.createInstance("apiAUnionJoinRequests").get()
              , _ = t.createInstance("apiAUnions").getMe();
            return a.all([o, r, c, u, _]).spread(function(a, o, r, c, u) {
                var _;
                if (i.isUndefined(a.body.data) || i.each(a.body.data, function(t) {
                    t.a_player_id === e.a_player_id && (_ = "alreadyMember")
                }, this),
                i.isUndefined(_) && !i.isUndefined(o.body.data) && i.each(o.body.data, function(t) {
                    t.player.a_player_id === e.a_player_id && (_ = "scoutPending")
                }, this),
                i.isUndefined(_) && !i.isUndefined(r.body.max_record_count) && r.body.max_record_count > 0 && (_ = "scoutedByOthers"),
                i.isUndefined(_) && !i.isUndefined(c.body.data) && i.each(c.body.data, function(t) {
                    t.player.a_player_id === e.a_player_id && (_ = "alreadyJoinRequested")
                }, this),
                i.isUndefined(_) && !i.isUndefined(u.body)) {
                    var l = u.body.member_count || 0
                      , d = u.body.max_member_count || 0;
                    l >= d && (_ = "memberMaxReached")
                }
                if (i.isUndefined(_))
                    s.resolve();
                else {
                    var p = (n.director.getRunningScene(),
                    t.WordBook.UNION_SCOUNT_ERROR_TITLE[_])
                      , h = t.WordBook.UNION_SCOUNT_ERROR_MESSAGE[_];
                    this._openPopupResult(p, h, this._errorPopupMap[_]),
                    s.reject(_)
                }
            }
            .bind(this)),
            s.promise
        },
        _openPopupResult: function(e, t, i) {
            i = i || "popupResult";
            var a = n.director.getRunningScene()
              , s = a.popups[i];
            s.open().then(function() {
                s.setTitle(e),
                s.setContent(t)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.roles = t.pc.guild.roles || {},
    t.pc.guild.roles.GuildJoinCheck = {
        _joinCheckAndGoSearchUnion: function(e) {
            return this._checkJoinTimeLimitation(e).then(function() {
                var e = t.createInstance("apiAUnionJoinRequests");
                e.getMe().then(function(e) {
                    if (0 === e.body.max_record_count)
                        this._navigateTo000b();
                    else {
                        var t = e.body.data
                          , n = t[0].union.a_union_id;
                        this._navigateTo0001ById(n)
                    }
                }
                .bind(this))
            }
            .bind(this))
        },
        _joinCheckAndGoFormUnion: function() {
            return this._checkJoinTimeLimitation().then(function() {
                this._navigateTo000c()
            }
            .bind(this))
        },
        _sendJoinRequest: function(e, a) {
            var s = n.director.getRunningScene();
            this._checkBeforeJoinRequest(e.a_union_id).then(function() {
                var n = t.createInstance("apiAUnionJoinRequests");
                n.create(e.a_union_id).then(function(t) {
                    var n = t.body
                      , o = n.error;
                    n.request_made ? s._openMessagePopup({
                        title: "入隊申請",
                        content: "<div>" + e.name + "に<br />申請しました。</div>",
                        buttons: [["blueBtn", "OK", !0]]
                    }).then(function() {
                        i.isFunction(a) && a.call(this)
                    }
                    .bind(this)) : o && this._openErrorPopup(o)
                }
                .bind(this))
            }
            .bind(this))
        },
        _deleteJoinRequest: function(e, s) {
            var o = n.director.getRunningScene()
              , r = o._openMessagePopup({
                title: "入隊申請取り下げ",
                content: "<div>「" + e.name + "」への<br/>入隊申請を取り下げますか？</div>",
                buttons: [["blackBtn", "キャンセル"], ["blueBtn", "OK", !0]]
            })
              , c = this._request("joinRequests");
            a.all([r, c]).then(function(n) {
                var a = n[1].data
                  , r = t.createInstance("apiAUnionJoinRequests");
                try {
                    r.cancel([a[0].a_union_join_request_id]).then(function(t) {
                        o._openMessagePopup({
                            title: "申請取り下げ完了",
                            content: "<div>「" + e.name + "」への<br/>入隊申請を取り下げました。</div>",
                            buttons: [["blackBtn", "閉じる", !0]]
                        }).then(function() {
                            i.isFunction(s) && s.call(this)
                        }
                        .bind(this))
                    }
                    .bind(this))
                } catch (c) {
                    console.error(c)
                }
            }
            .bind(this))
        },
        _checkJoinTimeLimitation: function(e) {
            var i = a.defer()
              , s = t.createInstance("apiAPlayers");
            return s.getUnionJoinedLimitState().then(function(t) {
                var a, s = t.body.union_joined_limit_state.clear_time, o = Date.parse(s), r = new Date, c = n.director.getRunningScene();
                o > r ? (a = c.popups.popupForbidden,
                a.openEx(s),
                i.reject("入隊制限期間中")) : e !== !0 ? (a = c.popups.popupAttention,
                a.openEx(function() {
                    i.resolve()
                })) : i.resolve()
            }
            .bind(this)),
            i.promise
        },
        _checkBeforeJoinRequest: function(e, s) {
            var o = n.director.getRunningScene()
              , r = a.defer()
              , c = t.createInstance("apiAUnions").get(e)
              , u = t.createInstance("apiAUnions").get("me")
              , _ = t.createInstance("apiAUnionScouts").getListForMe()
              , l = t.createInstance("apiAUnionJoinRequests").getMe()
              , d = t.createInstance("apiAPlayers").getUnionJoinedLimitState();
            return a.all([c, u, _, l, d]).spread(function(t, n, a, c, u) {
                var _, l;
                if (!i.isUndefined(t.body)) {
                    var d = t.body.member_count || 0
                      , p = t.body.max_member_count || 0;
                    d >= p && (_ = "member_max_reached")
                }
                if (i.isUndefined(_) && !i.isUndefined(n.body) && (i.isEmpty(n.body) || (_ = "already_union_member")),
                i.isUndefined(_) && !i.isUndefined(a.body.data) && i.each(a.body.data, function(t) {
                    i.isUndefined(t.union) || t.union.a_union_id === e || (_ = "already_scouted")
                }, this),
                i.isUndefined(_) && !i.isUndefined(c.body.max_record_count) && c.body.max_record_count > 0 && (_ = "request_pending"),
                i.isUndefined(_) && !i.isUndefined(u.body)) {
                    var h = u.body.union_joined_limit_state.clear_time
                      , g = Date.parse(h)
                      , m = new Date;
                    g > m && (_ = "join_time_limited",
                    l = function() {
                        var e = o.popups.popupForbidden;
                        e.openEx(h)
                    }
                    ,
                    r.reject("入隊制限期間中"))
                }
                if (i.isUndefined(_))
                    if (s !== !0) {
                        var f = o.popups.popupAttention;
                        f.openEx(function() {
                            r.resolve()
                        })
                    } else
                        r.resolve();
                else
                    i.isFunction(l) ? l.apply(this) : this._openErrorPopup(_, a.body),
                    r.reject(_)
            }
            .bind(this)),
            r.promise
        },
        _openErrorPopup: function(e, n) {
            var a = (t.WordBook.UNION_JOIN_ERROR_MESSAGE[e],
            t.WordBook.UNION_JOIN_ERROR_MESSAGE[e]);
            if ("already_scouted" == e)
                if (i.isUndefined(n)) {
                    var s = t.createInstance("apiAUnionScouts");
                    s.getListForMe().then(function(e) {
                        var t = e.body.data[0].union.name;
                        this.__openErrorPopupCore(a, t)
                    }
                    .bind(this)).fail(function(e) {
                        this.__openErrorPopupCore(a, '<span class="red">不明なユニオン</span>')
                    })
                } else
                    this.__openErrorPopupCore(a, n.data[0].union.name);
            else
                this.__openErrorPopupCore(a)
        },
        __openErrorPopupCore: function(e, t) {
            i.isUndefined(t) || (e = e.replace(/\$union_name\$/g, t));
            var a = n.director.getRunningScene();
            a._openMessagePopup({
                title: "入隊申請",
                content: '<div style="line-height: 1.3em">' + e + "</div>",
                buttons: [["blueBtn", "OK"]]
            })
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.roles = t.pc.guild.roles || {},
    t.pc.guild.roles.GuildApiCache = {
        _apiSettings: {
            union_me: {
                module: "apiAUnions",
                method: "get",
                args: ["me"]
            },
            union: {
                module: "apiAUnions",
                method: "get",
                args: []
            },
            newInfo: {
                module: "apiAUnions",
                method: "getNewInfo"
            },
            donation: {
                module: "apiAUnions",
                method: "getDonationInfo"
            },
            me: {
                module: "apiAPlayers",
                method: "getMe"
            },
            check: {
                module: "apiAUnionScouts",
                method: "check",
                args: []
            },
            joinRequests: {
                module: "apiAUnionJoinRequests",
                method: "getMe"
            },
            authority: {
                module: "apiAUnionAuthority",
                method: "get"
            }
        },
        _data: {},
        _requestAll: function(e) {
            var t = [];
            return i.each(e, function(e) {
                var n = this._request(e);
                t.push(n)
            }
            .bind(this)),
            a.all(t).fail(function(e) {
                console.error(e)
            })
        },
        _request: function(e) {
            var n = this._data[e]
              , s = a.defer();
            if (i.isUndefined(n) || i.isNull(n)) {
                var o = this._apiSettings[e];
                if (-1 !== ["union", "check"].indexOf(e) && (o.args[0] = this._getGuildId()),
                i.isUndefined(o)) {
                    var r = "Unknown data key: " + e;
                    s.reject(new Error(r))
                } else {
                    var c = t.createInstance(o.module);
                    c[o.method].apply(c, o.args).then(function(t) {
                        n = t.body,
                        this._data[e] = n,
                        s.resolve(n)
                    }
                    .bind(this)).fail(function(e) {
                        s.reject(e)
                    }
                    .bind(this))
                }
            } else
                s.resolve(n);
            return s.promise
        },
        _getGuildId: function() {
            var e = this._data.a_union_id;
            if (i.isUndefined(e)) {
                if (i.isUndefined(this._data.union_me)) {
                    var a = n.director.getRunningScene()
                      , s = t.createInstance("router").getCurrentFragment().replace(/_[abcd]$/, "")
                      , o = a.routerParams[s.substring(s.indexOf("/") + 1)] || a.temporaryRouterParams;
                    e = o.id || "me"
                } else
                    e = "me";
                this._data.a_union_id = e
            }
            return e
        },
        _getUnionData: function() {
            var e = this._data.union_me || this._data.union;
            return i.isUndefined(e) ? void console.error("Plz call _requestBykeys(['union|union_me']) previously.") : e
        },
        _updateUnionData: function(e) {
            i.isUndefined(this._data.union_me) || (this._data.union_me = e),
            i.isUndefined(this._data.union) || (this._data.union = e)
        },
        _amILeader: function() {
            var e = this._getUnionData();
            return "me" === e.leader.a_player_id
        },
        _amISubLeader: function() {
            var e = this._getUnionData()
              , t = i.find(e.sub_leaders, {
                a_player_id: "me"
            });
            return !i.isUndefined(t)
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = (e.Q,
    e.res);
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.roles = t.pc.guild.roles || {},
    t.pc.guild.roles.GuardianPageListController = {
        _fillupGuardianList: function(e, n) {
            $staticRes(a["guild-gud_003-gud_guardianlist_1_page_ui"]),
            $staticRes(a["guild-gud_003-gud_guardianlist_0_page_ui"]);
            var s = [{
                parentNodeName: "tab_0_node",
                apiName: "apiAUnions",
                apiMethodName: "getGuardians",
                apiParam: !0,
                subPageRes: t.PageListParams.GUILD_GUARDIAN.subPageRes,
                initFuncName: "_guardianListPanelInitFunc"
            }, {
                parentNodeName: "tab_1_node",
                apiName: "apiAUnions",
                apiMethodName: "getGuardians",
                apiParam: !1,
                subPageRes: t.PageListParams.GUILD_BUY_GUARDIAN.subPageRes,
                initFuncName: "_guardianListPanelInitFunc"
            }];
            if (n = n || 0,
            0 > n || n >= s.length)
                return void console.error("[ERROR] targetNum is out of range.");
            var o = s.splice(n, 1);
            o = o[0];
            var r = this._fillupGuardianListCore(e, o.parentNodeName, o.apiName, o.apiMethodName, o.apiParam, o.subPageRes, o.initFuncName);
            return i.delay(function() {
                i.each(s, function(t) {
                    this._fillupGuardianListCore(e, t.parentNodeName, t.apiName, t.apiMethodName, t.apiParam, t.subPageRes, t.initFuncName)
                }, this)
            }
            .bind(this), 500),
            r
        },
        _fillupGuardianListCore: function(e, n, i, a, s, o, r) {
            var c = e.seekWidgetByName(n);
            if (null === c)
                return void console.warn("[ERROR] Could not find a parent node.");
            var u = c.seekWidgetByName("change_page_panel");
            if (null === u)
                return void console.warn("[ERROR] Could not find a list parent node.");
            u.removeAllChildren();
            var _ = t.createInstance(i)[a](s).then(function(i) {
                console.log(i.body);
                var a = i.body.max_record_count;
                if (this._fillupList(c, {
                    viewParent: t.PageListParams.GUILD_GUARDIAN_COMMON.viewParent,
                    subPageRes: o,
                    panelsPerPage: t.PageListParams.GUILD_GUARDIAN_COMMON.perPage
                }, i.body.data, i.body.max_record_count, void 0, this[r].bind(this)),
                0 === a) {
                    var s = e.seekWidgetByPath(n + ".nothing_node");
                    null !== s && s.setVisible(!0)
                } else {
                    var s = e.seekWidgetByPath(n + ".list_node");
                    null !== s && s.setVisible(!0)
                }
                return i.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return _
        },
        _guardianListPanelInitFunc: function(e, a, s) {
            if (console.log(e, a, s),
            i.isUndefined(a.guardian_id))
                return void console.warn("[ERROR] Could not find guardian id.");
            this._setGuildStrings(e, {
                guardian_info: a
            });
            var o = t.Img("unionguardian", "guardian", i.padZero(a.guardian_id, 4), 0).png
              , r = e.seekWidgetByName("unionguardian_guardian");
            if (null !== r && r.setBackGroundImage(o),
            null !== e.seekWidgetByName("guardian_effect_label") && e.setStrings({
                guardian_effect_label: this.__getCurrentEffect(a)
            }),
            !i.isUndefined(a.detail_info) && !i.isUndefined(a.detail_info.custom_pt) && !i.isUndefined(a.detail_info.next_level_pt) && null !== e.seekWidgetByName("total_custom_point_gauge")) {
                var c = a.detail_info.custom_pt
                  , u = c + a.detail_info.next_level_pt;
                e.seekWidgetByName("total_custom_point_gauge").setPercent(100 * c / u)
            }
            var _ = n.director.getRunningScene()
              , l = e.seekWidgetByName("btn_protection")
              , d = e.seekWidgetByName("icon_protection")
              , p = e.seekWidgetByName("btn_buy");
            if (l && (a.is_equipped ? this._setEnableButton(l, !1) : i.isUndefined(this._unionMemberMe) ? i.isUndefined(this._data.union_me) || i.isUndefined(this._data.me) ? this._setEnableButton(l, !1) : this._setEnableButton(l, this._amILeader()) : this._setEnableButton(l, "leader" === this._unionMemberMe.union_position)),
            d && a.is_equipped && d.setVisible(!0),
            l && i.isFunction(this._onTouchBtnProtection) && t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_protection": function() {
                    this._onTouchBtnProtection(_, a)
                }
                .bind(this)
            }),
            p && i.isFunction(this._onTouchBtnBuy)) {
                if (i.isUndefined(this._unionMemberMe))
                    i.isUndefined(this._data.union_me) || i.isUndefined(this._data.me) ? this._setEnableButton(p, !1) : this._setEnableButton(p, this._amILeader() || this._amISubLeader());
                else {
                    var h = this._unionMemberMe.union_position;
                    this._setEnableButton(p, "leader" === h || "sub_leader" === h)
                }
                t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED btn_buy": function() {
                        this._onTouchBtnBuy(_, a)
                    }
                    .bind(this)
                })
            }
            e.seekWidgetByName("btn_guardian") && i.isFunction(this._onTouchGuardianPanel) && t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_guardian": function() {
                    this._onTouchGuardianPanel(_, a)
                }
                .bind(this)
            }),
            e.setVisible(!0)
        },
        __getCurrentEffect: function(e) {
            if (!i.isUndefined(e.detail_info)) {
                var t = "";
                return e.detail_info.effects.forEach(function(e) {
                    e.is_acquired && (t = e.description)
                }),
                t
            }
        }
    },
    i.assign(t.pc.guild.roles.GuardianPageListController, t.pc.list.roles.PageListControllerCommon, t.pc.list.roles.UserListCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.roles = t.pc.guild.roles || {},
    t.pc.guild.roles.GuildMemberBtnsListController = {
        _fillupGuildMemberBtnsList: function(e, t) {
            var i = [{
                targetNode: "tab_0_node",
                apiName: "apiAUnions",
                methodName: "getMembers",
                initFuncName: "_setGuildMemberPanel"
            }, {
                targetNode: "tab_1_node",
                apiName: "apiAUnionJoinRequests",
                methodName: "get",
                initFuncName: "_setGuildMemberPanelJoin"
            }, {
                targetNode: "tab_2_node",
                apiName: "apiAUnionScouts",
                methodName: "getList",
                initFuncName: "_setGuildMemberPanelScout"
            }];
            if (!n.isUndefined(t)) {
                if (0 > t || t >= i.length)
                    return void console.error("[ERROR] targetNum is out of range.");
                var a = i.splice(t, 1);
                a = a[0],
                this._fillupGuildMemberBtnsListCore(e, a)
            }
            n.delay(function() {
                n.each(i, function(t) {
                    this._fillupGuildMemberBtnsListCore(e, t)
                }, this)
            }
            .bind(this), 500)
        },
        _fillupGuildMemberBtnsListForMember: function(e, t, i) {
            var a = [{
                targetNode: "window_gray",
                apiName: "apiAUnions",
                methodName: "getMembers",
                initFuncName: "_setGuildMemberPlainPanel"
            }];
            n.isUndefined(i) || (a[0].params = [i],
            a[0].methodName = "getMembersExternal"),
            n.delay(function() {
                n.each(a, function(t) {
                    this._fillupGuildMemberBtnsListCore(e, t)
                }, this)
            }
            .bind(this), 500)
        },
        _fillupGuildMemberBtnsListForFire: function(e, t) {
            var i = [{
                targetNode: "window_gray",
                apiName: "apiAUnions",
                methodName: "getMembersForFire",
                initFuncName: "_setGuildMemberPanelFire"
            }];
            n.delay(function() {
                n.each(i, function(t) {
                    var i = e.seekWidgetByName("userlist_page_ui");
                    n.each(i.children, function(e) {
                        e.setVisible(!1)
                    }, this),
                    this._fillupGuildMemberBtnsListCore(e, t)
                }, this)
            }
            .bind(this), 500)
        },
        _fillupGuildMemberBtnsListForLeader: function(e, t) {
            var i = [{
                targetNode: "window_gray",
                apiName: "apiAUnions",
                methodName: "getMembersForLeader",
                initFuncName: "_setGuildMemberPanelLeader"
            }];
            n.delay(function() {
                n.each(i, function(t) {
                    this._fillupGuildMemberBtnsListCore(e, t)
                }, this)
            }
            .bind(this), 500)
        },
        _fillupGuildMemberBtnsListCore: function(e, n) {
            var i = e.seekWidgetByName(n.targetNode);
            if (null === i)
                return void console.debug("[ERROR] Could not find the node: " + n.targetNode);
            var a = {
                baseName: n.targetNode,
                panelName: t.BtnsPageListParams.GUILD_MEMBER.panelName,
                panelsPerPage: t.BtnsPageListParams.GUILD_MEMBER.perPage,
                apiName: n.apiName,
                apiMethod: n.methodName,
                apiParams: n.params,
                cardType: "misc",
                cardFrame: "plain"
            };
            this._setListBtnsControllerWithArgs(e, void 0, a, void 0, n.initFuncName).then(function(e) {
                var t = 0 === e.pageCount;
                null !== i.seekWidgetByName("nothing_node") && i.seekWidgetByName("nothing_node").setVisible(t),
                null !== i.seekWidgetByName("list_node") && i.seekWidgetByName("list_node").setVisible(!t)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setGuildMemberPanel: function(e, t) {
            console.log(e, t),
            e = e.parent;
            var n = {
                blue: "_onTouchGuildBlueButton",
                user: "_onTouchUserButton"
            };
            this._setUserList(e, t, "guild_blue_only", n);
            var i = e.seekWidgetByName("btn_blue_s");
            null !== i && (i.setTitleText("役職変更"),
            "leader" === t.union_position ? i.setVisible(!1) : i.setVisible("leader" === this._myUnionInfo.union_position)),
            e.setVisible(!0)
        },
        _setGuildMemberPlainPanel: function(e, t) {
            console.log(e, t),
            e = e.parent;
            var n = {
                blue: "_onTouchGuildBlueButton",
                user: "_onTouchUserButton"
            };
            this._setUserList(e, t, "guild_plain", n),
            e.setVisible(!0)
        },
        _setGuildMemberPanelJoin: function(e, t) {
            if (console.log(e, t),
            e = e.parent,
            n.isUndefined(t.player))
                return void console.warn("[ERROR] Could not find a player record.");
            t.player.a_union_join_request_id = t.a_union_join_request_id;
            var i = {
                red: "_onTouchMemberJoinRedButton",
                blue: "_onTouchMemberJoinBlueButton",
                check: "_onCheckMemberJoin",
                user: "_onTouchUserButton"
            };
            this._setUserList(e, t.player, "blue_red", i),
            null !== e.seekWidgetByName("btn_red_s") && e.seekWidgetByName("btn_red_s").setTitleText("入隊を却下"),
            null !== e.seekWidgetByName("btn_blue_s") && e.seekWidgetByName("btn_blue_s").setTitleText("入隊を許可");
            var a = e.seekWidgetByName("check_box_base")
              , s = e.seekWidgetByName("CheckBox_1");
            null !== a && null !== s && a.isVisible() === !0 && (s.selected = n.find(this._tab_1_node_list, function(e) {
                return e == t.a_union_join_request_id
            }, this)),
            e.setVisible(!0)
        },
        _setGuildMemberPanelScout: function(e, t) {
            if (console.log(e, t),
            e = e.parent,
            n.isUndefined(t.player))
                return void console.warn("[ERROR] Could not find a player record.");
            null !== e.seekWidgetByName("btn_red_s") && e.seekWidgetByName("btn_red_s").setTitleText("取り下げる"),
            t.player.a_scout_id = t.a_scout_id;
            var i = {
                red: "_onTouchMemberScoutRedButton",
                user: "_onTouchUserButton"
            };
            this._setUserList(e, t.player, "red_only", i),
            e.setVisible(!0)
        },
        _setGuildMemberPanelFire: function(e, t) {
            console.log(e, t),
            e = e.parent,
            null !== e.seekWidgetByName("btn_red_s") && e.seekWidgetByName("btn_red_s").setTitleText("解雇する");
            var n = {
                red: "_onTouchMemberFireButton",
                user: "_onTouchUserButton"
            };
            this._setUserList(e, t, "red_only", n),
            e.setVisible(!0)
        },
        _setGuildMemberPanelLeader: function(e, t) {
            console.log(e, t),
            e = e.parent,
            null !== e.seekWidgetByName("btn_blue_s") && e.seekWidgetByName("btn_blue_s").setTitleText("任命する");
            var n = {
                blue: "_onTouchSelectLeaderButton",
                user: "_onTouchUserButton"
            };
            this._setUserList(e, t, "guild_blue_only", n),
            e.setVisible(!0)
        },
        _toggleSelectButton: function(e, t) {
            if (!n.isUndefined(t)) {
                var i = e.seekWidgetByName(t);
                if (null === i)
                    return void console.warn("[ERROR] Could not find the parent node: " + t);
                var a = i.seekWidgetByName("default_btn_node")
                  , s = i.seekWidgetByName("select_btn_node");
                if (null === a)
                    return void console.warn("[ERROR] Could not find default button node.");
                if (null === s)
                    return void console.warn("[ERROR] Could not find select button node.");
                var o = a.isVisible();
                a.setVisible(!o),
                s.setVisible(o),
                null !== i.seekWidgetByName("userlist_page_ui") && n.each(i.seekWidgetByName("userlist_page_ui").getChildren(), function(e) {
                    e.seekWidgetByName("check_box_base") && e.seekWidgetByName("CheckBox_1") && (e.seekWidgetByName("check_box_base").setVisible(o),
                    e.seekWidgetByName("CheckBox_1").selected = !1,
                    this["_" + t + "_list"] = [])
                }, this)
            }
        },
        _fillupGuildFriendScoutBtnsList: function(e) {
            var t = [{
                targetNode: "tab_0_node",
                apiName: "apiAFriends",
                methodName: "getList",
                params: ["all"],
                initFuncName: "_setFriendScoutListPanel"
            }];
            n.delay(function() {
                n.each(t, function(t) {
                    this._fillupGuildFriendScoutBtnsListCore(e, t)
                }, this)
            }
            .bind(this), 500)
        },
        _fillupGuildFriendScoutBtnsListCore: function(e, n) {
            var i = e.seekWidgetByName(n.targetNode);
            if (null === i)
                return void console.debug("[ERROR] Could not find the node: " + n.targetNode);
            var a = {
                baseName: n.targetNode,
                panelName: t.BtnsPageListParams.GUILD_FRIEND_SCOUT_FRIEND.panelName,
                panelsPerPage: t.BtnsPageListParams.GUILD_FRIEND_SCOUT_FRIEND.perPage,
                apiName: n.apiName,
                apiMethod: n.methodName,
                apiParams: n.params,
                cardType: "misc",
                cardFrame: "plain"
            };
            this._setListBtnsControllerWithArgs(e, void 0, a, void 0, n.initFuncName).then(function(e) {
                0 === e.pageCount && null !== i.seekWidgetByName("nothing_node") ? i.seekWidgetByName("nothing_node").setVisible(!0) : e.pageCount > 0 && null !== i.seekWidgetByName("list_node") && i.seekWidgetByName("list_node").setVisible(!0)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setFriendScoutListPanel: function(e, t) {
            console.log(e, t),
            e = e.parent;
            var n = {
                blue: "_onTouchFriendScoutBlueButton",
                user: "_onTouchUserButton"
            };
            this._setUserList(e, t, "blue_only", n),
            null !== e.seekWidgetByName("btn_blue_s") && e.seekWidgetByName("btn_blue_s").setTitleText("スカウトする"),
            e.setVisible(!0)
        }
    },
    n.assign(t.pc.guild.roles.GuildMemberBtnsListController, t.pc.list.roles.PageListBtnsControllerCommon, t.pc.list.roles.UserListCommon, t.pc.roles.StringsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.roles = t.pc.guild.roles || {},
    t.pc.guild.roles.GuildPageListController = {
        _fillupGuildFriendScoutList: function(e) {
            var n = e.seekWidgetByName("tab_1_node");
            if (null === n)
                return void console.warn("[ERROR] Could not find a parent node.");
            var i = n.seekWidgetByName("change_page_panel");
            if (null === i)
                return void console.warn("[ERROR] Could not find a list parent node.");
            i.removeAllChildren();
            var a = t.createInstance("apiAUnionScoutsSearch").get(!0).then(function(i) {
                console.log(i.body);
                var a = i.body.max_record_count;
                if (this._fillupList(n, {
                    viewParent: t.PageListParams.GUILD_FRIEND_SCOUT_RECOMMEND.viewParent,
                    subPageRes: t.PageListParams.GUILD_FRIEND_SCOUT_RECOMMEND.subPageRes,
                    panelsPerPage: t.PageListParams.GUILD_FRIEND_SCOUT_RECOMMEND.perPage
                }, i.body.data, i.body.max_record_count, void 0, this._guildRecommendedPanelInitFunc.bind(this)),
                0 === a)
                    ;
                else {
                    var s = e.seekWidgetByPath("tab_1_node.list_node");
                    null !== s && s.setVisible(!0)
                }
                return i.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return a
        },
        _guildRecommendedPanelInitFunc: function(e, t, n) {
            console.log(e, t, n);
            var i = {
                blue: "_onTouchRecommendedBlueButton",
                user: "_onTouchUserButton"
            };
            this._setUserList(e, t, "blue_only", i),
            null !== e.seekWidgetByName("btn_blue_s") && e.seekWidgetByName("btn_blue_s").setTitleText("スカウトする"),
            e.setVisible(!0)
        }
    },
    n.assign(t.pc.guild.roles.GuildPageListController, t.pc.list.roles.PageListControllerCommon, t.pc.list.roles.UserListCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.roles = t.pc.guild.roles || {},
    t.pc.guild.roles.GuildNewsBtnsListController = {
        _fillupGuildNewsBtnsList: function(e) {
            var t = [{
                targetNode: "window_gray",
                apiName: "apiAUnions",
                methodName: "getNews",
                initFuncName: "_setGuildNewsPanel"
            }];
            n.delay(function() {
                n.each(t, function(t) {
                    this._fillupGuildNewsBtnsListCore(e, t)
                }, this)
            }
            .bind(this), 500)
        },
        _fillupGuildNewsBtnsListCore: function(e, n) {
            var i = e.seekWidgetByName(n.targetNode);
            if (null === i)
                return void console.debug("[ERROR] Could not find the node: " + n.targetNode);
            var a = {
                baseName: n.targetNode,
                panelName: t.BtnsPageListParams.GUILD_NEWS.panelName,
                panelsPerPage: t.BtnsPageListParams.GUILD_NEWS.perPage,
                apiName: n.apiName,
                apiMethod: n.methodName,
                apiParams: n.params,
                cardType: "misc",
                cardFrame: "plain"
            };
            this._setListBtnsControllerWithArgs(e, void 0, a, void 0, n.initFuncName).then(function(e) {
                0 === e.pageCount && null !== i.seekWidgetByName("nothing_node") ? i.seekWidgetByName("nothing_node").setVisible(!0) : e.pageCount > 0 && null !== i.seekWidgetByName("list_node") && i.seekWidgetByName("list_node").setVisible(!0);
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setGuildNewsPanel: function(e, t) {
            console.log(e, t),
            e = e.parent,
            null !== e.seekWidgetByName("date_label") && e.seekWidgetByName("date_label").setString(t.date),
            null !== e.seekWidgetByName("news_label") && e.seekWidgetByName("news_label").setString(t.title),
            e.setVisible(!0)
        }
    },
    n.assign(t.pc.guild.roles.GuildNewsBtnsListController, t.pc.list.roles.PageListBtnsControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.list = t.pc.list || {},
    t.pc.list.roles = t.pc.list.roles || {},
    t.pc.list.roles.ChatPageListBtnsController = {
        _fillupChatBtnsList: function(e, t, n, a) {
            t = t || "apiAUnions",
            n = n || "getChats",
            a = a || [];
            var s = {
                targetNode: "window_gray",
                apiName: t,
                methodName: n,
                apiParams: a,
                initFuncName: "_setChatPanel"
            };
            i.delay(function() {
                this._fillupChatBtnsListCore(e, s)
            }
            .bind(this), 250)
        },
        _fillupChatBtnsListCore: function(e, t) {
            var n = e.seekWidgetByName(t.targetNode);
            if (null === n)
                return void console.debug("[ERROR] Could not find the node: " + t.targetNode);
            var a, s = {
                baseName: t.targetNode,
                panelName: "balloonlist_ui_page",
                controllerName: "pageController",
                panelsPerPage: 4,
                apiName: t.apiName,
                apiMethod: t.methodName,
                apiParams: t.apiParams,
                cardType: "misc",
                cardFrame: "plain"
            };
            i.isUndefined(this.pageController) || (a = this.pageController._pagerButtons.getCurrentPageNumber()),
            this._setListBtnsControllerWithArgs(e, void 0, s, void 0, t.initFuncName).then(function(t) {
                var s = e.seekWidgetByName("btn_chat_stamp");
                null !== s && s.setVisible(!0);
                var o = t.pageCount <= 0
                  , r = n.seekWidgetByName("nothing_node")
                  , c = n.seekWidgetByName("list_node");
                null !== r && r.setVisible(o),
                null !== c && c.setVisible(!o),
                o || i.isUndefined(a) || i.isUndefined(this.pageController) || this.pageController._pagerButtons.updatePagerButtons()
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setChatPanel: function(e, a) {
            console.log(e, a),
            e = e.parent;
            var s = n.director.getRunningScene()
              , o = e.seekWidgetByName("btn_player")
              , r = a.from_player_info;
            if (o && !i.isUndefined(r) && !i.isUndefined(r.job_id)) {
                var c = t.Img("iconcircle", "job", i.padZero(r.job_id, 4), 0).png;
                o.loadTextures(c, c, c)
            }
            i.isFunction(this._onTouchChatPlayer) && t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_player": function() {
                    this._onTouchChatPlayer(s, a)
                }
                .bind(this)
            });
            var u = e.seekWidgetByName("btn_delete")
              , _ = !1;
            i.isUndefined(r) || (_ = i.isUndefined(this._playerInfo) ? "me" === r.a_player_id : "me" === this._playerInfo.a_player_id || "me" === r.a_player_id),
            u.setVisible(_),
            _ && i.isFunction(this._onTouchDeleteChat) && t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_delete": function() {
                    this._onTouchDeleteChat(s, a)
                }
                .bind(this)
            }),
            i.isUndefined(r) || i.isUndefined(r.name) || i.isNull(e.seekWidgetByName("username_label")) || e.setStrings({
                username_label: r.name + " Rank " + r.rank
            }),
            i.isUndefined(r) || i.isUndefined(a.date) || i.isNull(e.seekWidgetByName("date_time_label")) || e.setStrings({
                date_time_label: a.date
            }),
            this._setChatPanelLabelStamp(e, a),
            e.setVisible(!0)
        },
        _setChatPanelLabelStamp: function(e, n) {
            var a = "chat_only";
            if (!i.isUndefined(n.stamp_id))
                var a = "stamp_only";
            var s = e.getActionByTag(e.tag);
            if (s) {
                if (i.isUndefined(s.animationInfo[a]))
                    return void console.warn("[ERROR] Could not find animation in balloonlist: " + a);
                s.gotoFrameAndPause(s.animationInfo[a].startIndex)
            }
            var o = e.seekWidgetByName("coreimg_stamp")
              , r = e.seekWidgetByName("chat_label");
            if (o.setVisible("stamp_only" === a),
            r.setVisible("chat_only" === a),
            null !== o && "stamp_only" === a) {
                var c = t.Img("coreimg", "stamp", i.padZero(n.stamp_id, 4)).png;
                o.loadTexture(c)
            } else
                null !== r && e.setStrings({
                    chat_label: n.message
                })
        }
    },
    i.assign(t.pc.list.roles.ChatPageListBtnsController, t.pc.list.roles.PageListBtnsControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.roles = t.pc.guild.roles || {},
    t.pc.guild.roles.Routing = {
        _navigateTo000b: function(e) {
            t.createInstance("router").navigate("guild/gud_000_b")
        },
        _navigateTo000c: function(e) {
            t.createInstance("router").navigate("guild/gud_000_c")
        },
        _navigateTo0001ById: function(e) {
            t.createInstance("router").navigate("guild/gud_001", {}, {
                id: e
            })
        },
        _navigate000To001: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_union_id) ? void this._consoleErrorRoutingAbort("record.a_union_id") : void t.createInstance("router").navigate("guild/gud_001", {}, {
                id: i.a_union_id
            })
        },
        _verifyRouterParams001: function(e) {
            n.isUndefined(e.routerParams.gud_001) || n.isUndefined(e.routerParams.gud_001.id) || (e.temporaryRouterParams.id = e.routerParams.gud_001.id,
            delete e.routerParams.gud_001,
            console.warn(new Error("【警告】ルーティングパラメーター 'gud_001:id' は使わないで temporaryRouterParams に 'id' をセットしてください").stack)),
            n.isUndefined(e.temporaryRouterParams.id) && (e.temporaryRouterParams.id = "me")
        },
        _navigate001To001a: function(e) {
            e.routerParams.gud_001;
            t.createInstance("router").navigate("guild/gud_001", {}, {})
        },
        _navigate001aTo007: function(e, n) {
            e.routerParams.gud_001;
            n ? t.createInstance("router").navigate("guild/gud_007_a", {
                gud_007: {
                    id: "me",
                    selectedTab: "tab_0"
                }
            }) : t.createInstance("router").navigate("guild/gud_007_b", {
                gud_007: {
                    id: "me"
                }
            })
        },
        _navigate001To007: function(e) {
            if (n.isUndefined(e.temporaryRouterParams.id))
                return void this._consoleErrorRoutingAbort("temporaryRouterParams.id");
            e.routerParams.gud_001;
            t.createInstance("router").navigate("guild/gud_007_b", {
                gud_007: {
                    id: e.temporaryRouterParams.id
                }
            })
        },
        _navigate001ToMyPage: function(e) {
            t.createInstance("router").navigate("mypage")
        },
        _navigate001To010: function(e) {
            t.createInstance("router").navigate("guild/gud_010", {
                gud_010: {}
            })
        },
        _verifyRouterParams002: function(e) {
            n.isUndefined(e.routerParams.gud_002) && (e.routerParams.gud_002 = {},
            e.routerParams.gud_002.id = "me")
        },
        _navigate002To003: function(e, n) {
            t.createInstance("router").navigate("guild/gud_003", {
                gud_003: {}
            })
        },
        _navigate002To005: function(e) {
            return n.isUndefined(e.routerParams.gud_002) ? void this._consoleErrorRoutingAbort("routerParams.gud_002") : n.isUndefined(e.routerParams.gud_002.id) ? void this._consoleErrorRoutingAbort("routerParams.gud_002.id") : void t.createInstance("router").navigate("guild/gud_005", {
                gud_005: {
                    id: e.routerParams.gud_002.id
                }
            })
        },
        _verifyRouterParams003: function(e) {},
        _verifyRouterParams005: function(e) {
            n.isUndefined(e.routerParams.gud_005) && (e.routerParams.gud_005 = {},
            e.routerParams.gud_005.id = 1,
            this._consoleErrorRouterParams("routerParams.gud_005, .id"))
        },
        _verifyRouterParams007: function(e) {
            n.isUndefined(e.routerParams.gud_007) && (e.routerParams.gud_007 = {},
            e.routerParams.gud_007.id = "me",
            e.routerParams.gud_007.selectedTab = "tab_0")
        },
        _navigate007ToPRF001: function(e, t) {
            this._commonNavigateToPRF001(e, t)
        },
        _verifyRouterParams009: function(e) {},
        _navigate008ToPRF001: function(e, t) {
            this._commonNavigateToPRF001(e, t)
        },
        _verifyRouterParams010_011_012: function(e) {},
        _navigate010_011_012ToPRF001: function(e, t) {
            this._commonNavigateToPRF001(e, t)
        },
        _verifyRouterParams013: function(e) {},
        _navigate013ToPRF001: function(e, t) {
            this._commonNavigateToPRF001(e, t)
        },
        _commonNavigateToPRF001: function(e, i) {
            return n.isUndefined(i) ? void this._consoleErrorRoutingAbort("player_id") : void ("me" === i ? t.createInstance("router").navigate("profile/prf_001a", {
                prf_001: {
                    id: i,
                    type: "own"
                }
            }) : t.createInstance("router").navigate("profile/prf_001b", {
                prf_001: {
                    id: i,
                    type: "other"
                }
            }))
        }
    },
    n.assign(t.pc.guild.roles.Routing, t.pc.roles.RoutingCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.roles = t.pc.guild.roles || {},
    t.pc.guild.roles.GuildControlPopupPermissions = {
        __buttonAndPermission: {
            btn_dissolution: "canDismissUnion",
            btn_dismissal: "canFireMember",
            btn_change_name: "canRenameUnion",
            btn_bursttime: "canChangeBurstTime",
            btn_appoint: "canAppointLeaderUnion",
            btn_leave: "canLeave"
        },
        _setupButtons: function(e) {
            this.__resetButtons(e);
            var n = t.createInstance("GuildControlPermissionModel");
            n.prepare().then(function(t) {
                this.__setButtonsAccordingToPermissions(e, t)
            }
            .bind(this))
        },
        __resetButtons: function(e) {
            i.each(this.__buttonAndPermission, function(t, n) {
                var i = e.seekWidgetByName(n);
                null !== i && this.__setButtonEnabled(i, !1)
            }, this)
        },
        __setButtonsAccordingToPermissions: function(e, t) {
            i.each(this.__buttonAndPermission, function(n, i) {
                var a = e.seekWidgetByName(i);
                null !== a && this.__setButtonEnabled(a, t[n]())
            }, this)
        },
        __setButtonEnabled: function(e, t) {
            e.setEnabled(t),
            e.setColor(t ? n.color.WHITE : n.color("#808080"))
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc;
    e.ccs,
    e._,
    e.res;
    t.Gud001ControlAnimation = n.Class.extend({
        _popup: null ,
        _burstTimeButton: null ,
        _targetNode: null ,
        _khBurstTime: null ,
        ctor: function(e) {
            this._popup = e,
            this._khBurstTime = t.createInstance("burstTime"),
            this._burstTimeButton = this._popup.seekWidgetByName("btn_bursttime"),
            this._targetNode = this._getTargetNode(this._popup)
        },
        show: function() {
            this._khBurstTime.prepare().then(function() {
                var e = this._khBurstTime.isEnabled() && this._khBurstTime.isReservable() ? "bursttime_view" : "nothing_view";
                this._targetNode.animate(e)
            }
            .bind(this))
        },
        _getTargetNode: function(e) {
            var t = e.seekWidgetByName("top_pin_node");
            return t.getChildren()[0]
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGud000Attention = n.PopupFactoryTextOnly.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-text_button_only",
            title: "再" + n.w("joinedUnion") + "について",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                },
                blueBtn: function(e) {
                    this.dismiss(),
                    "function" == typeof this._okCallback && this._okCallback.call(e._delegate || e)
                }
            }
        },
        POPUP_METHODS: {
            openEx: function(e) {
                var t = this.open()
                  , i = '<div class="red">ユニオンに' + n.w("joinedUnion") + "し、脱退すると、<br />24時間、新たなユニオンには" + n.w("joinedUnion") + "できなくなります。</div>";
                return this.setContent(i),
                "function" == typeof e ? this._okCallback = e : e && (this._okCallback = function() {
                    n.createInstance("router").navigate(e)
                }
                ),
                t
            }
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryTextOnly.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGud000Forbidden = n.PopupFactoryTextOnly.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-text_button_only",
            title: n.w("joinedUnion") + "できません",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {
            openEx: function(e) {
                var t = this.open()
                  , i = "<div>ユニオンの再" + n.w("joinedUnion") + 'が制限されています。<br/><span class="red">';
                return i += e + "</span> まで<br/>",
                i += "ユニオンに再" + n.w("joinedUnion") + "することができません。</div>",
                this.setContent(i),
                t
            }
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryTextOnly.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGud001Control = n.PopupFactoryPopupCommon.extend(t.assign(n.pc.guild.roles.GuildControlPopupPermissions, {
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_001_control",
            title: "ユニオン管理",
            buttonLabels: {
                blackBtn: "キャンセル"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            this._setupButtons(e),
            this.unionData = t.data;
            var i = {
                "TOUCH_ENDED btn_dissolution": function() {
                    e.dismiss(),
                    this._confirmBreak.call(this)
                }
                .bind(this),
                "TOUCH_ENDED btn_status": function() {
                    e.dismiss(),
                    this._openMyStatusPopup.call(this)
                }
                .bind(this),
                "TOUCH_ENDED btn_set_condition": function() {
                    e.dismiss(),
                    this._openSetConditionPopup.call(this)
                }
                .bind(this),
                "TOUCH_ENDED btn_appoint": function() {
                    e.dismiss(),
                    this._gotoAppointRolePage.call(this)
                }
                .bind(this),
                "TOUCH_ENDED btn_dismissal": function() {
                    e.dismiss(),
                    this._gotoDismissalMemberPage.call(this)
                }
                .bind(this),
                "TOUCH_ENDED btn_change_introduction": function() {
                    e.dismiss(),
                    this._openEditCommentPopup.call(this)
                }
                .bind(this),
                "TOUCH_ENDED btn_change_name": function() {
                    e.dismiss(),
                    this._openNameChangePopup.call(this)
                }
                .bind(this),
                "TOUCH_ENDED btn_bursttime": function() {
                    e.dismiss(),
                    this._openBurstTimePopup.call(this)
                }
                .bind(this)
            };
            if (n.setTouchEventHandlers(e, i, e),
            n.createInstance("Gud001ControlAnimation", [e]).show(),
            this.unionData.member_count === this.unionData.max_member_count) {
                var a = e.seekWidgetByName("btn_set_condition");
                a.setColor(cc.color("#808080")),
                a.setEnabled(!1)
            }
        },
        _openNameChangePopup: function() {
            var e = cc.director.getRunningScene()
              , t = (e._delegate || e)._data.union || {
                name: "Error"
            }
              , i = n.createInstance("popupFactoryGudNameCha").create({});
            i.open({
                name: t.name,
                nameTextId: t.name_text_id
            })
        },
        _openEditCommentPopup: function() {
            var e = cc.director.getRunningScene()
              , t = e._delegate || e;
            t._editComment.call(t)
        },
        _openMyStatusPopup: function() {
            var e = n.createInstance("popupFactoryGudMyStatus").create({});
            e.open()
        },
        _openSetConditionPopup: function() {
            var e = n.createInstance("apiAUnionJoinConditions");
            e.get().then(function(e) {
                try {
                    var t = cc.director.getRunningScene()
                      , i = n.createInstance("popupFactoryGudRequestSet").create({});
                    i.open({
                        data: e.body,
                        scene: t
                    })
                } catch (a) {
                    console.error(a)
                }
            }
            .bind(this))
        },
        _gotoAppointRolePage: function() {
            var e = cc.director.getRunningScene();
            t.isUndefined(e._delegate) ? n.createInstance("router").navigate("guild/gud_013", {
                gud_013: {
                    type: "change"
                }
            }) : n.createInstance("router").navigate("guild/gud_013_b", {
                gud_013_b: {}
            })
        },
        _gotoDismissalMemberPage: function() {
            var e = cc.director.getRunningScene();
            t.isUndefined(e._delegate) ? n.createInstance("router").navigate("guild/gud_013", {
                gud_013: {
                    type: "fire"
                }
            }) : n.createInstance("router").navigate("guild/gud_013_a", {
                gud_013_a: {}
            })
        },
        _confirmBreak: function() {
            var e = n.createInstance("popupFactoryGud001Break").create({});
            e.openWithActions(null , {
                blackBtn: !1,
                blueBtn: !0
            }).then(this._confirmBreakAgain.bind(this))
        },
        _confirmBreakAgain: function() {
            var e = cc.director.getRunningScene();
            e._openMessagePopup({
                title: "ユニオン解散最終確認",
                content: '<div>本当にユニオンを<span class="red">解散</span>しますか？</div>',
                buttons: [["blackBtn", "キャンセル"], ["redBtn", "解散する", !0]]
            }).then(this._processBreak.bind(this))
        },
        _processBreak: function() {
            var e = cc.director.getRunningScene()
              , t = n.createInstance("apiAUnions");
            t.dissolution().then(function(t) {
                e._openMessagePopup({
                    title: "ユニオン解散完了",
                    content: "<div>ユニオンを解散しました。</div>",
                    buttons: [["blueBtn", "OK", !0]]
                }).then(function() {
                    n.createInstance("router").navigate("mypage")
                })
            }
            .bind(this))
        },
        _openBurstTimePopup: function(e) {
            var e = n.createInstance("popupFactoryGud001BurstTimeChange").create({});
            e.open()
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    }))
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGud001UncontrolBurstTime = n.PopupFactoryPopupCommon.extend(t.assign(n.pc.guild.roles.GuildControlPopupPermissions, {
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_001_uncontrol_a",
            title: "ユニオン管理",
            buttonLabels: {
                blackBtn: "キャンセル"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            this._setupButtons(e);
            var i = {
                "TOUCH_ENDED btn_leave": function() {
                    e.dismiss(),
                    this._confirmLeave.call(this)
                }
                .bind(this),
                "TOUCH_ENDED btn_status": function() {
                    e.dismiss(),
                    this._myStatus.call(this)
                }
                .bind(this),
                "TOUCH_ENDED btn_bursttime": function() {
                    e.dismiss(),
                    this._openBurstTimePopup.call(this)
                }
                .bind(this)
            };
            n.createInstance("Gud001ControlAnimation", [e]).show(),
            n.setTouchEventHandlers(e, i, e)
        },
        _myStatus: function() {
            var e = n.createInstance("popupFactoryGudMyStatus").create({});
            e.open()
        },
        _confirmLeave: function() {
            var e = n.createInstance("popupFactoryGud001Leave").create({});
            e.openWithActions(null , {
                blackBtn: !1,
                blueBtn: !0
            }).then(this._confirmLeaveAgain.bind(this))
        },
        _confirmLeaveAgain: function() {
            var e = cc.director.getRunningScene();
            e._openMessagePopup({
                title: "ユニオン脱退最終確認",
                content: '<div>本当にユニオンを<span class="red">脱退</span>しますか？</div>',
                buttons: [["blackBtn", "キャンセル"], ["redBtn", "脱退する", !0]]
            }).then(this._processLeave.bind(this))
        },
        _processLeave: function() {
            var e = cc.director.getRunningScene()
              , t = n.createInstance("apiAUnions");
            t.leave().then(function(t) {
                e._openMessagePopup({
                    title: "ユニオン脱退完了",
                    content: "<div>ユニオンを脱退しました。</div>",
                    buttons: [["blueBtn", "閉じる", !0]]
                }).then(function() {
                    n.createInstance("router").navigate("mypage")
                })
            }
            .bind(this))
        },
        _openBurstTimePopup: function(e) {
            var e = n.createInstance("popupFactoryGud001BurstTimeChange").create({});
            e.open()
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    }))
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGud001Uncontrol = n.PopupFactoryPopupCommon.extend(t.assign(n.pc.guild.roles.GuildControlPopupPermissions, {
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_001_uncontrol_b",
            title: "ユニオン管理",
            buttonLabels: {
                blackBtn: "キャンセル"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            this._setupButtons(e);
            var i = {
                "TOUCH_ENDED btn_leave": function() {
                    e.dismiss(),
                    this._confirmLeave.call(this)
                }
                .bind(this),
                "TOUCH_ENDED btn_status": function() {
                    e.dismiss(),
                    this._myStatus.call(this)
                }
                .bind(this)
            };
            n.setTouchEventHandlers(e, i, e)
        },
        _myStatus: function() {
            var e = n.createInstance("popupFactoryGudMyStatus").create({});
            e.open()
        },
        _confirmLeave: function() {
            var e = n.createInstance("popupFactoryGud001Leave").create({});
            e.openWithActions(null , {
                blackBtn: !1,
                blueBtn: !0
            }).then(this._confirmLeaveAgain.bind(this))
        },
        _confirmLeaveAgain: function() {
            var e = cc.director.getRunningScene();
            e._openMessagePopup({
                title: "ユニオン脱退最終確認",
                content: '<div>本当にユニオンを<span class="red">脱退</span>しますか？</div>',
                buttons: [["blackBtn", "キャンセル"], ["redBtn", "脱退する", !0]]
            }).then(this._processLeave.bind(this))
        },
        _processLeave: function() {
            var e = cc.director.getRunningScene()
              , t = n.createInstance("apiAUnions");
            t.leave().then(function(t) {
                e._openMessagePopup({
                    title: "ユニオン脱退完了",
                    content: "<div>ユニオンを脱退しました。</div>",
                    buttons: [["blueBtn", "閉じる", !0]]
                }).then(function() {
                    n.createInstance("router").navigate("mypage")
                })
            }
            .bind(this))
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    }))
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGud001Edit = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_001_edit",
            title: "ユニオン紹介文編集",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {}
        },
        POPUP_METHODS: {},
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGud001Leave = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_001_break_leave",
            title: "ユニオン脱退確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {}
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            e.setHtmlStrings({
                break_leave_labelimg: '<div><span class="red">ユニオンを脱退します</span><br/>本当によろしいですか？</div>'
            }, n.GameConfig.POPUP_CSS);
            var i = e.seekWidgetByName("caution_label");
            i.setString("【注意事項】\nユニオンを脱退しても、今まで寄付した\nジェムは返却されません。\n新たにユニオンに" + n.w("joinedUnion") + "・結成しても引き継がれません。\nまた、解散後24時間は新たなユニオンの結成と\n他のユニオンへの" + n.w("joinedUnion") + "が行えません。")
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGud001Break = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_001_break_leave",
            title: "ユニオン解散確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {}
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            e.setHtmlStrings({
                break_leave_labelimg: '<div><span class="red">ユニオンを解散します。</span><br/>よろしいですか？</div>'
            }, n.GameConfig.POPUP_CSS);
            var i = e.seekWidgetByName("caution_label");
            i.setString("【注意事項】\nユニオンを解散すると、今まで寄付した\n" + n.w("gem") + "は失われます。\n新たにユニオンを結成しても引き継がれません。\nまた、解散後24時間は新たなユニオンの結成と\n他のユニオンへの" + n.w("joinedUnion") + "が行えません。"),
            i.fontSize = 20,
            setTimeout(function() {
                i.setVisible(!0)
            }, 10)
        },
        create: function(e, i) {
            var a = n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i);
            return a.contentNode.seekWidgetByName("caution_label").setVisible(!1),
            a
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.cc
      , a = e.res;
    n.PopupFactoryGud001BurstTimeChange = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_001_bursttime_change",
            title: "バーストタイム変更予約",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                },
                blueBtn: function(e) {
                    this.updateBurstTime()
                }
            }
        },
        POPUP_METHODS: {},
        _khBurstTime: null ,
        _widgets: {
            labels: [],
            pulldowns: []
        },
        _pulldowns: [],
        _pulldownEventListeners: [],
        _selectedValues: [],
        _popup: null ,
        onPopupOpened: function(e, t) {
            this._popup = e,
            this._widgets.labels[0] = e.seekWidgetByName("bursttime_period_label_0"),
            this._widgets.labels[1] = e.seekWidgetByName("bursttime_period_label_1"),
            this._widgets.pulldowns[0] = e.seekWidgetByName("group_panel_0"),
            this._widgets.pulldowns[1] = e.seekWidgetByName("group_panel_1"),
            this._widgets.okButton = e.seekWidgetByName("blue_btn"),
            this._khBurstTime = n.createInstance("burstTime"),
            this._khBurstTime.prepare().then(this._initWidgets.bind(this))
        },
        _initWidgets: function() {
            this._widgets.okButton.setEnabled(!1),
            this._widgets.okButton.setColor(i.color("#808080")),
            t.each(this._widgets.labels, function(e, t) {
                var n = this._khBurstTime.getSelectedBurstTimeInfo(t).description;
                e.setString("【時間" + (t + 1).toString() + "】" + n)
            }
            .bind(this));
            var e = this._khBurstTime.getSelectableBurstTimes();
            t.each(this._widgets.pulldowns, function(n, a) {
                this._selectedValues[a] = this._khBurstTime.getReservedBurstTimeInfo(a).type,
                t.isNumber(this._selectedValues[a]) || (this._selectedValues[a] = this._khBurstTime.getSelectedBurstTimeInfo(a).type),
                this._khBurstTime.changePreReservedBurstTime(a, this._selectedValues[a]),
                this._pulldowns[a] = this._createBurstTimePullDown(n, e, this._selectedValues[a]),
                this._pulldownEventListeners[a] = function(e) {
                    this._selectedValues[a] = e.value,
                    this._khBurstTime.changePreReservedBurstTime(a, this._selectedValues[a]);
                    var n = t.filter(this._selectedValues, function(t) {
                        return t === e.value
                    }).length;
                    return n > 1 ? (this._widgets.okButton.setEnabled(!1),
                    void this._widgets.okButton.setColor(i.color("#808080"))) : (this._widgets.okButton.setEnabled(!0),
                    void this._widgets.okButton.setColor(i.color("#FFFFFF")))
                }
                .bind(this),
                this._pulldowns[a].onChange(this._pulldownEventListeners[a])
            }
            .bind(this))
        },
        _createBurstTimePullDown: function(e, i, s) {
            var o = t.map(i, function(e) {
                var t = {
                    value: e.type,
                    text: e.type.toString() + ":00"
                };
                return t.value === s && (t.selected = !0),
                t
            })
              , r = new n.Pulldown({
                button: e.seekWidgetByName("btn_pulldown_bursttime"),
                label: e.seekWidgetByName("bursttime_label"),
                menuBase: e,
                choice: ccs.load(a["core-sort-sort_list_ui"]).node
            },o);
            return r
        },
        _updateBurstTime: function() {
            this._khBurstTime.update().then(this._onUpdateSuccess.bind(this), this._onUpdateFail.bind(this))
        },
        _onUpdateSuccess: function(e) {
            this._popup.dismiss();
            var t = (i.director.getRunningScene(),
            n.createInstance("popupFactoryGud001BurstTimeResult").create({}));
            t.open()
        },
        _onUpdateFail: function(e) {
            this._popup.dismiss();
            var t = i.director.getRunningScene();
            t._openMessagePopup({
                title: "バーストタイム変更予約不可",
                content: "バーストタイムの変更予約をすることができません。",
                buttons: [["blueBtn", "OK", !0]]
            }).then(this._goToMyPage.bind(this))
        },
        _goToMyPage: function() {
            n.createInstance("router").navigate("mypage")
        },
        create: function(e, i) {
            return n.PopupFactoryPopupCommon.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            this.POPUP_METHODS.updateBurstTime = this._updateBurstTime.bind(this),
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGud001BurstTimeResult = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_001_bursttime_result",
            title: "バーストタイム変更予約完了",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        _khBurstTime: null ,
        onPopupOpened: function(e, t) {
            this._khBurstTime = n.createInstance("burstTime");
            var i = e.seekWidgetByName("bursttime_period_label_0")
              , a = e.seekWidgetByName("bursttime_period_label_1");
            i.setString(this._getReservedBurstTimeText(0)),
            a.setString(this._getReservedBurstTimeText(1))
        },
        _getReservedBurstTimeText: function(e) {
            var n = this._khBurstTime.getReservedBurstTimeInfo(e);
            if (n && t.isNumber(n.type))
                var i = n.description;
            else
                var i = this._khBurstTime.getSelectedBurstTimeInfo(e).description;
            return "【時間" + (e + 1).toString() + "】" + i
        },
        create: function(e, i) {
            return n.PopupFactoryPopupCommon.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudGemAmount = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_gem_amount",
            title: n.w("gem") + "を寄付する",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "寄付する"
            },
            buttons: {}
        },
        POPUP_METHODS: {
            cleanup: function() {
                null != this.editBox && (this.editBox.cleanup(),
                this.editBox = null ),
                n.Popup.prototype.cleanup.apply(this, arguments)
            }
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGud002Detail = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_002_detail",
            title: "守護神詳細",
            buttonLabels: {
                blackBtn: "閉じる"
            },
            buttons: {
                blackBtn: function(e) {
                    console.log("Blk btn clicked"),
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {
            setEffects: function(e) {
                for (var t, n = e.detail_info.effects, i = 0; 5 > i && (t = this.seekWidgetByName("learn_effect_label_" + i),
                t); i++)
                    if (n.length > i) {
                        var a = n[i];
                        t.setString("守護神Lv" + a.level + "　　" + (a.is_acquired ? "習得済み" : "未習得") + "\n" + a.description),
                        t.setColor(a.is_acquired ? cc.color("#ffE000") : cc.color("#dddddd")),
                        t.enableOutline(cc.color("#444444"), 2)
                    } else
                        t.setString("")
            }
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudGuardianDetail = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_guardian_detail_nomoney",
            title: "{{守護神名}}",
            buttonLabels: {
                blackBtn: "閉じる"
            },
            buttons: {
                blackBtn: function(e) {
                    console.log("Blk btn clicked"),
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudGuardianDetailB = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_guardian_detail_b",
            title: "{{守護神名}}",
            buttonLabels: {
                blackBtn: "閉じる"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.cc;
    e.ccui;
    n.PopupFactoryComRoleChange = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_auth_change",
            title: "役職の変更",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                },
                blueBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, a) {
            this._popup = e,
            this._record = a.record,
            console.log(a),
            n.setTouchEventHandlers(e, {
                "TOUCH_ENDED blue_btn": function() {
                    var e = i.director.getRunningScene()
                      , n = e._delegate || e;
                    t.isFunction(n._changeRole) && n._changeRole(this._record, this._pulldown.selected.value),
                    this._popup.dismiss()
                }
            }, this),
            this._loadContent()
        },
        _loadContent: function() {
            this._initPulldown(),
            this._initLabels()
        },
        _initPulldown: function() {
            var e = JSON.parse(JSON.stringify(n.WordBook.UNION_ROLE_LIST))
              , t = this._popup;
            this._pulldown = new n.Pulldown({
                button: t.seekWidgetByName("btn_pulldown"),
                label: t.seekWidgetByName("pulldown_label"),
                menuBase: t.seekWidgetByName("gud_auth_change_sort"),
                choice: ccs.load(res["core-popup-gud_sh_sort_list_ui"]).node
            },e)
        },
        _initLabels: function() {
            var e = n.w("unionRoles");
            console.log(e[this._record.union_position]),
            this._popup.seekWidgetByName("top_label").setString(this._record.name + "の現在の役職"),
            this._popup.seekWidgetByName("position_label").setString(e[this._record.union_position]),
            this._popup.seekWidgetByName("by_label").setString("に変更")
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudGuardianBuy = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_guardian_change_buy",
            title: "{{守護神}}"
        },
        POPUP_METHODS: {},
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudGuardianChange = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_guardian_change_buy",
            title: "{{守護神名}}"
        },
        POPUP_METHODS: {},
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudGuardianNomoney = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_guardian_detail_nomoney",
            title: "{{守護神}}",
            buttonLabels: {
                blackBtn: "閉じる"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudGuardianResult = n.PopupFactoryTextOnly.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-text_button_only",
            title: "購入結果",
            buttonLabels: {
                blueBtn: "閉じる"
            },
            buttons: {
                blueBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryTextOnly.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudChangeResult = n.PopupFactoryTextOnly.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-text_button_only",
            title: "守護神変更完了",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryTextOnly.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.cc;
    e.ccui;
    n.PopupFactoryComMemberFire = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_013_fire_top_change_end",
            title: "隊員解雇確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                },
                blueBtn: function(e) {}
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            console.log(t),
            n.setTouchEventHandlers(e, {
                "TOUCH_ENDED blue_btn": function() {
                    this._clickBlueButton(e, t.record)
                }
            }, this),
            this._loadContent(e, t.record)
        },
        _loadContent: function(e, i) {
            var a = n.createInstance("CoreCardJobUI");
            a.setImg(i.job_id, 0);
            var s = a.getResult()
              , o = e.seekWidgetByName("corecard_job_ui");
            t.isUndefined(o) || (o.removeAllChildren(),
            o.addChild(s)),
            e.setStrings({
                username_label: i.name + " Rank" + i.rank
            }),
            e.setHtmlStrings({
                confirm_labelimg: "このプレイヤーを<span class='red'>解雇</span>しますか？"
            }, n.GameConfig.POPUP_CSS),
            this._initializedPopup = !0
        },
        _clickBlueButton: function(e, n) {
            var a = i.director.getRunningScene()
              , s = a._delegate || a;
            t.isFunction(s._confirmFireMember) && s._confirmFireMember.apply(s, [n]),
            e.dismiss()
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.cc;
    e.ccui;
    n.PopupFactoryComLeaderChange = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_013_fire_top_change_end",
            title: "隊長任命",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                },
                blueBtn: function(e) {}
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            console.log(t),
            n.setTouchEventHandlers(e, {
                "TOUCH_ENDED blue_btn": function() {
                    this._clickBlueButton(e, t.record)
                }
            }, this),
            this._loadContent(e, t.record)
        },
        _loadContent: function(e, i) {
            var a = n.createInstance("CoreCardJobUI");
            a.setImg(i.job_id, 0);
            var s = a.getResult()
              , o = e.seekWidgetByName("corecard_job_ui");
            t.isUndefined(o) || (o.removeAllChildren(),
            o.addChild(s)),
            e.setStrings({
                username_label: i.name + " Rank" + i.rank
            }),
            e.setHtmlStrings({
                confirm_labelimg: "このプレイヤーを隊長に任命しますか？<br />任命すると<span class='red'>あなたは" + n.w("unionMember") + "になります。</span>"
            }, n.GameConfig.POPUP_CSS),
            this._initializedPopup = !0
        },
        _clickBlueButton: function(e, n) {
            var a = i.director.getRunningScene()
              , s = (a._delegate || a)._changeLeader;
            t.isFunction(s) && s(n),
            e.dismiss()
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    e.cc,
    e.ccui;
    n.PopupFactoryComLeaderChangeDone = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_013_fire_top_change_end",
            title: "隊長任命完了",
            buttonLabels: {
                blueBtn: "閉じる"
            },
            buttons: {
                blueBtn: function(e) {
                    this.dismiss(),
                    t.isFunction(e.gotoGuildTop) ? e.gotoGuildTop() : n.createInstance("unionRouter").navigateToTopScene("me")
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            console.log(t),
            this._loadContent(e, t.record)
        },
        _loadContent: function(e, i) {
            var a = n.createInstance("CoreCardJobUI");
            a.setImg(i.job_id, 0);
            var s = a.getResult()
              , o = e.seekWidgetByName("corecard_job_ui");
            t.isUndefined(o) || (o.removeAllChildren(),
            o.addChild(s)),
            e.setStrings({
                username_label: i.name + " Rank" + i.rank
            }),
            e.setHtmlStrings({
                confirm_labelimg: "このプレイヤーを隊長に任命しました。"
            }, n.GameConfig.POPUP_CSS),
            this._initializedPopup = !0
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComEditNocom = n.PopupFactoryTextOnly.extend({
        POPUP_PROPERTIES: {
            title: "文字未入力",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss()
                }
            }
        },
        onPopupOpened: function(e, t) {
            t.openedByGudGemAmount ? (e.setTitle("寄付額を入れてください"),
            e.setContent('<div style="text-align: center"><span class="red">寄付額を入れてください。</span></div>')) : e.setContent('<div style="text-align: center"><span class="red">文字を入力してください。</span></div>')
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryTextOnly.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudMyStatus = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_mystatus",
            title: "マイステータス",
            buttonLabels: {
                blackBtn: "閉じる"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e) {
            e._data = {};
            var i = [{
                api: "apiAUnions",
                args: ["me"],
                method: "getMember",
                callback: function(e) {
                    this._data.member = e
                }
                .bind(e)
            }, {
                api: "apiAUnions",
                method: "getDonationInfo",
                callback: function(e) {
                    this._data.donate = e
                }
                .bind(e)
            }]
              , a = [];
            t.each(i, function(e, t) {
                var i, s = n.createInstance(e.api), o = e.args || [];
                i = s[e.method].apply(s, o).then(function(t) {
                    e.callback.call(this, t.body)
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                }),
                a.push(i)
            }, this),
            Q.all(a).done(this._onCallApisFinished.bind(e))
        },
        _onCallApisFinished: function() {
            var e = this._data.donate
              , t = this._data.member
              , i = n.w("unionRoles")[t.union_position]
              , a = n.htmlBuilder.makeDivAndSpans([[["white", "役職:"], ["yellow", i]], [["white", "合計寄付額:"], ["yellow", e.my_data.total_donation_amount + n.w("gem")]]]);
            this.setHtmlStrings({
                gud_status_label: a
            }, n.GameConfig.POPUP_CSS);
            var s = this.seekWidgetByName("name_label");
            s.setString("「" + t.name + "」の記録")
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudRequestSet = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_request_set_ab",
            title: "入隊条件設定",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    var t = n.createInstance("apiAUnionJoinConditions");
                    t.update(this.conditionId, this.conditionRank, this.conditionPlaystyle).then(function() {
                        this.dismiss();
                        var e = n.createInstance("popupFactoryGudRequestEnd").create({});
                        e.open({
                            conditionRank: this.conditionRank,
                            conditionPlaystyle: this.conditionPlaystyle
                        })
                    }
                    .bind(this)).fail(function(t) {
                        e.console.error(t)
                    })
                }
            }
        },
        onPopupOpened: function(e, i) {
            var a = i.data
              , s = i.scene
              , o = !(t.isUndefined(a.end_date) || t.isNull(a.end_date));
            $staticRes(res["core-sort-sort_list_ui_long"]),
            e.seekWidgetByName("page_node_0").setVisible(!o),
            e.seekWidgetByName("page_node_1").setVisible(o),
            e.seekWidgetByName("withdraw_btn").setVisible(o),
            o && (n.setTouchEventHandlers(e, {
                "TOUCH_ENDED withdraw_btn": function() {
                    var t = n.createInstance("popupFactoryGudRequestDelete").create({});
                    t.open({
                        conditionId: e.conditionId,
                        callerPopup: e
                    })
                }
            }),
            e.seekWidgetByName("time_label").setString(a.remain_time)),
            e.conditionId = a.a_union_join_condition_id,
            e.conditionRank = a.rank_type || "non_specified",
            e.conditionPlaystyle = a.playstyle_type || "non_specified",
            e.seekWidgetByName("btn_pulldown_rank").setTouchEnabled(!0),
            e.seekWidgetByName("btn_pulldown_playstyle").setTouchEnabled(!0),
            s._preparePulldown({
                wbMenuItemsName: "UNION_SEARCH_RANK",
                widgetSelectorBody: "btn_pulldown_rank",
                widgetPulldownPlaceholder: "rank_sort_ui",
                listItemResource: "core-sort-sort_list_ui_long",
                selected: e.conditionRank,
                callback: function(e) {
                    this.conditionRank = e.value
                }
                .bind(e)
            }),
            s._preparePulldown({
                wbMenuItemsName: "UNION_SEARCH_PLAYSTYLE",
                widgetSelectorBody: "btn_pulldown_playstyle",
                widgetPulldownPlaceholder: "playstyle_sort_ui",
                listItemResource: "core-sort-sort_list_ui_long",
                selected: e.conditionPlaystyle,
                callback: function(e) {
                    this.conditionPlaystyle = e.value
                }
                .bind(e)
            })
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudRequestEnd = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_request_end",
            title: "入隊条件設定完了",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss()
                }
            }
        },
        onPopupOpened: function(e, t) {
            var i = {
                condition1: n.w("filterUnionRanks")[t.conditionRank || "non-specified"],
                condition2: n.w("filterUnionPlaystyles")[t.conditionPlaystyle || "non-specified"]
            };
            e.setStrings({
                condition_detail_label: "{{condition1}}\n{{condition2}}".replace(/{{([^\}]+?)}}/g, function(e, t) {
                    return i[t]
                })
            })
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = (e._,
    e.cc,
    e.kh);
    t.PopupFactoryGudRequestDelete = t.PopupFactoryTextOnly.extend({
        POPUP_PROPERTIES: {
            title: "掲載取り下げ",
            content: "入隊条件の掲載を取り下げますか？",
            buttonLabels: {
                blackBtn: "キャンセル",
                redBtn: "掲載を取り下げる"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                redBtn: function() {
                    t.createInstance("apiAUnionJoinConditions")["delete"](this.conditionId).then(function(t) {
                        t.body.result ? this.caller && this.caller.dismiss() : e.console.debug("掲載取りやめに失敗しました"),
                        this.dismiss()
                    }
                    .bind(this))
                }
            }
        },
        onPopupOpened: function(e, t) {
            e.conditionId = t.conditionId,
            e.caller = t.callerPopup
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudNameCha = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_name_cha",
            title: "ユニオン名変更",
            buttonLabels: {
                blueBtn: "変更する",
                blackBtn: "キャンセル"
            },
            buttons: {
                blueBtn: function() {
                    var e = this.inputNode.getText();
                    return e.length < 1 ? void n.createInstance("popupFactoryComEditNocom").create({}).open({}) : void n.createInstance("apiAUnions").changeUnionName(e, this.nameTextId).then(function() {
                        this.dismiss(),
                        n.createInstance("popupFactoryGudNameEnd").create({}).open({});
                        var t = cc.director.getRunningScene()
                          , i = t._delegate || t;
                        i.updateUnionName.apply(i, [e])
                    }
                    .bind(this))
                },
                blackBtn: function() {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            var i = e.seekWidgetByName("union_name_label");
            i.setString("現在のユニオン名\n[" + t.name + "]"),
            e.nameTextId = t.nameTextId;
            var a = e.seekWidgetByName("editbox_0")
              , s = e.seekWidgetByName("comment_base")
              , o = new cc.Scale9Sprite("blank.png")
              , r = cc.size(.9 * s.width, .75 * s.height)
              , c = new n.EditBox(r,o);
            c.setFontSize(24),
            c.setFontColor(cc.color("#000000")),
            c.setMaxLength(10),
            c._edTxt.style.textAlign = "center",
            a.addChild(c),
            e.inputNode = c
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = (e._,
    e.kh)
      , n = e.cc;
    t.PopupFactoryGudNameEnd = n.Class.extend({
        create: function() {
            return t.createInstance("popupFactoryTextOnly").create({
                title: "ユニオン名変更",
                content: "ユニオン名を変更しました。",
                buttonLabels: {
                    blueBtn: "閉じる"
                },
                buttons: {
                    blueBtn: function() {
                        this.dismiss()
                    }
                }
            })
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudGemCheck = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_gem_check",
            title: "ジェムを寄付する",
            buttonLabels: {
                blueBtn: "OK",
                blackBtn: "キャンセル"
            },
            buttons: {
                blueBtn: function() {
                    n.createInstance("apiAUnions").donation(this.value).then(function(e) {
                        var t = e.body.rank_up_info
                          , i = e.body.total_donation_info;
                        t.before_rank < t.after_rank ? n.createInstance("popupFactoryGudGemRankup").create({}).open({
                            rank: {
                                before: t.before_rank,
                                after: t.after_rank
                            },
                            donationAmount: {
                                before: i.before_amount,
                                after: i.after_amount
                            },
                            memberLimit: {
                                before: t.member_max_num_info.before_num,
                                after: t.member_max_num_info.after_num
                            }
                        }) : n.createInstance("popupFactoryGudGemResult").create({}).open({
                            donationAmount: {
                                before: i.before_amount,
                                after: i.after_amount
                            }
                        })
                    }).fail(function(t) {
                        e.console.error(t)
                    }),
                    this.dismiss()
                },
                blackBtn: function() {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            var i = {};
            e.value = i.value = t.value,
            i.before = t.amount,
            i.after = i.before + i.value,
            i.gem = n.w("gem"),
            e.setHtmlStrings({
                donation_num_check_label: '<span class="red">{{value}}{{gem}}</span>を寄付します。<br /> よろしいですか？'.replace(/{{([^\}]+?)}}/g, function(e, t) {
                    return i[t]
                }),
                donation_numtotal_labelimg: '<span class="white">寄付{{gem}}総額<br />{{before}}&rarr;<span class="yellow">{{after}}</span>'.replace(/{{([^\}]+?)}}/g, function(e, t) {
                    return i[t]
                })
            }, n.GameConfig.POPUP_CSS)
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudGemRankup = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_gem_rankup",
            title: "寄付完了",
            buttonLabels: {
                blueBtn: "閉じる"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss(),
                    n.createInstance("sceneManager").reloadScene()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, i) {
            console.debug(i);
            var a = t.clone(i.donationAmount);
            a.gem = n.w("gem");
            var s = {
                rankup_imglabel: '<span class="blue">ユニオンRankがアップ！<br /><span class="white">{{before}}&rarr;</span><span class="yellow">{{after}}</span>'.replace(/{{([^\}]+?)}}/g, function(e, t) {
                    return i.rank[t]
                }),
                donation_numtotal_labelimg: '<span class="blue">寄付{{gem}}総額<br /><span class="white">{{before}}&rarr;</span><span class="yellow">{{after}}</span>'.replace(/{{([^\}]+?)}}/g, function(e, t) {
                    return a[t]
                })
            }
              , o = i.memberLimit;
            o.before < o.after ? s.member_limit_labelimg = '<span class="blue">最大隊員数がアップ！<br /><span class="white">{{before}}&rarr;</span><span class="yellow">{{after}}</span>'.replace(/{{([^\}]+?)}}/g, function(e, t) {
                return o[t]
            }) : s.member_limit_labelimg = '<span class="blue">現在のユニオンの上限人数<br /><span class="white">{{before}}</span>'.replace(/{{([^\}]+?)}}/g, function(e, t) {
                return o[t]
            }),
            e.setHtmlStrings(s, n.GameConfig.POPUP_CSS)
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGudGemResult = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-gud_gem_result",
            title: "寄付完了",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss();
                    var e = cc.director.getRunningScene();
                    e.headerDelegate.updateCurrency(),
                    n.createInstance("sceneManager").reloadScene()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, i) {
            var a = t.clone(i.donationAmount);
            a.gem = n.w("gem"),
            e.setHtmlStrings({
                donation_num_labelimg: '<span class="white">寄付{{gem}}総額<br /> {{before}}&rarr;</span><spna class="yellow">{{after}}</span> '.replace(/{{([^\}]+?)}}/g, function(e, t) {
                    return a[t]
                })
            }, n.GameConfig.POPUP_CSS)
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_000_a = t.pc.guild.gud_000_a || {},
    t.pc.guild.gud_000_a.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_000/gud_000_a.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_000/gud_000_a.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud000ADelegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_000_a"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnUnionSearch"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_union_search", function() {
                alert("{{ユニオンを脱退、解散してから24時間以内の場合、gud_000_forbiddenを表示すでに入隊申請中のユニオンがある場合、該当のユニオンのgud_001_bに遷移。それ以外の場合、gud_000_bへ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnUnionForm"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_union_form", function() {
                alert("{{ユニオンを脱退、解散してから24時間以内の場合、gud_000_forbiddenを表示それ以外の場合、gud_000_attentionを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_000_a = t.pc.guild.gud_000_a || {},
    t.pc.guild.gud_000_a.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupAttention: {
                factoryName: "popupFactoryGud000Attention"
            },
            popupForbidden: {
                factoryName: "popupFactoryGud000Forbidden"
            }
        },
        onSceneInit: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            var t = (a.defer(),
            e.seekWidgetByName("btn_union_search"));
            t.setColor(n.color("#ffffff"));
            var i = e.seekWidgetByName("btn_union_form");
            return i.setColor(n.color("#ffffff")),
            a.resolve()
        },
        btnCallbackBtnUnionSearch: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._joinCheckAndGoSearchUnion(),
            t.promise
        },
        btnCallbackBtnUnionForm: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._joinCheckAndGoFormUnion(),
            t.promise
        }
    }),
    i.assign(t.pc.guild.gud_000_a.SceneDelegate.prototype, t.pc.guild.roles.Routing, t.pc.guild.roles.GuildApiCache, t.pc.guild.roles.GuildJoinCheck)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_000_b = t.pc.guild.gud_000_b || {},
    t.pc.guild.gud_000_b.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_000/gud_000_b.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_000/gud_000_b.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud000BDelegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_000_b"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSearch"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_search", function() {
                alert("{{検索条件で選択した条件に合ったユニオンが表示される。}}")
            }),
            function(e, i, a, s, o) {
                var r = e.seekWidgetByPath(i)
                  , c = e.seekWidgetByPath(a)
                  , u = e.seekWidgetByPath(s)
                  , _ = (ccs.load($dynamicRes(res[o])) || {}).node;
                if (!_)
                    return void alert("選択肢リソースが見つかりません: ");
                var l = new t.Pulldown({
                    button: r,
                    label: c,
                    menuBase: u,
                    choice: _
                });
                (function(e) {
                    var t, i = "pulldownCallbackSortUi0SortCon1";
                    t = this._delegate && n.isFunction(this._delegate[i]) ? this._delegate[i].bind(this._delegate) : function(e) {
                        console.log("選択された値: " + e.text)
                    }
                    ,
                    e.onChange(t)
                }
                ).call(this, l),
                function(e) {
                    var t, i = "pulldownChoiceCallbackSortUi0SortCon1";
                    t = this._delegate && n.isFunction(this._delegate[i]) ? this._delegate[i].call(this._delegate, this) : [{
                        value: 1,
                        text: "sample 1"
                    }, {
                        value: 2,
                        text: "sample 2"
                    }, {
                        value: 3,
                        text: "sample 3"
                    }, {
                        value: 4,
                        text: "sample 4"
                    }],
                    n.each(t, function(t) {
                        e.addChoice(t)
                    })
                }
                .call(this, l)
            }
            .call(this, this.seekWidgetByPath("sort_ui_0"), "btn_sort", "sort_label", "sortlist", function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("sort_list_1_ui.json")
                });
                return e || alert("該当するシーンリソースが見つかりませんでした: sort_list_1_ui.json"),
                e || ""
            }()),
            function(e, i, a, s, o) {
                var r = e.seekWidgetByPath(i)
                  , c = e.seekWidgetByPath(a)
                  , u = e.seekWidgetByPath(s)
                  , _ = (ccs.load($dynamicRes(res[o])) || {}).node;
                if (!_)
                    return void alert("選択肢リソースが見つかりません: ");
                var l = new t.Pulldown({
                    button: r,
                    label: c,
                    menuBase: u,
                    choice: _
                });
                (function(e) {
                    var t, i = "pulldownCallbackSortUi1SortCon2";
                    t = this._delegate && n.isFunction(this._delegate[i]) ? this._delegate[i].bind(this._delegate) : function(e) {
                        console.log("選択された値: " + e.text)
                    }
                    ,
                    e.onChange(t)
                }
                ).call(this, l),
                function(e) {
                    var t, i = "pulldownChoiceCallbackSortUi1SortCon2";
                    t = this._delegate && n.isFunction(this._delegate[i]) ? this._delegate[i].call(this._delegate, this) : [{
                        value: 1,
                        text: "sample 1"
                    }, {
                        value: 2,
                        text: "sample 2"
                    }, {
                        value: 3,
                        text: "sample 3"
                    }, {
                        value: 4,
                        text: "sample 4"
                    }],
                    n.each(t, function(t) {
                        e.addChoice(t)
                    })
                }
                .call(this, l)
            }
            .call(this, this.seekWidgetByPath("sort_ui_1"), "btn_sort", "sort_label", "sortlist", function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("sort_list_1_ui.json")
                });
                return e || alert("該当するシーンリソースが見つかりませんでした: sort_list_1_ui.json"),
                e || ""
            }()),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_000_b = t.pc.guild.gud_000_b || {},
    t.pc.guild.gud_000_b.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupAttention: {
                factoryName: "popupFactoryGud000Attention"
            },
            popupForbidden: {
                factoryName: "popupFactoryGud000Forbidden"
            }
        },
        onSceneInit: function(e) {
            a.defer();
            return this._prepareList(e),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnSearch: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._prepareList(e),
            t.promise
        },
        pulldownCallbackSortUi0SortCon1: function(e) {
            this.searchRankType = e.value
        },
        pulldownChoiceCallbackSortUi0SortCon1: function() {
            return i.cloneDeep(t.WordBook.UNION_SEARCH_RANK)
        },
        pulldownCallbackSortUi1SortCon2: function(e) {
            this.searchPlaystyleType = e.value
        },
        pulldownChoiceCallbackSortUi1SortCon2: function() {
            return i.cloneDeep(t.WordBook.UNION_SEARCH_PLAYSTYLE)
        },
        _updateList: function() {
            var e = [this.searchRankType, this.searchPlaystyleType];
            this.pager.updateOptions(e),
            this.pagerButtons.setCurrentPageNum(1),
            this.pagerButtons.refresh()
        },
        _prepareList: function(e) {
            var n = e.seekWidgetByName("search_node")
              , i = e.seekWidgetByName("nothing_node")
              , a = e.seekWidgetByName("list_node");
            n.setVisible(!0),
            i.setVisible(!1),
            a.setVisible(!1);
            var s = 3
              , o = a.seekWidgetByName("gud_unionlist_page_ui");
            o.setVisible(!0);
            var r = new t.ListManager(o.getChildren(),null ,this.__setupListItemPanel.bind(this));
            this.pagerButtons = new t.PagerButtons;
            var c = a.seekWidgetByName("viewpage_ui");
            this.pagerButtons.init(c, r, function(e, t, n) {
                t.setRecords(e, !0)
            });
            var u = t.createInstance("apiAUnionSearch");
            this.pager = new t.Pager;
            var _ = [this.searchRankType, this.searchPlaystyleType];
            this.pager.init(u, u.get, s, _),
            this.pagerButtons.setPager(this.pager).then(function(e) {
                n.setVisible(!1);
                var t = this.pager._maxRecords > 0;
                a.setVisible(t),
                i.setVisible(!t),
                this.pagerButtons.refreshPager()
            }
            .bind(this))
        },
        __setupListItemPanel: function(e, n) {
            var a = n.guardian_info
              , s = t.Img("unionlist", "guardian", i.padZero(a.guardian_id, 4), 0).png
              , o = {
                union_name_label: n.name,
                union_menber_label: n.member_count + "人",
                union_rank_no: n.rank,
                guardian_name_lv_label: this._toGuardianFullName(a)
            }
              , r = {
                "TOUCH_ENDED btn_join_request": function() {
                    this.__onJoinClicked(n)
                }
                .bind(this),
                "TOUCH_ENDED btn_introduce_union": function() {
                    this.__onUnionImageClicked(n)
                }
                .bind(this)
            }
              , c = e.parent.seekWidgetByName("unionlist_guardian");
            c.loadTexture(s),
            c.setStrings(o),
            t.setTouchEventHandlers(c, r, c),
            e.parent.setVisible(!0)
        },
        __onUnionImageClicked: function(e) {
            var t = n.director.getRunningScene();
            this._navigate000To001(t, e)
        },
        __onJoinClicked: function(e) {
            this._sendJoinRequest(e)
        }
    }),
    i.assign(t.pc.guild.gud_000_b.SceneDelegate.prototype, t.pc.guild.roles.GuildCommon, t.pc.guild.roles.GuildJoinCheck, t.pc.guild.roles.Routing)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_000_c = t.pc.guild.gud_000_c || {},
    t.pc.guild.gud_000_c.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_000/gud_000_c.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_000/gud_000_c.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud000CDelegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_000_c"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnUnionForm"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_union_form", function() {
                alert("{{gud_000_namecheckを開く文字が入力されていない場合com_edit_nocomを開く}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_000_c = t.pc.guild.gud_000_c || {},
    t.pc.guild.gud_000_c.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupBlankName: {
                factoryName: "popupFactoryTextOnly",
                title: "文字未入力",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss(),
                        e._delegate._nameEditBox.setVisible(!0)
                    }
                }
            },
            popupConfirm: {
                factoryName: "popupFactoryTextOnly",
                title: "ユニオン結成",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "結成する"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss(),
                        e._delegate._nameEditBox.setVisible(!0)
                    },
                    blueBtn: function(e) {
                        this.dismiss();
                        var n = e._delegate._nameEditBox.getText()
                          , i = t.createInstance("apiAUnions");
                        i.create(n).then(function(t) {
                            e._delegate._navigateTo0001ById("me")
                        }
                        .bind(this))
                    }
                }
            }
        },
        onSceneInit: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return this._createEditbox(),
            a.resolve()
        },
        btnCallbackBtnUnionForm: function(e) {
            var t = a.defer();
            t.reject(this._override);
            var i, s, o = this._nameEditBox.getText(), e = n.director.getRunningScene();
            return 0 == o.length ? (i = e.popups.popupBlankName,
            s = '<div class="red">文字を入力してください</div>') : (i = e.popups.popupConfirm,
            s = "<div>" + o + "<br/>この名前でユニオンを結成します</div>"),
            this._nameEditBox.setVisible(!1),
            i.open().then(function() {
                i.setContent(s)
            }),
            t.promise
        },
        _createEditbox: function() {
            if (!i.isUndefined(this._nameEditBox))
                return void this._nameEditBox.setText("");
            var e = n.director.getRunningScene()
              , a = e.seekWidgetByName("editbox_0")
              , s = e.seekWidgetByName("text_window")
              , o = new n.Scale9Sprite("blank.png")
              , r = n.size(.9 * s.width, .75 * s.height);
            this._nameEditBox = new t.EditBox(r,o),
            this._nameEditBox.setFontSize(22),
            this._nameEditBox.setFontColor(n.color("#000000")),
            this._nameEditBox.setMaxLength(10),
            a.addChild(this._nameEditBox)
        }
    }),
    i.assign(t.pc.guild.gud_000_c.SceneDelegate.prototype, t.pc.guild.roles.Routing)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        gud_001_edit: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("gud_001_edit.json")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: gud_001_edit.json"),
                e || ""
            }(),
            title: "ユニオン紹介文編集",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    alert("{{文字が入力されていない場合、com_edit_nocomを開く.それ以外の場合gud_001_editを閉じ、gud_edit_resultを開く}}")
                }
            }
        },
        gud_gem_amount: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("gud_gem_amount.json")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: gud_gem_amount.json"),
                e || ""
            }(),
            title: "ジェムを寄付する",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    alert("{{数値以外が入力されている、現在の所持ジェムより多い数値が入力されているまたは何も入力されていないときcom_edit_nocomを開く。それ以外の場合、gud_gem_amountを閉じ、gud_gem_checkを開く}}")
                }
            }
        }
    };
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_001 = t.pc.guild.gud_001 || {},
    t.pc.guild.gud_001.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_001/gud_001.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_001/gud_001.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud001Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_001"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBurstinfoBtnBurstinfo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("btn_burstinfo"), "btn_burstinfo", function() {
                alert("{{sub_tutorial.jsonを開く}}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEdit"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_edit", function(e) {
                this.popups.gud_001_edit.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001AUiBtnGuardian"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_a_ui"), "btn_guardian", t.createInstance("router").navigate.bind(t.createInstance("router"), "guild/gud_002")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001AUiBtnUnionnews"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_a_ui"), "btn_unionnews", t.createInstance("router").navigate.bind(t.createInstance("router"), "guild/gud_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001AUiBtnUnionchat"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_a_ui"), "btn_unionchat", t.createInstance("router").navigate.bind(t.createInstance("router"), "guild/gud_008")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001AUiBtnAdminUnion"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_a_ui"), "btn_admin_union", function() {
                alert("{{ユニオンの団長の場合、gud_001_controlを表示.ユニオン副団長の場合、gud_001_uncontrol_aを表示.そのほかの場合、gud_001_uncontrol_bを表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001AUiBtnDonation"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_a_ui"), "btn_donation", function(e) {
                this.popups.gud_gem_amount.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001AUiBtnMember"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_a_ui"), "btn_member", t.createInstance("router").navigate.bind(t.createInstance("router"), "guild/gud_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001BUiBtnMember"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_b_ui"), "btn_member", t.createInstance("router").navigate.bind(t.createInstance("router"), "guild/gud_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnApplication"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_application", function() {
                alert("{{長文の為仕様書参照}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001CUiBtnRefuse"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_c_ui"), "btn_refuse", function() {
                alert("{{my_001へ遷移該当のユニオンからのスカウトを断った状態へ}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001CUiBtnJoin"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_c_ui"), "btn_join", function() {
                alert("{{ユニオンを脱退、解散してから24時間以内の場合、gud_000_forbiddenを表示それ以外の場合、gud_000_attentionを表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001CUiBtnUnionForm"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_c_ui"), "btn_union_form", function() {
                alert("{{ユニオンを脱退、解散してから24時間以内の場合、gud_000_forbiddenを表示それ以外の場合、gud_000_attentionを表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001CUiBtnUnionSearch"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_c_ui"), "btn_union_search", function() {
                alert("{{ユニオンを脱退、解散してから24時間以内の場合、gud_000_forbiddenを表示それ以外の場合、gud_000_bへ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001CUiBtnMember"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_c_ui"), "btn_member", t.createInstance("router").navigate.bind(t.createInstance("router"), "guild/gud_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001DUiBtnRefuse"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_d_ui"), "btn_refuse", function() {
                alert("{{my_001へ遷移,該当のユニオンからのスカウトを断った状態へ}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001DUiBtnMyUnion"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_d_ui"), "btn_my_union", function() {
                alert("{{gud_001のgud_001_aへ遷移。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackGud001DUiBtnMember"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("gud_001_d_ui"), "btn_member", t.createInstance("router").navigate.bind(t.createInstance("router"), "guild/gud_009")),
            function(e, n, i, a) {
                var s = {};
                s["MOUSE_ENTER " + n] = function() {
                    e.seekWidgetByPath(i).animate(a, !0)
                }
                ,
                s["MOUSE_LEAVE " + n] = function() {
                    var t = e.seekWidgetByPath(i);
                    t.changeFrame(0)
                }
                ,
                t.setMouseEventHandlers(e, s, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_guardian", "btn_guardian_ui", "mouse_over"),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_001 = t.pc.guild.gud_001 || {},
    t.pc.guild.gud_001.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupEditComment: {
                factoryName: "popupFactoryGud001Edit"
            },
            popupInputDonation: {
                factoryName: "popupFactoryGudGemAmount"
            },
            popupConfirmDonation: {
                factoryName: "popupFactoryGudGemCheck"
            },
            popupAdminConfig: {
                factoryName: "popupFactoryGud001Control"
            },
            popupNormalBurstTimeConfig: {
                factoryName: "popupFactoryGud001UncontrolBurstTime"
            },
            popupNormalConfig: {
                factoryName: "popupFactoryGud001Uncontrol"
            },
            popupAttention: {
                factoryName: "popupFactoryGud000Attention"
            },
            popupForbidden: {
                factoryName: "popupFactoryGud000Forbidden"
            }
        },
        onSceneInit: function(e) {
            a.defer();
            this._verifyRouterParams001(e),
            this._data = {};
            var n = e.temporaryRouterParams.id
              , s = ["union_me", "newInfo", "donation"]
              , o = ["union", "me", "check"];
            return i.isUndefined(n) || "me" === n ? (this.isMe = !0,
            this._requestAll(s).then(function(t) {
                this._onCallApisFinished(e)
            }
            .bind(this))) : this._request(["me"]).then(function(t) {
                this.isMe = t.a_union_id === n;
                var i = this.isMe ? s : o;
                this._requestAll(i).then(function(t) {
                    this._onCallApisFinished(e)
                }
                .bind(this))
            }
            .bind(this)),
            t.createInstance("BurstTimeSubTutorialPanel").show(),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        _isScoutReceived: function() {
            if (this.isMe)
                return !1;
            var e = this._data.check.scout_info;
            return !i.isUndefined(e) && !i.isUndefined(e.a_scout_id)
        },
        _onCallApisFinished: function(e) {
            if (i.isUndefined(this._data.union_me) || (this._data.union = this._data.union_me),
            this._setGuildStrings(e, this._data),
            this.__setBackgroundImage(e),
            this.isMe)
                return this.__setupMyUnionInfo(e);
            var t, n = this._data.me.a_union_id;
            t = this._isScoutReceived() ? n ? "d" : "c" : "b",
            this.__setupOutsideUnionInfo(e, t)
        },
        __setupMyUnionInfo: function(e) {
            var t = (this.__loadUI("a"),
            this._data.newInfo);
            this.__setNewIconVisible(e, "btn_unionnews", t.unchecked_news),
            this.__setNewIconVisible(e, "btn_unionchat", t.is_new_chat),
            this.__setCommentEditBox(e)
        },
        __setCommentEditBox: function(e) {
            var t = (this._getUnionData(),
            e.seekWidgetByName("gud_comment_ui"))
              , n = t.seekWidgetByName("btn_edit")
              , i = this._amILeader();
            n.setVisible(i),
            n.setEnabled(i),
            i ? t.changeFrameWithAnimInfo("leader", "end") : t.changeFrameWithAnimInfo("not_leader", "end")
        },
        __setNewIconVisible: function(e, t, n) {
            var i = e.seekWidgetByName(t);
            i.seekWidgetByName("new_icon").setVisible(n)
        },
        __setBackgroundImage: function(e) {
            var n = this._getUnionData()
              , a = n.guardian_info
              , s = e.seekWidgetByName("uniontop_guardian")
              , o = t.Img("uniontop", "guardian", i.padZero(a.guardian_id, 4), 0).jpg;
            s.loadTexture(o)
        },
        __setScountedNoticeLabel: function(e) {
            var n = this._getUnionData()
              , i = e.seekWidgetByName("union_name_scout_label");
            i.setString("「" + n.name + "」" + (t.env.isSp ? "" : "\n") + "からスカウトされています。")
        },
        __setupOutsideUnionInfo: function(e, t) {
            var n = this.__loadUI(t)
              , a = this._getUnionData();
            this._setGuildStrings(e, a),
            this._isScoutReceived() && this.__setScountedNoticeLabel(n);
            var s = e.seekWidgetByName("btn_application");
            null !== s && this._request("joinRequests").then(function(e) {
                var t = e.data
                  , n = this._getUnionData()
                  , a = i.isUndefined(t) || 0 === t.length || t[0].union.a_union_id != n.a_union_id;
                a ? s.setTitleText("入隊申請") : s.setTitleText("申請取り下げ")
            }
            .bind(this))
        },
        btnCallbackBtnAllOver: function(e) {
            var t = a.defer();
            t.reject(this._override);
            var n = this._getUnionData();
            return this._openAllOverPanel(n.guardian_info.guardian_id, 0, "guardian"),
            t.promise
        },
        btnCallbackBtnEdit: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._editComment(),
            t.promise
        },
        btnCallbackGud001AUiBtnGuardian: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackGud001AUiBtnUnionnews: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackGud001AUiBtnUnionchat: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackGud001AUiBtnAdminUnion: function(e) {
            var t = a.defer();
            t.reject(this._override);
            var n = this._getUnionData()
              , i = "popupNormalConfig";
            this._amILeader() ? i = "popupAdminConfig" : this._amISubLeader() && (i = "popupNormalBurstTimeConfig");
            var s = e.popups[i];
            return s.open({
                scene: e,
                data: n
            }),
            t.promise
        },
        btnCallbackGud001AUiBtnDonation: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._openDonationForm(),
            t.promise
        },
        btnCallbackGud001AUiBtnMember: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate001aTo007(e, this._amILeader() || this._amISubLeader()),
            t.promise
        },
        btnCallbackGud001BUiBtnMember: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate001To007(e),
            t.promise
        },
        btnCallbackBtnApplication: function(e) {
            var t = a.defer();
            t.reject(this._override);
            var n = this._data.union;
            return this._request("joinRequests").then(function(e) {
                var t = e.data
                  , a = i.isUndefined(t) || 0 === t.length || t[0].union.a_union_id != n.a_union_id;
                a ? this._sendJoinRequest(n, this.__reload) : this._deleteJoinRequest(n, this.__reload)
            }
            .bind(this)),
            t.promise
        },
        btnCallbackGud001CUiBtnRefuse: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._rejectScout(),
            t.promise
        },
        btnCallbackGud001CUiBtnJoin: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._acceptScout(),
            t.promise
        },
        btnCallbackGud001CUiBtnUnionForm: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._joinCheckAndGoFormUnion(),
            t.promise
        },
        btnCallbackGud001CUiBtnUnionSearch: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._joinCheckAndGoSearchUnion(!0),
            t.promise
        },
        btnCallbackGud001CUiBtnMember: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate001To007(e),
            t.promise
        },
        btnCallbackGud001DUiBtnRefuse: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._rejectScout(),
            t.promise
        },
        btnCallbackGud001DUiBtnMyUnion: function(e) {
            var t = a.defer();
            t.reject(this._override);
            var e = n.director.getRunningScene();
            return this._navigate001To001a(e),
            t.promise
        },
        btnCallbackGud001DUiBtnMember: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate001To007(e),
            t.promise
        },
        btnCallbackBtnBurstinfoBtnBurstinfo: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            t.promise
        },
        __loadUI: function(e) {
            var a = n.director.getRunningScene();
            if (!i.contains(["a", "b", "c", "d"], e))
                return void console.warn("Invalid node type: " + e);
            var s = a.seekWidgetByName("gud_001_" + e + "_ui");
            return null === s ? (console.warn("[ERROR] Could not find gud node."),
            null ) : (t.env.isSp && ("c" === e || "d" === e ? a.animate("gud_001_c_d") : a.animate("default_view")),
            s.setVisible(!0),
            s)
        },
        updateUnionName: function(e) {
            this._getUnionData().name = e;
            var t = n.director.getRunningScene();
            t.seekWidgetByName("union_name_label").setString(e)
        },
        __reload: function() {
            t.createInstance("sceneManager").reloadScene()
        },
        _rejectScout: function() {
            try {
                var e = "refuse"
                  , i = t.createInstance("apiAUnionScouts")
                  , a = this._data.union.a_union_id;
                i.cancel(a, "me", e).then(function(e) {
                    console.log("スカウト辞退"),
                    console.log(e.body);
                    var t = n.director.getRunningScene();
                    this._navigate001ToMyPage(t)
                }
                .bind(this))
            } catch (s) {
                console.error(s)
            }
        },
        _acceptScout: function() {
            var e = this._data.union.a_union_id;
            this._checkBeforeJoinRequest(e).then(function() {
                var n = t.createInstance("apiAUnions");
                n.acceptScout(e).then(function(e) {
                    console.debug("スカウト了承", e.body),
                    this._navigateTo0001ById("me")
                }
                .bind(this))
            }
            .bind(this))
        },
        _editComment: function() {
            var e = n.director.getRunningScene()
              , i = e.popups.popupEditComment;
            i.openWithActions(function() {
                var e = this._data.union.comment;
                i.editBox = this._createEditbox(i, "comment_base", "editbox_0", 40, e)
            }
            .bind(this), {
                blackBtn: !1,
                blueBtn: function() {
                    var n = i.editBox.getText();
                    if (0 == n.length)
                        e._openMessagePopup({
                            title: "文字未入力",
                            content: '<div class="red">文字を入力してください</div>',
                            buttons: [["blueBtn", "OK"]]
                        });
                    else {
                        i.dismiss();
                        var a = t.createInstance("apiAUnions");
                        a.changeUnionComment(n).then(function(t) {
                            this._updateUnionData(t.body),
                            e._openMessagePopup({
                                title: "ユニオン紹介文変更完了",
                                content: "<div>ユニオン紹介文を編集しました</div>",
                                buttons: [["blueBtn", "OK", !0]]
                            }).then(function() {
                                this._setGuildStrings(e, this._data)
                            }
                            .bind(this))
                        }
                        .bind(this))
                    }
                }
                .bind(this)
            }).then(function(e) {
                console.log("Resoloved:" + e)
            }, function(e) {
                console.log("Rejected:" + e)
            })
        },
        _openDonationForm: function() {
            var e = n.director.getRunningScene()
              , i = e.popups.popupInputDonation;
            this._data.union;
            i.openWithActions(function() {
                i.editBox = this._createEditbox(i, "comment_base", "editbox_0", 20);
                var e = t.createInstance("apiAPlayers");
                e.getCurrency().then(function(e) {
                    var n = this._data.donation;
                    i.setHtmlStrings({
                        donation_labelimg: this._buildDonationPopupHtml(n.union_data.total_donation_amount, n.next_rank_point, e.body.gem)
                    }, t.GameConfig.POPUP_CSS),
                    i.editBox.setOnInputCallback(this._getOnInputCallback(n.union_data.total_donation_amount, n.next_rank_point, e.body.gem), this)
                }
                .bind(this))
            }
            .bind(this), {
                blackBtn: function() {
                    i.setHtmlStrings({
                        donation_labelimg: ""
                    }),
                    i.dismiss()
                },
                blueBtn: function() {
                    var n = t.createInstance("apiAPlayers");
                    n.getCurrency().then(function(t) {
                        var n = parseInt(i.editBox.getText())
                          , a = t.body.gem;
                        !(n > 0) || n > a ? (i.dismiss(),
                        e._openMessagePopup({
                            title: "寄付額を入れてください",
                            content: '<div class="red">寄付できる数値を入力してください</div>',
                            buttons: [["blueBtn", "OK"]]
                        })) : (i.setHtmlStrings({
                            donation_labelimg: ""
                        }),
                        i.dismiss(),
                        this.__openPopupConfirm(n))
                    }
                    .bind(this))
                }
                .bind(this)
            }).then(function(e) {
                console.log("Resoloved:" + e)
            }, function(e) {
                console.log("Rejected:" + e)
            })
        },
        _getOnInputCallback: function(e, i, a) {
            return function(s, o) {
                var r = n.director.getRunningScene()
                  , c = r.popups.popupInputDonation
                  , u = o.replace(/\D+/g, "");
                u = Number(u),
                s.setString(u),
                c.setHtmlStrings({
                    donation_labelimg: this._buildDonationPopupHtml(e, i, a, u)
                }, t.GameConfig.POPUP_CSS)
            }
        },
        _buildDonationPopupHtml: function(e, n, i, a) {
            var s = [[["white", "寄付" + t.w("gem") + "総額："], ["white", e]], [["white", "次のRankまで："], ["white", n]]]
              , o = [[["yellow", "所持ジェム："], ["yellow", i]]];
            a && (o = o.concat([[["red", "消費ジェム："], ["red", "-" + a]]]));
            var r = "<div>&nbsp;</div>\r\n";
            return t.htmlBuilder.makeTable(s) + r + t.htmlBuilder.makeTable(o)
        },
        __openPopupConfirm: function(e) {
            var t = n.director.getRunningScene()
              , i = t.popups.popupConfirmDonation
              , a = this._data.donation
              , s = a.union_data.total_donation_amount;
            i.open({
                value: e,
                amount: s
            })
        },
        _createEditbox: function(e, i, a, s, o) {
            o = o || "";
            var r, c = i + "_editBox";
            if (e[c])
                r = e[c];
            else {
                var u = e.seekWidgetByName(a)
                  , _ = e.seekWidgetByName(i)
                  , l = new n.Scale9Sprite("blank.png")
                  , d = n.size(.9 * _.width, .75 * _.height);
                r = new t.EditBox(d,l),
                r.setFontColor(n.color("#000000")),
                r.setMaxLength(s),
                u.addChild(r),
                e[c] = r
            }
            return r.setText(o),
            r.setFontSize(22),
            r
        }
    }),
    i.assign(t.pc.guild.gud_001.SceneDelegate.prototype, t.pc.guild.roles.Routing, t.pc.guild.roles.GuildApiCache, t.pc.guild.roles.GuildJoinCheck, t.pc.guild.roles.GuildCommon, t.pc.roles.AllOverUI)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        gud_002_detail: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("gud_002_detail.json")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: gud_002_detail.json"),
                e || ""
            }(),
            title: "守護神詳細",
            buttonLabels: {
                blackBtn: "閉じる"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        }
    };
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_002 = t.pc.guild.gud_002 || {},
    t.pc.guild.gud_002.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_002/gud_002.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_002/gud_002.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud002Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_002"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnGuardianList"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_guardian_list", function() {
                alert("{{gud_003のgud_003_aへ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnGuardianEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_guardian_enh", t.createInstance("router").navigate.bind(t.createInstance("router"), "guild/gud_005")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnGuardianDetail"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_guardian_detail", function(e) {
                this.popups.gud_002_detail.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBottomBtnPanelBtnBlackS"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("bottom_btn_panel"), "btn_black_s", function() {
                alert("{{com_tutorialを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_002 = t.pc.guild.gud_002 || {},
    t.pc.guild.gud_002.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupGuardianDetail: {
                factoryName: "popupFactoryGud002Detail"
            },
            popupSubTutorial: {
                factoryName: "popupFactorySubTutorial",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        onSceneInit: function(e) {
            a.defer();
            this._verifyRouterParams002(e),
            this._data = {},
            e.seekWidgetByName("btn_guardian_enh").setVisible(!1);
            var t = e.routerParams.gud_002.id
              , n = ["union_me", "donation"]
              , s = ["union"];
            return i.isUndefined(t) || "me" === t ? (this.isMe = !0,
            this._requestAll(n).then(function(t) {
                this._onCallApisFinished(e)
            }
            .bind(this))) : this._request(["me"]).then(function(i) {
                this.isMe = i.a_union_id === t;
                var a = this.isMe ? n : s;
                this._requestAll(a).then(function(t) {
                    this._onCallApisFinished(e)
                }
                .bind(this))
            }
            .bind(this)),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        _onCallApisFinished: function(e) {
            i.isUndefined(this._data.union_me) || (this._data.union = this._data.union_me),
            this._setGuildStrings(e, this._data),
            this.__setBackgroundImage(e);
            var t = this._getUnionData()
              , a = e.seekWidgetByName("btn_guardian_enh");
            a.setVisible(this.isMe);
            var s = t.guardian_info.detail_info.next_level_pt > 0;
            a.setEnabled(s),
            a.setColor(s ? n.color.WHITE : n.color("#808080"))
        },
        __setBackgroundImage: function(e) {
            var t = this._getUnionData()
              , n = t.guardian_info;
            this._setIntroduceGuardianImage({
                guardian_id: n.guardian_id,
                skin: 0
            })
        },
        btnCallbackBtnGuardianList: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate002To003(e),
            t.promise
        },
        btnCallbackBtnGuardianEnh: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate002To005(e),
            t.promise
        },
        btnCallbackBtnAllOver: function(e) {
            var t = a.defer();
            t.reject(this._override);
            var n = this._getUnionData();
            return this._openAllOverPanel(n.guardian_info.guardian_id, 0, "guardian"),
            t.promise
        },
        btnCallbackBtnGuardianDetail: function(e) {
            var t = a.defer();
            t.reject(this._override);
            var n = this._getUnionData().guardian_info;
            return e.popups.popupGuardianDetail.open().then(function() {
                e.popups.popupGuardianDetail.setEffects(n)
            }
            .bind(this)),
            t.promise
        },
        btnCallbackBottomBtnPanelBtnBlackS: function(e) {
            return e.popups.popupSubTutorial.setTypeAndOpen("guardian"),
            a.reject(this._override)
        }
    }),
    i.assign(t.pc.guild.gud_002.SceneDelegate.prototype, t.pc.guild.roles.Routing, t.pc.guild.roles.GuildApiCache, t.pc.guild.roles.GuildCommon, t.pc.roles.ImagesCommon, t.pc.roles.AllOverUI)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_003 = t.pc.guild.gud_003 || {},
    t.pc.guild.gud_003.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_003/gud_003.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_003/gud_003.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_0_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_1_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud003Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_003"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_003 = t.pc.guild.gud_003 || {},
    t.pc.guild.gud_003.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupGuardianDetail: {
                factoryName: "popupFactoryGudGuardianDetail"
            },
            popupGuardianDetailB: {
                factoryName: "popupFactoryGudGuardianDetailB"
            },
            popupGuardianChange: {
                factoryName: "popupFactoryGudGuardianChange",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss();
                        try {
                            e._delegate._changeGuardian.apply(e._delegate, [this.getTag()])
                        } catch (t) {
                            console.error(t)
                        }
                    },
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupGuardianNoMoney: {
                factoryName: "popupFactoryGudGuardianNomoney"
            },
            popupGuardianBuy: {
                factoryName: "popupFactoryGudGuardianBuy",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "購入する"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss();
                        try {
                            e._delegate._buyGuardian.apply(e._delegate, [this.getTag()])
                        } catch (t) {
                            console.error(t)
                        }
                    },
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupBuyResult: {
                factoryName: "popupFactoryGudGuardianResult"
            },
            popupChangeResult: {
                factoryName: "popupFactoryGudChangeResult"
            }
        },
        onSceneInit: function(e) {
            a.defer();
            this._verifyRouterParams003(e),
            this._requestAll(["union_me", "me", "authority"]).then(function() {
                this._setDonationHeader(e),
                this._fillupGuardianList(e)
            }
            .bind(this));
            var t = e.seekWidgetByName("tab_0_node");
            this._setPositionIconsVisibility(t, ["leader"]);
            var n = e.seekWidgetByName("tab_1_node");
            return this._setPositionIconsVisibility(n, ["leader", "sub_leader"]),
            e.restoreParams || e.tabDelegateList[0].selectTab(e.seekWidgetByName("tab_0")),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        tabCallbackTab0: function(e) {},
        tabCallbackTab1: function(e) {},
        _onTouchBtnProtection: function(e, t) {
            this.__showChangePopup(t)
        },
        _onTouchBtnBuy: function(e, t) {
            this.__checkPriceAndPopup(t)
        },
        _onTouchGuardianPanel: function(e, t) {
            return -1 === this._data.authority.authority.indexOf("guardian_buy") ? void this.__showNotOwnedGuardianDetailPopup(t) : void (null === t.a_guardian_id || i.isUndefined(t.a_guardian_id) ? this.__checkPriceAndPopup(t) : this.__showDetailPopup(t))
        },
        __showImagePopupBase: function(e, n) {
            return e.setTitle(n.name),
            e.open().then(function() {
                e.seekWidgetByName("guardian_intro_label") ? e.setStrings({
                    guardian_intro_label: n.description
                }) : e.setStrings({
                    main_label: n.description
                }),
                e.loadTextures({
                    guardian_img: t.Img("popupimg", "guardian", i.padZero(n.guardian_id, 4), 0).png
                })
            }
            .bind(this))
        },
        __showNotOwnedGuardianDetailPopup: function(e) {
            var t = n.director.getRunningScene().popups.popupGuardianDetailB;
            this.__showImagePopupBase(t, e)
        },
        __showDetailPopup: function(e) {
            var i = n.director.getRunningScene()
              , a = i.popups.popupGuardianDetail;
            this.__showImagePopupBase(a, e).then(function() {
                var n = t.htmlBuilder.makeDivAndSpans([[["orange", "累計カスタムPt:"], ["white", e.detail_info.custom_pt]], [["orange", "次のLvまで:"], ["white", e.detail_info.next_level_pt]]]);
                a.setHtmlStrings({
                    pt_level_labelimg: n
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this))
        },
        __showChangePopup: function(e) {
            var i = n.director.getRunningScene()
              , a = i.popups.popupGuardianChange;
            this.__showImagePopupBase(a, e).then(function() {
                var n = t.htmlBuilder.makeDivAndSpans([[["orange", "累計カスタムPt:"], ["white", e.detail_info.custom_pt]], [["orange", "次のLvまで:"], ["white", e.detail_info.next_level_pt]]]);
                a.setHtmlStrings({
                    pt_labelimg: n
                }, t.GameConfig.POPUP_CSS),
                a.setTag(e.a_guardian_id)
            }
            .bind(this))
        },
        __checkPriceAndPopup: function(e) {
            var n = t.createInstance("apiAUnions");
            n.getDonationInfo().then(function(t) {
                this._totalGems = t.body.union_data.current_donation_amount;
                var n = e.price;
                this._totalGems < n ? this.__showNoMoneyPopup(e) : this.__showBuyPopup(e)
            }
            .bind(this))
        },
        __showBuyPopup: function(e) {
            var i = n.director.getRunningScene()
              , a = i.popups.popupGuardianBuy;
            this.__showImagePopupBase(a, e).then(function() {
                var n = t.w("gem")
                  , i = this._totalGems - e.price
                  , s = t.htmlBuilder.makeDivAndSpans([[["orange", "価格:"], ["white", "" + e.price + n]], [["orange", n + ":"], ["white", this._totalGems + "→"], ["red", i]]]);
                a.setHtmlStrings({
                    pt_labelimg: s
                }, t.GameConfig.POPUP_CSS),
                a.setTag(e.guardian_id)
            }
            .bind(this))
        },
        __showNoMoneyPopup: function(e) {
            var i = n.director.getRunningScene()
              , a = i.popups.popupGuardianNoMoney;
            this.__showImagePopupBase(a, e).then(function() {
                var n = "ユニオン資金"
                  , i = t.htmlBuilder.makeDivAndSpans([[["orange", "価格:"], ["white", "" + e.price + n]], [["red", n + "が足りません"]]]);
                a.setHtmlStrings({
                    pt_level_labelimg: i
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this))
        },
        _changeGuardian: function(e) {
            var i = t.createInstance("apiAUnions");
            i.setSelectedGuardian(e).then(function(e) {
                var t = n.director.getRunningScene();
                this._fillupGuardianList(t),
                this._showChangeResult()
            }
            .bind(this))
        },
        _buyGuardian: function(e) {
            var a = t.createInstance("apiAUnions")
              , s = n.director.getRunningScene();
            a.guardianBuy(e).then(function(e) {
                this._fillupGuardianList(s),
                this._setDonationHeader(s),
                this._showBuyResult()
            }
            .bind(this)).fail(function(n) {
                500 === n.status ? a.getGuardians(!0).then(function(n) {
                    var a = n.body.data
                      , o = "購入できません"
                      , r = "<div>守護神を購入できませんでした。</div>";
                    i.isUndefined(i.find(a, {
                        guardian_id: e
                    })) || (o = "すでに購入されています",
                    r = "<div>該当の守護神はすでに購入されています。</div>"),
                    s._openMessagePopup({
                        title: o,
                        content: r,
                        buttons: [["blackBtn", "閉じる", !0]]
                    }).then(function() {
                        t.createInstance("sceneManager").reloadScene()
                    })
                }
                .bind(this)).fail(function(e) {
                    console.error(e)
                }) : console.error(n)
            }
            .bind(this))
        },
        _showChangeResult: function() {
            var e = n.director.getRunningScene()
              , t = e.popups.popupChangeResult;
            t.setContent("守護神を変更しました"),
            t.open()
        },
        _showBuyResult: function() {
            var e = n.director.getRunningScene()
              , t = e.popups.popupBuyResult;
            t.setContent("守護神を購入しました。"),
            t.open()
        }
    }),
    i.assign(t.pc.guild.gud_003.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.guild.roles.Routing, t.pc.guild.roles.GuildApiCache, t.pc.guild.roles.GuildCommon, t.pc.guild.roles.GuardianPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_005 = t.pc.guild.gud_005 || {},
    t.pc.guild.gud_005.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_005/gud_005.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_005/gud_005.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud005Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_005"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRecommended"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_recommended", function() {
                alert("{{自動で素材が選択され、gud_005_checkを表示。おすすめ素材が無い場合、com_non_offerを表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnDecision"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_decision", function() {
                alert("{{選択したウェポンがすべてノーマルの場合、gud_005_checkを表示。レア以上のウェポンが含まれる場合、gud_005_rarecheckを表示。ウェポンが選択されていない場合、グレーアウトしてタップ不可に}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_005 = t.pc.guild.gud_005 || {},
    t.pc.guild.gud_005.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupConfirm: {
                factoryName: "popupFactoryBlackBlue",
                title: "タイトル",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupResult: {
                factoryName: "popupFactoryBlue",
                title: "タイトル",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupNonOffer: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-com_non_offer",
                title: "素材選択",
                buttonLabels: {
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupEhnGuardian: {
                factoryName: "popupFactoryComEnhGuardian"
            },
            popupEnhResultLevelUp: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-gud_005_levelup",
                title: "強化結果",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupEnhResult: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-gud_005_result",
                title: "強化結果",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        onSceneInit: function(e) {
            this._verifyRouterParams005(e),
            this.listBtns && this.listBtns._clearList(),
            this._data = {},
            this._request("union_me").then(function() {
                this._setSelectedGuardianHeader(e),
                this._setGuildStrings(e, this._data)
            }
            .bind(this));
            var n = e.seekWidgetByName(t.BtnsPageListParams.GUILD_005.panelName).getChildren();
            i.each(n, function(e) {
                e.removeAllChildrenWithCleanup(),
                e.setVisible(!1)
            }, this);
            var a = this._setSelectableWeaponList(e, [e.routerParams.gud_005.id], "apiAUnions", "getGuardianDonationMaterials", "enhance_guardian_weapon_materials", void 0, t.BtnsPageListParams.GUILD_005.panelName, t.BtnsPageListParams.GUILD_005.perPage).then(function(t) {
                var n = 0 === t.pageCount
                  , i = e.seekWidgetByName("nothing_node");
                i && i.setVisible(n);
                var a = e.seekWidgetByName("list_node");
                a && a.setVisible(!n),
                this._execButtonName = "btn_decision"
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return a
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return this.listBtns && this.listBtns._clearList(),
            a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnRecommended: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._setRecommendedEnhWeapons(),
            t.promise
        },
        btnCallbackBtnDecision: function(e) {
            var n = a.defer();
            n.reject(this._override);
            var i = t.createInstance("apiAUnions");
            return i.confirmGuardianEnhanceMaterials(this._getSelectedCardIdListKeys()).then(function(e) {
                var t = e.body.materials;
                this._popupEnhGuardian(t)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            n.promise
        },
        _popupEnhGuardian: function(e) {
            if (i.isUndefined(e))
                return void console.error("Invalid argument materials, undefined given.");
            var t = i.pluck(e, "a_weapon_id")
              , a = this._getUnionData();
            if (i.isUndefined(a))
                return void console.error("Plz call union api first.");
            console.log(t);
            var s = n.director.getRunningScene()
              , o = s.popups.popupEhnGuardian;
            o.open({
                scene: s,
                weapons: e,
                ids: t,
                guardianpt: a.guardian_info.detail_info.custom_pt
            })
        },
        _cleanUpMaterialWeapons: function() {
            var e = n.director.getRunningScene();
            this.onSceneInit(e)
        },
        _setRecommendedEnhWeapons: function() {
            t.createInstance("apiAWeapons").getRecommendGuardianDonationMaterials().then(function(e) {
                return 0 === e.body.max_record_count ? void this._popupNoOffer() : void this._popupConfirmRecommendedEnhWpn(e.body.data)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _popupConfirmRecommendedEnhWpn: function(e) {
            var i = n.director.getRunningScene()
              , a = i.popups.popupConfirm;
            a.setTitle("おすすめ強化確認"),
            a.setContent("R未満かつ「＋」がついていない素材を<br />おすすめで選択いたしますか。"),
            a.open().then(function() {
                t.setTouchEventHandlers(a, {
                    "TOUCH_ENDED blue_btn": function() {
                        this._popupEnhGuardian(e),
                        a.dismiss()
                    }
                    .bind(this),
                    "TOUCH_ENDED black_btn": function() {
                        a.dismiss()
                    }
                    .bind(this)
                }, this)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _popupNoOffer: function() {
            var e = n.director.getRunningScene()
              , i = e.popups.popupNonOffer;
            i.open().then(function() {
                t.setTouchEventHandlers(i, {
                    "TOUCH_ENDED btn_present": function() {
                        this._navigateToPresent()
                    },
                    "TOUCH_ENDED btn_gacha": function() {
                        this._navigateToGemGacha()
                    },
                    "TOUCH_ENDED btn_quest": function() {
                        this._navigateToQuest()
                    }
                }, this)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _completeEnhGuardian: function() {
            var e = n.director.getRunningScene();
            this._data.union_me = null ,
            this.onSceneInit(e)
        },
        _popupGuardianLevelUp: function(e, i, a, s, o) {
            var r = n.director.getRunningScene()
              , c = r.popups.popupEnhResultLevelUp;
            c.open().then(function() {
                c.setHtmlStrings({
                    pt_up_labelimg: this._guardianPtUpHtmlString(e, i),
                    levelup_labelimg: this._guardianLvUpHtmlString(a, s, o)
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _guardianPtUpHtmlString: function(e, t) {
            var n = "<span class='white'>守護神を強化しました。</span><br /><span class='orange'>守護神のカスタムPt:</span><span class='white'>" + e + "&rarr;</span><span class='yellow'>" + t + "</span>";
            return n
        },
        _guardianLvUpHtmlString: function(e, t, n) {
            var i = "<span class='white'>守護神Lvがアップ。</span><br /><span class='orange'>Lv:</span><span class='white'>" + e + "&rarr;</span><span class='yellow'>" + t + "<br />" + n + "</span>";
            return i
        },
        _popupGuardianEnhResult: function(e, i) {
            var a = n.director.getRunningScene()
              , s = a.popups.popupEnhResult
              , o = this._getUnionData();
            o.guardian_info.detail_info.custom_pt = i,
            s.open().then(function() {
                s.setHtmlStrings({
                    enhance_labelimg: this._guardianPtUpHtmlString(e, i)
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    i.assign(t.pc.guild.gud_005.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.guild.roles.Routing, t.pc.guild.roles.GuildApiCache, t.pc.guild.roles.GuildCommon, t.pc.list.roles.ListWeaponsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        com_offerdel_allcheck: {
            factoryName: "popupFactoryTextOnly",
            content: "選択した現在の申請を<br />一括却下しますか？",
            title: "申請一括却下",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    alert("popup,com_offerdel_allresult")
                }
            }
        },
        com_offerdel_allresult: {
            factoryName: "popupFactoryTextOnly",
            content: "選択した申請の<br />一括却下を完了しました。",
            title: "申請一括却下",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    alert("{{com_offerdel_allresult　を閉じgud_007_b_1へ差し替え表示同時にチェックボックスにチェックが入っていたプレイヤーを申請中のプレイヤー一覧から削除}}")
                }
            }
        }
    };
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_007_leader = t.pc.guild.gud_007_leader || {},
    t.pc.guild.gud_007_leader.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_007/gud_007_leader")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_007/gud_007_leader"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_0_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_1_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_2: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab3のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_2_node");
                if (!t)
                    return void alert("tab.tab3のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab2";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud007LeaderDelegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_007_leader"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackTab0NodeBtnMemberScout"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("tab_0_node"), "btn_member_scout", function() {
                alert("{{gud_010へ遷移現在の隊員数が最大の場合、グレーアウトしてタップ不可に}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackTab1NodeBtnMemberScout"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("tab_1_node"), "btn_member_scout", function() {
                alert("{{gud_010へ遷移現在の隊員数が最大の場合、グレーアウトしてタップ不可に}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackTab1NodeBtnMemberSelect"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("tab_1_node"), "btn_member_select", function() {
                alert("gud_007_b_2へ差し替え表示")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackTab1NodeBtnDecision"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("tab_1_node"), "btn_decision", function(e) {
                this.popups.com_offerdel_allcheck.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackTab1NodeBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("tab_1_node"), "btn_cancel", function() {
                alert("{{gud_007_b_1へ差し替え表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackTab1NodeBtnMemberScout0"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("tab_1_node"), "btn_member_scout_0", function() {
                alert("{{gud_010へ遷移現在の隊員数が最大の場合、グレーアウトしてタップ不可に}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackTab2NodeBtnMemberScout"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("tab_2_node"), "btn_member_scout", function() {
                alert("{{gud_010へ遷移現在の隊員数が最大の場合、グレーアウトしてタップ不可に}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_007_leader = t.pc.guild.gud_007_leader || {},
    t.pc.guild.gud_007_leader.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            com_offerdel_allcheck: {
                factoryName: "popupFactoryTextOnly",
                content: "選択した現在の申請を<br />一括却下しますか？",
                title: "申請一括却下",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    redBtn: "却下する"
                },
                buttonSounds: {
                    redBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blackBtn: function() {
                        this.dismiss()
                    },
                    redBtn: function(e) {
                        this.dismiss(),
                        e._delegate._rejectSelectedRequest.call(e._delegate)
                    }
                }
            },
            popupScoutNo: {
                factoryName: "popupFactoryBlackRed",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    redBtn: "却下する"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    redBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupScoutCancel: {
                factoryName: "popupFactoryBlackRed",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    redBtn: "取り下げる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    redBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupScoutOk: {
                factoryName: "popupFactoryBlackBlue",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "許可する"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupConfirm: {
                factoryName: "popupFactoryBlackBlue",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupResult: {
                factoryName: "popupFactoryBlue",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss(),
                        e._delegate.refreshPage(1)
                    }
                }
            },
            popupRoleChange: {
                factoryName: "popupFactoryComRoleChange"
            }
        },
        onSceneInit: function(e) {
            a.defer();
            return this._verifyRouterParams007(e),
            this._getUnionInfoAboutMe().then(function(t) {
                this._setUnionHeaderMemberNum(e),
                this._fillupGuildMemberBtnsList(e);
                var a = ["tab_0_node..btn_member_scout", "tab_1_node..btn_member_scout", "tab_1_node..btn_member_scout_0", "tab_2_node..btn_member_scout"];
                i.each(a, function(t) {
                    var i = e.seekWidgetByPath(t);
                    if (null !== i) {
                        var a = this._maxNumber > this._totalNumber;
                        i.setEnabled(a),
                        i.setColor(a ? n.color("#FFFFFF") : n.color("#808080"))
                    }
                }, this)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            e.tabDelegateList[0].selectTab(e.seekWidgetByName(e.routerParams.gud_007.selectedTab)),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        tabCallbackTab0: function(e) {},
        tabCallbackTab1: function(e) {},
        tabCallbackTab2: function(e) {},
        btnCallbackTab0NodeBtnMemberScout: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate001To010(),
            t.promise
        },
        btnCallbackTab1NodeBtnMemberScout: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate001To010(),
            t.promise
        },
        btnCallbackTab1NodeBtnMemberSelect: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._toggleSelectButton(e, "tab_1_node"),
            this._setEnableButton("btn_decision", this._tab_1_node_list.length > 0),
            t.promise
        },
        btnCallbackTab1NodeBtnDecision: function(e) {
            var t = a.defer();
            return t.resolve(),
            console.log(this._tab_1_node_list),
            t.promise
        },
        btnCallbackTab1NodeBtnCancel: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._toggleSelectButton(e, "tab_1_node"),
            t.promise
        },
        btnCallbackTab1NodeBtnMemberScout0: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate001To010(),
            t.promise
        },
        btnCallbackTab2NodeBtnMemberScout: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate001To010(),
            t.promise
        },
        refreshPage: function(e) {
            t.createInstance("sceneManager").reloadScene()
        },
        _onTouchUserButton: function(e, t, n) {
            this._navigate007ToPRF001(n, t.a_player_id)
        },
        _onTouchGuildBlueButton: function(e, t, i) {
            console.log(t);
            var i = n.director.getRunningScene()
              , a = i.popups.popupRoleChange;
            a.open({
                record: t
            })
        },
        _onTouchMemberJoinRedButton: function(e, t, n) {
            this._confirmRejectRequest(t)
        },
        _onTouchMemberJoinBlueButton: function(e, t, n) {
            this._confirmAcceptRequest(t)
        },
        _onCheckMemberJoin: function(e, t, n, a) {
            console.log(n),
            console.log(this._tab_1_node_list),
            n ? this._tab_1_node_list.push(t.a_union_join_request_id) : i.remove(this._tab_1_node_list, function(e) {
                return e == t.a_union_join_request_id
            }),
            this._setEnableButton("btn_decision", this._tab_1_node_list.length > 0)
        },
        _onTouchMemberScoutRedButton: function(e, t, n) {
            this._confirmCancelScout(t)
        },
        _changeRole: function(e, a) {
            e.union_position !== a && t.createInstance("apiAUnions").changeMemberUnionPosition(e.a_union_member_id, a).then(function(e) {
                var a = e.body.error;
                if (i.isUndefined(a))
                    return void this.refreshPage(0);
                var s = {
                    positionFull: {
                        title: "役職変更不可",
                        content: "副隊長・参謀はそれぞれ3人までしか<br/>任命することができません。"
                    }
                }
                  , o = n.director.getRunningScene()
                  , r = o.popups.popupResult;
                r.open().then(function() {
                    r.setTitle(s[a].title),
                    r.setContent(s[a].content),
                    t.setTouchEventHandlers(r, {
                        "TOUCH_ENDED blue_btn": function() {
                            this.refreshPage(0),
                            r.dismiss()
                        }
                        .bind(this)
                    }, this)
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _confirmRejectRequest: function(e) {
            console.log(e);
            var i = n.director.getRunningScene()
              , a = i.popups.popupScoutNo;
            a.open().then(function() {
                a.setTitle("申請確認"),
                a.setContent(e.name + "の" + t.w("joinedUnion") + "申請を却下しますか？"),
                t.setTouchEventHandlers(a, {
                    "TOUCH_ENDED red_btn": function() {
                        this._rejectRequest(e),
                        a.dismiss()
                    }
                    .bind(this)
                }, this)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _rejectRequest: function(e) {
            t.createInstance("apiAUnionJoinRequests").reject([e.a_union_join_request_id]).then(function(i) {
                var a = n.director.getRunningScene()
                  , s = a.popups.popupResult;
                s.open().then(function() {
                    s.setTitle("申請却下"),
                    s.setContent(e.name + "の申請を却下しました。"),
                    t.setTouchEventHandlers(s, {
                        "TOUCH_ENDED blue_btn": function() {
                            this.refreshPage(1),
                            s.dismiss()
                        }
                        .bind(this)
                    }, this)
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _rejectSelectedRequest: function() {
            t.createInstance("apiAUnionJoinRequests").reject(this._tab_1_node_list).then(function(e) {
                var i = n.director.getRunningScene()
                  , a = i.popups.popupResult;
                a.open().then(function() {
                    a.setTitle("申請一括却下"),
                    a.setContent("選択した申請の<br />一括却下を完了しました。"),
                    this._selectedList = [],
                    t.setTouchEventHandlers(a, {
                        "TOUCH_ENDED blue_btn": function() {
                            this.refreshPage(1),
                            a.dismiss()
                        }
                        .bind(this)
                    }, this)
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _confirmAcceptRequest: function(e) {
            console.log(e);
            var i = n.director.getRunningScene()
              , a = i.popups.popupScoutOk;
            a.open().then(function() {
                a.setTitle("申請確認"),
                a.setContent(e.name + "の" + t.w("joinedUnion") + "申請を許可しますか？"),
                t.setTouchEventHandlers(a, {
                    "TOUCH_ENDED blue_btn": function() {
                        this._acceptRequest(e),
                        a.dismiss()
                    }
                    .bind(this)
                }, this)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _acceptRequest: function(e) {
            t.createInstance("apiAUnions").accept([e.a_player_id]).then(function(i) {
                var a = n.director.getRunningScene()
                  , s = a.popups.popupResult
                  , o = i.body.error || "none"
                  , r = {
                    none: {
                        title: "申請許可",
                        content: e.name + "が" + t.w("joinedUnion") + "しました。"
                    },
                    member_max_reached: {
                        title: "所属" + t.w("unionMember") + "数が最大です",
                        content: "スカウトしたプレイヤー数と現在の" + t.w("unionMember") + "数の合計が<br />最大" + t.w("unionMember") + "数に達しているため、<br />申請中のプレイヤーは" + t.w("joinedUnion") + "できません。<br />"
                    },
                    already_member: {
                        title: "すでに" + t.w("joinedUnion") + "しているプレイヤーです",
                        content: "このプレイヤーはすでに" + t.w("joinedUnion") + "しています。"
                    },
                    already_refused_request: {
                        title: t.w("joinedUnion") + "を許可できません。",
                        content: "すでに却下された申請です。"
                    }
                };
                s.open().then(function() {
                    s.setTitle(r[o].title),
                    s.setContent(r[o].content)
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _confirmCancelScout: function(e) {
            console.log(e);
            var i = n.director.getRunningScene()
              , a = i.popups.popupScoutCancel;
            a.open().then(function() {
                a.setTitle("スカウト取り下げ"),
                a.setContent("スカウトを取り下げますか？"),
                t.setTouchEventHandlers(a, {
                    "TOUCH_ENDED red_btn": function() {
                        this._cancelScout(e),
                        a.dismiss()
                    }
                    .bind(this)
                }, this)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _cancelScout: function(e) {
            var i = "cancel";
            t.createInstance("apiAUnionScouts").cancel(this._unionId, e.a_player_id, i).then(function(e) {
                if (e.body.result)
                    this.refreshPage(2);
                else {
                    var i = n.director.getRunningScene()
                      , a = i.popups.popupResult
                      , s = {
                        already_member: {
                            title: "すでに" + t.w("joinedUnion") + "しているプレイヤーです",
                            content: "このプレイヤーはすでに" + t.w("joinedUnion") + "しています。"
                        },
                        already_canceled: {
                            title: "スカウトがありません",
                            content: "このプレイヤーへのスカウトは<br />すでに取り下げられているか、断られています。"
                        }
                    }
                      , o = e.body.error;
                    a.open().then(function() {
                        a.setTitle(s[o].title),
                        a.setContent(s[o].content)
                    }
                    .bind(this)).fail(function(e) {
                        console.error(e.stack)
                    })
                }
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    i.assign(t.pc.guild.gud_007_leader.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.guild.roles.Routing, t.pc.guild.roles.GuildCommon, t.pc.guild.roles.GuildMemberBtnsListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_007_not_leader = t.pc.guild.gud_007_not_leader || {},
    t.pc.guild.gud_007_not_leader.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_007/gud_007_not_leader")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_007/gud_007_not_leader"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud007NotLeaderDelegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_007_not_leader"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_007_not_leader = t.pc.guild.gud_007_not_leader || {},
    t.pc.guild.gud_007_not_leader.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            this._verifyRouterParams007(e);
            var t = e.routerParams.gud_007.id;
            return n.isUndefined(t) || "me" === t ? this._getUnionInfoAboutMe().then(function(t) {
                this._setUnionHeaderMemberNum(e),
                this._fillupGuildMemberBtnsListForMember(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }) : (this._setUnionHeaderMemberNum(e),
            this._fillupGuildMemberBtnsListForMember(e, void 0, t)),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        onPageInAnimationEnd: function(e) {
            i.defer();
            return i.resolve()
        },
        _onTouchUserButton: function(e, t, n) {
            this._navigate007ToPRF001(n, t.a_player_id)
        }
    }),
    n.assign(t.pc.guild.gud_007_not_leader.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.guild.roles.Routing, t.pc.guild.roles.GuildCommon, t.pc.guild.roles.GuildMemberBtnsListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_008 = t.pc.guild.gud_008 || {},
    t.pc.guild.gud_008.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_008/gud_008.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_008/gud_008.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud008Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_008"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnChatStamp"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_chat_stamp", function() {
                alert("{{ popup　com_edit_greed_a　を表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_008 = t.pc.guild.gud_008 || {},
    t.pc.guild.gud_008.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupDeleteConfirm: {
                factoryName: "popupFactoryBlackRed",
                title: "タイトル",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    redBtn: "削除する"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    redBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupResult: {
                factoryName: "popupFactoryBlue",
                title: "タイトル",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss(),
                        e._delegate._refreshPage()
                    }
                }
            },
            popupChat: {
                factoryName: "popupFactoryComChat"
            },
            popupSendLimit: {
                factoryName: "popupFactoryBlue",
                title: "タイトル",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss();
                        var t = n.director.getRunningScene().seekWidgetByPath("popupLayer..editbox_0");
                        t && t.setVisible(!0)
                    }
                }
            }
        },
        onSceneInit: function(e) {
            a.defer();
            return this._fillupChatBtnsList(e),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnChatStamp: function(e) {
            var t = a.defer();
            t.reject(this._override);
            var e = n.director.getRunningScene()
              , i = e.popups.popupChat;
            return i.open({
                scene: e,
                inputMaxLength: 60
            }),
            t.promise
        },
        _onTouchChatPlayer: function(e, t) {
            this._navigate008ToPRF001(e, t.from_player_info.a_player_id)
        },
        _onTouchDeleteChat: function(e, t) {
            this._confirmChatDelete(t.a_union_chat_id)
        },
        _refreshPage: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("balloonlist_ui_page");
            t && i.each(t.children, function(e) {
                e.setVisible(!1)
            }),
            this._fillupChatBtnsList(e)
        },
        _confirmChatDelete: function(e) {
            var i = n.director.getRunningScene()
              , a = i.popups.popupDeleteConfirm;
            a.open().then(function() {
                a.setTitle("メッセージの削除確認"),
                a.setContent("このメッセージ（ChatまたはStamp）を<br /><span class='red'>削除</span>しますか？"),
                t.setTouchEventHandlers(a, {
                    "TOUCH_ENDED red_btn": function() {
                        this._chatDelete(e),
                        a.dismiss()
                    }
                    .bind(this)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _chatDelete: function(e) {
            t.createInstance("apiAUnions").deleteChat(e).then(function(e) {
                if (console.log(e.body),
                e.body.result === !0) {
                    var t = n.director.getRunningScene()
                      , i = t.popups.popupResult;
                    i.open().then(function() {
                        i.setTitle("メッセージの削除完了"),
                        i.setContent("メッセージを削除しました。")
                    }
                    .bind(this)).fail(function(e) {
                        console.error(e.stack)
                    })
                }
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _sendMessage: function(e, n, i) {
            t.createInstance("apiAUnions").comment(i).then(function(t) {
                return console.log(t.body),
                this._sendInterval === !0 ? void this._showPopupSendingLimit() : (this._showPopupSentMessage(),
                e.dismiss(),
                this._sendInterval = !0,
                void a.delay(5e3).then(function() {
                    this._sendInterval = !1
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                }))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _sendStamp: function(e, n) {
            return this._sendInterval === !0 ? void this._showPopupSendingLimit() : void t.createInstance("apiAUnions").stamp(n).then(function(t) {
                this._showPopupSentStamp(),
                e.dismiss(),
                this._sendInterval = !0,
                a.delay(5e3).then(function() {
                    this._sendInterval = !1
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _showPopupNoText: function() {
            var e = n.director.getRunningScene()
              , t = e.popups.popupResult;
            t.open().then(function() {
                t.setTitle("文字未入力"),
                t.setContent("<span class='red'>文字を入力してください。</span>")
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _showPopupSendingLimit: function() {
            var e = n.director.getRunningScene()
              , t = e.popups.popupSendLimit;
            t.open().then(function() {
                t.setTitle("利用制限"),
                t.setContent("先の利用から5秒経過すると<br />再度利用可能です。");
                var e = n.director.getRunningScene().seekWidgetByPath("popupLayer..editbox_0");
                e && e.setVisible(!1)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _showPopupSentMessage: function() {
            var e = n.director.getRunningScene()
              , t = e.popups.popupResult;
            t.open().then(function() {
                t.setTitle("送信完了"),
                t.setContent("コメントを送信しました。")
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _showPopupSentStamp: function() {
            var e = n.director.getRunningScene()
              , t = e.popups.popupResult;
            t.open().then(function() {
                t.setTitle("送信完了"),
                t.setContent("スタンプを送信しました。")
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    i.assign(t.pc.guild.gud_008.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.guild.roles.Routing, t.pc.guild.roles.GuildCommon, t.pc.list.roles.ChatPageListBtnsController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_009 = t.pc.guild.gud_009 || {},
    t.pc.guild.gud_009.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_009/gud_009.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_009/gud_009.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud009Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_009"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_009 = t.pc.guild.gud_009 || {},
    t.pc.guild.gud_009.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams009(e),
            this._fillupGuildNewsBtnsList(e),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        onPageInAnimationEnd: function(e) {
            i.defer();
            return i.resolve()
        }
    }),
    n.assign(t.pc.guild.gud_009.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.guild.roles.Routing, t.pc.guild.roles.GuildCommon, t.pc.guild.roles.GuildNewsBtnsListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_010_011_012 = t.pc.guild.gud_010_011_012 || {},
    t.pc.guild.gud_010_011_012.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_010_011_012/gud_010_011_012.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_010_011_012/gud_010_011_012.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_0_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_1_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_2: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab3のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_2_node");
                if (!t)
                    return void alert("tab.tab3のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab2";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud010011012Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_010_011_012"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackTab0NodeBtnFriendSearch"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("tab_0_node"), "btn_friend_search", t.createInstance("router").navigate.bind(t.createInstance("router"), "friend/fr_002")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnUpdateList"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_update_list", function() {
                alert("{{同ページを再読み込みする。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSearch"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_search", function() {
                alert("{{入力された数字を参照し　gud_011_dへ差し替え表示入力されたIDに該当するプレイヤーがいなかった場合　gud_011_bへ差し替え表示検索中の場合、検索中のテキストを表示。その際、検索結果の表示が完了するまで検索ボタンをタップ不可に。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnReSearch"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_re_search", function() {
                alert("{{入力された数字を参照し　gud_011_dへ差し替え表示入力されたIDに該当するプレイヤーがいなかった場合　gud_011_bへ差し替え表示検索中の場合、検索中のテキストを表示。その際、検索結果の表示が完了するまで検索ボタンをタップ不可に。}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_010_011_012 = t.pc.guild.gud_010_011_012 || {},
    t.pc.guild.gud_010_011_012.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupConfirm: {
                factoryName: "popupFactoryBlackBlue",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "スカウトする"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupResult: {
                factoryName: "popupFactoryBlue",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            alreadyJoinRequested: {
                factoryName: "popupFactoryBlue",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss().then(function() {
                            t.createInstance("router").navigate("guild/gud_007_a", {
                                gud_007: {
                                    id: "me",
                                    selectedTab: "tab_1"
                                }
                            })
                        })
                    }
                }
            }
        },
        onSceneInit: function(e) {
            a.defer();
            return this._verifyRouterParams010_011_012(e),
            this._setFriendHeaderNum(e),
            this._checkAttentionLabel().then(function(t) {
                if (t) {
                    var n = e.seekWidgetByPath("tab_0_node.attention_node");
                    null !== n && n.setVisible(!0);
                    var a = e.seekWidgetByPath("tab_0_node.btn_friend_search");
                    null !== a && a.setVisible(!1);
                    var s = e.seekWidgetByPath("tab_1_node.full_node");
                    null !== s && s.setVisible(!0)
                } else {
                    this._fillupGuildFriendScoutBtnsList(e);
                    var o = e.tabDelegateList[0];
                    o.selectTab(o._getContainerNode().seekWidgetByName("tab_0")),
                    i.delay(function() {
                        this._fillupGuildFriendScoutList(e)
                    }
                    .bind(this), 800)
                }
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            this._initSearchPage(e),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        tabCallbackTab0: function(e) {},
        tabCallbackTab1: function(e) {},
        tabCallbackTab2: function(e) {},
        btnCallbackTab0NodeBtnFriendSearch: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnUpdateList: function(e) {
            var t = a.defer();
            t.reject(this._override);
            var n = e.seekWidgetByPath("tab_1_node.search_node")
              , i = e.seekWidgetByPath("tab_1_node.full_node")
              , s = e.seekWidgetByPath("tab_1_node.list_node");
            return i.setVisible(!1),
            s.setVisible(!1),
            n.setVisible(!0),
            this._fillupGuildFriendScoutList(e).then(function() {
                n.setVisible(!1)
            }),
            t.promise
        },
        btnCallbackBtnSearch: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._findFriendById(e),
            t.promise
        },
        btnCallbackBtnReSearch: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._switchSearchPanels(e, "input"),
            t.promise
        },
        _checkAttentionLabel: function() {
            var e = t.createInstance("apiAUnions").getMe()
              , n = t.createInstance("apiAUnionScouts").getList();
            return a.all([e, n]).then(function(e) {
                var t = e[0].body
                  , n = e[1].body
                  , i = t.member_count
                  , a = t.max_member_count
                  , s = n.max_record_count
                  , o = i + s >= a;
                return o
            })
        },
        _onTouchUserButton: function(e, t, n) {
            this._navigate010_011_012ToPRF001(n, t.a_player_id)
        },
        _onTouchFriendScoutBlueButton: function(e, t, n) {
            this._confirmScoutMember(n, t)
        },
        _onTouchRecommendedBlueButton: function(e, t, n) {
            this._confirmScoutMember(n, t)
        },
        _initSearchPage: function(e) {
            if (!i.isUndefined(this._searchBox))
                return void this._searchBox.setText("");
            var a = e.seekWidgetByName("input_node");
            if (null === a)
                return void console.warn("[ERROR] Could not find search UI.");
            t.createInstance("apiAPlayers").getMe().then(function(t) {
                var n = t.body.dmm_id;
                e.seekWidgetByName("your_id").setStrings({
                    id_label: n
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            var s = e.seekWidgetByName("editbox_0");
            if (null === s)
                return void console.warn("[ERROR] Could not find editbox_0.");
            var o = e.seekWidgetByName("text_window");
            if (null === o)
                return void console.warn("[ERROR] Could not find text_window.");
            var r = new n.Scale9Sprite("blank.png")
              , c = n.size(.9 * o.width, .75 * o.height);
            this._searchBox = new t.EditBox(c,r),
            this._searchBox.setFontSize(24),
            this._searchBox.setFontColor(n.color("#000000")),
            this._searchBox.setMaxLength(20),
            s.addChild(this._searchBox),
            a.setVisible(!0)
        },
        _setPlayerId: function(e, t) {
            var n = e.seekWidgetByPath("tab_2_node.id_label");
            null === n && console.warn("[ERROR] Could not find id_label."),
            n.setString(t)
        },
        _findFriendById: function(e) {
            var n = this._searchBox.getString();
            n = n.replaceFullWidthNumberToHalfWidth().replace(/\s/g, ""),
            this._searchBox.setString(n),
            n.length > 0 && (this._switchSearchPanels(e, "search"),
            t.createInstance("apiAFriends").getByDmmId(n).then(function(t) {
                console.log(t.body);
                var n = t.body;
                0 === n.max_record_count ? this._switchSearchPanels(e, "input", !0) : (this._fillupResultPanel(e, n.data[0]),
                this._switchSearchPanels(e, "result"))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }))
        },
        _switchSearchPanels: function(e, t, n) {
            var a = e.seekWidgetByPath("tab_2_node.input_node")
              , s = e.seekWidgetByPath("tab_2_node.result_node")
              , o = e.seekWidgetByPath("tab_2_node.search_node");
            return null === a || null === s || null === o ? void console.warn("[ERROR] Could not find panel for switching.") : (a.setVisible("input" == t ? !0 : !1),
            s.setVisible("result" == t ? !0 : !1),
            o.setVisible("search" == t ? !0 : !1),
            void ("input" != t || i.isUndefined(n) ? "input" == t ? this._searchBox.setText("") : a.seekWidgetByName("nothing_label") && a.seekWidgetByName("nothing_label").setVisible(!1) : a.seekWidgetByName("nothing_label") && a.seekWidgetByName("nothing_label").setVisible(n)))
        },
        _fillupResultPanel: function(e, t) {
            var n = e.seekWidgetByPath("tab_2_node.result_node.userlist_0_ui");
            return null === n ? void console.warn("[ERROR] Could not find userlist panel.") : void this._guildRecommendedPanelInitFunc(n, t, 0)
        },
        _confirmScoutMember: function(e, n) {
            this._checkBeforeScout(n).then(function() {
                var i = e.popups.popupConfirm;
                i.open().then(function() {
                    i.setTitle(t.w("unionMember") + "のスカウト"),
                    i.setContent("「" + n.name + "」をスカウトしますか？<br /><span class='mini'>※スカウト中のプレイヤーはスカウトを<br />拒否しない限り" + t.w("unionMember") + "として数に含まれます。</span>"),
                    t.setTouchEventHandlers(i, {
                        "TOUCH_ENDED blue_btn": function() {
                            this._scoutMember(n),
                            i.dismiss()
                        }
                        .bind(this)
                    }, this)
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this))
        }
    }),
    i.assign(t.pc.guild.gud_010_011_012.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.guild.roles.Routing, t.pc.guild.roles.GuildCommon, t.pc.guild.roles.GuildScout, t.pc.guild.roles.GuildPageListController, t.pc.guild.roles.GuildMemberBtnsListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_013_a = t.pc.guild.gud_013_a || {},
    t.pc.guild.gud_013_a.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_013/gud_013_a.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_013/gud_013_a.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud013ADelegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_013_a"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_013_a = t.pc.guild.gud_013_a || {},
    t.pc.guild.gud_013_a.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupConfirm: {
                factoryName: "popupFactoryBlackBlue",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupResult: {
                factoryName: "popupFactoryBlue",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupMemberFire: {
                factoryName: "popupFactoryComMemberFire"
            }
        },
        onSceneInit: function(e) {
            a.defer();
            return this._verifyRouterParams013(e),
            this._getUnionInfoAboutMe().then(function(t) {
                this._setUnionHeaderMemberNum(e),
                this._fillupGuildMemberBtnsListForFire(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        _onTouchUserButton: function(e, t, n) {
            this._navigate013ToPRF001(n, t.a_player_id)
        },
        _onTouchMemberFireButton: function(e, t, i) {
            var i = n.director.getRunningScene()
              , a = i.popups.popupMemberFire;
            a.open({
                scene: i,
                record: t
            }),
            console.log(t)
        },
        _confirmFireMember: function(e) {
            var i = n.director.getRunningScene()
              , a = i.popups.popupConfirm;
            a.open().then(function() {
                a.setTitle("隊員解雇最終確認"),
                a.setContent("本当に<span class='red'>解雇</span>しますか？"),
                t.setTouchEventHandlers(a, {
                    "TOUCH_ENDED blue_btn": function() {
                        a.dismiss(),
                        this._fireMember(e)
                    }
                    .bind(this)
                }, this)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _fireMember: function(e) {
            t.createInstance("apiAUnions").fireMember(e.a_union_member_id).then(function(e) {
                var t = n.director.getRunningScene()
                  , i = t.popups.popupResult;
                i.open().then(function() {
                    i.setTitle("隊員解雇完了"),
                    i.setContent("解雇が完了しました。")
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                }),
                this._fillupGuildMemberBtnsListForFire(t)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    i.assign(t.pc.guild.gud_013_a.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.guild.roles.Routing, t.pc.guild.roles.GuildCommon, t.pc.guild.roles.GuildMemberBtnsListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_013_b = t.pc.guild.gud_013_b || {},
    t.pc.guild.gud_013_b.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("gud_013/gud_013_b.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: gud_013/gud_013_b.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gud013BDelegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["guild", "gud_013_b"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.guild = t.pc.guild || {},
    t.pc.guild.gud_013_b = t.pc.guild.gud_013_b || {},
    t.pc.guild.gud_013_b.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupConfirm: {
                factoryName: "popupFactoryBlackBlue",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupResult: {
                factoryName: "popupFactoryBlue",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupLeaderChange: {
                factoryName: "popupFactoryComLeaderChange"
            },
            popupLeaderChangeDone: {
                factoryName: "popupFactoryComLeaderChangeDone"
            }
        },
        onSceneInit: function(e) {
            a.defer();
            return this._verifyRouterParams013(e),
            this._getUnionInfoAboutMe().then(function(t) {
                this._setUnionHeaderMemberNum(e),
                this._fillupGuildMemberBtnsListForLeader(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        _onTouchUserButton: function(e, t, n) {
            this._navigate013ToPRF001(n, t.a_player_id)
        },
        _onTouchSelectLeaderButton: function(e, t, i) {
            var i = n.director.getRunningScene()
              , a = i.popups.popupLeaderChange;
            a.open({
                scene: i,
                record: t
            })
        },
        _changeLeader: function(e) {
            t.createInstance("apiAUnions").changeLeader(e.a_union_member_id).then(function(t) {
                var i = n.director.getRunningScene()
                  , a = i.popups.popupLeaderChangeDone;
                a.open({
                    scene: i,
                    record: e
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    i.assign(t.pc.guild.gud_013_b.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.guild.roles.Routing, t.pc.guild.roles.GuildCommon, t.pc.guild.roles.GuildMemberBtnsListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.createNameSpaceIfNotExists("enh_evo.view.popup"),
    t.enh_evo.view.popup.ArouseMateCheckPopup = t.ImplantedPopup.extend({
        _initContents: function(e) {
            var n = e[0]
              , i = !0;
            this.setButtonEvents({
                btn_ok: i,
                btn_cancel: !i
            });
            var a = this.getNode();
            a.loadTextures({
                item_img: this._getImageUrl(n.item_id)
            });
            var s = n.num || 0
              , o = n.num - n.need_num;
            a.setHtmlStrings({
                item_use_result_labelimg: this._getLabelText(s, o)
            }, t.GameConfig.POPUP_CSS),
            this._setSEButtonCancel(a)
        },
        _getImageUrl: function(e) {
            return t.Img("corecard", "item", n.padZero(e, 4)).jpg
        },
        _getLabelText: function(e, t) {
            var i = n.template('<div><span class="white"><%= before %>→</span><span class="yellow"><%= after %></span></div>');
            return i({
                before: e,
                after: t
            })
        },
        setButtonEvents: function(e) {
            var i = {};
            n.each(e, function(e, t) {
                var a = e;
                n.isBoolean(e) && (a = function(e) {
                    return function() {
                        this.dismiss(e)
                    }
                }(e)),
                i["TOUCH_ENDED " + t] = a
            }, this),
            t.setTouchEventHandlers(this.getNode(), i, this)
        },
        _setSEButtonCancel: function(e) {
            var n = this._getButtonCancel(e);
            n && n.setSound(t.SoundList.BUTTON_TOUCHED_CANCEL)
        },
        _getButtonCancel: function(e) {
            return e.seekWidgetByName("btn_cancel")
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.roles = t.pc.enh_evo.roles || {},
    t.pc.enh_evo.roles.Routing = {
        _verifyRouterParamsENH001002006EVO001002003: function(e) {},
        _navigateENH001To008: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_character_id) ? void this._consoleErrorRoutingAbort("record.a_character_id") : void t.createInstance("router").navigate("enh_evo/enh_008", {
                enh_008: {
                    id: i.a_character_id
                }
            })
        },
        _navigateENH002To007: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_weapon_id) ? void this._consoleErrorRoutingAbort("record.a_weapon_id") : void t.createInstance("router").navigate("enh_evo/enh_007", {
                enh_007: {
                    id: i.a_weapon_id
                }
            })
        },
        _navigateENH006To009: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_summon_id) ? void this._consoleErrorRoutingAbort("record.a_summon_id") : void t.createInstance("router").navigate("enh_evo/enh_009", {
                enh_009: {
                    id: i.a_summon_id
                }
            })
        },
        _navigateEVO001To013: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_character_id) ? void this._consoleErrorRoutingAbort("record.a_character_id") : void t.createInstance("router").navigate("enh_evo/evo_013", {
                evo_013: {
                    id: i.a_character_id
                }
            })
        },
        _navigateEVO002To007: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_weapon_id) ? void this._consoleErrorRoutingAbort("record.a_weapon_id") : void t.createInstance("router").navigate("enh_evo/evo_007", {
                evo_007: {
                    id: i.a_weapon_id
                }
            })
        },
        _navigateEVO003To010: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_summon_id) ? void this._consoleErrorRoutingAbort("record.a_summon_id") : void t.createInstance("router").navigate("enh_evo/evo_010", {
                evo_010: {
                    id: i.a_summon_id
                }
            })
        },
        _verifyRouterParamsENH003: function(e) {
            n.isUndefined(e.routerParams.enh_003) && (e.routerParams.enh_003 = {},
            e.routerParams.enh_003.id = 1,
            e.routerParams.enh_003.from = "enh_007",
            this._consoleErrorRouterParams("routerParams.enh_003, .id, .from"))
        },
        _navigateENH003ToEVO007: function(e) {
            if (n.isUndefined(e.routerParams.enh_003))
                return void this._consoleErrorRoutingAbort("routerParams.enh_003");
            if (n.isUndefined(e.routerParams.enh_003.id))
                return void this._consoleErrorRoutingAbort("routerParams.enh_003.id");
            var i = e.routerParams.enh_003;
            t.createInstance("router").navigate("enh_evo/evo_007", {
                evo_007: {
                    id: i.id
                }
            })
        },
        _navigateENH003ToENH002: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: "weapon"
                }
            })
        },
        _verifyRouterParamsENH004: function(e) {
            n.isUndefined(e.routerParams.enh_004) && (e.routerParams.enh_004 = {},
            e.routerParams.enh_004.id = 2,
            e.routerParams.enh_004.from = "enh_009",
            this._consoleErrorRouterParams("routerParams.enh_004, .id, .from"))
        },
        _navigateENH004ToEVO010: function(e) {
            if (n.isUndefined(e.routerParams.enh_004))
                return void this._consoleErrorRoutingAbort("routerParams.enh_004");
            if (n.isUndefined(e.routerParams.enh_004.id))
                return void this._consoleErrorRoutingAbort("routerParams.enh_004.id");
            var i = e.routerParams.enh_004;
            t.createInstance("router").navigate("enh_evo/evo_010", {
                evo_010: {
                    id: i.id
                }
            })
        },
        _navigateENH004ToENH006: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: "summon"
                }
            })
        },
        _verifyRouterParamsENH005: function(e) {
            n.isUndefined(e.routerParams.enh_005) && (e.routerParams.enh_005 = {},
            e.routerParams.enh_005.id = 1,
            e.routerParams.enh_005.from = "enh_008",
            this._consoleErrorRouterParams("routerParams.enh_005, .id, .from"))
        },
        _navigateENH005ToEVO013: function(e) {
            if (n.isUndefined(e.routerParams.enh_005))
                return void this._consoleErrorRoutingAbort("routerParams.enh_005");
            if (n.isUndefined(e.routerParams.enh_005.id))
                return void this._consoleErrorRoutingAbort("routerParams.enh_005.id");
            var i = e.routerParams.enh_005;
            t.createInstance("router").navigate("enh_evo/evo_013", {
                evo_013: {
                    id: i.id
                }
            })
        },
        _navigateENH005ToENH001: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: "chara"
                }
            })
        },
        _verifyRouterParamsENH007: function(e) {
            n.isUndefined(e.routerParams.enh_007) && (e.routerParams.enh_007 = {},
            e.routerParams.enh_007.id = 1,
            this._consoleErrorRouterParams("routerParams.enh_007, .id"))
        },
        _navigateENH007ToENH001: function() {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: "weapon"
                }
            })
        },
        _navigateENH007ToENH003: function(e) {
            return n.isUndefined(e) || n.isUndefined(e.a_weapon_id) ? void this._consoleErrorRoutingAbort("record.a_weapon_id") : void t.createInstance("router").navigate("enh_evo/enh_003", {
                enh_003: {
                    id: e.a_weapon_id
                }
            }, {
                ignoreImplicitRoute: !0
            })
        },
        _navigateENH007ToENH011: function(e, i, a) {
            if (n.isUndefined(e.routerParams.enh_007))
                return void this._consoleErrorRoutingAbort("routerParams.enh_007");
            if (n.isUndefined(e.routerParams.enh_007.id))
                return void this._consoleErrorRoutingAbort("routerParams.enh_007.id");
            var s = e.routerParams.enh_007;
            t.createInstance("router").navigate("enh_evo/enh_011", {
                enh_011: {
                    id: s.id
                }
            }, {
                list: i,
                by_recommended: a
            })
        },
        _verifyRouterParamsENH008: function(e) {
            n.isUndefined(e.routerParams.enh_008) && (e.routerParams.enh_008 = {},
            e.routerParams.enh_008.id = 1,
            this._consoleErrorRouterParams("routerParams.enh_008, .id"))
        },
        _navigateENH008ToENH002: function() {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: "chara"
                }
            })
        },
        _navigateENH008ToENH005: function(e) {
            return n.isUndefined(e) || n.isUndefined(e.a_character_id) ? void this._consoleErrorRoutingAbort("record.a_character_id") : void t.createInstance("router").navigate("enh_evo/enh_005", {
                enh_005: {
                    id: e.a_character_id
                }
            }, {
                ignoreImplicitRoute: !0
            })
        },
        _navigateENH008ToENH010: function(e, i, a) {
            if (n.isUndefined(e.routerParams.enh_008))
                return void this._consoleErrorRoutingAbort("routerParams.enh_008");
            if (n.isUndefined(e.routerParams.enh_008.id))
                return void this._consoleErrorRoutingAbort("routerParams.enh_008.id");
            var s = e.routerParams.enh_008;
            t.createInstance("router").navigate("enh_evo/enh_010", {
                enh_010: {
                    id: s.id
                }
            }, {
                list: i,
                by_recommended: a
            })
        },
        _verifyRouterParamsENH009: function(e) {
            n.isUndefined(e.routerParams.enh_009) && (e.routerParams.enh_009 = {},
            e.routerParams.enh_009.id = 2,
            this._consoleErrorRouterParams("routerParams.enh_009, .id"))
        },
        _navigateENH009ToENH006: function() {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: "summon"
                }
            })
        },
        _navigateENH009ToENH004: function(e) {
            return n.isUndefined(e) || n.isUndefined(e.a_summon_id) ? void this._consoleErrorRoutingAbort("record.a_summon_id") : void t.createInstance("router").navigate("enh_evo/enh_004", {
                enh_004: {
                    id: e.a_summon_id,
                    from: "enh_009"
                }
            }, {
                ignoreImplicitRoute: !0
            })
        },
        _navigateENH009ToENH012: function(e, i, a) {
            if (n.isUndefined(e.routerParams.enh_009))
                return void this._consoleErrorRoutingAbort("routerParams.enh_009");
            if (n.isUndefined(e.routerParams.enh_009.id))
                return void this._consoleErrorRoutingAbort("routerParams.enh_009.id");
            var s = e.routerParams.enh_009;
            t.createInstance("router").navigate("enh_evo/enh_012", {
                enh_012: {
                    id: s.id
                }
            }, {
                list: i,
                by_recommended: a
            })
        },
        _verifyRouterParamsENH010: function(e) {
            n.isUndefined(e.routerParams.enh_010) && (e.routerParams.enh_010 = {},
            e.routerParams.enh_010.id = 1,
            e.routerParams.enh_010.list = Array(2, 3, 4, 5),
            this._consoleErrorRouterParams("routerParams.enh_010, .id, .list"))
        },
        _navigateENH010ToENH001: function() {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: "chara"
                }
            })
        },
        _navigateENH010ToENH008: function(e) {
            if (n.isUndefined(e.routerParams.enh_010))
                return void this._consoleErrorRoutingAbort("routerParams.enh_010");
            if (n.isUndefined(e.routerParams.enh_010.id))
                return void this._consoleErrorRoutingAbort("routerParams.enh_010.id");
            var i = e.routerParams.enh_010.id
              , a = e.temporaryRouterParams;
            t.createInstance("router").navigate("enh_evo/enh_008", {
                enh_008: {
                    id: i
                }
            }, {
                list: a.by_recommended ? {} : a.list
            })
        },
        _navigateENH010ToENH005: function(e) {
            return n.isUndefined(e) || n.isUndefined(e.a_character_id) ? void this._consoleErrorRoutingAbort("record.a_character_id") : void t.createInstance("router").navigate("enh_evo/enh_005", {
                enh_005: {
                    id: e.a_character_id
                }
            }, {
                ignoreImplicitRoute: !0
            })
        },
        _navigateENH010ToENH013: function(e, i, a) {
            return n.isUndefined(i) ? void this._consoleErrorRoutingAbort("result") : void t.createInstance("router").navigate("enh_evo/enh_013", {
                enh_013: {
                    id: e.routerParams.enh_010.id,
                    result: i
                }
            }, {
                enh_013: {
                    materials: n.map(a, this._makeEnhEvoAnimationMaterialWeapons.bind(this))
                }
            })
        },
        _verifyRouterParamsENH011: function(e) {
            n.isUndefined(e.routerParams.enh_011) && (e.routerParams.enh_011 = {},
            e.routerParams.enh_011.id = 1,
            e.routerParams.enh_011.list = Array(2, 3, 4, 5),
            this._consoleErrorRouterParams("routerParams.enh_011, .id, .list"))
        },
        _navigateENH011ToENH002: function() {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: "weapon"
                }
            })
        },
        _navigateENH011ToENH007: function(e) {
            if (n.isUndefined(e.routerParams.enh_011))
                return void this._consoleErrorRoutingAbort("routerParams.enh_011");
            if (n.isUndefined(e.routerParams.enh_011.id))
                return void this._consoleErrorRoutingAbort("routerParams.enh_011.id");
            var i = e.routerParams.enh_011.id
              , a = e.temporaryRouterParams;
            t.createInstance("router").navigate("enh_evo/enh_007", {
                enh_007: {
                    id: i
                }
            }, {
                list: a.by_recommended ? {} : a.list
            })
        },
        _navigateENH011ToENH003: function(e) {
            return n.isUndefined(e) || n.isUndefined(e.a_weapon_id) ? void this._consoleErrorRoutingAbort("record.a_weapon_id") : void t.createInstance("router").navigate("enh_evo/enh_003", {
                enh_003: {
                    id: e.a_weapon_id
                }
            }, {
                ignoreImplicitRoute: !0
            })
        },
        _navigateENH011ToENH014: function(e, i, a) {
            return n.isUndefined(i) ? void this._consoleErrorRoutingAbort("result") : void t.createInstance("router").navigate("enh_evo/enh_014", {
                enh_014: {
                    id: e.routerParams.enh_011.id,
                    result: i
                }
            }, {
                enh_014: {
                    materials: n.map(a, this._makeEnhEvoAnimationMaterialWeapons.bind(this))
                }
            })
        },
        _verifyRouterParamsENH012: function(e) {
            n.isUndefined(e.routerParams.enh_012) && (e.routerParams.enh_012 = {},
            e.routerParams.enh_012.id = 1,
            e.routerParams.enh_012.list = Array(2, 3, 4, 5),
            this._consoleErrorRouterParams("routerParams.enh_012, .id, .list"))
        },
        _navigateENH012ToENH006: function() {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: "summon"
                }
            })
        },
        _navigateENH012ToENH009: function(e) {
            if (n.isUndefined(e.routerParams.enh_012))
                return void this._consoleErrorRoutingAbort("routerParams.enh_012");
            if (n.isUndefined(e.routerParams.enh_012.id))
                return void this._consoleErrorRoutingAbort("routerParams.enh_012.id");
            var i = e.routerParams.enh_012.id
              , a = e.temporaryRouterParams;
            t.createInstance("router").navigate("enh_evo/enh_009", {
                enh_009: {
                    id: i
                }
            }, {
                list: a.by_recommended ? {} : a.list
            })
        },
        _navigateENH012ToENH004: function(e) {
            return n.isUndefined(e) || n.isUndefined(e.a_summon_id) ? void this._consoleErrorRoutingAbort("record.a_summon_id") : void t.createInstance("router").navigate("enh_evo/enh_004", {
                enh_004: {
                    id: e.a_summon_id,
                    from: "enh_012"
                }
            })
        },
        _navigateENH012ToENH015: function(e, i, a) {
            return n.isUndefined(i) ? void this._consoleErrorRoutingAbort("result") : void t.createInstance("router").navigate("enh_evo/enh_015", {
                enh_015: {
                    id: e.routerParams.enh_012.id,
                    result: i
                }
            }, {
                enh_015: {
                    materials: n.map(a, this._makeEnhEvoAnimationMaterialSummons.bind(this))
                }
            })
        },
        _verifyRouterParamsENH013: function(e) {
            n.isUndefined(e.routerParams.enh_013) && (e.routerParams.enh_013 = {},
            e.routerParams.enh_013.id = 1,
            e.routerParams.enh_013.result = {
                result: {
                    success_type: "success",
                    gained_exp: 600,
                    before: {
                        level: 1,
                        gauge: 0,
                        hp: 210,
                        attack: 850,
                        max: !1
                    },
                    after: {
                        level: 6,
                        gauge: 83,
                        hp: 273,
                        attack: 1105,
                        max: !1
                    },
                    new_abilities_gained: [{
                        ability_type: 1,
                        ability_name: "ランページ1"
                    }, {
                        ability_type: 2,
                        ability_name: "ランページ2"
                    }, {
                        ability_type: 3,
                        ability_name: "ランページ3"
                    }, {
                        ability_type: 4,
                        ability_name: "ランページ4"
                    }, {
                        ability_type: 5,
                        ability_name: "ランページ5"
                    }, {
                        ability_type: 6,
                        ability_name: "ランページ6"
                    }]
                },
                character: {
                    character_id: 26,
                    a_character_id: 28,
                    rare: "SR",
                    element_type: 1,
                    character_type: "heal",
                    name: "仮名さん",
                    level: 6,
                    max_level: 80,
                    is_equipped: !1,
                    bonus: 0,
                    overlimit_count: 1,
                    max_overlimit_count: 4,
                    skin: 0
                }
            },
            this._consoleErrorRouterParams("routerParams.enh_013, .id, .result"))
        },
        _navigateENH013ToENH002: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: "chara"
                }
            })
        },
        _navigateENH013ToEVO010: function(e) {
            t.createInstance("router").navigate("enh_evo/enh_008", {
                enh_008: {
                    id: e.routerParams.enh_013.id
                }
            })
        },
        _verifyRouterParamsENH014: function(e) {
            n.isUndefined(e.routerParams.enh_014) && (e.routerParams.enh_014 = {},
            e.routerParams.enh_014.result = {
                result: {
                    success_type: "great_success",
                    gained_exp: 600,
                    before: {
                        level: 10,
                        skill_level: 0,
                        gauge: 40,
                        hp: 210,
                        attack: 850,
                        max: !1
                    },
                    after: {
                        level: 22,
                        skill_level: 1,
                        gauge: 70,
                        hp: 273,
                        attack: 1105,
                        max: !1
                    }
                },
                weapon: {
                    weapon_id: 2,
                    a_weapon_id: 2,
                    rare: "SR",
                    element_type: 1,
                    weapon_type: "staff",
                    name: "木の棒",
                    level: 22,
                    max_level: 80,
                    is_equipped: !1,
                    bonus: 0,
                    overlimit_count: 1,
                    max_overlimit_count: 4,
                    skin: 0
                }
            },
            e.routerParams.enh_014.id = 1,
            this._consoleErrorRouterParams("routerParams.enh_014, .id"))
        },
        _navigateENH014ToENH001: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: "weapon"
                }
            })
        },
        _navigateENH014ToENH007: function(e) {
            t.createInstance("router").navigate("enh_evo/enh_007", {
                enh_007: {
                    id: e.routerParams.enh_014.id
                }
            })
        },
        _verifyRouterParamsENH015: function(e) {
            n.isUndefined(e.routerParams.enh_015) && (e.routerParams.enh_015 = {},
            e.routerParams.enh_015.id = 1,
            e.routerParams.enh_015.result = {
                result: {
                    success_type: "success",
                    gained_exp: 600,
                    before: {
                        level: 1,
                        gauge: 0,
                        hp: 210,
                        attack: 850,
                        max: !1
                    },
                    after: {
                        level: 6,
                        gauge: 83,
                        hp: 273,
                        attack: 1105,
                        max: !1
                    }
                },
                summon: {
                    summon_id: 2,
                    a_summon_id: 2,
                    rare: "SR",
                    element_type: 1,
                    name: "まぼろしの獣",
                    level: 6,
                    max_level: 80,
                    is_equipped: !1,
                    bonus: 0,
                    overlimit_count: 1,
                    max_overlimit_count: 4,
                    skin: 0
                }
            },
            this._consoleErrorRouterParams("routerParams.enh_015, .id"))
        },
        _navigateENH015ToENH006: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: "summon"
                }
            })
        },
        _navigateENH015ToENH009: function(e) {
            t.createInstance("router").navigate("enh_evo/enh_009", {
                enh_009: {
                    id: e.routerParams.enh_015.id
                }
            })
        },
        _verifyRouterParamsEVO004: function(e) {
            n.isUndefined(e.routerParams.evo_004) && (e.routerParams.evo_004 = {},
            e.routerParams.evo_004.id = 1,
            e.routerParams.evo_004.from = "evo_007",
            this._consoleErrorRouterParams("routerParams.evo_004, .id, .from"))
        },
        _navigateEVO004ToENH007: function(e) {
            if (n.isUndefined(e.routerParams.evo_004))
                return void this._consoleErrorRoutingAbort("routerParams.evo_004");
            if (n.isUndefined(e.routerParams.evo_004.id))
                return void this._consoleErrorRoutingAbort("routerParams.evo_004.id");
            var i = e.routerParams.evo_004;
            t.createInstance("router").navigate("enh_evo/enh_007", {
                enh_007: {
                    id: i.id
                }
            })
        },
        _navigateEVO004ToENH002: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "weapon"
                }
            })
        },
        _verifyRouterParamsEVO005: function(e) {
            n.isUndefined(e.routerParams.evo_005) && (e.routerParams.evo_005 = {},
            e.routerParams.evo_005.id = 2,
            e.routerParams.evo_005.from = "evo_010",
            this._consoleErrorRouterParams("routerParams.evo_005, .id, .from"))
        },
        _navigateEVO005ToENH009: function(e) {
            if (n.isUndefined(e.routerParams.evo_005))
                return void this._consoleErrorRoutingAbort("routerParams.evo_005");
            if (n.isUndefined(e.routerParams.evo_005.id))
                return void this._consoleErrorRoutingAbort("routerParams.evo_005.id");
            var i = e.routerParams.evo_005;
            t.createInstance("router").navigate("enh_evo/enh_009", {
                enh_009: {
                    id: i.id
                }
            })
        },
        _navigateEVO005ToEVO003: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "summon"
                }
            })
        },
        _verifyRouterParamsEVO006: function(e) {
            n.isUndefined(e.routerParams.evo_006) && (e.routerParams.evo_006 = {},
            e.routerParams.evo_006.id = 1,
            e.routerParams.evo_006.from = "evo_013",
            this._consoleErrorRouterParams("routerParams.evo_006, .id, .from"))
        },
        _navigateEVO006ToENH008: function(e) {
            if (n.isUndefined(e.routerParams.evo_006))
                return void this._consoleErrorRoutingAbort("routerParams.evo_006");
            if (n.isUndefined(e.routerParams.evo_006.id))
                return void this._consoleErrorRoutingAbort("routerParams.evo_006.id");
            var i = e.routerParams.evo_006;
            t.createInstance("router").navigate("enh_evo/enh_008", {
                enh_008: {
                    id: i.id
                }
            })
        },
        _navigateEVO006ToEVO001: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "chara"
                }
            })
        },
        _verifyRouterParamsEVO007: function(e) {
            n.isUndefined(e.routerParams.evo_007) && (e.routerParams.evo_007 = {},
            e.routerParams.evo_007.id = 26,
            e.routerParams.evo_007.from = "evo_001",
            this._consoleErrorRouterParams("routerParams.evo_007, .id, .from"))
        },
        _navigateEVO007ToEVO004: function(e) {
            return n.isUndefined(e) || n.isUndefined(e.a_weapon_id) ? void this._consoleErrorRoutingAbort("record.a_weapon_id") : void t.createInstance("router").navigate("enh_evo/evo_004", {
                evo_004: {
                    id: e.a_weapon_id
                }
            }, {
                ignoreImplicitRoute: !0
            })
        },
        _navigateEVO007ToEVO008: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_weapon_id) ? void this._consoleErrorRoutingAbort("material.a_weapon_id") : void t.createInstance("router").navigate("enh_evo/evo_008", {
                evo_008: {
                    id: e.routerParams.evo_007.id,
                    evomate: i
                }
            })
        },
        _navigateEVO007ToEVO001: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "weapon"
                }
            })
        },
        _verifyRouterParamsEVO008: function(e) {
            n.isUndefined(e.routerParams.evo_008) && (e.routerParams.evo_008 = {},
            e.routerParams.evo_008.id = 16,
            e.routerParams.evo_008.evomate = {
                weapon_id: 4,
                a_weapon_id: 293,
                rare: "SSR",
                element_type: 3,
                weapon_type: "ax",
                is_locked: !1,
                is_equipped: !1,
                bonus: 1,
                overlimit_count: 3,
                max_overlimit_count: 4,
                skin: 0
            },
            e.routerParams.evo_008.from = "evo_007",
            this._consoleErrorRouterParams("routerParams.evo_008, .id, .evomate, .from"))
        },
        _navigateEVO008ToEVO001: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "weapon"
                }
            })
        },
        _navigateEVO008ToEVO007: function(e) {
            t.createInstance("router").navigate("enh_evo/evo_007", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "weapon"
                }
            })
        },
        _navigateEVO008ToEVO004: function(e) {
            return n.isUndefined(e) || n.isUndefined(e.a_weapon_id) ? void this._consoleErrorRoutingAbort("record.a_weapon_id") : void t.createInstance("router").navigate("enh_evo/evo_004", {
                evo_004: {
                    id: e.a_weapon_id
                }
            })
        },
        _navigateEVO008ToEVO009: function(e, i, a) {
            return n.isUndefined(i) ? void this._consoleErrorRoutingAbort("result") : void t.createInstance("router").navigate("enh_evo/evo_009", {
                evo_009: {
                    id: e.routerParams.evo_008.id,
                    result: i
                }
            }, {
                evo_009: {
                    materials: n.map(a, this._makeEnhEvoAnimationMaterialWeapons.bind(this))
                }
            })
        },
        _verifyRouterParamsEVO009: function(e) {
            n.isUndefined(e.routerParams.evo_009) && (e.routerParams.evo_009 = {},
            e.routerParams.evo_009.id = 1,
            e.routerParams.evo_009.result = {
                result: {
                    is_full_max_level: !0,
                    before: {
                        max_level: 80
                    },
                    after: {
                        max_level: 100
                    }
                },
                weapon: {
                    weapon_id: 4,
                    a_weapon_id: 4,
                    rare: "SSR",
                    element_type: 3,
                    name: "まぼろしの剣",
                    is_locked: !1,
                    is_equipped: !0,
                    bonus: 1,
                    overlimit_count: 3,
                    max_overlimit_count: 4,
                    skin: 0
                }
            },
            this._consoleErrorRouterParams("routerParams.evo_009, .id, .result"))
        },
        _navigateEVO009ToEVO001: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "weapon"
                }
            })
        },
        _navigateEVO009ToEVO007: function(e) {
            t.createInstance("router").navigate("enh_evo/evo_007", {
                evo_007: {
                    id: e.routerParams.evo_009.id
                }
            })
        },
        _verifyRouterParamsEVO010: function(e) {
            n.isUndefined(e.routerParams.evo_010) && (e.routerParams.evo_010 = {},
            e.routerParams.evo_010.id = 4,
            this._consoleErrorRouterParams("routerParams.evo_010, .id"))
        },
        _navigateEVO010ToEVO005: function(e) {
            return n.isUndefined(e) || n.isUndefined(e.a_summon_id) ? void this._consoleErrorRoutingAbort("record.a_summon_id") : void t.createInstance("router").navigate("enh_evo/evo_005", {
                evo_005: {
                    id: e.a_summon_id,
                    from: "evo_010"
                }
            }, {
                ignoreImplicitRoute: !0
            })
        },
        _navigateEVO010ToEVO011: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.a_summon_id) ? void this._consoleErrorRoutingAbort("material.a_summon_id") : void t.createInstance("router").navigate("enh_evo/evo_011", {
                evo_011: {
                    id: e.routerParams.evo_010.id,
                    evomate: i
                }
            })
        },
        _navigateEVO010ToEVO003: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "summon"
                }
            })
        },
        _verifyRouterParamsEVO011: function(e) {
            n.isUndefined(e.routerParams.evo_011) && (e.routerParams.evo_011 = {},
            e.routerParams.evo_011.id = 4,
            e.routerParams.evo_011.evomate = {
                summon_id: 4,
                a_summon_id: 296,
                rare: "SSR",
                element_type: 3,
                weapon_type: "ax",
                is_locked: !1,
                is_equipped: !1,
                bonus: 1,
                overlimit_count: 3,
                max_overlimit_count: 4,
                skin: 0
            },
            e.routerParams.evo_011.from = "evo_010",
            this._consoleErrorRouterParams("routerParams.evo_011, .id, .evomate, .from"))
        },
        _navigateEVO011ToEVO003: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "summon"
                }
            })
        },
        _navigateEVO011ToEVO010: function(e) {
            t.createInstance("router").navigate("enh_evo/evo_010", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "summon"
                }
            })
        },
        _navigateEVO011ToEVO005: function(e) {
            return n.isUndefined(e) || n.isUndefined(e.a_summon_id) ? void this._consoleErrorRoutingAbort("record.a_summon_id") : void t.createInstance("router").navigate("enh_evo/evo_005", {
                evo_005: {
                    id: e.a_summon_id,
                    from: "evo_011"
                }
            }, {
                ignoreImplicitRoute: !0
            })
        },
        _navigateEVO011ToEVO012: function(e, i, a) {
            return n.isUndefined(i) ? void this._consoleErrorRoutingAbort("result") : void t.createInstance("router").navigate("enh_evo/evo_012", {
                evo_012: {
                    id: e.routerParams.evo_011.id,
                    result: i
                }
            }, {
                evo_012: {
                    materials: n.map(a, this._makeEnhEvoAnimationMaterialSummons.bind(this))
                }
            })
        },
        _verifyRouterParamsEVO012: function(e) {
            n.isUndefined(e.routerParams.evo_012) && (e.routerParams.evo_012 = {},
            e.routerParams.evo_012.id = 1,
            e.routerParams.evo_012.result = {
                result: {
                    is_full_max_level: !1,
                    before: {
                        max_level: 80
                    },
                    after: {
                        max_level: 100
                    }
                },
                summon: {
                    summon_id: 4,
                    a_summon_id: 4,
                    rare: "SSR",
                    element_type: 3,
                    name: "まぼろしの獣",
                    is_locked: !1,
                    is_equipped: !0,
                    bonus: 1,
                    overlimit_count: 3,
                    max_overlimit_count: 4,
                    skin: 0
                }
            },
            this._consoleErrorRouterParams("routerParams.evo_012, .id, .result"))
        },
        _navigateEVO012ToEVO003: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "summon"
                }
            })
        },
        _navigateEVO012ToEVO010: function(e) {
            t.createInstance("router").navigate("enh_evo/evo_010", {
                evo_010: {
                    id: e.routerParams.evo_012.id
                }
            })
        },
        _verifyRouterParamsEVO013: function(e) {
            n.isUndefined(e.routerParams.evo_013) && (e.routerParams.evo_013 = {},
            e.routerParams.evo_013.id = 1,
            this._consoleErrorRouterParams("routerParams.evo_013, .id"))
        },
        _navigateEVO013ToEVO002: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "chara"
                }
            })
        },
        _navigateEVO013ToEVO006: function(e) {
            return n.isUndefined(e) || n.isUndefined(e.a_character_id) ? void this._consoleErrorRoutingAbort("record.a_character_id") : void t.createInstance("router").navigate("enh_evo/evo_006", {
                evo_006: {
                    id: e.a_character_id
                }
            }, {
                ignoreImplicitRoute: !0
            })
        },
        _navigateEVO013ToEVO014: function(e, i, a) {
            return n.isUndefined(i) ? void this._consoleErrorRoutingAbort("result") : void t.createInstance("router").navigate("enh_evo/evo_014", {
                evo_014: {
                    id: e.routerParams.evo_013.id,
                    result: i
                }
            }, {
                evo_014: {
                    materials: n.map(a, this._makeEnhEvoAnimationMaterialItems.bind(this))
                }
            })
        },
        _verifyRouterParamsEVO014: function(e) {
            n.isUndefined(e.routerParams.evo_014) && (e.routerParams.evo_014 = {},
            e.routerParams.evo_014.id = 1,
            e.routerParams.evo_014.result = {
                result: {
                    is_full_max_level: !1,
                    before: {
                        max_level: 30
                    },
                    after: {
                        max_level: 40
                    }
                },
                character: {
                    character_id: 26,
                    a_character_id: 28,
                    rare: "SR",
                    element_type: 1,
                    character_type: "heal",
                    name: "仮名さん",
                    bonus: 0,
                    is_equipped: !1,
                    overlimit_count: 1,
                    max_overlimit_count: 4,
                    skin: 0
                }
            },
            this._consoleErrorRouterParams("routerParams.evo_014, .id, .result"))
        },
        _navigateEVO014ToEVO002: function(e) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: "chara"
                }
            })
        },
        _navigateEVO014ToEVO013: function(e) {
            t.createInstance("router").navigate("enh_evo/evo_013", {
                evo_013: {
                    id: e.routerParams.evo_014.id
                }
            })
        },
        _navigateToEnhTop: function(e, n) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "enh",
                    kind: n
                }
            })
        },
        _navigateToEvoTop: function(e, n) {
            t.createInstance("router").navigate("enh_evo", {}, {
                enhevo_home: {
                    tab: "evo",
                    kind: n
                }
            })
        },
        _verifyRouterParamsAROUSAL002: function(e) {
            n.isUndefined(e.temporaryRouterParams.arousal_002) && this._consoleErrorRouterParams("routerParams.arousal_002.id")
        },
        _navigateAROUSAL001To002: function(e, n) {
            t.createInstance("router").navigate("enh_evo/arousal_002", {}, {
                arousal_002: {
                    id: n.a_character_id
                }
            })
        },
        _navigateAROUSAL002To001: function(e) {
            t.createInstance("router").navigate("enh_evo/arousal_001", {}, {
                enhevo_home: {
                    tab: "arousal",
                    kind: "chara"
                },
                ignoreImplicitRoute: !0
            })
        },
        _navigateAROUSAL002To003: function(e, n, i) {
            t.createInstance("router").navigate("enh_evo/arousal_003", {}, {
                arousal_003: {
                    id: n,
                    result: i
                }
            })
        },
        _navigateAROUSAL002ToLI004: function(e, n) {
            t.createInstance("router").navigate("list/li_004", {
                li_004: {
                    id: n
                }
            }, {
                ignoreImplicitRoute: !0
            })
        },
        _navigateAROUSAL003To001: function(e) {
            t.createInstance("router").navigate("enh_evo/arousal_001", {}, {
                enhevo_home: {
                    tab: "arousal",
                    kind: "chara"
                }
            })
        },
        _navigateAROUSAL003ToENH008: function(e, n) {
            t.createInstance("router").navigate("enh_evo/enh_008", {
                enh_008: {
                    id: n.a_character_id
                }
            })
        },
        _navigateAROUSAL003ToEVO013: function(e, n) {
            t.createInstance("router").navigate("enh_evo/evo_013", {
                evo_013: {
                    id: n.a_character_id
                }
            })
        },
        _makeEnhEvoAnimationMaterialWeapons: function(e) {
            return {
                weapon_id: e.weapon_id,
                skin: e.skin,
                bonus: e.bonus,
                element_type: e.element_type,
                rare: e.rare,
                overlimit_count: e.overlimit_count,
                max_overlimit_count: e.max_overlimit_count
            }
        },
        _makeEnhEvoAnimationMaterialSummons: function(e) {
            return {
                summon_id: e.summon_id,
                skin: e.skin,
                bonus: e.bonus,
                element_type: e.element_type,
                rare: e.rare,
                overlimit_count: e.overlimit_count,
                max_overlimit_count: e.max_overlimit_count
            }
        },
        _makeEnhEvoAnimationMaterialItems: function(e) {
            return {
                item_id: e.item_id
            }
        }
    },
    n.assign(t.pc.enh_evo.roles.Routing, t.pc.roles.RoutingCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = (e.Q,
    e.console);
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.roles = t.pc.enh_evo.roles || {},
    t.pc.enh_evo.roles.ARGS = [{
        targetNode: "enh_node.chara_node",
        cardType: "chara",
        apiName: "apiACharacters",
        apiMethod: "getListEnhanceBase",
        sortKey: "enhance_base_characters",
        sortEvent: "pulldown_enh_chara",
        touchFuncName: "_touchEnhChara",
        nothingFuncName: "_nothingEnhChara"
    }, {
        targetNode: "enh_node.weapon_node",
        cardType: "weapon",
        apiName: "apiAWeapons",
        apiMethod: "getListEnhanceBase",
        sortKey: "enhance_base_weapons",
        sortEvent: "pulldown_enh_weapon",
        touchFuncName: "_touchEnhWeapon",
        nothingFuncName: "_nothingEnhWeapon"
    }, {
        targetNode: "enh_node.summon_node",
        cardType: "summon",
        apiName: "apiASummons",
        apiMethod: "getListEnhanceBase",
        sortKey: "enhance_base_summons",
        sortEvent: "pulldown_enh_summon",
        touchFuncName: "_touchEnhSummon",
        nothingFuncName: "_nothingEnhSummon"
    }, {
        targetNode: "evo_node.chara_node",
        cardType: "chara",
        apiName: "apiACharacters",
        apiMethod: "getListEvolveBase",
        sortKey: "evolve_base_characters",
        sortEvent: "pulldown_evo_chara",
        eachCardCallbackName: "_grayOutMaterialLackForChara",
        touchFuncName: "_touchEvoChara",
        nothingFuncName: "_nothingEnhChara"
    }, {
        targetNode: "evo_node.weapon_node",
        cardType: "weapon",
        apiName: "apiAWeapons",
        apiMethod: "getListEvolveBase",
        sortKey: "evolve_base_weapons",
        sortEvent: "pulldown_evo_weapon",
        eachCardCallbackName: "_grayOutMaterialLack",
        touchFuncName: "_touchEvoWeapon",
        nothingFuncName: "_nothingEvoWeapon"
    }, {
        targetNode: "evo_node.summon_node",
        cardType: "summon",
        apiName: "apiASummons",
        apiMethod: "getListEvolveBase",
        sortKey: "evolve_base_summons",
        sortEvent: "evolve_base_summons",
        eachCardCallbackName: "_grayOutMaterialLack",
        touchFuncName: "_touchEvoSummon",
        nothingFuncName: "_nothingEnhSummon"
    }, {
        targetNode: "arousal_node.chara_node",
        cardType: "chara",
        apiName: "apiACharacters",
        apiMethod: "getListArouseBase",
        sortKey: "arousal_base_characters",
        sortEvent: "arousal_base_characters",
        eachCardCallbackName: "_grayOutIfCannotArouse",
        touchFuncName: "_touchArouseChara",
        nothingFuncName: "_nothingArouseChara"
    }],
    t.pc.enh_evo.roles.SCENE_NAME_INDEX = {
        enh_001: 1,
        enh_002: 0,
        enh_006: 2,
        evo_001: 4,
        evo_002: 3,
        evo_003: 5,
        arousal_001: 6
    },
    t.pc.enh_evo.roles.EnhEvoEntryBtnsPageListController = {
        _hasFilledUp: {},
        _fillupBySceneName: function(e, n) {
            if (n && !this._hasFilledUp[n]) {
                var i = t.pc.enh_evo.roles.SCENE_NAME_INDEX[n];
                this._fillupEnhEvoEntryBtnsListOrg(e, t.pc.enh_evo.roles.ARGS[i], 0, !0),
                this._hasFilledUp[n] = !0
            }
        },
        _fillupEnhEvoEntryBtnsList: function(e, n, s) {
            var o = i.clone(t.pc.enh_evo.roles.ARGS);
            if (!i.isUndefined(n)) {
                if (0 > n || n >= o.length)
                    return void a.error("[ERROR] targetNum is out of range.");
                var r = o.splice(n, 1);
                if (r = r[0],
                i.isUndefined(s) || s === !1)
                    return void this._fillupEnhEvoEntryBtnsListOrg(e, r, 500, !0)
            }
            var c = 300
              , u = 1;
            i.each(o, function(t) {
                this._fillupEnhEvoEntryBtnsListOrg(e, t, c * u++, !1),
                a.log(c * u)
            }, this)
        },
        _fillupEnhEvoEntryBtnsListOrg: function(e, n, s, o) {
            s = s || 0;
            var r = []
              , c = "attack_desc";
            r.push(c),
            $staticRes(res.corecard_blank_6_3_ui);
            var u = {
                baseName: "",
                panelName: t.BtnsPageListParams.ENH_EVO_ENTRY.panelName,
                panelsPerPage: t.BtnsPageListParams.ENH_EVO_ENTRY.perPage,
                apiName: "",
                apiMethod: "",
                apiParams: r,
                cardType: "",
                cardFrame: "full",
                sortEvent: "",
                sortCondition: c
            };
            $staticRes(res["core-pages-sort_list_0_ui"]);
            var _ = {
                sortKey: "selectable_characters",
                sortValue: c,
                sortButton: "btn_sort",
                sortLabel: "sort_label",
                sortMenuBase: "sortlist",
                sortChoice: "core-pages-sort_list_0_ui",
                changeEventName: ""
            }
              , l = n.targetNode.split(".")
              , d = e.seekWidgetByName(l[0]);
            if (null === d)
                return void a.debug("[ERROR] Could not find the node." + l[0]);
            var p = d.seekWidgetByName(l[1]);
            if (null === p)
                return void a.debug("[ERROR] Could not find the node." + l[1]);
            p.setVisible(o);
            var h = i.cloneDeep(u)
              , g = i.cloneDeep(_);
            h.baseName = n.targetNode,
            h.apiName = n.apiName,
            h.apiMethod = n.apiMethod,
            h.cardType = n.cardType,
            h.sortEvent = n.sortEvent,
            g.parentNodeName = n.targetNode,
            g.sortKey = n.sortKey,
            g.changeEventName = n.sortEvent,
            i.isFunction(this._setListBtnsControllerWithArgs) && this._setListBtnsControllerWithArgs(p, n.touchFuncName, h, g, n.eachCardCallbackName).then(function(t) {
                return e.disposed ? void a.warn("EnhEvoEntryBtnsPageListController._fillupEnhEvoEntryBtnsListOrg: scene already disposed, aborting further initialization.") : void (i.isUndefined(t.pageCount) || 0 !== t.pageCount || i.isUndefined(this[n.nothingFuncName]) || !i.isFunction(this[n.nothingFuncName]) ? (null !== p.seekWidgetByName("list_node") && p.seekWidgetByName("list_node").setVisible(!0),
                null !== p.seekWidgetByName("corecard_blank_6_3_ui") && p.seekWidgetByName("corecard_blank_6_3_ui").setVisible(!0)) : (this[n.nothingFuncName](),
                null !== p.seekWidgetByName("nothing_node") && p.seekWidgetByName("nothing_node").setVisible(!0)))
            }
            .bind(this)).fail(function(e) {
                a.error(e.stack)
            })
        },
        __setCoreCardBrightness: function(e, t) {
            t ? e.setColor(n.color("#FFFFFF")) : e.setColor(n.color("#808080"))
        },
        _grayOutMaterialLack: function(e, a, s) {
            var o = e.seekWidgetByName(s + "_img");
            if (!i.isUndefined(a.has_material_for_evolve))
                return void this.__setCoreCardBrightness(o, a.has_material_for_evolve);
            o.setColor(n.color("#cccccc"));
            var r = {
                weapon: {
                    api: "apiAWeapons",
                    property: "a_weapon_id"
                },
                summon: {
                    api: "apiASummons",
                    property: "a_summon_id"
                }
            };
            t.createInstance(r[s].api).getEvolveMaterials(a[r[s].property]).then(function(t) {
                if (!e.disposed && !o.disposed) {
                    var n = t.body
                      , i = n.max_record_count > 0;
                    this.__setCoreCardBrightness(o, i)
                }
            }
            .bind(this))
        },
        _grayOutMaterialLackForChara: function(e, a, s) {
            var o = e.seekWidgetByName("chara_img");
            return i.isUndefined(a.has_material_for_evolve) ? (o.setColor(n.color("#cccccc")),
            void t.createInstance("apiACharacters").getEvolveMaterials(a.a_character_id).then(function(t) {
                if (!e.disposed && !o.disposed) {
                    var n = t.body.result
                      , a = !0;
                    i.each(n.items, function(e) {
                        e.need_num > e.num && (a = !1)
                    }, this),
                    this.__setCoreCardBrightness(o, a)
                }
            }
            .bind(this))) : void this.__setCoreCardBrightness(o, a.has_material_for_evolve)
        },
        _grayOutIfCannotArouse: function(e, t, n) {
            var a = e.seekWidgetByName("chara_img");
            i.isUndefined(t.can_arouse) || i.isUndefined(t.has_material_for_arouse) || this.__setCoreCardBrightness(a, t.can_arouse && t.has_material_for_arouse)
        }
    },
    i.assign(t.pc.enh_evo.roles.EnhEvoEntryBtnsPageListController, t.pc.list.roles.PageListBtnsControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.enh_evo.roles = t.pc.enh_evo.roles || {},
    t.pc.enh_evo.roles.EnhEvoCommon = {
        _setPageResult: function(e, i) {
            if (n.isUndefined(i) || n.isUndefined(i.pageCount) || 0 !== i.pageCount) {
                var a = e.seekWidgetByName("list_node");
                if (null === a)
                    return void console.warn("[ERROR] Could not find list_node.");
                a.setVisible(!0)
            } else {
                var s = e.seekWidgetByName("nothing_node");
                if (null === s)
                    return void console.warn("[ERROR] Could not find nothing_node.");
                var o = {
                    "TOUCH_ENDED btn_present": function() {
                        this._navigateToPresent()
                    },
                    "TOUCH_ENDED btn_quest": function() {
                        this._navigateToQuest()
                    }
                }
                  , r = t.createInstance("router").getCurrentFragment();
                -1 === r.search(/\/evo_[0-9]{3}$/) ? o["TOUCH_ENDED btn_gacha"] = function() {
                    this._navigateToGemGacha()
                }
                : o["TOUCH_ENDED btn_gacha"] = function() {
                    this._navigateToGachaTop()
                }
                ,
                t.setTouchEventHandlers(s, o, this),
                s.setVisible(!0)
            }
        },
        _setCharacterBasePanel: function(e, i, a) {
            return n.isUndefined(a) || n.isUndefined(a.a_character_id) ? t.createInstance("apiACharacters").get(i).then(function(t) {
                return this._chara = t.body,
                this._setCharacterBasePanelOrg(e, this._chara, !0),
                this._chara
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }) : _setCharacterBasePanelWithoutApi(e, a)
        },
        _setCharacterBasePanelWithoutApi: function(e, t) {
            return this._setCharacterBasePanelOrg(e, t, !1),
            i.resolve(t)
        },
        _setCharacterBasePanelOrg: function(e, i, a) {
            "enh_evo/evo_013" !== t.createInstance("router").getCurrentFragment() && t.createInstance("enhEvoButtons")._setCharacterEnhEvoButtonStates(e, i.a_character_id);
            var s = e.seekWidgetByName("status_window");
            if (null === s)
                return void console.warn("[ERROR] Could not find status_window.");
            if (n.isUndefined(i) || null === i)
                return void console.warn("[ERROR] Could not read a record.");
            if (this._setExpGauge(s, i),
            this._setCardStrings(s, i),
            this._setCharacterCoreCardFull(s, i, "corecard_chara_ui"),
            this._setLevelString(s, i),
            null === s.seekWidgetByName("chara_img"))
                return void console.warn("[ERROR] Could not find chara_img.");
            if ((n.isUndefined(a) || n.isNull(a)) && (a = !1),
            a === !0 && !n.isUndefined(this._touchHeaderCoreCard) && n.isFunction(this._touchHeaderCoreCard)) {
                var o = s.seekWidgetByName("chara_img");
                o.setSoundEnabled(!0),
                o.setSound(t.SoundList.BUTTON_TOUCHED_DECIDE),
                t.setTouchEventHandlers(s, {
                    "TOUCH_ENDED chara_img": function() {
                        this._touchHeaderCoreCard(i)
                    }
                }, this)
            }
        },
        _setWeaponBasePanel: function(e, i, a) {
            return n.isUndefined(a) || n.isUndefined(a.a_weapon_id) ? void t.createInstance("apiAWeapons").get(i).then(function(t) {
                this._weapon = t.body,
                this._setWeaponBasePanelOrg(e, this._weapon, !0)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }) : _setCharacterBasePanelWithoutApi(e, a)
        },
        _setWeaponBasePanelWithoutApi: function(e, t) {
            this._setWeaponBasePanelOrg(e, t, !1)
        },
        _setWeaponBasePanelOrg: function(e, i, a) {
            t.createInstance("enhEvoButtons")._setWeaponEnhEvoButtonStates(e, i.a_weapon_id);
            var s = e.seekWidgetByName("status_window");
            if (null === s)
                return void console.warn("[ERROR] Could not find status_window.");
            if (n.isUndefined(i) || null === i)
                return void console.warn("[ERROR] Could not read a record.");
            if (this._setExpGauge(s, i),
            this._setCardStrings(s, i),
            this._setWeaponSkillBase(s, i),
            this._setWeaponCoreCardFull(s, i, "corecard_weapon_ui"),
            this._setLevelString(s, i),
            null === s.seekWidgetByName("weapon_img"))
                return void console.warn("[ERROR] Could not find weapon_img.");
            if ((n.isUndefined(a) || n.isNull(a)) && (a = !1),
            a === !0 && !n.isUndefined(this._touchHeaderCoreCard) && n.isFunction(this._touchHeaderCoreCard)) {
                var o = s.seekWidgetByName("weapon_img");
                o.setSoundEnabled(!0),
                o.setSound(t.SoundList.BUTTON_TOUCHED_DECIDE),
                t.setTouchEventHandlers(s, {
                    "TOUCH_ENDED weapon_img": function() {
                        this._touchHeaderCoreCard(i)
                    }
                }, this)
            }
        },
        _setSummonBasePanel: function(e, i, a) {
            return n.isUndefined(a) || n.isUndefined(a.a_summon_id) ? void t.createInstance("apiASummons").get(i).then(function(t) {
                this._summon = t.body,
                this._setSummonBasePanelOrg(e, this._summon, !0)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }) : _setSummonBasePanelWithoutApi(e, a)
        },
        _setSummonBasePanelWithoutApi: function(e, t) {
            this._setSummonBasePanelOrg(e, t, !1)
        },
        _setSummonBasePanelOrg: function(e, i, a) {
            t.createInstance("enhEvoButtons")._setSummonEnhEvoButtonStates(e, i.a_summon_id);
            var s = e.seekWidgetByName("status_window");
            if (null === s)
                return void console.warn("[ERROR] Could not find status_window.");
            if (n.isUndefined(i) || null === i)
                return void console.warn("[ERROR] Could not read a record.");
            if (this._setExpGauge(s, i),
            this._setCardStrings(s, i),
            this._setSummonCoreCardFull(s, i, "corecard_summon_ui"),
            this._setLevelString(s, i),
            null === s.seekWidgetByName("summon_img"))
                return void console.warn("[ERROR] Could not find summon_img.");
            if ((n.isUndefined(a) || n.isNull(a)) && (a = !1),
            a === !0 && !n.isUndefined(this._touchHeaderCoreCard) && n.isFunction(this._touchHeaderCoreCard)) {
                var o = s.seekWidgetByName("summon_img");
                o.setSoundEnabled(!0),
                o.setSound(t.SoundList.BUTTON_TOUCHED_DECIDE),
                t.setTouchEventHandlers(s, {
                    "TOUCH_ENDED summon_img": function() {
                        this._touchHeaderCoreCard(i)
                    }
                }, this)
            }
        },
        _selectRecommendMaterals: function(e, i) {
            t.createInstance(e).getRecommendEnhanceMaterials(i).then(function(e) {
                var t = e.body.max_record_count;
                if (0 === t)
                    this._showNoRecommendMaterialsPopup();
                else {
                    var i = e.body.data;
                    i.unshift(0),
                    i = n.invert(e.body.data),
                    delete i[0],
                    this._processEnhance(i, !0)
                }
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setLevelString: function(e, t) {
            var i = e.seekWidgetByName("level_label");
            i && !n.isUndefined(t.level) && i.setString("Lv " + t.level)
        }
    },
    n.assign(t.pc.enh_evo.roles.EnhEvoCommon, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.roles.CoreCardCommon, t.pc.status.roles.WeaponSkillCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.enh_evo.roles = t.pc.enh_evo.roles || {},
    t.pc.enh_evo.roles.EnhEvoConfirmList = {
        _setConfirmListCharacter: function(e, t, n, i) {
            return this._setConfirmListOrg(e, t, n, i, "apiACharacters", "weapon")
        },
        _setConfirmListWeapon: function(e, t, n, i) {
            return this._setConfirmListOrg(e, t, n, i, "apiAWeapons", "weapon")
        },
        _setConfirmListSummon: function(e, t, n, i) {
            return this._setConfirmListOrg(e, t, n, i, "apiASummons", "summon")
        },
        _setConfirmListOrg: function(e, n, a, s, o, r) {
            if (i.isUndefined(n))
                return void console.warn("[ERROR] Could not find id.");
            if (i.isUndefined(a))
                return void console.warn("[ERROR] Could not find materialIds.");
            s = s || "corecard_blank_5_4_ui";
            var c = e.seekWidgetByName(s);
            if (null === c)
                return void console.warn("[ERROR] Could not find list_node: " + c);
            var u = t.createInstance("ListManager", [c.getChildren(), null , this._recordWidgetInitFunc[r].bind(this)])
              , _ = i.invert(a || {});
            a = i.keys(_).sort(function(e, t) {
                return e == t ? 0 : t > e ? -1 : 1
            }).map(function(e) {
                return _[e]
            }),
            this._materialIds = a;
            var l = t.createInstance(o).confirmEnhanceMaterials(n, a).then(function(e) {
                this._enhMaterials = e.body;
                var t = i(e.body.materials).map(function(e) {
                    return [e.a_weapon_id || e.a_summon_id, e]
                }).zipObject().value();
                return t = i.map(a, function(e) {
                    return t[e]
                }),
                this._enhMaterials.materials = t,
                u.setRecords(t, !0),
                c.setVisible(!0),
                this._enhMaterials
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return l
        },
        _recordWidgetInitFunc: {
            weapon: function(e, t) {
                e.parent.setVisible(!0),
                this._setWeaponCoreCardFull(e.parent, t)
            },
            summon: function(e, t) {
                e.parent.setVisible(!0),
                this._setSummonCoreCardFull(e.parent, t)
            }
        },
        _getHighestRearityInSelectedMaterials: function() {
            var e = t.w("ORDERD_RARELITIES")
              , n = 0;
            i.find(this._enhMaterials.materials, function(t) {
                n = Math.max(n, e.indexOf(t.rare))
            });
            return e[n]
        },
        _setCharacterEvolveMaterials: function(e, a) {
            var s = e.seekWidgetByName("corecard_blank_5_4_ui");
            if (null === s)
                return void console.warn("[ERROR] Could not find confirm list.");
            var o = t.createInstance("apiACharacters").getEvolveMaterials(a).then(function(o) {
                this._confirmEvo = o.body;
                var r = o.body.result.items
                  , c = [0, 1, 2, 3, 4, 6, 7, 8]
                  , u = !1;
                return i.each(r, function(e, t) {
                    if (!(c.length <= t)) {
                        var i = s.seekWidgetByName("list_blank_" + c[t]);
                        if (null === i)
                            return void console.warn("[ERROR] Could not find a parent node: list_blank_" + c[t]);
                        this._initCharacterEvolveMaterialItemWidget(i, e),
                        i.setVisible(!0),
                        e.num < e.need_num && (u = !0,
                        i.seekWidgetByName("item_img") && i.seekWidgetByName("item_img").setColor(n.color("#808080")))
                    }
                }, this),
                u ? this._changeSeenCancel(e) : t.createInstance("enhEvoButtons")._setCharacterEnhEvoButtonStates(e, a),
                this._confirmEvo
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return o
        },
        _initCharacterEvolveMaterialItemWidget: function(e, n) {
            var a = e.seekWidgetByName("corecard_ui")
              , s = !0;
            if (null === a) {
                if (!e.seekWidgetByName("item_img") || "item_img" !== e.name)
                    return void console.warn("[ERROR] Could not find a corecard ui node.");
                a = e,
                e = e.parent,
                s = !1
            }
            var o = t.createInstance("CoreCardItemUI");
            i.isUndefined(n.item_id) || o.setImg(n.item_id),
            i.isUndefined(n.num) || i.isUndefined(n.need_num) || o.setAmount(n.num + "/" + n.need_num, !0);
            var r = o.getResult();
            a.addChild(r),
            a.setVisible(!0),
            s && t.setTouchEventHandlers(e, {
                "TOUCH_ENDED item_img": function() {
                    !i.isUndefined(this._touchEvolveMaterial) && i.isFunction(this._touchEvolveMaterial) && this._touchEvolveMaterial(n)
                }
            }, this)
        },
        _setCharacterArouseMaterials: function(e, s) {
            var o = e.seekWidgetByName("corecard_blank_5_4_ui");
            return null === o ? void console.warn("[ERROR] Could not find confirm list.") : t.createInstance("apiACharacters").getArouseMaterials(s).then(function(e) {
                var t = e.body.result.items
                  , s = [0, 1, 2, 3, 4, 6, 7, 8]
                  , r = !1;
                return i.each(t, function(e, t) {
                    if (!(s.length <= t)) {
                        var i = o.seekWidgetByName("list_blank_" + s[t]);
                        if (null === i)
                            return void console.warn("[ERROR] Could not find a parent node: list_blank_" + s[t]);
                        this._initCharacterEvolveMaterialItemWidget(i, e),
                        i.setVisible(!0),
                        e.num < e.need_num && (r = !0,
                        i.seekWidgetByName("item_img") && i.seekWidgetByName("item_img").setColor(n.color("#808080")))
                    }
                }, this),
                a.all([a.resolve(t), a.resolve(r)])
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _changeSeenCancel: function(e) {
            e.seekWidgetByName("nothing_label") && e.seekWidgetByName("nothing_label").setVisible(!0);
            var t = e.seekWidgetByName("btn_evo");
            t && (t.setEnabled(!1),
            t.setColor(n.color("#808080")))
        }
    },
    i.assign(t.pc.enh_evo.roles.EnhEvoConfirmList, t.pc.roles.CoreCardCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.enh_evo.roles = t.pc.enh_evo.roles || {},
    t.pc.enh_evo.roles.EnhPopupCommon = {
        _popups: {
            popupNonOffer: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-com_non_offer",
                title: "素材選択",
                buttonLabels: {
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupRareCheck: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-enh_rare_check",
                title: "強化確認",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        e._delegate._executeEnhance.apply(e._delegate, [e]),
                        this.dismiss()
                    }
                }
            }
        },
        _showNoRecommendMaterialsPopup: function() {
            var e = n.director.getRunningScene()
              , i = e.popups.popupNonOffer;
            i.open().then(function() {
                t.setTouchEventHandlers(i, {
                    "TOUCH_ENDED btn_present": function() {
                        this._navigateToPresent()
                    },
                    "TOUCH_ENDED btn_gacha": function() {
                        this._navigateToGemGacha()
                    },
                    "TOUCH_ENDED btn_quest": function() {
                        this._navigateToQuest()
                    }
                }, this)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _showRareCheckPopup: function() {
            var e = n.director.getRunningScene()
              , i = e.popups.popupRareCheck
              , a = this._getHighestRearityInSelectedMaterials().replace("R", "レア")
              , s = "N" === a ? "" : a + "の素材を使おうとしています。\n";
            s += "このまま強化してよろしいですか？",
            i.open().then(function() {
                var e = i.seekWidgetByName("confirm_label");
                e && e.setString(s);
                var n = this._enhanceResultHtmlString();
                i.setHtmlStrings({
                    enh_num_labelimg: n
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _enhanceResultHtmlString: function() {
            var e = "<div style='font-size:26px;line-height:1.4;margin-top:10px'><span class='orange'>獲得経験値：</span><span class='white'>" + this._enhMaterials.gained_exp + "</span><br /><span class='orange'>大成功確率：</span><span class='white'>" + this._enhMaterials.great_success_percent + "％</span><br />" + (i.isUndefined(this._enhMaterials.skill_level_up_percent) || 0 == this._enhMaterials.skill_level_up_percent ? "" : "<div class='yellow' style='line-height:1.6;font-size:36px'>スキルLvアップ確率&nbsp;" + Math.round(this._enhMaterials.skill_level_up_percent) + "％</div></div>");
            return e
        }
    },
    i.assign(t.pc.enh_evo.roles.EnhPopupCommon, t.pc.roles.StringsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.enh_evo.roles = t.pc.enh_evo.roles || {},
    t.pc.enh_evo.roles.EvoPopupCommon = {
        _popups: {
            popupMateCheck: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-evo_mate_check",
                title: "素材確認",
                buttonLabels: {
                    blueBtn: "OK",
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss(),
                        e._delegate._showMoneyCheckPopup.call(e._delegate)
                    },
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupMoneyCheck: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-evo_money_check",
                title: "限界突破確認",
                buttonLabels: {
                    blueBtn: "OK",
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss(),
                        e._delegate._executeEvolution.apply(e._delegate, [e])
                    },
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupItemChoose: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-evo_item_choose",
                title: "使用する育成アイテムを選択して下さい",
                buttonLabels: {
                    blueBtn: "育成アイテムの使用をやめる"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupNeedMate1: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-com_need_mate",
                title: "マテリアル詳細",
                buttonLabels: {
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupNeedMate2: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-com_need_mate",
                title: "マテリアル詳細",
                buttonLabels: {
                    blueBtn: "SPクエストへ",
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blueBtn: function(e) {
                        t.createInstance("router").navigate("quest/q_004"),
                        this.dismiss()
                    },
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        _showItemChoosePopup: function() {
            var e = this.popups.popupItemChoose;
            e.open().then(function() {}
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _showConfirmationPopups: function(e, t) {
            this._routerParamsKey = t,
            this._type = e;
            var a = n.director.getRunningScene()
              , s = a.routerParams[t].evomate;
            return i.isUndefined(s) || 0 === s.overlimit_count ? void this._showMoneyCheckPopup() : void this._showMaterialCheckPopup()
        },
        _showMaterialCheckPopup: function() {
            var e = n.director.getRunningScene()
              , t = e.popups.popupMateCheck
              , a = e.routerParams[this._routerParamsKey].evomate;
            this._type;
            t.open().then(function() {
                var e = this["_set" + i.capitalize(this._type) + "CoreCardElementRarity"]
                  , n = t.seekWidgetByName("corecard");
                e.apply(this, [n.parent, a, "corecard"]),
                this.__setStarGauge(t, a)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        __setStarGauge: function(e, t) {
            var n = Array(!1, !1, !1)
              , a = 0;
            t.max_overlimit_count <= 3 ? (n[0] = !0,
            a = "limit_base_0") : 4 === t.max_overlimit_count ? (n[1] = !0,
            a = "limit_base_1") : (n[2] = !0,
            a = "limit_base_2"),
            i.each(i.range(3), function(t) {
                e.seekWidgetByName("limit_base_" + t).setVisible(n[t])
            });
            var s = e.seekWidgetByName(a);
            s.seekWidgetByName("limit_gauge").percent = 20 * t.overlimit_count
        },
        _showMoneyCheckPopup: function() {
            var e = n.director.getRunningScene();
            if (i.isUndefined(this._confirmEvo)) {
                var a = e.routerParams[this._routerParamsKey]
                  , s = a.id
                  , o = a.evomate
                  , r = o["a_" + this._type + "_id"];
                t.createInstance("apiA" + i.capitalize(this._type) + "s").confirmEvolveMaterial(s, r).then(function(t) {
                    this._showMoneyCheckPopupCore(e, t.body)
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            } else
                t.createInstance("apiAPlayers").getCurrency().then(function(t) {
                    var n = this._confirmEvo.result;
                    n.gem = t.body.gem,
                    n.before_max_level = this._chara.max_level,
                    n.after_max_level = n.next_max_level,
                    this._showMoneyCheckPopupCore(e, n)
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
        },
        _showMoneyCheckPopupCore: function(e, i) {
            var a = e.popups.popupMoneyCheck;
            a.open().then(function() {
                var e = i.gem < i.need_gem ? !0 : !1
                  , s = this._evolveConfirmHtmlString(i, e);
                a.blueBtn.setColor(e ? n.color("#808080") : n.color("#FFFFFF")),
                a.blueBtn.setEnabled(!e),
                a.setHtmlStrings({
                    gemcheck_labelimg: s
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _evolveConfirmHtmlString: function(e, n) {
            var i = "<span class='orange'>必要費用：</span><span class='white'>" + e.need_gem + t.w("gem") + "</span><br /><span class='orange'>最大Lv：</span><span class='white'>" + e.before_max_level + "&rarr;</span><span class='yellow'>" + e.after_max_level + "</span><br /><span class='orange'>所持ジェム：</span><span class='white'>" + e.gem + "</span><br />" + (n ? "<span class='red'>ジェムが足りません</span>" : "");
            return i
        },
        _showNeedMatePopup: function(e) {
            var t = n.director.getRunningScene()
              , i = 1 == e.is_today_sp_quest ? t.popups.popupNeedMate2 : t.popups.popupNeedMate1;
            i.open().then(function() {
                var t = e.obtainment_description || "";
                i.setStrings({
                    item_label: e.name,
                    item_detail_label: e.description,
                    item_quest_label: t
                });
                var n = i.seekWidgetByName("item_img");
                this._initCharacterEvolveMaterialItemWidget(n, e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    },
    i.assign(t.pc.enh_evo.roles.EvoPopupCommon, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.roles.CoreCardCommon, t.pc.status.roles.WeaponSkillCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.enh_evo.roles = t.pc.enh_evo.roles || {},
    t.pc.enh_evo.roles.EnhEvoAnimation = {
        _abort_animation: !1,
        _initPlayer: function() {
            var e = t.createInstance("soundPlayer");
            e.init(t.createInstance("playerGameConfig"))
        },
        _showAnimationMaterials: function(e, i, a) {
            var s = e.seekWidgetByName("corecard_blank_5_4_ui")
              , o = {
                weapon: "_setWeaponCoreCardFull",
                summon: "_setSummonCoreCardFull",
                item: "_setItemCoreCard"
            }[i];
            n.each(a, function(e, n) {
                this[o](s, e, "list_blank_" + n);
                var i = s.seekWidgetByName("list_blank_" + n)
                  , a = i.getChildren()[0];
                a.setScale(t.GameConfig.CORECARD_LIST_SCALE["5x4"])
            }, this)
        },
        _playEnhAnimations2: function(e, t, a, s) {
            var o = t.before
              , r = t.after;
            if (n.isUndefined(o) || n.isUndefined(r))
                return console.warn("[ERROR] invalid arg result: (Should contains 'before' an 'after' as a result of enhance API)."),
                i.resolve();
            var c = !n.isUndefined(o.skill_level) && r.skill_level > o.skill_level
              , u = r.level - o.level;
            this._initPlayer();
            var _ = o.max ? 100 : o.gauge
              , l = r.max ? 100 : r.gauge;
            return this._playEnhAnimations(e, _, l, u, a, c, s)
        },
        _playEnhAnimations: function(e, t, n, a, s, o, r) {
            var c = e.seekWidgetByPath("result_window.exp_gauge");
            if (r = r || 600,
            s = s || !1,
            o = o || !1,
            null === c)
                return console.warn("[ERROR] Could not find levelup gauge."),
                i.resolve();
            if (c.percent = t,
            0 > n || n > 100)
                return console.warn("[ERROR] Invalid arg afterExp: " + n),
                i.resolve();
            if (0 > a || a > 100)
                return console.warn("[ERROR] Invalid arg maxCount: " + a),
                i.resolve();
            if (s === !0 && null !== e.seekWidgetByName("ani_great_success_node"))
                e.seekWidgetByName("ani_great_success_node").setVisible(!0);
            else {
                if (null === e.seekWidgetByName("ani_success_node"))
                    return console.warn("[ERROR] Could not find success image node."),
                    i.resolve();
                e.seekWidgetByName("ani_success_node").setVisible(!0)
            }
            var u = 100 * a;
            return 0 == n && a--,
            i.delay(r).then(function() {
                if (this._abort_animation)
                    return i.resolve();
                var t = "sound2_s_" + (s ? "great_" : "") + "success";
                this._attachSoundEffectEvent(e, "enh_start", t),
                this._playEnhEvoAnimation(e, "enh_start", !0, !1);
                var _ = e.getAnimInfo("enh_start")
                  , l = this._calcSpendMillisec(_.action);
                return _ = e.getAnimInfo("level_up"),
                i.delay(l).then(function() {
                    if (this._abort_animation)
                        return i.resolve();
                    var t, s = n + u;
                    return 0 === s && (t = this._showEnhEndAnimation(e, o, r)),
                    t = i.defer(),
                    c.animateRecursive(s, 150, function(i) {
                        var s = a - i;
                        return (0 == n || s > 0) && (this._attachSoundEffectEvent(e, "level_up"),
                        this._playEnhEvoAnimation(e, "level_up", !0, !1)),
                        0 === s ? this._showEnhEndAnimation(e, o, r).then(function() {
                            t.resolve()
                        }) : void 0
                    }, this),
                    t.promise
                }
                .bind(this))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _playEnhEvoAnimation: function(e, t, a, s) {
            if (this._abort_animation)
                return i.resolve();
            var o = null ;
            if (n.isUndefined(e) || n.isUndefined(e.resource))
                return void console.warn("[ERROR] Could not find resource in the scene.");
            var r = e.resource.action
              , c = r.animationInfo[t];
            if (n.isUndefined(c))
                return void console.warn("[ERROR] Could not find animation: " + t);
            if (a) {
                var u = this._calcSpendMillisec(r) + 100;
                o = i.delay(u)
            }
            return r.gotoFrameAndPlay(c.startIndex, c.endIndex, s),
            o
        },
        _setResultMessage: function(e, n) {
            return null === e.seekWidgetByName("result_labelimg") ? void console.warn("[ERROR] Could not find a label node") : void e.setHtmlStrings({
                result_labelimg: n
            }, t.GameConfig.POPUP_CSS)
        },
        _setResultStatus: function(e, n) {
            return null === e.seekWidgetByName("statusup_labelimg") ? void console.warn("[ERROR] Could not find a status label node") : void e.setHtmlStrings({
                statusup_labelimg: n
            }, t.GameConfig.POPUP_CSS)
        },
        _showEnhEndAnimation: function(e, t, n) {
            if (t) {
                var a = e.getAnimInfo("level_up")
                  , s = this._calcSpendMillisec(a.action);
                return i.delay(300).then(function() {
                    return this._abort_animation ? i.resolve() : i.all([i.delay(s), this._playEnhEvoAnimation(e, "skill_level_up", !0, !1)])
                }
                .bind(this)).then(function() {
                    return this._playEnhEvoAnimation(e, "enh_end", !1)
                }
                .bind(this))
            }
            return i.delay(n).then(function() {
                return this._playEnhEvoAnimation(e, "enh_end", !1)
            }
            .bind(this))
        },
        _playEvoAnimations: function(e, n) {
            this._initPlayer();
            var a = e.getAnimInfo("evo_start")
              , s = a.action
              , o = this._calcSpendMillisec(s);
            "enh_evo/evo_009" === t.createInstance("router").getCurrentFragment() ? e.resource.node.runAction(s) : s.setTimeSpeed(.3),
            n = n || 1500,
            i.delay(n).then(function() {
                this._abort_animation || (this._attachSoundEffectEvent(e, "evo_start"),
                this._playEnhEvoAnimation(e, "evo_start", !0, !1).then(function(t) {
                    i.delay(o + 100).then(function() {
                        this._abort_animation || this._showEvoEndAnimation(e)
                    }
                    .bind(this)).fail(function(e) {
                        console.error(e.stack)
                    })
                }
                .bind(this)))
            }
            .bind(this))
        },
        _showEvoEndAnimation: function(e) {
            this._playEnhEvoAnimation(e, "evo_end", !1, !1)
        },
        _attachSoundEffectEvent: function(e, i, a) {
            var s = e.getAnimInfo(i);
            if (s && s.action) {
                var o, r = t.createInstance("AnimationEventHandlerCcs_2_0").init(s.action);
                o = n.isUndefined(a) ? t.createInstance("Sound2Event", [r]) : t.createInstance("Sound2Event", [r, a])
            }
        },
        _calcSpendMillisec: function(e, t) {
            var n = 60;
            t = t || 0;
            var i = Math.floor(e.getDuration() * e.getTimeSpeed() * 1e3 / n) + t;
            return i
        },
        _abortAnimation: function() {
            this._abort_animation = !0
        }
    },
    n.assign(t.pc.enh_evo.roles.EnhEvoAnimation, t.pc.roles.AnimationCommon, t.pc.roles.CoreCardCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.enh_evo.roles = t.pc.enh_evo.roles || {},
    t.pc.enh_evo.roles.EnhStatusCommon = {
        _enhanceExpHtmlString: function(e, t) {
            var i = e[t]
              , a = e.result
              , s = "経験値を<span class='red'>" + a.gained_exp + "</span>獲得"
              , o = a.before
              , r = a.after;
            if (!n.isUndefined(o.skill_level) && !n.isUndefined(r.skill_level) && o.skill_level !== r.skill_level) {
                var c = "" + r.skill_level;
                c.indexOf("Lv") < 0 && (c = "Lv " + c);
                var u = i.name + "のｽｷﾙLvが<span class='red'>" + r.skill_level + "</span>になった！";
                s += "<br/>" + u
            }
            if (o.level !== r.level) {
                var u = i.name + "のLvが<span class='red'>" + i.level + "</span>になった！";
                s += "<br/>" + u
            }
            return "<br/>" + s
        },
        _enhanceGrowthHtmlString: function(e) {
            var t = e.result.before
              , n = e.result.after
              , i = "<span class='white'>ＨＰ：" + t.hp + " &rarr; </span><span class='orange'>" + n.hp + "</span>"
              , a = "<div class='white'>攻撃力：" + t.attack + " &rarr; </span><span class='orange'>" + n.attack + "</span>";
            return "<br/>" + i + "<br/>" + a
        }
    },
    n.assign(t.pc.enh_evo.roles.EnhStatusCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh || {};
    t.enh_evo = t.enh_evo || {},
    t.enh_evo.view = t.enh_evo.view || {};
    var n = !1;
    t.enh_evo.view.ArouseAnimation = t.SceneObject.extend({
        _voiceId: 27,
        ctor: function(e, t) {
            this._arousedCharacterId = t,
            this._loading = this._load(e, t)
        },
        play: function() {
            return this._alreadyPlayed ? Q.resolve() : (this._alreadyPlayed = !0,
            this._loading.then(this._playAnimation.bind(this)).fail(function(e) {
                throw console.error(e),
                e
            }))
        },
        _playAnimation: function(e) {
            var n = e[0]
              , i = e[1]
              , a = e[2]
              , s = cc.director.getRunningScene()
              , o = t.createInstance("WindowVisualEffect").init(n);
            t.createInstance("Sound2Event", [o]),
            t.createInstance("Sound2EventCustom", [o, "sound2v_s", {
                sound2v_s: i
            }]);
            var r = function() {
                this.playByName("arousal_ani", s, cc.p(0, 0), 100, !1)
            }
            .bind(o)
              , c = function() {
                this.playByName("touch_ani", s, cc.p(0, 0), 100, !0)
            }
            .bind(o);
            o.setAnimationNameEndCallback("arousal_ani", function() {
                c()
            });
            var u = o.getNode();
            if (!u)
                return Q.reject(new Error("Animation Node not found"));
            try {
                this._setupTextures(u, a.base, ["chara_panel_0", "aura_panel_0"]),
                this._setupTextures(u, a.aroused, ["chara_panel_1", "aura_panel_1", "moji_panel"]),
                r()
            } catch (_) {
                return Q.reject(_)
            }
            var l = Q.defer();
            return t.setTouchEventHandlers(u, {
                "TOUCH_ENDED touch_btn": function(e) {
                    return function() {
                        e.cleanUp(),
                        l.resolve(!0)
                    }
                }(o)
            }, u),
            this._disableSETouchButton(s),
            this._anim = o,
            l.promise
        },
        _setupTextures: function(e, t, n) {
            _(n).map(function(t) {
                var n = e.seekWidgetByName(t);
                return n ? n : (console.warn("node not found: " + t),
                null )
            }).compact().map(function(e) {
                var n = "arousal-ani_chara"
                  , i = e.seekWidgetByName(n);
                return i ? void (_.isFunction(i.loadTexture) ? i.loadTexture(t) : _.isFunction(i.setTexture) ? i.setTexture(t) : alert("NO METHOD")) : void console.warn("image node not found: " + e.getName() + ".." + n)
            })
        },
        _load: function(e, t) {
            return Q.all([this._preloadAnimation(), this._loadVoice(t), this._preloadTextures(e, t)])
        },
        _preloadAnimation: function() {
            return t.loader.load(["../enh_evo/res/arousal_ani/arousal_ani.json", "../enh_evo/res/arousal_ani/arousal_ani_atlas.plist", "../enh_evo/res/arousal_ani/arousal_ani_bg_0.jpg", "../enh_evo/res/arousal_ani/arousal_ani_bg_1.jpg", "../enh_evo/res/arousal_ani/se_change_0001.mp3", "../party/res/jobchange_ani/jobchange_atlas.plist"]).fail(function(e) {
                throw console.error("load failed"),
                e
            }).thenResolve("res/arousal_ani/arousal_ani.json")
        },
        _loadVoice: function(e) {
            var t = this._getVoiceId()
              , n = !1;
            return this._getVoiceLoader().loadAvatarVoices(e, n, t, t + 1).fail(function(e) {
                throw console.error("Error: " + e.message),
                e
            }).then(function(e) {
                return e[0]
            })
        },
        _preloadTextures: function(e, n) {
            var i = {
                base: this._getTexturePath(e),
                aroused: this._getTexturePath(n)
            };
            return t.loader.load(_.values(i)).fail(function(e) {
                throw console.error("Error: " + e.message),
                e
            }).thenResolve(i)
        },
        _onDispose: function() {
            this._anim.cleanUp(),
            this._unloadVoice(this._arousedCharacterId)
        },
        _unloadVoice: function(e) {
            var t = this._getVoiceId()
              , n = !1;
            return this._getVoiceLoader().unloadAvatorVoices(e, n, t, t + 1)
        },
        _getVoiceLoader: function() {
            return t.createInstance("voiceLoader")
        },
        _getVoiceId: function() {
            return n ? 1 : this._voiceId
        },
        _getTexturePath: function(e) {
            if (n) {
                this._count || (this._count = 0);
                var i = this._count;
                return this._count++,
                t.env.isSp ? "/front/images/arousal_sample_image/pc/arousal-ani_chara_000" + i + "_0.png" : "/front/images/arousal_sample_image/pc/arousal-ani_chara_000" + i + "_0.png"
            }
            return t.Img("arousal-ani", "chara", _.padZero(e, 4), 0).png
        },
        _disableSETouchButton: function(e) {
            var t = this._getTouchButton(e);
            t && t.setSoundEnabled(!1)
        },
        _getTouchButton: function(e) {
            return e.seekWidgetByName("touch_btn")
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryAbilityAcquired = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-q_003_getability",
            buttonLabels: {
                blueBtn: "OK"
            }
        },
        WIDGET_NAMES: {
            coreCard: "corecard_ui",
            abilityIcon: "ability_img",
            label: "ability_name_labelimg"
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e);
            var i = this.WIDGET_NAMES;
            e._setData = function(e, t) {
                this._setStrings(e, t),
                this._setTextures(e, t),
                this._setCoreCard(e, t)
            }
            ,
            e._setStrings = function(t, a) {
                var s = t.ability_name
                  , o = {};
                o[i.label] = "<span class='white'>" + t[a + "_name"] + "が</span><br /><span class='yellow'>「" + s + "」</span><span class='white'>を習得した！</span>",
                e.contentNode.setHtmlStrings(o, n.GameConfig.POPUP_CSS)
            }
            ,
            e._setTextures = function(a, s) {
                var o = a.ability_type
                  , r = {};
                r[i.abilityIcon] = n.Img("coreimg", "abilityicon", t.padZero(o, 4)).png,
                e.contentNode.loadTextures(r)
            }
            ,
            e._setCoreCard = function(t, a) {
                var s = "job" === a ? n.createInstance("CoreCardJobUI", ["plain"]) : n.createInstance("CoreCardCharacterUI", ["plain"]);
                s.setImg(t[a + "_id"], t.skin || 0),
                e.seekWidgetByName(i.coreCard).addChild(s.getResult())
            }
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_001_002_006_evo_001_002_003 = t.pc.enh_evo.enh_001_002_006_evo_001_002_003 || {},
    t.pc.enh_evo.enh_001_002_006_evo_001_002_003.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_001_2_6_evo_001_2_3/enh_001_2_6_evo_001_2_3.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_001_2_6_evo_001_2_3/enh_001_2_6_evo_001_2_3.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("enh_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("enh_node").setVisible(!1),
                e.seekWidgetByPath("evo_node").setVisible(!1),
                e.seekWidgetByPath("arousal_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("evo_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("enh_node").setVisible(!1),
                e.seekWidgetByPath("evo_node").setVisible(!1),
                e.seekWidgetByPath("arousal_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_2: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab3のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("arousal_node");
                if (!t)
                    return void alert("tab.tab3のcontent-nodeが見つかりません");
                e.seekWidgetByPath("enh_node").setVisible(!1),
                e.seekWidgetByPath("evo_node").setVisible(!1),
                e.seekWidgetByPath("arousal_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab2";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },""), new t.TabDelegate({
            btn_chara: function() {
                var e = 0 < "enh_node".length ? this.seekWidgetByPath("enh_node") : this;
                if (!e)
                    return void alert("tab.tab4のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("chara_node");
                if (!t)
                    return void alert("tab.tab4のcontent-nodeが見つかりません");
                e.seekWidgetByPath("chara_node").setVisible(!1),
                e.seekWidgetByPath("weapon_node").setVisible(!1),
                e.seekWidgetByPath("summon_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnCharaEnhNode";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            btn_weapon: function() {
                var e = 0 < "enh_node".length ? this.seekWidgetByPath("enh_node") : this;
                if (!e)
                    return void alert("tab.tab5のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("weapon_node");
                if (!t)
                    return void alert("tab.tab5のcontent-nodeが見つかりません");
                e.seekWidgetByPath("chara_node").setVisible(!1),
                e.seekWidgetByPath("weapon_node").setVisible(!1),
                e.seekWidgetByPath("summon_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnWeaponEnhNode";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this);
            },
            btn_summon: function() {
                var e = 0 < "enh_node".length ? this.seekWidgetByPath("enh_node") : this;
                if (!e)
                    return void alert("tab.tab6のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("summon_node");
                if (!t)
                    return void alert("tab.tab6のcontent-nodeが見つかりません");
                e.seekWidgetByPath("chara_node").setVisible(!1),
                e.seekWidgetByPath("weapon_node").setVisible(!1),
                e.seekWidgetByPath("summon_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnSummonEnhNode";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"enh_node"), new t.TabDelegate({
            btn_chara: function() {
                var e = 0 < "evo_node".length ? this.seekWidgetByPath("evo_node") : this;
                if (!e)
                    return void alert("tab.tab7のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("chara_node");
                if (!t)
                    return void alert("tab.tab7のcontent-nodeが見つかりません");
                e.seekWidgetByPath("chara_node").setVisible(!1),
                e.seekWidgetByPath("weapon_node").setVisible(!1),
                e.seekWidgetByPath("summon_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnCharaEvoNode";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            btn_weapon: function() {
                var e = 0 < "evo_node".length ? this.seekWidgetByPath("evo_node") : this;
                if (!e)
                    return void alert("tab.tab8のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("weapon_node");
                if (!t)
                    return void alert("tab.tab8のcontent-nodeが見つかりません");
                e.seekWidgetByPath("chara_node").setVisible(!1),
                e.seekWidgetByPath("weapon_node").setVisible(!1),
                e.seekWidgetByPath("summon_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnWeaponEvoNode";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            btn_summon: function() {
                var e = 0 < "evo_node".length ? this.seekWidgetByPath("evo_node") : this;
                if (!e)
                    return void alert("tab.tab9のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("summon_node");
                if (!t)
                    return void alert("tab.tab9のcontent-nodeが見つかりません");
                e.seekWidgetByPath("chara_node").setVisible(!1),
                e.seekWidgetByPath("weapon_node").setVisible(!1),
                e.seekWidgetByPath("summon_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnSummonEvoNode";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"evo_node")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh001002006Evo001002003Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_001_002_006_evo_001_002_003"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackArousalNodeBtnGacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("arousal_node"), "btn_gacha", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_000")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_001_002_006_evo_001_002_003 = t.pc.enh_evo.enh_001_002_006_evo_001_002_003 || {},
    t.pc.enh_evo.enh_001_002_006_evo_001_002_003.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _tabsForScene: {
            enh_001: {
                tab: "enh",
                kind: "weapon"
            },
            enh_002: {
                tab: "enh",
                kind: "chara"
            },
            enh_006: {
                tab: "enh",
                kind: "summon"
            },
            evo_001: {
                tab: "evo",
                kind: "weapon"
            },
            evo_002: {
                tab: "evo",
                kind: "chara"
            },
            evo_003: {
                tab: "evo",
                kind: "summon"
            },
            arousal_001: {
                tab: "arousal",
                kind: "chara"
            }
        },
        _popups: {
            popupSubTutorial: {
                factoryName: "popupFactorySubTutorial",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        onSceneInit: function(e) {
            a.defer();
            this._syncTab = !1,
            this._hasFilledUp = {},
            this._verifyRouterParamsENH001002006EVO001002003(e);
            var n = t.createInstance("router").currentScene
              , i = "" === n ? e.temporaryRouterParams.enhevo_home : this._tabsForScene[n];
            return console.debug("enhevo_home", i),
            this._setTabFromRoutingParams(e, i),
            e.tabDelegateList[1].preventInitialization(),
            e.tabDelegateList[2].preventInitialization(),
            a.resolve().fin(function() {
                var n = t.createInstance("apiASubTutorialPages");
                n.get("enh_evo").then(function(n) {
                    if (0 == n.body.visited) {
                        var i = e.popups.popupSubTutorial;
                        i.setTypeAndOpen("enh", "subtutorial");
                        var a = t.createInstance("apiASubTutorialPages");
                        a.visited("enh_evo")
                    }
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                }),
                this._setSubHeaderLabels(e),
                this._syncTab = !0
            }
            .bind(this))
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        _setTabFromRoutingParams: function(e, t) {
            i.isUndefined(t) && (t = this._tabsForScene.enh_001);
            var n = Array("enh", "evo", "arousal").indexOf(t.tab);
            if (0 > n && n > 1)
                return void console.error("Invalid enhevo_home:tab value, " + t.tab);
            var a = e.tabDelegateList[0];
            if (a.selectTab(a._getContainerNode().seekWidgetByName("tab_" + n)),
            -1 === Array("chara", "weapon", "summon").indexOf(t.kind))
                return void console.error("Invalid enhevo_home:kind value, " + t.kind);
            var s = Array("chara", "weapon", "summon").indexOf(t.kind)
              , o = e.tabDelegateList[n + 1];
            o && o.selectTab(o._getContainerNode().seekWidgetByName("btn_" + t.kind));
            var r = 3;
            return n * r + s
        },
        _getTabIndexFromRestoreParams: function(e) {
            var t = e.getRestoreParams().tabs
              , n = 3
              , a = parseInt(i.last(t[0].split("_")))
              , s = ["chara", "weapon", "summon"].indexOf(i.last(t[a + 1].split("_")));
            return a * n + s
        },
        _setSubHeaderLabels: function(e) {
            this._getMePromise().then(function(t) {
                var n = t.body
                  , a = i([this._getHeaderEnhNode(e), this._getHeaderEvoNode(e), this._getHeaderArousalNode(e)]).filter(function(e) {
                    return e
                }).value();
                this._setHeaderLabelSummon(a, this._getHeaderTextSummon(n)),
                this._setHeaderLabelWeapon(a, this._getHeaderTextWeapon(n)),
                this._setHeaderLabelCharacter(a, this._getHeaderTextCharacter(n))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _getMePromise: function() {
            return t.createInstance("apiAPlayers").get("me").fail(function(e) {
                console.error(e.stack)
            })
        },
        _getHeaderEnhNode: function(e) {
            return e.seekWidgetByName("enh_node")
        },
        _getHeaderEvoNode: function(e) {
            return e.seekWidgetByName("evo_node")
        },
        _getHeaderArousalNode: function(e) {
            return e.seekWidgetByName("arousal_node")
        },
        _setHeaderLabelSummon: function(e, t) {
            this._setHeaderLabelBase(e, "summon_node.header_sub_label", t)
        },
        _setHeaderLabelWeapon: function(e, t) {
            this._setHeaderLabelBase(e, "weapon_node.header_sub_label", t)
        },
        _setHeaderLabelCharacter: function(e, t) {
            this._setHeaderLabelBase(e, "chara_node.header_sub_label", t)
        },
        _setHeaderLabelBase: function(e, t, n) {
            i(e).map(function(e) {
                return e.seekWidgetByPath(t)
            }).filter(function(e) {
                return e
            }).invoke("setString", n)
        },
        _getHeaderTextSummon: function(e) {
            return i.isUndefined(e.summon_num) || i.isUndefined(e.max_summon_num) ? (console.debug("[NOTICE] Could not find summon_num | max_summon_num."),
            "") : "所持" + t.w("summon") + "数:" + e.summon_num + "/" + e.max_summon_num
        },
        _getHeaderTextWeapon: function(e) {
            return i.isUndefined(e.weapon_num) || i.isUndefined(e.max_weapon_num) ? (console.debug("[NOTICE] Could not find weapon_num | max_weapon_num."),
            "") : "所持" + t.w("weapon") + "数:" + e.weapon_num + "/" + e.max_weapon_num
        },
        _getHeaderTextCharacter: function(e) {
            return i.isUndefined(e.character_num) ? (console.debug("[NOTICE] Could not find character_num."),
            "") : "人数:" + e.character_num
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        _touchEnhChara: function(e, t) {
            console.log(e, t);
            var i = n.director.getRunningScene();
            this._navigateENH001To008(i, t)
        },
        _touchEnhWeapon: function(e, t) {
            console.log(e, t);
            var i = n.director.getRunningScene();
            this._navigateENH002To007(i, t)
        },
        _touchEnhSummon: function(e, t) {
            console.log(e, t);
            var i = n.director.getRunningScene();
            this._navigateENH006To009(i, t)
        },
        _nothingEnhChara: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("enh_node")
              , i = t.seekWidgetByName("chara_node");
            this._initNoDataNoticeControls(i)
        },
        _nothingEnhWeapon: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("enh_node")
              , i = t.seekWidgetByName("weapon_node");
            this._initNoDataNoticeControls(i)
        },
        _nothingEnhSummon: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("enh_node")
              , i = t.seekWidgetByName("summon_node");
            this._initNoDataNoticeControls(i)
        },
        _touchEvoChara: function(e, t) {
            console.log(e, t);
            var i = n.director.getRunningScene();
            this._navigateEVO001To013(i, t)
        },
        _touchEvoWeapon: function(e, t) {
            console.log(e, t);
            var i = n.director.getRunningScene();
            this._navigateEVO002To007(i, t)
        },
        _touchEvoSummon: function(e, t) {
            console.log(e, t);
            var i = n.director.getRunningScene();
            this._navigateEVO003To010(i, t)
        },
        _nothingEvoChara: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("evo_node")
              , i = t.seekWidgetByName("chara_node");
            this._initNoDataNoticeControls(i)
        },
        _nothingEvoWeapon: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("evo_node")
              , i = t.seekWidgetByName("weapon_node");
            this._initNoDataNoticeControls(i)
        },
        _nothingEvoSummon: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("evo_node")
              , i = t.seekWidgetByName("summon_node");
            this._initNoDataNoticeControls(i)
        },
        _touchArouseChara: function(e, t) {
            console.log(e, t);
            var i = n.director.getRunningScene();
            this._navigateAROUSAL001To002(i, t)
        },
        _nothingArouseChara: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("arousal_node")
              , i = t.seekWidgetByName("chara_node");
            this._initNoDataNoticeControls(i)
        },
        _initNoDataNoticeControls: function(e) {
            t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_present": function() {
                    this._navigateToPresent()
                },
                "TOUCH_ENDED btn_gacha": function() {
                    this._navigateToGachaTop()
                },
                "TOUCH_ENDED btn_quest": function() {
                    this._navigateToQuest()
                }
            }, this)
        },
        tabCallbackTab0: function(e) {
            this._syncTab && this._syncKindButtons(e)
        },
        tabCallbackTab1: function(e) {
            this._syncTab && this._syncKindButtons(e)
        },
        tabCallbackTab2: function(e) {
            this._fillupBySceneName(e, "arousal_001")
        },
        tabCallbackBtnCharaEnhNode: function(e) {
            this._fillupBySceneName(e, "enh_002")
        },
        tabCallbackBtnWeaponEnhNode: function(e) {
            this._fillupBySceneName(e, "enh_001")
        },
        tabCallbackBtnSummonEnhNode: function(e) {
            this._fillupBySceneName(e, "enh_006")
        },
        tabCallbackBtnCharaEvoNode: function(e) {
            this._fillupBySceneName(e, "evo_002")
        },
        tabCallbackBtnWeaponEvoNode: function(e) {
            this._fillupBySceneName(e, "evo_001")
        },
        tabCallbackBtnSummonEvoNode: function(e) {
            this._fillupBySceneName(e, "evo_003")
        },
        _syncKindButtons: function(e) {
            var t, n, i = e.tabDelegateList[0];
            "tab_0" === i.selected ? (t = e.tabDelegateList[2],
            n = e.tabDelegateList[1]) : (t = e.tabDelegateList[1],
            n = e.tabDelegateList[2]);
            var a = t.selected.substr(t.selected.indexOf("..") + 2)
              , s = n._getContainerNode();
            if (s) {
                var o = s.seekWidgetByName(a);
                o && n.selectTab(o)
            }
        }
    }),
    i.assign(t.pc.enh_evo.enh_001_002_006_evo_001_002_003.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoEntryBtnsPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_003 = t.pc.enh_evo.enh_003 || {},
    t.pc.enh_evo.enh_003.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_003/enh_003")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_003/enh_003"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh003Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_003"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", function() {
                alert("{{この画面に遷移する1つ前の画面に遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", function() {
                alert("{{evo_007へ遷移すでに最大まで限界突破されている場合、グレーアウトしてタップ不可に}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnProtect"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_protect", function() {
                alert("{{通常状態の場合com_protect_onを表示。保護状態の場合com_protect_off　を表示。ボタン文言は仕様書参照}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_003 = t.pc.enh_evo.enh_003 || {},
    t.pc.enh_evo.enh_003.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            return this._verifyRouterParamsENH003(e),
            this._loadAWeapon(e.routerParams.enh_003.id).then(function(n) {
                e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL)
            })
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH003ToENH002(e),
            t.promise
        },
        btnCallbackBtnEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH003ToEVO007(e),
            t.promise
        },
        btnCallbackBtnProtect: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchProtect(),
            t.promise
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        }
    }),
    n.assign(t.pc.enh_evo.enh_003.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.scene.roles.SceneWeaponCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_004 = t.pc.enh_evo.enh_004 || {},
    t.pc.enh_evo.enh_004.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_004/enh_004")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_004/enh_004"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh004Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_004"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", function() {
                alert("{{この画面に遷移する1つ前の画面に遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", function() {
                alert("{{evo_010へ遷移すでに最大まで限界突破されている場合、グレーアウトしてタップ不可に}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnProtect"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_protect", function() {
                alert("{{通常状態の場合com_protect_onを表示。保護状態の場合com_protect_off　を表示。ボタン文言は仕様書参照}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_004 = t.pc.enh_evo.enh_004 || {},
    t.pc.enh_evo.enh_004.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            return this._verifyRouterParamsENH004(e),
            this._loadASummon(e.routerParams.enh_004.id).then(function(n) {
                e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL)
            })
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH004ToENH006(e),
            t.promise
        },
        btnCallbackBtnEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH004ToEVO010(e),
            t.promise
        },
        btnCallbackBtnProtect: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchProtect(),
            t.promise
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        }
    }),
    n.assign(t.pc.enh_evo.enh_004.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.scene.roles.SceneSummonCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_005 = t.pc.enh_evo.enh_005 || {},
    t.pc.enh_evo.enh_005.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_005/enh_005")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_005/enh_005"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_chara_status_1_ui");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_chara_status_1_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_statuslist_list_7_ui");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_chara_status_1_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh005Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_005"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", function() {
                alert("{{この画面に遷移する1つ前の画面に遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", function() {
                alert("{{evo_013へ遷移すでに最大まで限界突破している場合グレーアウトしタップ不可に}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_005 = t.pc.enh_evo.enh_005 || {},
    t.pc.enh_evo.enh_005.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            return this._verifyRouterParamsENH005(e),
            this._loadACharacter(e.routerParams.enh_005.id).then(function(n) {
                e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL)
            })
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH005ToENH001(e),
            t.promise
        },
        btnCallbackBtnEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH005ToEVO013(e),
            t.promise
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        }
    }),
    n.assign(t.pc.enh_evo.enh_005.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.scene.roles.SceneCharacterCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_007 = t.pc.enh_evo.enh_007 || {},
    t.pc.enh_evo.enh_007.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_007/enh_007")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_007/enh_007"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh007Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_007"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のenh_001へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRecommend"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_recommend", function() {
                alert("{{おすすめ編成}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnDecision"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_decision", function() {
                alert("{{素材選択決定！enh_010へ遷移}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_007 = t.pc.enh_evo.enh_007 || {},
    t.pc.enh_evo.enh_007.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsENH007(e),
            this._setWeaponHeaderLabel(),
            this._setWeaponBasePanel(e, e.routerParams.enh_007.id);
            var n = null
              , i = this._setSelectableWeaponList(e, [e.routerParams.enh_007.id], n, n, n, n, n, t.BtnsPageListParams.ENH_EVO_007.perPage, n).then(function(t) {
                this._setPageResult(e, t)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return i
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigateENH007ToENH001(),
            t.promise
        },
        btnCallbackBtnRecommend: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._selectRecommendMaterals("apiAWeapons", e.routerParams.enh_007.id),
            t.promise
        },
        btnCallbackBtnDecision: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._processEnhance(this._getSelectableCardList()),
            t.promise
        },
        _touchHeaderCoreCard: function(e) {
            this._navigateENH007ToENH003(e)
        },
        _processEnhance: function(e, t) {
            console.debug(e);
            var i = n.director.getRunningScene();
            this._navigateENH007ToENH011(i, e, t)
        }
    }),
    i.assign(t.pc.enh_evo.enh_007.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EnhPopupCommon, t.pc.list.roles.ListWeaponsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_008 = t.pc.enh_evo.enh_008 || {},
    t.pc.enh_evo.enh_008.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_008/enh_008")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_008/enh_008"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh008Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_008"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のenh_002へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRecommend"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_recommend", function() {
                alert("{{おすすめ編成}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnDecision"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_decision", function() {
                alert("{{素材選択決定！enh_011へ遷移}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_008 = t.pc.enh_evo.enh_008 || {},
    t.pc.enh_evo.enh_008.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsENH008(e),
            this._setCharacterHeaderLabel(),
            this._setCharacterBasePanel(e, e.routerParams.enh_008.id);
            var n = null
              , i = this._setSelectableCharacterList(e, [e.routerParams.enh_008.id], n, n, n, n, n, t.BtnsPageListParams.SELECTABLE_CHARACTER_LIST.perPage, n).then(function(t) {
                this._setPageResult(e, t)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return i
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigateENH008ToENH002(),
            t.promise
        },
        btnCallbackBtnRecommend: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._selectRecommendMaterals("apiACharacters", e.routerParams.enh_008.id),
            t.promise
        },
        btnCallbackBtnDecision: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._processEnhance(this._getSelectableCardList()),
            t.promise
        },
        _touchHeaderCoreCard: function(e) {
            this._navigateENH008ToENH005(e)
        },
        _processEnhance: function(e, t) {
            console.debug(e);
            var i = n.director.getRunningScene();
            this._navigateENH008ToENH010(i, e, t)
        }
    }),
    i.assign(t.pc.enh_evo.enh_008.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EnhPopupCommon, t.pc.list.roles.ListCharactersCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_009 = t.pc.enh_evo.enh_009 || {},
    t.pc.enh_evo.enh_009.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_009/enh_009")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_009/enh_009"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh009Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_009"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のenh_006へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRecommend"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_recommend", function() {
                alert("{{おすすめ編成}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnDecision"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_decision", function() {
                alert("{{素材選択決定！enh_012へ遷移}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_009 = t.pc.enh_evo.enh_009 || {},
    t.pc.enh_evo.enh_009.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsENH009(e),
            this._setSummonHeaderLabel(),
            this._setSummonBasePanel(e, e.routerParams.enh_009.id);
            var t = this._setSelectableSummonList(e, [e.routerParams.enh_009.id]).then(function(t) {
                this._setPageResult(e, t)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return t
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigateENH009ToENH006(),
            t.promise
        },
        btnCallbackBtnRecommend: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._selectRecommendMaterals("apiASummons", e.routerParams.enh_009.id),
            t.promise
        },
        btnCallbackBtnDecision: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._processEnhance(this._getSelectableCardList()),
            t.promise
        },
        _touchHeaderCoreCard: function(e) {
            this._navigateENH009ToENH004(e)
        },
        _processEnhance: function(e, t) {
            console.debug(e);
            var i = n.director.getRunningScene();
            this._navigateENH009ToENH012(i, e, t)
        }
    }),
    i.assign(t.pc.enh_evo.enh_009.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EnhPopupCommon, t.pc.list.roles.ListSummonsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        enh_rare_check: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("enh_rare_check")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: enh_rare_check"),
                e || ""
            }(),
            title: "強化確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    this.dismiss().then(function() {
                        t.createInstance("router").navigate("enh_evo/enh_013")
                    })
                }
            }
        }
    };
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_010 = t.pc.enh_evo.enh_010 || {},
    t.pc.enh_evo.enh_010.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_010/enh_010")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_010/enh_010"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh010Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_010"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のenh_002へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", function(e) {
                this.popups.enh_rare_check.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_008")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_010 = t.pc.enh_evo.enh_010 || {},
    t.pc.enh_evo.enh_010.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParamsENH010(e),
            this._setCharacterHeaderLabel(),
            this._setCharacterBasePanel(e, e.routerParams.enh_010.id),
            this._setConfirmListCharacter(e, e.routerParams.enh_010.id, e.temporaryRouterParams.list),
            e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH010ToENH001(),
            t.promise
        },
        btnCallbackBtnEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showRareCheckPopup(),
            t.promise
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH010ToENH008(e),
            t.promise
        },
        _touchHeaderCoreCard: function(e) {
            this._navigateENH010ToENH005(e)
        },
        _executeEnhance: function(e) {
            var n = e.routerParams.enh_010.id
              , i = this._materialIds;
            t.createInstance("router").removeCurrentTemporaryParamsFromHistory(),
            t.createInstance("apiACharacters").enhance(n, i).then(function(t) {
                console.log(t),
                this._navigateENH010ToENH013(e, t.body, this._enhMaterials.materials)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    n.assign(t.pc.enh_evo.enh_010.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EnhPopupCommon, t.pc.list.roles.ListCharactersCommon, t.pc.enh_evo.roles.EnhEvoConfirmList)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        enh_rare_check: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("enh_rare_check")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: enh_rare_check"),
                e || ""
            }(),
            title: "強化確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    this.dismiss().then(function() {
                        t.createInstance("router").navigate("enh_evo/enh_014")
                    })
                }
            }
        }
    };
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_011 = t.pc.enh_evo.enh_011 || {},
    t.pc.enh_evo.enh_011.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_011/enh_011")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_011/enh_011"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh011Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_011"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のenh_001へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", function(e) {
                this.popups.enh_rare_check.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_007")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_011 = t.pc.enh_evo.enh_011 || {},
    t.pc.enh_evo.enh_011.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParamsENH011(e),
            this._setWeaponHeaderLabel(),
            this._setWeaponBasePanel(e, e.routerParams.enh_011.id),
            this._setConfirmListWeapon(e, e.routerParams.enh_011.id, e.temporaryRouterParams.list),
            e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH011ToENH002(),
            t.promise
        },
        btnCallbackBtnEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showRareCheckPopup(),
            t.promise
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH011ToENH007(e),
            t.promise
        },
        _touchHeaderCoreCard: function(e) {
            this._navigateENH011ToENH003(e)
        },
        _executeEnhance: function(e) {
            t.createInstance("router").removeCurrentTemporaryParamsFromHistory();
            var n = e.routerParams.enh_011.id
              , i = this._materialIds;
            t.createInstance("apiAWeapons").enhance(n, i).then(function(t) {
                console.log(t),
                this._navigateENH011ToENH014(e, t.body, this._enhMaterials.materials)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    n.assign(t.pc.enh_evo.enh_011.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.list.roles.ListWeaponsCommon, t.pc.enh_evo.roles.EnhPopupCommon, t.pc.enh_evo.roles.EnhEvoConfirmList)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        enh_rare_check: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("enh_rare_check")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: enh_rare_check"),
                e || ""
            }(),
            title: "強化確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    this.dismiss().then(function() {
                        t.createInstance("router").navigate("enh_evo/enh_015")
                    })
                }
            }
        }
    };
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_012 = t.pc.enh_evo.enh_012 || {},
    t.pc.enh_evo.enh_012.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_012/enh_012")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_012/enh_012"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh012Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_012"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のenh_006へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", function(e) {
                this.popups.enh_rare_check.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_009")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_012 = t.pc.enh_evo.enh_012 || {},
    t.pc.enh_evo.enh_012.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParamsENH012(e),
            this._setSummonHeaderLabel(),
            this._setSummonBasePanel(e, e.routerParams.enh_012.id),
            this._setConfirmListSummon(e, e.routerParams.enh_012.id, e.temporaryRouterParams.list),
            e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH012ToENH006(),
            t.promise
        },
        btnCallbackBtnEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showRareCheckPopup(),
            t.promise
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH012ToENH009(e),
            t.promise
        },
        _touchHeaderCoreCard: function(e) {
            this._navigateENH012ToENH004(e)
        },
        _executeEnhance: function(e) {
            var n = e.routerParams.enh_012.id
              , i = this._materialIds;
            t.createInstance("router").removeCurrentTemporaryParamsFromHistory(),
            t.createInstance("apiASummons").enhance(n, i).then(function(t) {
                console.log(t),
                this._navigateENH012ToENH015(e, t.body, this._enhMaterials.materials)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    n.assign(t.pc.enh_evo.enh_012.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EnhPopupCommon, t.pc.list.roles.ListSummonsCommon, t.pc.enh_evo.roles.EnhEvoConfirmList)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_013 = t.pc.enh_evo.enh_013 || {},
    t.pc.enh_evo.enh_013.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_013/enh_013")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_013/enh_013"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh013Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_013"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnContinueEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_continue_enh", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_008")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のenh_002へ遷移}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_013 = t.pc.enh_evo.enh_013 || {},
    t.pc.enh_evo.enh_013.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupAbilityAcquired: {
                title: "アビリティ習得",
                factoryName: "popupFactoryAbilityAcquired",
                onPopupOpened: function(e, t) {
                    e._setData(t, "character")
                },
                buttons: {
                    blueBtn: function(e) {
                        var t = e._delegate;
                        this.dismiss().then(t._showPopupGainedAbilityIfExists.bind(t, e))
                    }
                }
            }
        },
        onSceneInit: function(e) {
            this._verifyRouterParamsENH013(e);
            var t = e.routerParams.enh_013.result
              , a = t.character;
            n.isUndefined(a) && console.error("routerParams.enh_013.result.character is empty."),
            this._setCharacterBasePanelWithoutApi(e, a),
            this._setResultMessage(e, this._enhanceExpHtmlString(t, "character")),
            this._setResultStatus(e, this._enhanceGrowthHtmlString(t)),
            this._showAnimationMaterials(e, "weapon", e.temporaryRouterParams.enh_013.materials);
            var s = t.result
              , o = "great_success" === s.success_type
              , r = s.new_abilities_gained;
            return r = n.isArray(r) ? r : n.isObject(r) ? [r] : [],
            this.new_abilities_gained = n.map(r, function(e) {
                return {
                    character_id: t.character.character_id,
                    character_name: t.character.name,
                    ability_name: e.ability_name,
                    ability_type: e.ability_type
                }
            }) || [],
            this._playEnhAnimations2(e, s, o).then(function() {
                this._showPopupGainedAbilityIfExists(e)
            }
            .bind(this)),
            this._setCharacterHeaderLabel(),
            i.resolve()
        },
        _showPopupGainedAbilityIfExists: function(e) {
            var t = (this.new_abilities_gained || []).shift();
            t && e.popups.popupAbilityAcquired.open(t)
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return this._abortAnimation(),
            i.resolve()
        },
        btnCallbackBtnContinueEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH013ToEVO010(e),
            t.promise
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH013ToENH002(e),
            t.promise
        }
    }),
    n.assign(t.pc.enh_evo.enh_013.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EnhEvoAnimation, t.pc.enh_evo.roles.EnhStatusCommon, t.pc.list.roles.ListCharactersCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_014 = t.pc.enh_evo.enh_014 || {},
    t.pc.enh_evo.enh_014.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_014/enh_014")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_014/enh_014"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh014Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_014"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnContinueEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_continue_enh", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_007")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のenh_001へ遷移}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_014 = t.pc.enh_evo.enh_014 || {},
    t.pc.enh_evo.enh_014.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsENH014(e);
            var t = e.routerParams.enh_014.result
              , a = t.weapon;
            n.isUndefined(a) && console.error("routerParams.enh_014.result.weapon is empty."),
            this._setWeaponBasePanelWithoutApi(e, a),
            this._setResultMessage(e, this._enhanceExpHtmlString(t, "weapon")),
            this._setResultStatus(e, this._enhanceGrowthHtmlString(t)),
            this._showAnimationMaterials(e, "weapon", e.temporaryRouterParams.enh_014.materials);
            var s = t.result
              , o = "great_success" === s.success_type;
            return this._initPlayer(),
            this._playEnhAnimations2(e, s, o, 2e3),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return this._abortAnimation(),
            i.resolve()
        },
        btnCallbackBtnContinueEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH014ToENH007(e),
            t.promise
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH014ToENH001(e),
            t.promise
        }
    }),
    n.assign(t.pc.enh_evo.enh_014.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EnhEvoAnimation, t.pc.enh_evo.roles.EnhStatusCommon, t.pc.list.roles.ListWeaponsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_015 = t.pc.enh_evo.enh_015 || {},
    t.pc.enh_evo.enh_015.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("enh_015/enh_015")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: enh_015/enh_015"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "enh015Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "enh_015"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnContinueEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_continue_enh", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のenh_006へ遷移}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.enh_015 = t.pc.enh_evo.enh_015 || {},
    t.pc.enh_evo.enh_015.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsENH015(e);
            var t = e.routerParams.enh_015.result
              , a = t.summon;
            n.isUndefined(a) && console.error("routerParams.enh_015.result.summon is empty."),
            this._setSummonBasePanelWithoutApi(e, a),
            this._setResultMessage(e, this._enhanceExpHtmlString(t, "summon")),
            this._setResultStatus(e, this._enhanceGrowthHtmlString(t)),
            this._showAnimationMaterials(e, "summon", e.temporaryRouterParams.enh_015.materials);
            var s = t.result
              , o = "great_success" === s.success_type;
            return this._playEnhAnimations2(e, s, o),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return this._abortAnimation(),
            i.resolve()
        },
        btnCallbackBtnContinueEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH015ToENH009(e),
            t.promise
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateENH015ToENH006(e),
            t.promise
        }
    }),
    n.assign(t.pc.enh_evo.enh_015.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EnhEvoAnimation, t.pc.enh_evo.roles.EnhStatusCommon, t.pc.list.roles.ListSummonsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_004 = t.pc.enh_evo.evo_004 || {},
    t.pc.enh_evo.evo_004.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("evo_004/evo_004")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: evo_004/evo_004"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "evo004Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "evo_004"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", function() {
                alert("{{この画面に遷移する1つ前の画面に遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", function() {
                alert("{{enh_007へ遷移すでに最大まで強化されている場合、グレーアウトしてタップ不可に}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnProtect"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_protect", function() {
                alert("{{通常状態の場合com_protect_onを表示。保護状態の場合com_protect_off　を表示。ボタン文言は仕様書参照}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_004 = t.pc.enh_evo.evo_004 || {},
    t.pc.enh_evo.evo_004.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            return this._verifyRouterParamsEVO004(e),
            this._loadAWeapon(e.routerParams.evo_004.id).then(function(n) {
                e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL)
            })
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO004ToENH002(e),
            t.promise
        },
        btnCallbackBtnEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO004ToENH007(e),
            t.promise
        },
        btnCallbackBtnProtect: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchProtect(),
            t.promise
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        }
    }),
    n.assign(t.pc.enh_evo.evo_004.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.scene.roles.SceneWeaponCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_005 = t.pc.enh_evo.evo_005 || {},
    t.pc.enh_evo.evo_005.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("evo_005/evo_005")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: evo_005/evo_005"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "evo005Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "evo_005"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", function() {
                alert("{{この画面に遷移する1つ前の画面に遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", function() {
                alert("{{enh_009へ遷移すでに最大まで限界突破されている場合、グレーアウトしてタップ不可に}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnProtect"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_protect", function() {
                alert("{{通常状態の場合com_protect_onを表示。保護状態の場合com_protect_off　を表示。ボタン文言は仕様書参照}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_005 = t.pc.enh_evo.evo_005 || {},
    t.pc.enh_evo.evo_005.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            return this._verifyRouterParamsEVO005(e),
            this._loadASummon(e.routerParams.evo_005.id).then(function(n) {
                e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL)
            })
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO005ToEVO003(e),
            t.promise
        },
        btnCallbackBtnEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO005ToENH009(e),
            t.promise
        },
        btnCallbackBtnProtect: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchProtect(),
            t.promise
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        }
    }),
    n.assign(t.pc.enh_evo.evo_005.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.scene.roles.SceneSummonCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_006 = t.pc.enh_evo.evo_006 || {},
    t.pc.enh_evo.evo_006.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("evo_006/evo_006")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: evo_006/evo_006"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_chara_status_1_ui");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_chara_status_1_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_statuslist_list_7_ui");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_chara_status_1_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "evo006Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "evo_006"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", function() {
                alert("{{この画面に遷移する1つ前の画面に遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", function() {
                alert("{{enh_008へ遷移すでに最大まで限界突破している場合グレーアウトしタップ不可に}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_006 = t.pc.enh_evo.evo_006 || {},
    t.pc.enh_evo.evo_006.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            return this._verifyRouterParamsEVO006(e),
            this._loadACharacter(e.routerParams.evo_006.id).then(function(n) {
                e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL)
            })
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO006ToEVO001(e),
            t.promise
        },
        btnCallbackBtnEnh: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO006ToENH008(e),
            t.promise
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        }
    }),
    n.assign(t.pc.enh_evo.evo_006.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.scene.roles.SceneCharacterCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_007 = t.pc.enh_evo.evo_007 || {},
    t.pc.enh_evo.evo_007.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("evo_007/evo_007")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: evo_007/evo_007"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "evo007Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "evo_007"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のevo_001へ遷移}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_007 = t.pc.enh_evo.evo_007 || {},
    t.pc.enh_evo.evo_007.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsEVO007(e),
            this._setWeaponBasePanel(e, e.routerParams.evo_007.id);
            var n = {
                panelName: t.BtnsPageListParams.ENH_EVO_007.panelName,
                panelsPerPage: t.BtnsPageListParams.ENH_EVO_007.perPage,
                apiName: "apiAWeapons",
                apiMethod: "getEvolveMaterials",
                sortKey: "evolve_weapon_materials"
            }
              , i = this._setWeaponList(e, [e.routerParams.evo_007.id], "_touchListCoreCard", n).then(function(t) {
                this._setPageResult(e, t)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return i
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO007ToEVO001(),
            t.promise
        },
        _touchHeaderCoreCard: function(e) {
            this._navigateEVO007ToEVO004(e)
        },
        _touchListCoreCard: function(e, t) {
            this._navigateEVO007ToEVO008(e, t)
        }
    }),
    n.assign(t.pc.enh_evo.evo_007.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.list.roles.ListWeaponsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_008 = t.pc.enh_evo.evo_008 || {},
    t.pc.enh_evo.evo_008.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("evo_008/evo_008")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: evo_008/evo_008"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "evo008Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "evo_008"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のenh_001へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", function() {
                alert("{{素材となるウェポンが1段階でも限界突破されている場合、evo_mate_checkを開くそれ以外の場合evo_money_checkを開く}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/evo_007")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_008 = t.pc.enh_evo.evo_008 || {},
    t.pc.enh_evo.evo_008.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsEVO008(e),
            this._setWeaponBasePanel(e, e.routerParams.evo_008.id);
            var n = e.seekWidgetByName("list_blank_0");
            return n.setVisible(!0),
            this._setWeaponCoreCardFull(n, e.routerParams.evo_008.evomate),
            e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO008ToEVO001(),
            t.promise
        },
        btnCallbackBtnEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showConfirmationPopups("weapon", "evo_008"),
            t.promise
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO008ToEVO007(),
            t.promise
        },
        _touchHeaderCoreCard: function(e) {
            this._navigateEVO008ToEVO004(e)
        },
        _executeEvolution: function(e) {
            var n = e.routerParams.evo_008.evomate
              , i = e.routerParams.evo_008.id;
            t.createInstance("apiAWeapons").evolve(i, n.a_weapon_id).then(function(t) {
                console.log(t),
                this._navigateEVO008ToEVO009(e, t.body, [n])
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    n.assign(t.pc.enh_evo.evo_008.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EvoPopupCommon, t.pc.list.roles.ListWeaponsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_009 = t.pc.enh_evo.evo_009 || {},
    t.pc.enh_evo.evo_009.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("evo_009/evo_009")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: evo_009/evo_009"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "evo009Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "evo_009"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のevo_001へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnContinueEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_continue_evo", function() {
                alert("{{evo_007へ遷移最大まで限界突破された場合、グレーアウトしてタップ不可に}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_009 = t.pc.enh_evo.evo_009 || {},
    t.pc.enh_evo.evo_009.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsEVO009(e);
            var t = e.routerParams.evo_009.result
              , a = t.weapon;
            return n.isUndefined(a) && console.error("routerParams.evo_009.result.weapon is empty."),
            this._setWeaponBasePanelWithoutApi(e, a),
            this._setResultMessage(e, this._evolveResultHtmlString(t)),
            this._showAnimationMaterials(e, "weapon", e.temporaryRouterParams.evo_009.materials),
            this._playEvoAnimations(e),
            i.resolve()
        },
        _evolveResultHtmlString: function(e) {
            var t = e.weapon.name
              , n = e.result
              , i = 0 == n.is_full_max_level ? n.before.max_level + "&rarr;" + n.after.max_level : "MAX"
              , a = t + "の最大Lvが<br/><span class='red'>" + i + "</span>になった！";
            return "<br/><br/><br/>" + a
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return this._abortAnimation(),
            i.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO009ToEVO001(e),
            t.promise
        },
        btnCallbackBtnContinueEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO009ToEVO007(e),
            t.promise
        }
    }),
    n.assign(t.pc.enh_evo.evo_009.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EnhEvoAnimation, t.pc.list.roles.ListWeaponsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_010 = t.pc.enh_evo.evo_010 || {},
    t.pc.enh_evo.evo_010.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("evo_010/evo_010")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: evo_010/evo_010"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "evo010Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "evo_010"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のevo_003へ遷移}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_010 = t.pc.enh_evo.evo_010 || {},
    t.pc.enh_evo.evo_010.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsEVO010(e),
            this._setSummonBasePanel(e, e.routerParams.evo_010.id);
            var n = {
                panelName: t.BtnsPageListParams.ENH_EVO_010.panelName,
                panelsPerPage: t.BtnsPageListParams.ENH_EVO_010.perPage,
                apiName: "apiASummons",
                apiMethod: "getEvolveMaterials",
                sortKey: "evolve_summon_materials"
            }
              , i = this._setSummonList(e, [e.routerParams.evo_010.id], "_touchListCoreCard", n).then(function(t) {
                this._setPageResult(e, t)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return i
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigateEVO010ToEVO003(),
            t.promise
        },
        _touchHeaderCoreCard: function(e) {
            this._navigateEVO010ToEVO005(e)
        },
        _touchListCoreCard: function(e, t) {
            this._navigateEVO010ToEVO011(e, t)
        },
        _processEnhance: function(e) {
            console.debug(e);
            var t = n.director.getRunningScene();
            this._navigateENH007ToENH011(t, e)
        }
    }),
    i.assign(t.pc.enh_evo.evo_010.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.list.roles.ListSummonsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_011 = t.pc.enh_evo.evo_011 || {},
    t.pc.enh_evo.evo_011.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("evo_011/evo_011")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: evo_011/evo_011"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "evo011Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "evo_011"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnCancel"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_cancel", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/evo_010")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", function() {
                alert("{{素材となる幻獣が1段階でも限界突破されている場合、evo_mate_checkを開くそれ以外の場合evo_money_checkを開く}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のevo_003へ遷移}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_011 = t.pc.enh_evo.evo_011 || {},
    t.pc.enh_evo.evo_011.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsEVO011(e),
            this._setSummonBasePanel(e, e.routerParams.evo_011.id);
            var n = e.seekWidgetByName("list_blank_0");
            return n.setVisible(!0),
            this._setSummonCoreCardFull(n, e.routerParams.evo_011.evomate),
            e.seekWidgetByName("btn_cancel").setSound(t.SoundList.BUTTON_TOUCHED_CANCEL),
            i.resolve()
        },
        onSceneEnter: function(e) {
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnCancel: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO011ToEVO010(),
            t.promise
        },
        btnCallbackBtnEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showConfirmationPopups("summon", "evo_011"),
            t.promise
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO011ToEVO003(),
            t.promise
        },
        _touchHeaderCoreCard: function(e) {
            this._navigateEVO011ToEVO005(e)
        },
        _executeEvolution: function(e) {
            var n = e.routerParams.evo_011.evomate
              , i = e.routerParams.evo_011.id;
            t.createInstance("apiASummons").evolve(i, n.a_summon_id).then(function(t) {
                console.log(t),
                this._navigateEVO011ToEVO012(e, t.body, [n])
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    n.assign(t.pc.enh_evo.evo_011.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EvoPopupCommon, t.pc.list.roles.ListSummonsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_012 = t.pc.enh_evo.evo_012 || {},
    t.pc.enh_evo.evo_012.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("evo_012/evo_012")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: evo_012/evo_012"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "evo012Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "evo_012"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のevo_003へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnContinueEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_continue_evo", function() {
                alert("{{evo_010へ遷移最大まで限界突破された場合、グレーアウトしてタップ不可に}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_012 = t.pc.enh_evo.evo_012 || {},
    t.pc.enh_evo.evo_012.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsEVO012(e);
            var t = e.routerParams.evo_012.result
              , a = t.summon;
            return n.isUndefined(a) && console.error("routerParams.evo_012.result.summon is empty."),
            this._setSummonBasePanelWithoutApi(e, a),
            this._setResultMessage(e, this._evolveResultHtmlString(t)),
            this._showAnimationMaterials(e, "summon", e.temporaryRouterParams.evo_012.materials),
            this._playEvoAnimations(e),
            i.resolve()
        },
        _evolveResultHtmlString: function(e) {
            var t = e.summon.name
              , n = e.result
              , i = 0 == n.is_full_max_level ? n.before.max_level + "&rarr;" + n.after.max_level : "MAX"
              , a = t + "の最大Lvが<br/><span class='red'>" + i + "</span>になった！";
            return "<br/><br/><br/>" + a
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return this._abortAnimation(),
            i.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO012ToEVO003(e),
            t.promise
        },
        btnCallbackBtnContinueEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO012ToEVO010(e),
            t.promise
        }
    }),
    n.assign(t.pc.enh_evo.evo_012.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EnhEvoAnimation, t.pc.list.roles.ListSummonsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        evo_money_check: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("evo_money_check")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: evo_money_check"),
                e || ""
            }(),
            title: "限界突破確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    this.dismiss().then(function() {
                        t.createInstance("router").navigate("enh_evo/evo_014")
                    })
                }
            }
        }
    };
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_013 = t.pc.enh_evo.evo_013 || {},
    t.pc.enh_evo.evo_013.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("evo_013/evo_013")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: evo_013/evo_013"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "evo013Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "evo_013"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnUseItem"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_use_item", function() {
                alert("{{evo_item_chooseを開く。現在選択している神姫のレアリティに沿った育成アイテムを所持していない場合、非表示に}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", function(e) {
                this.popups.evo_money_check.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のevo_002へ遷移}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_013 = t.pc.enh_evo.evo_013 || {},
    t.pc.enh_evo.evo_013.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            return this._verifyRouterParamsEVO013(e),
            this._setCharacterBasePanel(e, e.routerParams.evo_013.id),
            this._setCharacterEvolveMaterials(e, e.routerParams.evo_013.id),
            this._setCharacterHeaderLabel(),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnUseItem: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showConfirmationPopups("character", "evo_013"),
            t.promise
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO013ToEVO002(e),
            t.promise
        },
        _touchHeaderCoreCard: function(e) {
            this._navigateEVO013ToEVO006(e)
        },
        _executeEvolution: function(e) {
            var n = e.routerParams.evo_013.id;
            t.createInstance("apiACharacters").evolve(n).then(function(t) {
                console.log(t),
                this._navigateEVO013ToEVO014(e, t.body, this._confirmEvo.result.items)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _touchEvolveMaterial: function(e) {
            this._showNeedMatePopup(e)
        }
    }),
    n.assign(t.pc.enh_evo.evo_013.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EvoPopupCommon, t.pc.enh_evo.roles.EnhEvoConfirmList, t.pc.list.roles.ListCharactersCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_014 = t.pc.enh_evo.evo_014 || {},
    t.pc.enh_evo.evo_014.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("evo_014/evo_014")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: evo_014/evo_014"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "evo014Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "evo_014"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", function() {
                alert("{{enh_001_2_6_evo_001_2_3のevo_002へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnContinueEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_continue_evo", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/evo_013")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.evo_014 = t.pc.enh_evo.evo_014 || {},
    t.pc.enh_evo.evo_014.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsEVO014(e);
            var t = e.routerParams.evo_014.result
              , a = t.character;
            return n.isUndefined(a) && console.error("routerParams.evo_012.result.character is empty."),
            this._setCharacterBasePanelWithoutApi(e, a),
            this._setResultMessage(e, this._evolveResultHtmlString(t)),
            this._showAnimationMaterials(e, "item", e.temporaryRouterParams.evo_014.materials),
            this._playEvoAnimations(e),
            this._setCharacterHeaderLabel(),
            i.resolve()
        },
        _evolveResultHtmlString: function(e) {
            var t = e.character.name
              , n = e.result
              , i = 0 == n.is_full_max_level ? n.before.max_level + "&rarr;" + n.after.max_level : "MAX"
              , a = t + "の最大Lvが<br/><span class='red'>" + i + "</span>になった！";
            return "<br/><br/><br/>" + a
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return this._abortAnimation(),
            i.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO014ToEVO002(e),
            t.promise
        },
        btnCallbackBtnContinueEvo: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigateEVO014ToEVO013(e),
            t.promise
        }
    }),
    n.assign(t.pc.enh_evo.evo_014.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EnhEvoAnimation, t.pc.list.roles.ListCharactersCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.arousal_002 = t.pc.enh_evo.arousal_002 || {},
    t.pc.enh_evo.arousal_002.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("arousal_002/arousal_002.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: arousal_002/arousal_002.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "arousal002Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "arousal_002"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnArousal"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_arousal", function() {
                alert("{{arousal_mate_checkを表示}}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_001_2_6_evo_001_2_3")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.arousal_002 = t.pc.enh_evo.arousal_002 || {},
    t.pc.enh_evo.arousal_002.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParamsAROUSAL002(e);
            var t = this._getACharacterId(e);
            return this._charaPromise = this._setCharacterBasePanel(e, t).then(function(t) {
                return t.can_arouse || this._changeStateCannotArouse(e, "cannot_arouse"),
                t
            }
            .bind(this)),
            this._materialPromise = this._setCharacterArouseMaterials(e, t).spread(function(t, n) {
                return n && this._changeStateCannotArouse(e, "lack_of_materials"),
                t
            }
            .bind(this)),
            this._setCharacterHeaderLabel(),
            a.resolve()
        },
        _getACharacterId: function(e) {
            return e.temporaryRouterParams.arousal_002.id
        },
        _changeStateCannotArouse: function(e, t) {
            if ("cannot_arouse" !== this._state) {
                this._state = t;
                var n = this.__getCannotArouseMessage(t);
                this.__showMessageCannotArouse(e, n),
                this.__disableArouseButton(e)
            }
        },
        __getCannotArouseMessage: function(e) {
            var t = {
                cannot_arouse: ["覚醒には以下の条件を満たす必要があります。", "・Lvと限界突破回数が最大", "・この神姫のハーレムエピソードを全てクリア"].join("\n"),
                lack_of_materials: void 0
            };
            return t[e]
        },
        __showMessageCannotArouse: function(e, t) {
            var n = this.__getNothingLabelNode(e);
            n && (i.isUndefined(t) || n.setString(t),
            n.setAppearance("show"))
        },
        __getNothingLabelNode: function(e) {
            return e.seekWidgetByName("nothing_label")
        },
        __disableArouseButton: function(e) {
            var t = this.__getArouseButton(e);
            t && this._setEnableButton(t, !1)
        },
        __getArouseButton: function(e) {
            return e.seekWidgetByName("btn_arousal")
        },
        onSceneEnter: function(e) {
            return a.resolve()
        },
        onSceneExit: function(e) {
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            return a.resolve()
        },
        btnCallbackBtnArousal: function(e) {
            return this._confirm(e).then(this._arouseCharacter.bind(this, e, this._getACharacterId(e)), this._cancel.bind(this)).spread(function(t, n) {
                this._navigateAROUSAL002To003(e, t, n)
            }
            .bind(this)),
            a.reject(this._override)
        },
        _confirm: function(e) {
            var t = this.__getConfirmationPopup(e);
            return this._materialPromise.then(t.open.bind(t))
        },
        __getConfirmationPopup: function(e) {
            return t.ImplantedPopup.createOrGet(e, "arousal_mate_check", "ArouseMateCheckPopup")
        },
        _arouseCharacter: function(e, n) {
            return (new t.BGM).stop(),
            this.__arouse(n).then(function(i) {
                return this._playArouseAnimation(e, i).then(function() {
                    (new t.BGM).play()
                }).thenResolve([n, i])
            }
            .bind(this))
        },
        __arouse: function(e) {
            return t.createInstance("apiACharacters").arouse(e).then(function(e) {
                return e.body
            }).fail(function(e) {
                return console.error(e),
                a.reject(e)
            })
        },
        _playArouseAnimation: function(e, n) {
            var i = n.result.before.character_id
              , s = n.result.after.character_id
              , o = (n.character.a_character_id,
            new t.enh_evo.view.ArouseAnimation(i,s));
            return o.play().fail(function(e) {
                return console.error(e),
                a.reject(e)
            })
        },
        _cancel: function() {
            console.log("キャンセルされました")
        },
        btnCallbackBtnBaseChange: function(e) {
            return this._navigateAROUSAL002To001(e),
            a.reject(this._override)
        },
        _touchHeaderCoreCard: function(e) {
            var t = n.director.getRunningScene();
            this._navigateAROUSAL002ToLI004(t, e.a_character_id)
        },
        _touchEvolveMaterial: function(e) {
            (new t.SE).play(t.SoundList.BUTTON_TOUCHED_DECIDE),
            this._showNeedMatePopup(e)
        }
    }),
    i.assign(t.pc.enh_evo.arousal_002.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.enh_evo.roles.EvoPopupCommon, t.pc.enh_evo.roles.EnhEvoConfirmList, t.pc.list.roles.ListCharactersCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.arousal_003 = t.pc.enh_evo.arousal_003 || {},
    t.pc.enh_evo.arousal_003.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("arousal_003/arousal_003.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: arousal_003/arousal_003.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "arousal003Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["enh_evo", "arousal_003"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBaseChange"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_base_change", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_001_2_6_evo_001_2_3")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnh"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/enh_008")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_evo", t.createInstance("router").navigate.bind(t.createInstance("router"), "enh_evo/evo_013")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.enh_evo = t.pc.enh_evo || {},
    t.pc.enh_evo.arousal_003 = t.pc.enh_evo.arousal_003 || {},
    t.pc.enh_evo.arousal_003.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            var t = this._getResult(e).character;
            if (!t)
                throw new Error("覚醒結果が見つかりませんでした");
            return this._setCharacterBasePanelWithoutApi(e, t),
            this._showResultMessage(e, t),
            this._setCharacterHeaderLabel(),
            i.resolve()
        },
        _getACharacterId: function(e) {
            return e.temporaryRouterParams.arousal_003.id
        },
        _getResult: function(e) {
            return e.temporaryRouterParams.arousal_003.result
        },
        _showResultMessage: function(e, n) {
            var i = this._getResultMessage(n);
            e.setHtmlStrings({
                result_labelimg: i
            }, t.GameConfig.POPUP_CSS)
        },
        _getResultMessage: function(e) {
            var t = n.template('<br /><br /><br /><p><%= name %>が<span class="red">覚醒</span>した！</p>');
            return t({
                name: e.name
            })
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        onPageInAnimationEnd: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnBaseChange: function(e) {
            return this._navigateAROUSAL003To001(e),
            i.reject(this._override)
        },
        btnCallbackBtnEnh: function(e) {
            return this._navigateAROUSAL003ToENH008(e, this._getResult(e).character),
            i.reject(this._override)
        },
        btnCallbackBtnEvo: function(e) {
            i.defer();
            return this._navigateAROUSAL003ToEVO013(e, this._getResult(e).character),
            i.reject(this._override)
        }
    }),
    n.assign(t.pc.enh_evo.arousal_003.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.enh_evo.roles.Routing, t.pc.enh_evo.roles.EnhEvoCommon, t.pc.list.roles.ListCharactersCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "Gacha"
      , s = {
        getAppearance: function(e) {
            return this._http.get({
                url: "/gacha/" + e + "/appearance"
            })
        },
        getAppearanceByEventId: function(e) {
            return this._http.get({
                url: "/gacha/event/" + e + "/appearance",
                json: {
                    id: e
                }
            })
        },
        getSliderDetail: function(e) {
            return this._http.get({
                url: "/gacha/detail",
                json: {
                    slider_id: e
                }
            })
        },
        getSummonRatios: function(e, t, n) {
            return this._http.get({
                url: "/gacha/" + e + "/summon/ratios",
                json: {
                    page: t,
                    per_page: n
                }
            })
        },
        getWeaponRatios: function(e, t, n) {
            return this._http.get({
                url: "/gacha/" + e + "/weapon/ratios",
                json: {
                    page: t,
                    per_page: n
                }
            })
        },
        getEventSummonRatios: function(e, t, n) {
            return this._http.get({
                url: "/gacha/event/" + e + "/summon/ratios",
                json: {
                    page: t,
                    per_page: n
                }
            })
        },
        getEventWeaponRatios: function(e, t, n) {
            return this._http.get({
                url: "/gacha/event/" + e + "/weapon/ratios",
                json: {
                    page: t,
                    per_page: n
                }
            })
        },
        getHaremEpisodeCharacter: function(e) {
            return this._http.get({
                url: "/gacha/harem_episodes/characters/" + e
            })
        },
        getHaremEpisodesCharacters: function(e, t) {
            return this._http.get({
                url: "/gacha/harem_episodes/characters",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        getHaremEpisodeSummon: function(e) {
            return this._http.get({
                url: "/gacha/harem_episodes/summons/" + e
            })
        },
        getHaremEpisodesSummons: function(e, t) {
            return this._http.get({
                url: "/gacha/harem_episodes/summons",
                json: {
                    page: e,
                    per_page: t
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiGacha",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AGacha"
      , s = {
        getAppearance: function(e) {
            return this._http.get({
                url: "/a_gacha/" + e + "/current"
            })
        },
        getAppearanceById: function(e) {
            return this._http.get({
                url: "/a_gacha/event/appearance",
                json: {
                    id: e
                }
            })
        },
        getCategory: function(e) {
            return this._http.get({
                url: "/a_gacha/" + e
            })
        },
        getEventCategory: function(e) {
            return this._http.get({
                url: "/a_gacha/event/" + e
            })
        },
        getCheckUsing: function(e) {
            return this._http.get({
                url: "/a_gacha/check_use",
                json: {
                    gacha_id: e
                }
            })
        },
        getSliderDetail: function(e) {
            return this._http.get({
                url: "/a_gacha/detail",
                json: {
                    slider_id: e
                }
            })
        },
        getRatio: function(e) {
            return this._http.get({
                url: "/a_gacha/" + e + "/ratio"
            })
        },
        getRatioById: function(e) {
            return this._http.get({
                url: "/a_gacha/event",
                json: {
                    ratio: e
                }
            })
        },
        playGacha: function(e, t) {
            return this._http.post({
                url: "/a_gacha/" + e,
                json: {
                    gacha_id: t
                }
            })
        },
        playEventGacha: function(e, t) {
            return this._http.post({
                url: "/a_gacha/event/" + e,
                json: {
                    gacha_id: t
                }
            })
        }
    };
    n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAGacha",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s));
    var o = ["TutorialApi"];
    n.env.useApiMock && o.push("MockApi"),
    t.each(o, function(e) {
        n[e] = n[e] || {};
        var o = {};
        t.each(s, function(t, i) {
            o[i] = function() {
                if (!n[e])
                    throw "kh." + e + "is not defined";
                if (!n[e][a][i + "JSON"])
                    throw "not implemented: kh." + e + "." + a + "." + i;
                var t = Q.defer();
                return t.resolve({
                    body: n[e][a][i + "JSON"].apply(this, arguments)
                }),
                t.promise
            }
        }),
        n[e][a] = i.Class.extend(t.assign({}, o))
    });
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, n) {
            n += "JSON";
            var i = "mock"
              , s = "tutorialMock";
            t.each([i, s], function(e) {
                var t = "./" + e + "/" + n + ".js";
                if (c.existsSync(t))
                    return void console.log("skip: file exists: " + t);
                console.log("generate: " + t);
                var i = u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, n);
                e === s && (i = i.replace(/MockApi/g, "TutorialApi")),
                c.writeFileSync(t, i)
            })
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "AGachaResult"
      , s = {
        putGachaResult: function(e) {
            return this._http.put({
                url: "/a_gacha_result",
                json: {
                    payment_id: e
                }
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiAGachaResult",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "Characters"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/characters/" + e
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiCharacters",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    e.res;
    t.pc.scene = t.pc.scene || {},
    t.pc.scene.roles = t.pc.scene.roles || {},
    t.pc.scene.roles.ResourcePath = {
        0: "res/ga_ani/ga_ani_00.json",
        1: "res/ga_ani/ga_ani_{suffix}/ga_ani_01_{suffix}.json",
        2: "res/ga_ani/ga_ani_{suffix}/ga_ani_02_{suffix}.json",
        3: "res/ga_ani/ga_ani_{suffix}/ga_ani_03_{suffix}.json",
        4: "res/ga_ani/ga_ani_{suffix}/ga_ani_04_{suffix}_{multi}.json",
        5: "res/ga_ani/ga_ani_{suffix}/ga_ani_05_{suffix}.json",
        6: "res/ga_ani/ga_ani_06.json"
    },
    $staticRes("res/ga_ani/ga_ani_00.json"),
    $staticRes("res/ga_ani/ga_ani_a/ga_ani_01_a.json"),
    $staticRes("res/ga_ani/ga_ani_a/ga_ani_02_a.json"),
    $staticRes("res/ga_ani/ga_ani_a/ga_ani_03_a.json"),
    $staticRes("res/ga_ani/ga_ani_a/ga_ani_04_a_0.json"),
    $staticRes("res/ga_ani/ga_ani_a/ga_ani_04_a_1.json"),
    $staticRes("res/ga_ani/ga_ani_a/ga_ani_05_a.json"),
    $staticRes("res/ga_ani/ga_ani_b/ga_ani_01_b.json"),
    $staticRes("res/ga_ani/ga_ani_b/ga_ani_02_b.json"),
    $staticRes("res/ga_ani/ga_ani_b/ga_ani_03_b.json"),
    $staticRes("res/ga_ani/ga_ani_b/ga_ani_04_b_0.json"),
    $staticRes("res/ga_ani/ga_ani_b/ga_ani_04_b_1.json"),
    $staticRes("res/ga_ani/ga_ani_b/ga_ani_05_b.json"),
    $staticRes("res/ga_ani/ga_ani_c/ga_ani_01_c.json"),
    $staticRes("res/ga_ani/ga_ani_c/ga_ani_02_c.json"),
    $staticRes("res/ga_ani/ga_ani_c/ga_ani_03_c.json"),
    $staticRes("res/ga_ani/ga_ani_c/ga_ani_04_c_0.json"),
    $staticRes("res/ga_ani/ga_ani_c/ga_ani_04_c_1.json"),
    $staticRes("res/ga_ani/ga_ani_c/ga_ani_05_c.json"),
    $staticRes("res/ga_ani/ga_ani_06.json"),
    t.pc.scene.roles.GachaDoorColor = {
        ss_rare: "gold",
        s_rare: "gold",
        rare: "white",
        other: "white"
    },
    t.pc.scene.roles.SceneGachaAnimation = {
        _skipSt4ForCharReleaseWeapons: !0,
        _checkPointStep: -1,
        _initialize: function(e, s) {
            if (this.isPC = !!s,
            i.isUndefined(e) || i.isUndefined(e.animation_data) || !i.isArray(e.obtained_info))
                return void console.error("Invalid gacha result data. Both animation_data and obtained_info are required.");
            this._actions = {},
            this._animationInfo = e.animation_data,
            this._obtainedArray = e.obtained_info;
            var o = this._animationInfo.direction_type;
            if (!i.isUndefined(o)) {
                var r = {
                    rare: "a",
                    s_rare: "b",
                    ss_rare: "c"
                };
                this._resSuffix = r[o]
            }
            i.isUndefined(this._resSuffix) && (console.warn("Invalid gacha result data. animation_data.direction_type is wrong. " + o),
            this._resSuffix = "a"),
            this._cachedUrls = [],
            this._setupDefers = [],
            this._loadTasks = [],
            this._hasCharacterResult = !1,
            i.each(this._obtainedArray, function(e, t) {
                this._loadTasks[t] = a.defer();
                var n = e.weapon_info;
                i.isUndefined(n) || i.isUndefined(n.character_joined_info) || (this._hasCharacterResult = !0)
            }, this);
            var c = t.createInstance("soundPlayer");
            c.init(t.createInstance("playerGameConfig"));
            var u = n.director.getRunningScene();
            u.removeAllChildrenWithCleanup(),
            i.each(i.range(7), function(e) {
                var t = i.padZero(e, 2);
                this._prepareStepNode(e);
                var n = this["_setupStep" + t];
                i.isUndefined(n) ? this._setupDefers.push(a.resolve()) : this._setupDefers.push(n.apply(this, [this._getStepRootNode(e)]))
            }, this),
            this._playStep00()
        },
        _shouldShow1By1: function() {
            return 1 === this._obtainedArray.length || this._animationInfo.one_by_one
        },
        _getStepResourcePath: function(e) {
            var n = t.pc.scene.roles.ResourcePath[e]
              , i = this._shouldShow1By1() ? "0" : "1";
            return n.replace(/\{suffix\}/g, this._resSuffix).replace(/\{multi\}/g, i)
        },
        _getStepRootNode: function(e) {
            return this._actions ? this._actions[e].node : {
                seekWidgetByName: function() {
                    return null
                },
                seekWidgetByPath: function() {
                    return null
                }
            }
        },
        _preLoadResultImages: function() {
            var e = 1e3
              , t = this._shouldShow1By1() ? 250 : 0;
            i.each(this._obtainedArray, function(n, i) {
                var s = e + t * i;
                a.delay(s).then(function() {
                    this._obtainedArray && this._loadImgForObtained(i)
                }
                .bind(this))
            }, this)
        },
        _prepareStepNode: function(e) {
            var t = this._getStepResourcePath(e);
            console.debug("play step " + e + " -> res=" + t);
            var i = n.director.getRunningScene()
              , a = ccs.load($dynamicRes(t))
              , s = a.action
              , o = a.node
              , r = new n.Node;
            o.setVisible(!0),
            r.setVisible(!1),
            r.addChild(o),
            i.addChild(r),
            o.runAction(s),
            s.gotoFrameAndPlay(0, s.getDuration(), !1),
            a.node = r,
            this._actions[e] = a
        },
        _calcSpendMillisec: function(e, t) {
            var n = 60;
            t = t || 0;
            var i = Math.floor(e.getDuration() * e.getTimeSpeed() * 1e3 / n) + t;
            return i
        },
        _resetStep: function(e) {
            var t = this._actions[e];
            if (i.isUndefined(t))
                return console.error("Resource not loaded for step " + e + " animation. Please call _prepareStepNode(n);"),
                null ;
            var a = (n.director.getRunningScene(),
            t.action);
            t.node;
            return a.gotoFrameAndPause(0),
            a
        },
        _playStep: function(e, n, s) {
            if (!(this._checkPointStep > e)) {
                console.debug("animate step " + e);
                var o = this._resetStep(e);
                if (null !== o)
                    return this._soundEvent && (this._soundEvent.unregisterEvent(),
                    delete this._soundEvent),
                    i.each(i.range(7), function(t) {
                        this._actions[t].node.setVisible(t === e)
                    }, this),
                    a.delay(1).then(function() {
                        var i = t.createInstance("AnimationEventHandlerCcs_2_0").init(o)
                          , r = t.createInstance("Sound2Event", [i]);
                        this._soundEvent = r,
                        o.gotoFrameAndPlay(0, o.getDuration(), n),
                        a.delay(this._calcSpendMillisec(o)).then(function() {
                            if (!(this._checkPointStep > e)) {
                                var t = {
                                    getEvent: function() {
                                        return "animation_e"
                                    }
                                };
                                s && s.apply(this, [t])
                            }
                        }
                        .bind(this))
                    }
                    .bind(this)),
                    !0
            }
        },
        _playStepAndWait: function(e, t) {
            if (this._checkPointStep > e)
                return a.reject(!1);
            t = t || "animation_e";
            var n = a.defer()
              , i = function(e) {
                return console.debug((new Date).getMilliseconds(), e, e.getEvent()),
                e.getEvent() === t ? (n.resolve(),
                !0) : !1
            };
            return this._playStep(e, !1, i),
            n.promise
        },
        _defaultErrorHandler: function(e) {
            console.warn("catch!", e.stack),
            e && !n.director.getRunningScene().disposed ? console.error(e) : console.debug("abort")
        },
        _playStepAndEnableTouchEvent: function(e, t) {
            this._playStepAndWait(e).then(function() {
                this._setTouchCallback(e, t)
            }
            .bind(this)).fail(this._defaultErrorHandler)
        },
        _setupStep00: function(e) {
            var t = a.defer();
            return console.log("step00"),
            this._preLoadResultImages(),
            t.resolve(),
            t.promise
        },
        _setupStep01: function(e) {
            var t = a.defer();
            console.log("step01");
            var n = this._animationInfo.direction_type;
            return this.__loadDoorTextures(n).then(function() {
                this._setTouchCallback(0, function() {
                    this._stopStep00(),
                    this._playStep01()
                }),
                t.resolve()
            }
            .bind(this)),
            t.promise
        },
        _setupStep02: function(e) {
            var t = a.defer();
            return console.log("step02"),
            t.resolve(),
            t.promise
        },
        _setupStep03: function(e) {
            var t = a.defer();
            return console.log("step03"),
            t.resolve(),
            t.promise
        },
        _setupStep04: function(e) {
            var t = a.defer();
            return console.log("step04"),
            a.delay(500).then(function() {
                return this._checkPointStep >= 4 ? void t.resolve() : void this.__loadRarityLabelTextures().then(function() {
                    t.resolve()
                }
                .bind(this)).fail(function(e) {
                    console.error(e),
                    t.reject(e.toString())
                })
            }
            .bind(this)),
            t.promise
        },
        _setupStep05: function(e) {
            var t = a.defer();
            return console.log("step05"),
            t.resolve(),
            t.promise
        },
        _setupStep06: function(e) {
            var t = a.defer();
            return console.log("step06"),
            t.resolve(),
            t.promise
        },
        __waitForSetups: function() {
            if (this._checkPointStep >= 0)
                return a.reject(!1);
            var e;
            return 0 == arguments.length ? e = this._setupDefers : (e = [],
            i.each(arguments, function(t) {
                e.push(this._setupDefers[t])
            }, this)),
            console.debug("wait setup:" + e),
            a.all(e).fail(function(e) {
                console.error(e.stack)
            })
        },
        __waitForImageLoaded: function(e) {
            var t = [];
            return (i.isUndefined(e) || e > this._loadTasks.length) && (e = this._loadTasks.length),
            i.each(i.range(e), function(e) {
                t.push(this._loadTasks[e].promise)
            }, this),
            console.debug("wait image load:" + t),
            a.all(t).fail(function(e) {
                console.error(e.stack)
            })
        },
        __backgroundType2GachaID: function(e) {
            var t = {
                normal: 3,
                premium: 1,
                premium_ticket: 4,
                stone: 2,
                event: 5
            }
              , n = t[e] || parseInt("1" + e);
            return n
        },
        _loadImgForObtained: function(e) {
            if (console.debug("_loadImgForObtained #" + e),
            i.isArray(this._obtainedArray) && e < this._obtainedArray.length) {
                var s = this._obtainedArray[e]
                  , o = null
                  , r = null ;
                if (i.isUndefined(s.weapon_info))
                    i.isUndefined(s.summon_info) ? i.isUndefined(s.item_info) || (o = t.Img("gachaget", "item", i.padZero(s.item_info.id, 4)).png) : o = t.Img("gachaget", "summon", i.padZero(s.summon_info.id, 4)).png;
                else {
                    o = t.Img("gachaget", "weapon", i.padZero(s.weapon_info.id, 4)).png;
                    var c = s.weapon_info.character_joined_info;
                    i.isUndefined(c) || (r = t.Img("gachaget", "chara", i.padZero(c.character_id, 4)).png)
                }
                var u = function() {
                    this._loadTasks && this._loadTasks[e].resolve()
                }
                .bind(this);
                if (null !== o) {
                    this._cachedUrls[e] = [o];
                    var _ = a.defer();
                    if (n.loader.loadImg(o, function(e, t) {
                        null !== e ? _.resolve() : _.resolve()
                    }),
                    null !== r) {
                        this._cachedUrls[e].push(r);
                        var l = a.defer();
                        n.loader.loadImg(r, function(e, t) {
                            null !== e ? l.resolve() : l.resolve()
                        }),
                        a.all([_, l]).then(u)
                    } else
                        _.promise.then(u)
                }
                return !0
            }
            return i.isArray(this._obtainedArray) ? console.error("Invalid index for obtainedArray :" + e + ", should be between 0 and " + this._obtainedArray.length) : this._checkPointStep < 4 && console.error("The gacha result obtaindArray is missing."),
            !1
        },
        __loadDoorTextures: function(e) {
            var t = a.defer()
              , i = this.__getBgImageURLByDirType(e);
            return n.loader.loadImg(i, function(e, n) {
                e ? t.reject(i) : t.resolve(i)
            }
            .bind(this)),
            t.promise.then(function(e) {
                this.__setBgTexture(0, e),
                this.__setBgTexture(1, e)
            }
            .bind(this), function(e) {
                console.warn("[bgImage] load failed: " + e)
            })
        },
        __setBgTexture: function(e, t) {
            var n = this._getStepRootNode(e);
            n && i.each([0, 1, 2], function(i) {
                var a = n.seekWidgetByName("gachadoor_gacha_" + e + "_" + i);
                a && a.setTexture(t)
            })
        },
        __getBgImageURLByDirType: function(e) {
            var n = t.pc.scene.roles.GachaDoorColor;
            return t.Img("gachadoor", n[e] || "white").png
        },
        __loadRarityLabelTextures: function(e) {
            var t = {};
            i.each(this._obtainedArray, function(e) {
                var n = e.weapon_info || e.summon_info;
                i.isUndefined(n) || i.isUndefined(n.rare) ? i.isUndefined(e.item_info) || (t.item = !0) : (this._shouldShow1By1() || !i.isUndefined(n.character_joined_info)) && (t[n.rare] = !0)
            }, this),
            t = i.keys(t),
            console.debug("Rarities", t);
            var s = [];
            return this._rarityLabel = {},
            i.each(["R", "SR", "SSR", "N", "item"], function(e, i) {
                if (t.indexOf(e) >= 0) {
                    var o = a.defer();
                    s.push(o.promise);
                    var r = "res/ga_ani/ga_ani_text0_" + i + ".png";
                    n.loader.loadImg(r, function(t, n) {
                        console.debug("Rarity label image loaded.", e, r),
                        t ? (console.error(t),
                        o.reject(t.toString())) : (this._rarityLabel[e] = r,
                        o.resolve())
                    }
                    .bind(this))
                }
            }, this),
            a.all(s)
        },
        _setTouchCallback: function(e, n) {
            var i = {};
            i["TOUCH_ENDED btn_clear_" + e + "_0"] = n,
            t.setTouchEventHandlers(this._getStepRootNode(e), i, this),
            console.debug("Touch callback attached: step=" + e)
        },
        _resetTouchCallback: function(e) {
            var t = this._getStepRootNode(e)
              , n = t.seekWidgetByName("btn_clear_" + e + "_0");
            null !== n && n.setTouchEnabled(!1)
        },
        _setSkipButtonEvent: function(e) {
            var n = {};
            n["TOUCH_ENDED btn_skip"] = this._onSkipButtonPressed,
            t.setTouchEventHandlers(this._getStepRootNode(e), n, this),
            console.debug("Skip button stand by on step=" + e)
        },
        _onSkipButtonPressed: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_skip");
            null !== t && t.setEnabled(!1),
            this._shouldShow1By1() || this._checkPointStep >= 4 ? this._playStep05OrFinish() : this._playStep04()
        },
        _playStep00: function() {
            console.log("play step00"),
            this._setSkipButtonEvent(0);
            var e = 4;
            a.all([this.__waitForSetups(1, 2), this.__waitForImageLoaded(e)]).then(function() {
                this._playStep(0, !0)
            }
            .bind(this))
        },
        _stopStep00: function() {
            console.log("stop step00"),
            this._resetStep(0)
        },
        _playStep01: function() {
            console.log("play step01"),
            this._setSkipButtonEvent(1),
            this._playStepAndWait(1).then(function() {
                console.debug("play step01 complete"),
                this.__waitForSetups(2, 3).then(function() {
                    this._shouldShow1By1() ? this._playStep02() : this.__waitForImageLoaded().then(function() {
                        this._playStep02()
                    }
                    .bind(this))
                }
                .bind(this))
            }
            .bind(this)).fail(this._defaultErrorHandler)
        },
        _playStep02: function() {
            console.log("play step02"),
            this._setSkipButtonEvent(2);
            var e = this._getStepRootNode(2)
              , t = e.seekWidgetByName("ga_ani_ball_2_0");
            this.__playStep02Core(t, 0)
        },
        __playStep02Core: function(e, t) {
            console.debug("play step02 - " + t);
            var n = this._obtainedArray[t]
              , a = function() {
                i.isNull(this._obtainedArray) || (t++,
                this._obtainedArray.length > t ? this.__playStep02Core(e, t) : this._playStep03())
            }
            .bind(this);
            this._setBallTextureByRarity(e, n),
            this._playStepAndWait(2).then(function() {
                a()
            }
            .bind(this)).fail(this._defaultErrorHandler)
        },
        _playStep03: function() {
            console.log("play step03"),
            this._setSkipButtonEvent(3),
            this._playStepAndWait(3).then(function() {
                console.debug("play step03 complete"),
                this.__waitForSetups(4).then(function() {
                    console.log("next step!"),
                    this._playStep04()
                }
                .bind(this))
            }
            .bind(this)).fail(this._defaultErrorHandler)
        },
        _playStep04: function() {
            console.log("play step04"),
            this._setSkipButtonEvent(4);
            var e = this._getStepRootNode(4);
            this._shouldShow1By1() ? this.__playStep04OneByOne(e, 0) : this.__playStep04AllInOne(e)
        },
        __shouldSkipStep04: function(e) {
            return this._skipSt4ForCharReleaseWeapons && !i.isUndefined(e.weapon_info) && !i.isUndefined(e.weapon_info.character_joined_info)
        },
        __playStep04OneByOne: function(e, t) {
            console.debug("play step02 - " + t);
            var n = e.seekWidgetByName("ga_ani_ball_4_0")
              , i = this._obtainedArray[t]
              , a = function() {
                t++,
                this._obtainedArray.length > t ? this.__playStep04OneByOne(e, t) : this._playStep05OrFinish()
            }
            .bind(this);
            this.__shouldSkipStep04(i) ? a() : (this._setBallTextureByRarity(n, i),
            this._setGachaResultImageAndLabel(e, "_4_0", t),
            this._setRarityLabelsByRarity(e, 4, i),
            this._playStepAndEnableTouchEvent(4, a))
        },
        __playStep04AllInOne: function(e) {
            this._checkPointStep = 4;
            var t = 0;
            i.each(i.range(10), function(n) {
                var i = "_4_" + n
                  , a = e.seekWidgetByName("ga_ani_ball" + i);
                if (t >= this._obtainedArray.length)
                    a.setOpacity(0);
                else {
                    for (var s; ; ) {
                        if (s = this._obtainedArray[t],
                        !this.__shouldSkipStep04(s))
                            break;
                        if (++t >= this._obtainedArray.length) {
                            s = null ;
                            break
                        }
                    }
                    null === s ? a.setOpacity(0) : (a.setOpacity(255),
                    this._setBallTextureByRarity(a, s),
                    this._setGachaResultImageAndLabel(e, i, t++))
                }
            }, this),
            this._playStepAndEnableTouchEvent(4, function() {
                this._playStep05OrFinish()
            }
            .bind(this))
        },
        _playStep05OrFinish: function() {
            this._checkPointStep = 5,
            this._hasCharacterResult ? this.__waitForImageLoaded().then(function() {
                this._playStep05()
            }
            .bind(this)) : this._disposeAndLeave()
        },
        _playStep05: function() {
            console.log("play step05"),
            this._playStepAndWait(5).then(function() {
                this._playStep06()
            }
            .bind(this)).fail(this._defaultErrorHandler)
        },
        _playStep06: function() {
            console.log("play step06");
            var e = this._getStepRootNode(6)
              , t = e.seekWidgetByName("ga_ani_ball_6_0");
            this.__playStep06Core(e, t, 0);
        },
        __playStep06Core: function(e, t, n) {
            console.debug("play step06 - " + n),
            this._resetTouchCallback(6);
            var a = this._obtainedArray[n]
              , s = function() {
                n++,
                this._resetTouchCallback(6),
                this._obtainedArray.length > n ? this.__playStep06Core(e, t, n) : this._disposeAndLeave()
            }
            .bind(this);
            i.isUndefined(a.weapon_info) || i.isUndefined(a.weapon_info.character_joined_info) ? s() : (this._setBallTextureByRarity(t, a),
            this._setGachaResultImageAndLabel(e, "", n),
            this._setRarityLabelsByRarity(e, 6, a),
            this._playStepAndEnableTouchEvent(6, s))
        },
        _setGachaResultImageAndLabel: function(e, t, n) {
            var a = this._obtainedArray[n]
              , s = a.weapon_info || a.summon_info || a.item_info
              , o = this._cachedUrls[n]
              , r = e.seekWidgetByName("gachaget" + t);
            r.setTexture(o[0]),
            r.setVisible(!0);
            var c = e.seekWidgetByName("name_label");
            if (null !== c) {
                var u = s.name;
                s.bonus > 0 && (u += " +" + s.bonus),
                c.setString(u),
                c.setVisible(!0)
            }
            if (!i.isUndefined(s.character_joined_info) && "" === t) {
                var _ = e.seekWidgetByName("gachaget_chara_6_0");
                _.setTexture(o[1]),
                _.setVisible(!0);
                var l = e.seekWidgetByName("chara_get_label");
                l.setString(s.character_joined_info.character_name + " が\n仲間になりました。")
            }
        },
        _setBallTextureByRarity: function(e, t) {
            var n = t.weapon_info || t.summon_info || {
                rare: "N"
            }
              , i = "gacha/res/ga_ani/ga_ani_ball_" + n.rare.toLowerCase() + ".png";
            console.debug("try loading image " + i),
            e.initWithSpriteFrameName(i)
        },
        _setRarityLabelsByRarity: function(e, t, n) {
            var a = n.weapon_info || n.summon_info || {
                rare: "item"
            }
              , s = this._rarityLabel[a.rare];
            i.each(i.range(3), function(n) {
                var i = e.seekWidgetByName("ga_ani_text_" + t + "_" + n);
                i.setTexture(s)
            }, this)
        },
        _disposeAndLeave: function() {
            this._animationInfo = null ,
            this._obtainedArray = null ,
            this._cachedUrls = null ,
            this._setupDefers = null ,
            this._loadTasks = null ,
            this._actions = null ;
            var e = n.director.getRunningScene();
            e.removeAllChildrenWithCleanup(),
            this._navigateToResultScene()
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc;
    e._;
    t.EmptyDelegate = n.Class.extend({
        ctor: function() {},
        initializeUI: function() {},
        getEvents: function() {
            return {}
        },
        getMouseEvents: function() {
            return {}
        },
        onExit: function() {}
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.roles = t.pc.gacha.roles || {},
    t.pc.gacha.roles.Routing = {
        _verifyRouterParams000: function(e) {},
        _navigate000ToGacha: function(e, i) {
            if (n.isUndefined(i) || n.isUndefined(i.navigate_page))
                return void this._consoleErrorRoutingAbort("record.navigate_page");
            if (n.isUndefined(i.banner_id))
                return void this._consoleErrorRoutingAbort("record.banner_id");
            var a = i.navigate_page
              , s = a.replace(/^gacha\//g, "")
              , o = {};
            o[s] = {
                id: i.banner_id,
                isContinueGacha: !1,
                event_id: i.event_id
            },
            t.createInstance("router").navigate(a, o)
        },
        _navigate001_004ToDetail: function(e, i) {
            return n.isUndefined(i) || n.isUndefined(i.type) ? void this._consoleErrorRoutingAbort("record.type") : void ("character" === i.type ? t.createInstance("router").navigate("gacha/ga_008", {
                ga_008: {
                    id: i.character_id
                }
            }) : "weapon" === i.type ? t.createInstance("router").navigate("gacha/ga_007", {
                ga_007: {
                    id: i.weapon_id
                }
            }) : "summon" === i.type ? t.createInstance("router").navigate("gacha/ga_006", {
                ga_006: {
                    id: i.summon_id
                }
            }) : "gacha_detail" === i.type && t.createInstance("router").navigate("gacha/ga_013", {
                ga_013: {
                    id: i.slider_id
                }
            }))
        },
        _navigate001_004To005: function() {
            return n.isUndefined(this._category) ? void this._consoleErrorRoutingAbort("category") : void t.createInstance("router").navigate("gacha/ga_005", {
                ga_005: {
                    category: this._category
                }
            })
        },
        _navigate001_004To009: function() {
            return n.isUndefined(this._category) ? void this._consoleErrorRoutingAbort("category") : void t.createInstance("router").navigate("gacha/ga_009", {
                ga_009: {
                    category: this._category
                }
            })
        },
        _navigate001_004ToGaAni: function(e, n, i, a) {
            var s = {
                100: "legend",
                "002": "stone",
                "003": "ticket",
                "004": "normal"
            }
              , o = s[i.slice(-3)];
            t.createInstance("router").navigate("gacha/ga_ani", {
                ga_ani: {
                    data: e,
                    gacha_id: n,
                    navigate: i,
                    present: !a,
                    category: o
                },
                payment_id: null
            })
        },
        _verifyRouterParams001: function(e) {
            n.isUndefined(e.routerParams.ga_001) && (e.routerParams.ga_001 = {},
            e.routerParams.ga_001.id = 1,
            e.routerParams.ga_001.isContinueGacha = !1)
        },
        _verifyRouterParams002: function(e) {
            n.isUndefined(e.routerParams.ga_002) && (e.routerParams.ga_002 = {},
            e.routerParams.ga_002.id = 1,
            e.routerParams.ga_002.isContinueGacha = !1,
            this._consoleErrorRouterParams("routerParams.ga_002, .id, .isContinueGacha"))
        },
        _verifyRouterParams003: function(e) {
            n.isUndefined(e.routerParams.ga_003) && (e.routerParams.ga_003 = {},
            e.routerParams.ga_003.id = 1,
            e.routerParams.ga_003.isContinueGacha = !1,
            this._consoleErrorRouterParams("routerParams.ga_003, .id, .isContinueGacha"))
        },
        _verifyRouterParams004: function(e) {
            n.isUndefined(e.routerParams.ga_004) && (console.debug("[!! NOTICE !!] パネルミッションからの遷移の場合、routerParamsが undefined の状態で遷移してきます"),
            e.routerParams.ga_004 = {},
            e.routerParams.ga_004.id = 3,
            e.routerParams.ga_004.isContinueGacha = !1)
        },
        _verifyRouterParams100: function(e) {
            n.isUndefined(e.routerParams.ga_100) && (e.routerParams.ga_100 = {},
            e.routerParams.ga_100.id = 1,
            e.routerParams.ga_100.event_id = 1,
            e.routerParams.ga_100.isContinueGacha = !1,
            this._consoleErrorRouterParams("routerParams.ga_100, .id, .isContinueGacha"))
        },
        _navigate100To005: function() {
            return n.isUndefined(this._category) ? void this._consoleErrorRoutingAbort("category") : n.isUndefined(this._eventId) ? void this._consoleErrorRoutingAbort("eventId") : void t.createInstance("router").navigate("gacha/ga_005", {
                ga_005: {
                    event_id: this._eventId,
                    category: this._category
                }
            })
        },
        _navigate100To009: function() {
            return n.isUndefined(this._category) ? void this._consoleErrorRoutingAbort("category") : n.isUndefined(this._eventId) ? void this._consoleErrorRoutingAbort("eventId") : void t.createInstance("router").navigate("gacha/ga_009", {
                ga_009: {
                    event_id: this._eventId,
                    category: this._category
                }
            })
        },
        _navigate100ToGaAni: function(e, n, i, a, s) {
            var o = s || "event";
            t.createInstance("router").navigate("gacha/ga_ani", {
                ga_ani: {
                    data: e,
                    gacha_id: n,
                    navigate: i,
                    present: !0,
                    event_id: a,
                    category: o
                },
                payment_id: null
            })
        },
        _verifyRouterParams005: function(e) {
            n.isUndefined(e.routerParams.ga_005) && (e.routerParams.ga_005 = {},
            e.routerParams.ga_005.category = "stone",
            this._consoleErrorRouterParams("routerParams.ga_005, .category"))
        },
        _navigate005To007: function(e, i) {
            if (n.isUndefined(e.routerParams.ga_005))
                return void this._consoleErrorRoutingAbort("routerParams.ga_005");
            if (n.isUndefined(i) || n.isUndefined(i.id))
                return void this._consoleErrorRoutingAbort("record.id");
            e.routerParams.ga_005;
            t.createInstance("router").navigate("gacha/ga_007", {
                ga_007: {
                    id: i.id
                }
            })
        },
        _navigate005To008: function(e, i) {
            return n.isUndefined(e.routerParams.ga_005) ? void this._consoleErrorRoutingAbort("routerParams.ga_005") : n.isUndefined(i) || n.isUndefined(i.id) ? void this._consoleErrorRoutingAbort("record.id") : n.isUndefined(i.release_weapon_id) ? void this._consoleErrorRoutingAbort("record.release_weapon_id") : void t.createInstance("router").navigate("gacha/ga_008", {
                ga_008: {
                    id: i.id,
                    release_weapon_id: i.release_weapon_id
                }
            })
        },
        _navigate005To014: function(e) {
            if (n.isUndefined(e.routerParams.ga_005))
                return void this._consoleErrorRoutingAbort("routerParams.ga_005");
            if (n.isUndefined(e.routerParams.ga_005.category))
                return void this._consoleErrorRoutingAbort("routerParams.ga_005.category");
            var i = e.routerParams.ga_005;
            t.createInstance("router").navigate("gacha/ga_014", {
                ga_014: {
                    from: "ga_005",
                    category: i.category
                }
            })
        },
        _verifyRouterParams006: function(e) {
            n.isUndefined(e.routerParams.ga_006) && (e.routerParams.ga_006 = {},
            e.routerParams.ga_006.id = 1,
            this._consoleErrorRouterParams("routerParams.ga_006, .id"))
        },
        _verifyRouterParams007: function(e) {
            n.isUndefined(e.routerParams.ga_007) && (e.routerParams.ga_007 = {},
            e.routerParams.ga_007.id = 1,
            e.routerParams.ga_007.from = "ga_005",
            e.routerParams.ga_007.category = "stone",
            this._consoleErrorRouterParams("routerParams.ga_007, .id .from .category"))
        },
        _verifyRouterParams008: function(e) {
            n.isUndefined(e.routerParams.ga_008) && (e.routerParams.ga_008 = {},
            e.routerParams.ga_008.id = 1,
            this._consoleErrorRouterParams("routerParams.ga_008, .id"))
        },
        _navigate008To007: function(e) {
            if (n.isUndefined(e.routerParams.ga_008) && n.isUndefined(this._character))
                return void this._consoleErrorRoutingAbort("routerParams.ga_008");
            if (n.isUndefined(e.routerParams.ga_008.release_weapon_id) && n.isUndefined(this._character.release_weapon_id))
                return void this._consoleErrorRoutingAbort("routerParams.ga_008.release_weapon_id");
            var i = e.routerParams.ga_008.release_weapon_id || this._character.release_weapon_id;
            t.createInstance("router").navigate("gacha/ga_007", {
                ga_007: {
                    id: i
                }
            })
        },
        _verifyRouterParams009: function(e) {
            n.isUndefined(e.routerParams.ga_009) && (e.routerParams.ga_009 = {},
            e.routerParams.ga_009.category = "stone",
            this._consoleErrorRouterParams("routerParams.ga_009, .category"))
        },
        _navigateContinueGacha010: function(e, i) {
            if (n.isUndefined(e.routerParams.ga_010))
                return void this._consoleErrorRoutingAbort("routerParams.ga_010");
            if (n.isUndefined(e.routerParams.ga_010.navigate))
                return void this._consoleErrorRoutingAbort("routerParams.ga_010.navigate");
            var a = e.routerParams.ga_010;
            t.createInstance("router").navigate(a.navigate)
        },
        _navigate010To011: function(e, n) {
            t.createInstance("router").navigate("gacha/ga_011", {
                ga_011: {
                    id: e.id,
                    bonus: e.bonus,
                    navigate: "gacha/ga_010",
                    getItemNoArray: [],
                    getItemNameArray: [],
                    params: n
                }
            })
        },
        _navigate010To012: function(e, n) {
            console.log("summonid=" + e.id),
            t.createInstance("router").navigate("gacha/ga_012", {
                ga_012: {
                    id: e.id,
                    bonus: e.bonus,
                    navigate: "gacha/ga_010",
                    params: n
                }
            })
        },
        _verifyRouterParams011: function(e) {
            n.isUndefined(e.routerParams.ga_011) && (e.routerParams.ga_011 = {},
            e.routerParams.ga_011.id = 1,
            e.routerParams.ga_011.from = "",
            e.routerParams.ga_011.navigate = "",
            e.routerParams.ga_011.getItemNoArray = [],
            e.routerParams.ga_011.getItemNameArray = [],
            this._consoleErrorRouterParams("routerParams.ga_011, .id, .from, .navigate, .getItemNoArray, .getItemNameArray"))
        },
        _verifyRouterParams012: function(e) {
            n.isUndefined(e.routerParams.ga_012) && (e.routerParams.ga_012 = {},
            e.routerParams.ga_012.id = 1,
            e.routerParams.ga_012.from = "",
            e.routerParams.ga_012.navigate = "",
            this._consoleErrorRouterParams("routerParams.ga_012, .id, .from, .navigate"))
        },
        _navigate010_012To001: function(e) {
            throw new Error("invalid routing")
        },
        _navigate010_012To100: function(e) {
            t.createInstance("router").navigate("gacha/ga_100")
        },
        _verifyRouterParams013: function(e) {
            n.isUndefined(e.routerParams.ga_013) && (e.routerParams.ga_013 = {},
            e.routerParams.ga_013.id = 3,
            this._consoleErrorRouterParams("routerParams.ga_013, .id"))
        },
        _navigate013To006: function(e, i) {
            return n.isUndefined(e.routerParams.ga_013) ? void this._consoleErrorRoutingAbort("routerParams.ga_013") : void t.createInstance("router").navigate("gacha/ga_006", {
                ga_006: {
                    id: i.id,
                    from: "ga_013",
                    sliderid: e.routerParams.ga_013.id
                }
            })
        },
        _navigate013To007: function(e, i) {
            return n.isUndefined(e.routerParams.ga_013) ? void this._consoleErrorRoutingAbort("routerParams.ga_013") : void t.createInstance("router").navigate("gacha/ga_007", {
                ga_007: {
                    id: i.weapon.id,
                    from: "ga_013",
                    sliderid: e.routerParams.ga_013.id
                }
            })
        },
        _navigate013To008: function(e, i) {
            return n.isUndefined(e.routerParams.ga_013) ? void this._consoleErrorRoutingAbort("routerParams.ga_013") : void t.createInstance("router").navigate("gacha/ga_008", {
                ga_008: {
                    id: i.character.id,
                    from: "ga_013",
                    sliderid: e.routerParams.ga_013.id
                }
            })
        },
        _navigate014To006: function(e, i) {
            return n.isUndefined(e.routerParams.ga_014) ? void this._consoleErrorRoutingAbort("routerParams.ga_014") : void t.createInstance("router").navigate("gacha/ga_006", {
                ga_006: {
                    id: i,
                    from: "ga_014",
                    sliderid: e.routerParams.ga_014.id
                }
            })
        },
        _navigate014To008: function(e, i) {
            return n.isUndefined(e.routerParams.ga_014) ? void this._consoleErrorRoutingAbort("routerParams.ga_014") : void t.createInstance("router").navigate("gacha/ga_008", {
                ga_008: {
                    id: i,
                    from: "ga_014",
                    sliderid: e.routerParams.ga_014.id
                }
            })
        },
        _verifyRouterParamsAni: function(e) {
            n.isUndefined(e.routerParams.ga_ani) && (e.routerParams.ga_ani = {},
            e.routerParams.ga_ani.navigate = "",
            e.routerParams.ga_ani.data = {},
            this._consoleErrorRouterParams("routerParams.ga_ani, .navigate, .data"))
        },
        _navigateGaAniToResult: function(e, i, a, s, o, r) {
            if (1 === e.obtained_info.length)
                if (n.isUndefined(e.obtained_info[0].weapon_info))
                    n.isUndefined(e.obtained_info[0].summon_info) || t.createInstance("router").navigate("gacha/ga_012", {
                        ga_012: {
                            results: e.obtained_info,
                            id: e.obtained_info[0].summon_info.id,
                            navigate: i,
                            params: {
                                gacha_id: s,
                                event_id: o,
                                present: a,
                                category: r
                            }
                        }
                    });
                else {
                    var c = []
                      , u = []
                      , _ = e.obtained_info[0].weapon_info;
                    n.isUndefined(_.item_gained_info) || "SSR" == _.rare && (_.is_new || (c.push(_.item_gained_info.item_id),
                    u.push(_.item_gained_info.item_name))),
                    t.createInstance("router").navigate("gacha/ga_011", {
                        ga_011: {
                            results: e.obtained_info,
                            id: e.obtained_info[0].weapon_info.id,
                            navigate: i,
                            getItemNoArray: c,
                            getItemNameArray: u,
                            params: {
                                gacha_id: s,
                                event_id: o,
                                present: a,
                                category: r
                            }
                        }
                    })
                }
            else {
                for (var l = e.obtained_info.length, c = [], u = [], d = 0; l > d; d++)
                    if (!n.isUndefined(e.obtained_info[d].weapon_info)) {
                        var _ = e.obtained_info[d].weapon_info;
                        n.isUndefined(_.item_gained_info) || (c.push(_.item_gained_info.item_id),
                        u.push(_.item_gained_info.item_name))
                    }
                t.createInstance("router").navigate("gacha/ga_010", {
                    ga_010: {
                        results: e.obtained_info,
                        navigate: i,
                        type: l,
                        params: {
                            gacha_id: s,
                            event_id: o,
                            present: a,
                            category: r
                        },
                        getItemNoArray: c,
                        getItemNameArray: u
                    }
                })
            }
        },
        _navigateGaAniToSpecialResult: function(e, n) {
            var i = n.params || {}
              , a = n.tempParams || {};
            a.results = e.obtained_info,
            t.createInstance("router").navigate(n.navigate, i, a)
        },
        _navigate011_012ToPrs001: function() {
            t.createInstance("router").navigate("present/prs_001")
        },
        _navigate011_012To000: function() {
            t.createInstance("router").navigate("gacha/ga_000")
        },
        _navigate011_012To010: function() {
            t.createInstance("router").navigate("gacha/ga_010")
        }
    },
    n.assign(t.pc.gacha.roles.Routing, t.pc.roles.RoutingCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGaCheckUseStoneTicket = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-ga_check_stone-ticket",
            title: "使用確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function(e) {
                    this.dismiss()
                },
                blueBtn: function(e) {
                    (this._okBtnCallback || function() {}
                    )(),
                    this.dismiss()
                }
            }
        },
        onPopupOpened: function(e, t) {
            var n = t.gachaId
              , i = t.beforeNum
              , a = t.afterNum
              , s = t.type;
            e._okBtnCallback = t.okBtnCallback,
            this._setContentForTicketPopup(e, n, s, i, a)
        },
        _setContentForTicketPopup: function(e, i, a, s, o) {
            e.loadTextures({
                stone_or_ticket_img: n.Img("corecard", "gacha", t.padZero(i, 4)).jpg
            }),
            e.setHtmlStrings({
                confirm_labelimg: this._ticketCountConfirmHtmlString(a, s, o)
            }, n.GameConfig.POPUP_CSS)
        },
        _ticketCountConfirmHtmlString: function(e, t, i) {
            var a = {
                stone: {
                    label: n.w("stone"),
                    unit: ""
                },
                ticket: {
                    label: n.w("ticket"),
                    unit: "枚"
                }
            }[e]
              , s = "<span class='white'>" + a.label + "でガチャを引きます。</span><br /><span class='orange'>所持" + a.unit + "数：</span><span class='white'>" + t + "&rarr;</span><span class='red'>" + i + "</span><br /><span class='white'>よろしいですか？</span>";
            return s
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryGaNeedItem = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-ga_need_item",
            title: "アイテムが足りません",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss()
                }
            }
        },
        onPopupOpened: function(e, i) {
            e.loadTextures({
                corecard_gacha: n.Img("corecard", "gacha", t.padZero(i.gachaId, 4)).jpg
            }),
            e.setHtmlStrings({
                confirm_labelimg: this._makeConfirmLabelString(i.type, i.num)
            }, n.GameConfig.POPUP_CSS)
        },
        _makeConfirmLabelString: function(e, t) {
            var i = {
                stone: n.w("stone"),
                ticket: n.w("ticket")
            }[e]
              , a = '<span class="white">ガチャを引くのに必要な' + i + 'が足りません。</span><br /><span class="orange">【所持数】:</span><span class="red">' + t + "</span>";
            return a
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = (e._,
    e.kh);
    t.PopupFactoryGaNeedSpace = t.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-ga_need_space",
            title: "ガチャを引けません",
            buttonLabels: {
                blackBtn: "閉じる"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        },
        onPopupOpened: function(e, n) {
            t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_enh": this._navigateToEnh001.bind(this),
                "TOUCH_ENDED btn_sale": this._navigateToLi007.bind(this)
            })
        },
        _navigateToEnh001: function() {
            t.createInstance("router").navigate("enh_evo/enh_001")
        },
        _navigateToLi007: function() {
            t.createInstance("router").navigate("list/li_007")
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = (e._,
    e.kh);
    t.PopupFactoryGaTips = t.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-ga_tips",
            title: "注意事項",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss()
                }
            }
        },
        onPopupOpened: function(e, t) {
            var n = e.seekWidgetByName("ga_tips_label");
            n.fontSize = 22,
            0 === n.y && (n.y = -20),
            n.height = 590,
            e.seekWidgetByName("popup_base").height = 770,
            e.seekWidgetByName("title_label").y = 740,
            e.seekWidgetByName("top_pin_node").y = 620
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.roles = t.pc.gacha.roles || {},
    t.pc.gacha.roles.GachaBannerPageListController = {
        _fillupGachaBannerList: function(e, n) {
            e.seekWidgetByName("ga_bannerlist_page_ui").removeFromParent();
            var i = t.createInstance("apiABanners").getGachaBanners().then(function(i) {
                console.log(i.body);
                var a = {
                    targetNode: "eventimg_banner",
                    touchEventFuncName: n
                };
                return this._fillupList(e, {
                    viewParent: t.PageListParams.GACHA_BANNER.viewParent,
                    subPageRes: t.PageListParams.GACHA_BANNER.subPageRes,
                    panelsPerPage: t.PageListParams.GACHA_BANNER.perPage
                }, i.body.data, i.body.max_record_count, a, this._panelAppearanceForCommon),
                i.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return i
        },
        _panelAppearanceForCommon: function(e, i, a) {
            console.log(e, i, a);
            var s = t.Img("eventimg", "banner", n.padZero(i.banner_id, 4)).png
              , o = e.seekWidgetByName("eventimg_banner");
            return null === o ? void console.debug("[ERROR] Could not find eventimg_banner") : (o.loadTextures(s, s, s),
            void e.setStrings({
                gacha_label: i.description
            }))
        }
    },
    n.assign(t.pc.gacha.roles.GachaBannerPageListController, t.pc.list.roles.PageListControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.roles = t.pc.gacha.roles || {},
    t.pc.gacha.roles.PlayGachaBase = {
        _setGachaHeaderImage: function(e, i) {
            var a = i.category_id
              , s = t.Img("gachatitle", "gacha-category", n.padZero(a, 4)).png;
            return null === e.seekWidgetByName("gachatitle_event") ? void console.debug("[ERROR] Could not find gachatitle_event.") : void e.loadTextures({
                gachatitle_event: s
            })
        },
        _setGachaHeaderDescription: function(e) {
            return n.isUndefined(this._gachaData) || n.isUndefined(this._gachaData.sliders) ? void console.debug("[ERROR] Could not read gacha data.") : null === e.seekWidgetByName("sub_title_label") ? void console.debug("[ERROR] Could not find gachatitle_event.") : void e.setStrings({
                sub_title_label: this._gachaData.description
            })
        },
        _setGachaSlider: function(e) {
            return n.isUndefined(this._gachaData) || n.isUndefined(this._gachaData.sliders) ? void console.debug("[ERROR] Could not read gacha data.") : void this._setSlider(e, "slider_panel", this._gachaData.sliders, "gacha-ga_001_2_3_4-ga_top_slider_ui", "_setGachaSliderPanel", {
                nodeName: "gachatop_slider",
                funcName: "_onTouchSliderPanel"
            }, "_slideGachaPanel", {
                interval: t.GameConfig.ANIMETION_WAIT_SETTINGS.GACHA_MAIN_SLIDER_INTERVAL
            })
        },
        _setGachaSliderPanel: function(e, i, a) {
            return null === i.seekWidgetByName("gachatop_slider") ? void console.warn("[ERROR] Could not find image node: gachatop_slider") : n.isUndefined(a.slider_id) ? void console.warn("[ERROR] Could not find slider id.") : void i.loadTextures({
                gachatop_slider: t.Img("gachatop", "slider", n.padZero(a.slider_id, 4)).jpg
            })
        },
        _slideGachaPanel: function(e, t) {
            console.log(t)
        },
        _onTouchSliderPanel: function(e, t, n) {
            this._navigate001_004ToDetail(e, n)
        }
    },
    n.assign(t.pc.gacha.roles.PlayGachaBase, t.pc.list.roles.SliderCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.gacha.roles = t.pc.gacha.roles || {},
    t.pc.gacha.roles.GachaButtonCommon = {
        _setGachaButtonImage: function(e, i, a) {
            var s = t.Img("gacha-btn1", "gacha", n.padZero(i, 4), a).png
              , o = t.Img("gacha-btn2", "gacha", n.padZero(i, 4), a).png;
            e.loadTextures(s, o, s)
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.gacha.roles = t.pc.gacha.roles || {},
    t.pc.gacha.roles.GachaContinueButton = {
        _setContinueGachaText: function(e, t, a) {
            var s = this._getCategoryGroup(t.params.gacha_id)
              , o = this._getCamelizeNavigateSceneName(t.navigate)
              , r = e.seekWidgetByPath(a);
            return null == r ? void console.error("GachaContinueButton _setContinueGachaText Undefined btnNode") : void ("Ga100" === o && null == s ? r.setTitleText(this._getGachaContinueButtonTitleText(0)) : -1 !== i.indexOf(["Ga002", "Ga003", "Ga004", "Ga100"], o) && (s ? (r.setTitleText(this._getGachaContinueButtonTitleText(s.gacha_count)),
            s.enabled || r.setColor(n.color("#808080"))) : (r.setTitleText(this._getGachaContinueButtonTitleText(t.results.length)),
            r.setColor(n.color("#808080")))))
        },
        _getGachaContinueButtonTitleText: function(e) {
            var t = e > 1 ? e + "連" : ""
              , n = "続けて" + t + "ガチャを引く";
            return n
        },
        _continueGacha: function(e, t) {
            var n = this._getCamelizeNavigateSceneName(t.navigate);
            if (n) {
                var i = this["_continueGacha" + n].bind(this) || function() {}
                ;
                i(e, t)
            }
        },
        _continueGachaGa001: function(e, n) {
            var a = n.params.event_id
              , s = n.params.gacha_id
              , o = this._getCategoryGroup(s);
            if (null == o)
                return this._navigate010_012To100(e);
            var r = {};
            r.num = 1,
            r.name = o.title || "ガチャ！",
            r.description = o.description || "ガチャ説明！",
            r.price = o.price,
            r.gachaId = o.gacha_id,
            r.eventId = a,
            t.createInstance("paymentRequest").requestGacha(r).then(function(e) {
                console.log(e),
                i.isUndefined(a) ? this._navigate001_004ToGaAni(e, o.gacha_id, "gacha/ga_100") : this._navigate100ToGaAni(e, o.gacha_id, "gacha/ga_100", a, "event")
            }
            .bind(this))
        },
        _continueGachaGa002: function(e, t) {
            this._showContinueGachaPopup(e, t, "stone")
        },
        _continueGachaGa003: function(e, t) {
            this._showContinueGachaPopup(e, t, "ticket")
        },
        _continueGachaGa004: function(e, t) {
            var n = t.params.gacha_id
              , i = this._getCategoryGroup(n, !0);
            i ? this._playGacha("normal", n, t.navigate, !0) : e.popups.popupGaNeedSpace.open()
        },
        _continueGachaGa100: function(e, t) {
            var n = this._categoryData.payment_type;
            "point" === n ? this._continueGachaGa001(e, t) : this._showContinueGachaPopup(e, t, "event")
        },
        _getCamelizeNavigateSceneName: function(e) {
            return i.capitalize(i.camelize(e.replace("gacha/", "")))
        },
        _getContinueGachaNeedParams: function(e, t) {
            return t.params && t.params.category ? this._getCategoryDataAndAmountData(t.params.category, t) : a.resolve()
        },
        _getCategoryDataAndAmountData: function(e, n) {
            if (i.isUndefined(n.params))
                return a.resolve();
            var s = n.params.gacha_id
              , o = n.params.event_id
              , r = null ;
            return r = "event" === e && o ? t.createInstance("apiAGacha").getEventCategory(o) : t.createInstance("apiAGacha").getCategory(e),
            r.then(function(e) {
                return this._categoryData = e.body,
                "point" === this._categoryData.payment_type ? a.resolve() : ("normal" !== this._categoryData.category_type || this._checkGachaId(this._categoryData, n) || (this._updateGachaId(this._categoryData, n),
                s = n.params.gacha_id),
                t.createInstance("apiAGacha").getCheckUsing(s).then(function(e) {
                    this._useItemNumData = e.body
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                }))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _checkGachaId: function(e, t) {
            return i.some(e.groups, function(e) {
                return t.params.gacha_id === e.gacha_id ? !0 : void 0
            }, this)
        },
        _updateGachaId: function(e, t) {
            (this["_updateGachaId" + i.capitalize(e.category_type)] || function() {}
            )(e, t)
        },
        _updateGachaIdNormal: function(e, t) {
            if (!e.is_max_weapon_or_summon) {
                var n = i.find(e.groups, function(e) {
                    return 1 === e.gacha_count ? !0 : void 0
                }, this);
                t.params.gacha_id = n.gacha_id
            }
        },
        _getCategoryGroup: function(e, t) {
            return i.find(this._categoryData.groups, function(n, i) {
                return n.gacha_id === e && (!t || t && n.enabled) ? !0 : void 0
            }
            .bind(this))
        },
        _showContinueGachaPopup: function(e, t, n) {
            var i = t.params
              , a = i.gacha_id
              , s = this._getCategoryGroup(a, !0)
              , o = n
              , r = null ;
            if ("event" === n) {
                var c = i.event_id;
                o = "ticket",
                r = this._playEventGacha.bind(this, c, a, t.navigate)
            } else
                r = this._playGacha.bind(this, n, a, t.navigate);
            s ? e.popups.popupGaCheckUseStoneTicket.open({
                okBtnCallback: r,
                type: o,
                gachaId: a,
                beforeNum: this._useItemNumData.before_num,
                afterNum: this._useItemNumData.after_num
            }) : e.popups.popupGaNeedItem.open({
                gachaId: a,
                num: this._useItemNumData.before_num,
                type: o
            })
        },
        _playGacha: function(e, n, i, a) {
            null == e && console.error("GachaContinueButton._playGacha ## Undefined category"),
            null == n && console.error("GachaContinueButton._playGacha ## Undefined gachaId"),
            t.createInstance("apiAGacha").playGacha(e, n).then(function(e) {
                this._navigate001_004ToGaAni(e.body, n, i, a)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _playEventGacha: function(e, n, i) {
            null == e && console.error("GachaContinueButton._playEventGacha ## Undefined eventId"),
            null == n && console.error("GachaContinueButton._playEventGacha ## Undefined gachaId"),
            t.createInstance("apiAGacha").playEventGacha(e, n).then(function(t) {
                this._navigate100ToGaAni(t.body, n, i, e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.roles = t.pc.gacha.roles || {},
    t.pc.gacha.roles.GachaToGachaSlider = {
        _setGachaToGachaSlider: function(e) {
            var a = t.createInstance("router").getCurrentFragment()
              , s = a.replace(/^gacha\//g, "")
              , o = e.routerParams[s]
              , r = null ;
            return o ? (n.isUndefined(o.navigate_page) ? n.isUndefined(o.id) || (this._banner_id = o.id,
            r = t.createInstance("apiABanners").getGachaBanners().then(function(t) {
                return console.log(t.body),
                this._setGachaToGachaNumber(e, t.body),
                this._setGachaToGachaButtonSound(e),
                t.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })) : (o.isContinueGacha = o.isContinueGacha || !1,
            r = t.createInstance("apiABanners").getGachaBanners().then(function(t) {
                var i = t.body;
                return console.log(i),
                n.each(i.data, function(e) {
                    e.navigate_page === o.navigate_page && e.event_id === o.event_id && (this._banner_id = o.id = e.banner_id)
                }, this),
                this._setGachaToGachaNumber(e, i),
                this._setGachaToGachaButtonSound(e),
                t.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })),
            r) : (console.debug(a, s),
            i.reject("Expected routerParam not found."))
        },
        _setGachaToGachaNumber: function(e, t) {
            if (n.isUndefined(t) || n.isUndefined(t.max_record_count) || n.isUndefined(t.data))
                return void console.debug("[ERROR] Could not read record.");
            if (null === e.seekWidgetByName("page_num"))
                return void console.debug("[ERROR] Could not find page_num.");
            var i = n.findIndex(t.data, function(e) {
                return e.banner_id == this._banner_id
            }, this);
            if (-1 === i)
                return void console.debug("[ERROR] Could not find category. = " + this._banner_id);
            0 !== i ? this._prevGachaCategory = t.data[i - 1] : 0 === i && (this._prevGachaCategory = t.data[t.max_record_count - 1]),
            i !== t.max_record_count - 1 ? this._nextGachaCategory = t.data[i + 1] : i === t.max_record_count - 1 && (this._nextGachaCategory = t.data[0]);
            var a = 1;
            i += a;
            var s = t.max_record_count;
            e.setStrings({
                page_num: i + "/" + s
            })
        },
        _setGachaToGachaButtonSound: function(e) {
            var n = e.seekWidgetByName("btn_next_gacha")
              , i = e.seekWidgetByName("btn_prev_gacha");
            n.setSound(t.SoundList.BUTTON_TOUCHED_SWITCH),
            i.setSound(t.SoundList.BUTTON_TOUCHED_SWITCH)
        },
        _getNextGachaCategory: function() {
            return n.isUndefined(this._nextGachaCategory) ? "" : this._nextGachaCategory
        },
        _getPrevGachaCategory: function() {
            return n.isUndefined(this._prevGachaCategory) ? "" : this._prevGachaCategory
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.roles = t.pc.gacha.roles || {},
    t.pc.gacha.roles.GachaArrivalPageListController = {
        _fillupGachaArrivalList: function(e, i, a, s, o) {
            n.isUndefined(s) || (this._touchEventFuncName4Weapon = s),
            n.isUndefined(o) || (this._touchEventFuncName4Chara = o);
            var r = null ;
            return r = a ? t.createInstance("apiGacha").getAppearanceByEventId(a) : t.createInstance("apiGacha").getAppearance(i),
            r = r.then(function(i) {
                console.log(i.body);
                var a = i.body.appearance_data
                  , s = e.seekWidgetByName("ga_005_a_node")
                  , o = e.seekWidgetByName("ga_005_b_node")
                  , r = e.seekWidgetByName("ga_005_c_node");
                if (null === s || null === o || null === r)
                    return void console.debug("[ERROR] Could not get whole scenes.");
                var c = [{
                    scene: s,
                    data: a.ssr,
                    count: a.ssr.length
                }, {
                    scene: o,
                    data: a.sr,
                    count: a.sr.length
                }, {
                    scene: r,
                    data: a.r,
                    count: a.r.length
                }];
                return n.each(c, function(e) {
                    this._fillupList(e.scene, {
                        viewParent: t.PageListParams.GACHA_ARRIVAL.viewParent,
                        subPageRes: t.PageListParams.GACHA_ARRIVAL.subPageRes,
                        panelsPerPage: t.PageListParams.GACHA_ARRIVAL.perPage
                    }, e.data, e.count, void 0, this._panelAppearanceForGachaArrival.bind(this))
                }, this),
                i.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _panelAppearanceForGachaArrival: function(e, i, a) {
            console.log(e, i, a);
            var s = e.seekWidgetByName("corecard_weapon_ui")
              , o = i.weapon;
            if (s) {
                var r = t.createInstance("CoreCardWeaponUI", ["e_r"]);
                r.setImg(o.id, o.skin || 0),
                r.setPlusNo(0 < o.bonus ? "+" + o.bonus : ""),
                r.setIconElement(o.element_type),
                r.setIconRarity(o.rare),
                s.removeAllChildren(),
                s.addChild(r.getResult())
            }
            var c = i.character;
            if (e.loadTextures({
                gachacard_chara: t.Img("gachacard", "chara", n.padZero(c.id, 4), c.skin || 0).png
            }),
            e.setVisible(!0),
            !n.isUndefined(this._touchEventFuncName4Weapon) && n.isFunction(this[this._touchEventFuncName4Weapon]) && !n.isUndefined(this._touchEventFuncName4Chara) && n.isFunction(this[this._touchEventFuncName4Chara])) {
                c.release_weapon_id = o.id,
                t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED weapon_img": function() {
                        this[this._touchEventFuncName4Weapon](o)
                    }
                    .bind(this),
                    "TOUCH_ENDED gachacard_chara": function() {
                        this[this._touchEventFuncName4Chara](c)
                    }
                    .bind(this)
                });
                var u = e.seekWidgetByName("weapon_img");
                u.setSoundEnabled(!0),
                u.setSound(t.SoundList.BUTTON_TOUCHED_DEFAULT);
                var _ = e.seekWidgetByName("gachacard_chara");
                _.setSoundEnabled(!0),
                _.setSound(t.SoundList.BUTTON_TOUCHED_DEFAULT)
            }
        }
    },
    n.assign(t.pc.gacha.roles.GachaArrivalPageListController, t.pc.list.roles.PageListControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.roles = t.pc.gacha.roles || {},
    t.pc.gacha.roles.GachaArrivalBtnsPageListController = {
        _fillupGachaArrivalBtnsList: function(e, n, i) {
            var a = e.seekWidgetByName("ga_009_a_node")
              , s = e.seekWidgetByName("ga_009_b_node");
            return null === a ? void console.debug("[ERROR] Could not find ga_009_a_node.") : null === s ? void console.debug("[ERROR] Could not find ga_009_b_node.") : void (i ? (this._fillupButtonList(a, t.BtnsPageListParams.GACHA_ARRIVAL_LIST.panelName, "apiGacha", "getEventWeaponRatios", [i], t.BtnsPageListParams.GACHA_ARRIVAL_LIST.perPage, "_setGachaArrivalPanel"),
            this._fillupButtonList(s, t.BtnsPageListParams.GACHA_ARRIVAL_LIST.panelName, "apiGacha", "getEventSummonRatios", [i], t.BtnsPageListParams.GACHA_ARRIVAL_LIST.perPage, "_setGachaArrivalPanel")) : (this._fillupButtonList(a, t.BtnsPageListParams.GACHA_ARRIVAL_LIST.panelName, "apiGacha", "getWeaponRatios", [n], t.BtnsPageListParams.GACHA_ARRIVAL_LIST.perPage, "_setGachaArrivalPanel"),
            this._fillupButtonList(s, t.BtnsPageListParams.GACHA_ARRIVAL_LIST.panelName, "apiGacha", "getSummonRatios", [n], t.BtnsPageListParams.GACHA_ARRIVAL_LIST.perPage, "_setGachaArrivalPanel")))
        },
        _setGachaArrivalPanel: function(e, t) {
            this._setCardStrings(e, t),
            this._setRarityIcon(e, t),
            this._setElementIconCommonRes(e, t),
            this._setWeaponIcon(e, t);
            var i = e.actionManager.getActionByTag(e.tag, e);
            if (null === i)
                return void console.debug("[ERROR] Could not find action object.");
            if (n.isUndefined(t.appearance_ratio_up))
                return void console.debug("[ERROR] Could not find appearance_ratio_up.");
            if ((n.isUndefined(i.animationInfo) || n.isUndefined(i.animationInfo.summon_normal) || n.isUndefined(i.animationInfo.summon_up) || n.isUndefined(i.animationInfo.weapon_normal) || n.isUndefined(i.animationInfo.weapon_up)) && console.debug("[ERROR] Could not find entire animation."),
            n.isUndefined(t.weapon_type)) {
                var a = t.appearance_ratio_up ? i.animationInfo.summon_up.startIndex : i.animationInfo.summon_normal.startIndex;
                i.gotoFrameAndPause(a)
            } else {
                var a = t.appearance_ratio_up ? i.animationInfo.weapon_up.startIndex : i.animationInfo.weapon_normal.startIndex;
                i.gotoFrameAndPause(a)
            }
        }
    },
    n.assign(t.pc.gacha.roles.GachaArrivalBtnsPageListController, t.pc.list.roles.PageListBtnsControllerCommon, t.pc.roles.StringsCommon, t.pc.roles.IconsCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.roles = t.pc.gacha.roles || {},
    t.pc.gacha.roles.HaremEpiBtnsPageListController = {
        _fillupEnhEvoEntryBtnsList: function(e, i, a) {
            if (!n.contains(["chara", "summon"], i))
                return void console.error("Invalid episode type: " + i);
            var s = "chara" == i ? "getHaremEpisodesCharacters" : "getHaremEpisodesSummons"
              , o = "chara" == i ? "chara" : "summon"
              , r = "chara" == i ? "ga_014_a_node" : "ga_014_b_node"
              , c = []
              , u = {
                baseName: r,
                panelName: t.BtnsPageListParams.GACHA_HAREM_EPISODE.panelName,
                panelsPerPage: t.BtnsPageListParams.GACHA_HAREM_EPISODE.perPage,
                apiName: "apiGacha",
                apiMethod: s,
                apiParams: c,
                cardType: o,
                cardFrame: "plain"
            };
            this._setListBtnsControllerWithArgs(e, a, u).then(function(e) {}
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    },
    n.assign(t.pc.gacha.roles.HaremEpiBtnsPageListController, t.pc.list.roles.PageListBtnsControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_000 = t.pc.gacha.ga_000 || {},
    t.pc.gacha.ga_000.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_000/ga_000.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_000/ga_000.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga000Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_000"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnHint"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_hint", function() {
                alert("{{popup com_tutorialを開く}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_000 = t.pc.gacha.ga_000 || {},
    t.pc.gacha.ga_000.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupSubTutorial: {
                factoryName: "popupFactorySubTutorial",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        onSceneInit: function(e) {
            a.defer();
            return this._verifyRouterParams000(e),
            this._fillupGachaBannerList(e, "_gachaBannerTouchEvent")
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnHint: function(e) {
            var t = a.defer();
            t.reject(this._override);
            var n = e.popups.popupSubTutorial;
            return n.setTypeAndOpen("gacha", "subtutorial"),
            t.promise
        },
        _gachaBannerTouchEvent: function(e, t) {
            console.log(e, t);
            var i = n.director.getRunningScene();
            this._navigate000ToGacha(i, t)
        }
    }),
    i.assign(t.pc.gacha.ga_000.SceneDelegate.prototype, t.pc.gacha.roles.Routing, t.pc.gacha.roles.GachaBannerPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        ga_tips: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("ga_tips")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: ga_tips"),
                e || ""
            }(),
            title: "取得条件",
            buttonLabels: {
                blackBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        }
    };
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_001 = t.pc.gacha.ga_001 || {},
    t.pc.gacha.ga_001.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_001_2_3_4/ga_001.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_001_2_3_4/ga_001.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga001Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_001"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnArrivalList"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_arrival_list", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_005")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNotice"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_notice", function(e) {
                this.popups.ga_tips.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRate"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_rate", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnPrevGacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_prev_gacha", function() {
                alert("{{現在表示しているガチャのバナーの１つ前のガチャに切り替え表示。一番端まで行った場合、ループさせる。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNextGacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_next_gacha", function() {
                alert("{{現在表示しているガチャのバナーの１つ次のガチャに切り替え表示。一番端まで行った場合、ループさせる。}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_001 = t.pc.gacha.ga_001 || {},
    t.pc.gacha.ga_001.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            ga_tips: {
                factoryName: "popupFactoryGaTips"
            }
        },
        onSceneInit: function(e) {
            throw new Error("Invalid Routing")
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return this._stopAutoScroll(),
            i.resolve()
        },
        _setGachaButton: function(e) {
            var t = e.seekWidgetByName("btn_top_gacha");
            this._setGachaButtonImage(t, this._gachaData.groups[1].gacha_id, 10),
            t.setVisible(!0);
            var n = e.seekWidgetByName("btn_bottom_gacha");
            this._setGachaButtonImage(n, this._gachaData.groups[0].gacha_id, 1),
            n.setVisible(!0)
        },
        _setGachaButtonEvent: function(e) {
            var n = e.seekWidgetByName("btn_top_gacha");
            n.isVisible() && t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_top_gacha": function() {
                    this._gachaButtonEvent(this._gachaData.groups[1])
                }
                .bind(this)
            });
            var i = e.seekWidgetByName("btn_bottom_gacha");
            i.isVisible() && t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_bottom_gacha": function() {
                    this._gachaButtonEvent(this._gachaData.groups[0])
                }
                .bind(this)
            })
        },
        _setContinueGacha: function(e) {
            e.routerParams.ga_001.isContinueGacha && (e.routerParams.ga_001.isContinueGacha = !1,
            this._gachaButtonEvent(this._gachaData.groups[0]))
        },
        _checkPaymentIdAndNavigateGachaAni: function(e) {
            return e.routerParams.payment_id ? (t.createInstance("apiAGachaResult").putGachaResult(e.routerParams.payment_id).then(function(t) {
                e.routerParams.payment_id = null ;
                var n = t.body;
                this._navigate001_004ToGaAni(n, n.gacha_id || 1, "gacha/ga_001")
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            !0) : !1
        },
        _gachaButtonEvent: function(e) {
            var n = {};
            n.num = 1,
            n.name = e.title || "ガチャ！",
            n.description = e.description || "ガチャ説明！",
            n.price = e.price,
            n.gachaId = e.gacha_id,
            t.createInstance("paymentRequest").requestGacha(n, {
                component: "gacha",
                route: "ga_001"
            }).then(function(t) {
                console.log(t),
                this._navigate001_004ToGaAni(t, e.gacha_id, "gacha/ga_001")
            }
            .bind(this))
        },
        btnCallbackBtnArrivalList: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate001_004To005(e),
            t.promise
        },
        btnCallbackBtnNotice: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnRate: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate001_004To009(),
            t.promise
        },
        btnCallbackBtnPrev: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            t.promise
        },
        btnCallbackBtnNext: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            t.promise
        },
        btnCallbackBtnPrevGacha: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate000ToGacha(e, this._getPrevGachaCategory()),
            t.promise
        },
        btnCallbackBtnNextGacha: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate000ToGacha(e, this._getNextGachaCategory()),
            t.promise
        }
    }),
    n.assign(t.pc.gacha.ga_001.SceneDelegate.prototype, t.pc.gacha.roles.Routing, t.pc.gacha.roles.PlayGachaBase, t.pc.gacha.roles.GachaToGachaSlider, t.pc.gacha.roles.GachaButtonCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        ga_tips: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("ga_tips")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: ga_tips"),
                e || ""
            }(),
            title: "取得条件",
            buttonLabels: {
                blackBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        }
    };
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_002 = t.pc.gacha.ga_002 || {},
    t.pc.gacha.ga_002.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_001_2_3_4/ga_002.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_001_2_3_4/ga_002.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga002Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_002"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnArrivalList"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_arrival_list", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_005")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNotice"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_notice", function(e) {
                this.popups.ga_tips.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRate"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_rate", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnPrevGacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_prev_gacha", function() {
                alert("{{現在表示しているガチャのバナーの１つ前のガチャに切り替え表示。一番端まで行った場合、ループさせる。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNextGacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_next_gacha", function() {
                alert("{{現在表示しているガチャのバナーの１つ次のガチャに切り替え表示。一番端まで行った場合、ループさせる。}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_002 = t.pc.gacha.ga_002 || {},
    t.pc.gacha.ga_002.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            ga_tips: {
                factoryName: "popupFactoryGaTips"
            },
            popupUseStone: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-ga_check_stone-ticket",
                title: "使用確認",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupComText: {
                factoryName: "popupFactoryTextOnly",
                content: "ガチャを引くのに必要な魔宝石が足りないため、ガチャをひくことができません",
                title: "ガチャを引くことができません",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        onSceneInit: function(e) {
            this._category = "stone",
            this._verifyRouterParams002(e),
            this._setGachaToGachaSlider(e);
            var n = t.createInstance("apiAGacha").getCategory(this._category).then(function(t) {
                console.log(t.body),
                this._gachaData = t.body,
                this._setGachaHeaderImage(e, this._gachaData),
                this._setGachaHeaderDescription(e),
                this._setGachaSlider(e),
                this._setStoneCount(e),
                this._setGachaButton(e),
                this._setGachaButtonEvent(e),
                this._setContinueGacha(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return this._stopAutoScroll(),
            i.resolve()
        },
        _setStoneCount: function(e) {
            var n = this._gachaData.groups[0].gacha_id;
            t.createInstance("apiAGacha").getCheckUsing(n).then(function(n) {
                e.seekWidgetByName("have_label").setString("所持" + t.w("stone") + "数：" + n.body.before_num)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setGachaButton: function(e) {
            var t = e.seekWidgetByName("btn_top_gacha");
            this._setGachaButtonImage(t, this._gachaData.groups[1].gacha_id, 10),
            t.setVisible(!0),
            this._setEnableButton(t, this._gachaData.groups[1].enabled);
            var n = e.seekWidgetByName("btn_bottom_gacha");
            this._setGachaButtonImage(n, this._gachaData.groups[0].gacha_id, 1),
            n.setVisible(!0),
            this._setEnableButton(n, this._gachaData.groups[0].enabled)
        },
        _setGachaButtonEvent: function(e) {
            var n = e.seekWidgetByName("btn_top_gacha");
            n.isVisible() && t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_top_gacha": function() {
                    this._gachaButtonEvent(e, this._gachaData.groups[1])
                }
                .bind(this)
            });
            var i = e.seekWidgetByName("btn_bottom_gacha");
            i.isVisible() && t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_bottom_gacha": function() {
                    this._gachaButtonEvent(e, this._gachaData.groups[0])
                }
                .bind(this)
            })
        },
        _setContinueGacha: function(e) {
            e.routerParams.ga_002.isContinueGacha && (e.routerParams.ga_002.isContinueGacha = !1,
            this._gachaData.groups[0].enabled ? this._gachaButtonEvent(e, this._gachaData.groups[0]) : e.popups.popupComText.open())
        },
        _gachaButtonEvent: function(e, n) {
            var i = n.gacha_id;
            t.createInstance("apiAGacha").getCheckUsing(i).then(function(a) {
                console.log(a.body);
                var s = e.popups.popupUseStone;
                s.open().then(function() {
                    this._setContentForStonePopup(s, n, a.body.before_num, a.body.after_num),
                    t.setTouchEventHandlers(s, {
                        "TOUCH_ENDED blue_btn": function() {
                            this._playGacha(i)
                        }
                        .bind(this)
                    })
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setContentForStonePopup: function(e, i, a, s) {
            console.log(i),
            e.loadTextures({
                stone_or_ticket_img: t.Img("corecard", "gacha", n.padZero(i.gacha_id, 4)).jpg
            }),
            e.setHtmlStrings({
                confirm_labelimg: this._stoneCountConfirmHtmlString(a, s)
            }, t.GameConfig.POPUP_CSS)
        },
        _stoneCountConfirmHtmlString: function(e, t) {
            var n = "<span class='white'>魔宝石でガチャを引く</span><br /><span class='orange'>所持魔宝石数：</span><span class='white'>" + e + "&rarr;</span><span class='red'>" + t + "</span><br /><span class='white'>よろしいですか？</span>";
            return n
        },
        _playGacha: function(e) {
            t.createInstance("apiAGacha").playGacha("stone", e).then(function(t) {
                console.log(t.body),
                this._navigate001_004ToGaAni(t.body, e, "gacha/ga_002")
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        btnCallbackBtnArrivalList: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate001_004To005(e),
            t.promise
        },
        btnCallbackBtnNotice: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnRate: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate001_004To009(),
            t.promise
        },
        btnCallbackBtnPrev: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnNext: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnPrevGacha: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate000ToGacha(e, this._getPrevGachaCategory()),
            t.promise
        },
        btnCallbackBtnNextGacha: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate000ToGacha(e, this._getNextGachaCategory()),
            t.promise
        }
    }),
    n.assign(t.pc.gacha.ga_002.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.gacha.roles.Routing, t.pc.gacha.roles.PlayGachaBase, t.pc.gacha.roles.GachaToGachaSlider, t.pc.gacha.roles.GachaButtonCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        ga_tips: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("ga_tips")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: ga_tips"),
                e || ""
            }(),
            title: "取得条件",
            buttonLabels: {
                blackBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        }
    };
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_003 = t.pc.gacha.ga_003 || {},
    t.pc.gacha.ga_003.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_001_2_3_4/ga_003.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_001_2_3_4/ga_003.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga003Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_003"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnArrivalList"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_arrival_list", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_005")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNotice"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_notice", function(e) {
                this.popups.ga_tips.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRate"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_rate", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnPrevGacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_prev_gacha", function() {
                alert("{{現在表示しているガチャのバナーの１つ前のガチャに切り替え表示。一番端まで行った場合、ループさせる。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNextGacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_next_gacha", function() {
                alert("{{現在表示しているガチャのバナーの１つ次のガチャに切り替え表示。一番端まで行った場合、ループさせる。}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_003 = t.pc.gacha.ga_003 || {},
    t.pc.gacha.ga_003.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            ga_tips: {
                factoryName: "popupFactoryGaTips"
            },
            popupUseStone: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-ga_check_stone-ticket",
                title: "使用確認",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupComText: {
                factoryName: "popupFactoryTextOnly",
                content: "ガチャを引くのに必要なガチャチケットが足りないため、ガチャをひくことができません",
                title: "ガチャを引くことができません",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        onSceneInit: function(e) {
            this._category = "ticket",
            this._verifyRouterParams003(e),
            this._setGachaToGachaSlider(e);
            var n = t.createInstance("apiAGacha").getCategory(this._category).then(function(t) {
                console.log(t.body),
                this._gachaData = t.body,
                this._setGachaHeaderImage(e, this._gachaData),
                this._setGachaHeaderDescription(e),
                this._setGachaSlider(e),
                this._setTicketCount(e),
                this._setGachaButton(e),
                this._setGachaButtonEvent(e),
                this._setContinueGacha(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return this._stopAutoScroll(),
            i.resolve()
        },
        _setTicketCount: function(e) {
            var n = this._gachaData.groups[0].gacha_id;
            t.createInstance("apiAGacha").getCheckUsing(n).then(function(t) {
                e.seekWidgetByName("have_label").setString("所持枚数：" + t.body.before_num)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setGachaButton: function(e) {
            var t = e.seekWidgetByName("btn_top_gacha");
            this._setGachaButtonImage(t, this._gachaData.groups[0].gacha_id, this._gachaData.groups[0].gacha_count),
            t.setVisible(!0),
            this._setEnableButton(t, this._gachaData.groups[0].enabled)
        },
        _setGachaButtonEvent: function(e) {
            t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_top_gacha": function() {
                    this._gachaButtonEvent(e, this._gachaData.groups[0])
                }
                .bind(this)
            })
        },
        _gachaButtonEvent: function(e, n) {
            var i = n.gacha_id;
            t.createInstance("apiAGacha").getCheckUsing(i).then(function(a) {
                console.log(a.body);
                var s = e.popups.popupUseStone;
                s.open().then(function() {
                    this._setContentForTicketPopup(s, n, a.body.before_num, a.body.after_num),
                    t.setTouchEventHandlers(s, {
                        "TOUCH_ENDED blue_btn": function() {
                            this._playGacha(i)
                        }
                        .bind(this)
                    })
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setContentForTicketPopup: function(e, i, a, s) {
            console.log(i),
            e.loadTextures({
                stone_or_ticket_img: t.Img("corecard", "gacha", n.padZero(i.gacha_id, 4)).jpg
            }),
            e.setHtmlStrings({
                confirm_labelimg: this._ticketCountConfirmHtmlString(a, s)
            }, t.GameConfig.POPUP_CSS)
        },
        _setContinueGacha: function(e) {
            e.routerParams.ga_003.isContinueGacha && (e.routerParams.ga_003.isContinueGacha = !1,
            this._gachaData.groups[0].enabled ? this._gachaButtonEvent(e, this._gachaData.groups[0]) : e.popups.popupComText.open())
        },
        _ticketCountConfirmHtmlString: function(e, t) {
            var n = "<span class='white'>チケットでガチャを引く</span><br /><span class='orange'>所持チケット数：</span><span class='white'>" + e + "&rarr;</span><span class='red'>" + t + "</span><br /><span class='white'>よろしいですか？</span>";
            return n
        },
        _playGacha: function(e) {
            t.createInstance("apiAGacha").playGacha("ticket", e).then(function(t) {
                console.log(t.body),
                this._navigate001_004ToGaAni(t.body, e, "gacha/ga_003")
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        btnCallbackBtnArrivalList: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate001_004To005(e),
            t.promise
        },
        btnCallbackBtnNotice: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnRate: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate001_004To009(),
            t.promise
        },
        btnCallbackBtnPrev: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnNext: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnPrevGacha: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate000ToGacha(e, this._getPrevGachaCategory()),
            t.promise
        },
        btnCallbackBtnNextGacha: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate000ToGacha(e, this._getNextGachaCategory()),
            t.promise
        }
    }),
    n.assign(t.pc.gacha.ga_003.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.gacha.roles.Routing, t.pc.gacha.roles.PlayGachaBase, t.pc.gacha.roles.GachaToGachaSlider, t.pc.gacha.roles.GachaButtonCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        ga_tips: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("ga_tips")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: ga_tips"),
                e || ""
            }(),
            title: "取得条件",
            buttonLabels: {
                blackBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        }
    };
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_004 = t.pc.gacha.ga_004 || {},
    t.pc.gacha.ga_004.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_001_2_3_4/ga_004.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_001_2_3_4/ga_004.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga004Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_004"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnArrivalList"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_arrival_list", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_005")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNotice"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_notice", function(e) {
                this.popups.ga_tips.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRate"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_rate", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEnhEvo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_enh_evo", function() {
                alert("{{暫定enh_001へ遷移}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSell"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_sell", t.createInstance("router").navigate.bind(t.createInstance("router"), "list/li_007")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnPrevGacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_prev_gacha", function() {
                alert("{{現在表示しているガチャのバナーの１つ前のガチャに切り替え表示。一番端まで行った場合、ループさせる。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNextGacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_next_gacha", function() {
                alert("{{現在表示しているガチャのバナーの１つ次のガチャに切り替え表示。一番端まで行った場合、ループさせる。}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_004 = t.pc.gacha.ga_004 || {},
    t.pc.gacha.ga_004.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            ga_tips: {
                factoryName: "popupFactoryGaTips"
            },
            popupComText: {
                factoryName: "popupFactoryTextOnly",
                content: "ガチャを引くのに必要なジェムが足りないため、ガチャをひくことができません",
                title: "ガチャを引くことができません",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        _gachaGroup: {
            1: {
                btn_top_gacha: 0
            },
            2: {
                btn_top_gacha: 1,
                btn_bottom_gacha: 0
            }
        },
        onSceneInit: function(e) {
            this._category = "normal",
            this._verifyRouterParams004(e),
            this._setGachaToGachaSlider(e);
            var n = t.createInstance("apiAGacha").getCategory(this._category).then(function(t) {
                console.debug(t.body),
                this._gachaData = t.body,
                this._setGachaHeaderImage(e, this._gachaData),
                this._setGachaHeaderDescription(e),
                this._setGachaSlider(e),
                this._gachaCount = this._gachaData.groups.length,
                this._setGemCount(e),
                this._setGachaButton(e),
                this._setGachaButtonEvent(e),
                this._setContinueGacha(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return this._stopAutoScroll(),
            i.resolve()
        },
        onPageInAnimationEnd: function(e) {
            var t = (i.defer(),
            e.getAction());
            t && t.pause();
            var n = 1 === this._gachaCount ? "default_view" : "normal_double";
            this._gachaData.is_max_weapon_or_summon && (n = "normal_limit",
            this._gachaCount = 0);
            var a = e.getAnimInfo(n);
            return a.action.gotoFrameAndPause(a.animInfo.startIndex),
            i.resolve()
        },
        _setGemCount: function(e) {
            var n = this._gachaData.groups[0].gacha_id;
            t.createInstance("apiAGacha").getCheckUsing(n).then(function(t) {
                e.seekWidgetByName("have_label").setString("所持ジェム：" + t.body.before_num)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setGachaButton: function(e) {
            if (0 !== this._gachaCount) {
                var t = e.seekWidgetByName("btn_top_gacha")
                  , n = e.seekWidgetByName("btn_bottom_gacha");
                switch (this._gachaCount) {
                case 1:
                    var i = this._gachaGroup[this._gachaCount].btn_top_gacha;
                    this._setGachaButtonImage(t, this._gachaData.groups[i].gacha_id, 1),
                    t.setVisible(!0),
                    this._setEnableButton(t, this._gachaData.groups[i].enabled);
                    break;
                case 2:
                    var a = this._gachaGroup[this._gachaCount].btn_top_gacha
                      , s = this._gachaData.groups[a].gacha_count;
                    this._setGachaButtonImage(t, this._gachaData.groups[a].gacha_id, s),
                    t.setVisible(!0),
                    this._setEnableButton(t, this._gachaData.groups[a].enabled);
                    var o = this._gachaGroup[this._gachaCount].btn_bottom_gacha;
                    this._setGachaButtonImage(n, this._gachaData.groups[o].gacha_id, 1),
                    n.setVisible(!0),
                    this._setEnableButton(n, this._gachaData.groups[o].enabled)
                }
            }
        },
        _setGachaButtonEvent: function(e) {
            switch (this._gachaCount) {
            case 1:
                var n = this._gachaGroup[this._gachaCount].btn_top_gacha;
                t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED btn_top_gacha": function() {
                        this._playGacha(this._gachaData.groups[n].gacha_id)
                    }
                    .bind(this)
                });
            case 2:
                var i = this._gachaGroup[this._gachaCount].btn_top_gacha
                  , a = this._gachaGroup[this._gachaCount].btn_bottom_gacha;
                t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED btn_top_gacha": function() {
                        this._playGacha(this._gachaData.groups[i].gacha_id)
                    }
                    .bind(this),
                    "TOUCH_ENDED btn_bottom_gacha": function() {
                        this._playGacha(this._gachaData.groups[a].gacha_id)
                    }
                    .bind(this)
                })
            }
        },
        _setContinueGacha: function(e) {
            e.routerParams.ga_004.isContinueGacha && (e.routerParams.ga_004.isContinueGacha = !1,
            this._canPlayOneGacha() || this._gachaData.is_max_weapon_or_summon || e.popups.popupComText.open())
        },
        _canPlayOneGacha: function() {
            switch (this._gachaCount) {
            case 1:
                var e = this._gachaGroup[this._gachaCount].btn_top_gacha;
                return this._gachaData.groups[e].enabled ? !0 : !1;
            case 2:
                var t = this._gachaGroup[this._gachaCount].btn_bottom_gacha;
                return this._gachaData.groups[t].enabled ? !0 : !1
            }
        },
        _playGacha: function(e) {
            t.createInstance("apiAGacha").playGacha("normal", e).then(function(t) {
                console.log(t.body),
                this._navigate001_004ToGaAni(t.body, e, "gacha/ga_004", !0)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        btnCallbackBtnArrivalList: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnNotice: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnRate: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnEnhEvo: function(e) {
            var n = i.defer();
            return n.reject(this._override),
            t.createInstance("router").navigate("enh_evo/enh_001"),
            n.promise
        },
        btnCallbackBtnSell: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnPrevGacha: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate000ToGacha(e, this._getPrevGachaCategory()),
            t.promise
        },
        btnCallbackBtnNextGacha: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate000ToGacha(e, this._getNextGachaCategory()),
            t.promise
        }
    }),
    n.assign(t.pc.gacha.ga_004.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.gacha.roles.Routing, t.pc.gacha.roles.PlayGachaBase, t.pc.gacha.roles.GachaToGachaSlider, t.pc.gacha.roles.GachaButtonCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_005 = t.pc.gacha.ga_005 || {},
    t.pc.gacha.ga_005.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_005/ga_005.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_005/ga_005.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("ga_005_a_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("ga_005_a_node").setVisible(!1),
                e.seekWidgetByPath("ga_005_b_node").setVisible(!1),
                e.seekWidgetByPath("ga_005_c_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("ga_005_b_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("ga_005_a_node").setVisible(!1),
                e.seekWidgetByPath("ga_005_b_node").setVisible(!1),
                e.seekWidgetByPath("ga_005_c_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_2: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab3のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("ga_005_c_node");
                if (!t)
                    return void alert("tab.tab3のcontent-nodeが見つかりません");
                e.seekWidgetByPath("ga_005_a_node").setVisible(!1),
                e.seekWidgetByPath("ga_005_b_node").setVisible(!1),
                e.seekWidgetByPath("ga_005_c_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab2";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga005Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_005"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEpiIntroduce"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_epi_introduce", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_014")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_005 = t.pc.gacha.ga_005 || {},
    t.pc.gacha.ga_005.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParams005(e);
            var t = e.routerParams.ga_005;
            this._fillupGachaArrivalList(e, t.category, t.event_id, "_onTouchWeapon", "_onTouchCharacter");
            var n = e.seekWidgetByName("btn_epi_introduce_panel");
            return n && n.setVisible(!1),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnEpiIntroduce: function(e) {
            a.defer();
            return a.reject()
        },
        _onTouchWeapon: function(e) {
            var t = n.director.getRunningScene();
            this._navigate005To007(t, e)
        },
        _onTouchCharacter: function(e) {
            var t = n.director.getRunningScene();
            this._navigate005To008(t, e)
        }
    }),
    i.assign(t.pc.gacha.ga_005.SceneDelegate.prototype, t.pc.gacha.roles.Routing, t.pc.gacha.roles.GachaArrivalPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_006 = t.pc.gacha.ga_006 || {},
    t.pc.gacha.ga_006.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_006/ga_006.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_006/ga_006.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga006Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_006"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_006 = t.pc.gacha.ga_006 || {},
    t.pc.gacha.ga_006.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams006(e),
            this._loadSummon(e.routerParams.ga_006.id).then(function(t) {
                if (!n.isUndefined(t.episodes) && t.episodes.length) {
                    var i = e.seekWidgetByName("btn_blue_l");
                    null !== i && i.setVisible(!0)
                }
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            this._complementControlsEvent(e),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        _complementControlsEvent: function(e) {
            t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_blue_l": function() {
                    this._showPopupEpisode()
                }
                .bind(this)
            })
        }
    }),
    n.assign(t.pc.gacha.ga_006.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.gacha.roles.Routing, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.scene.roles.SceneSummonCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_007 = t.pc.gacha.ga_007 || {},
    t.pc.gacha.ga_007.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_007/ga_007.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_007/ga_007.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga007Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_007"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_007 = t.pc.gacha.ga_007 || {},
    t.pc.gacha.ga_007.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams007(e),
            this._loadWeapon(e.routerParams.ga_007.id).then(function(e) {}
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        }
    }),
    n.assign(t.pc.gacha.ga_007.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.gacha.roles.Routing, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.status.roles.BurstCommon, t.pc.status.roles.WeaponSkillCommon, t.pc.scene.roles.SceneWeaponCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        ga_scene_check: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("ga_scene_check")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: ga_scene_check"),
                e || ""
            }(),
            title: "{{該当の幻獣に応じたエピソードタイトルを差し替え}}",
            buttonLabels: {
                blackBtn: "閉じる"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        }
    };
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_008 = t.pc.gacha.ga_008 || {},
    t.pc.gacha.ga_008.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_008/ga_008.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_008/ga_008.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_chara_status_0_ui");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_chara_status_0_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_statuslist_list_7_ui");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_chara_status_0_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga008Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_008"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRedL"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_red_l", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_007")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBlueL"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_blue_l", function(e) {
                this.popups.ga_scene_check.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSound"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_sound", function() {
                alert("{{サウンドの再生}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_008 = t.pc.gacha.ga_008 || {},
    t.pc.gacha.ga_008.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            return this._verifyRouterParams008(e),
            e.seekWidgetByName("btn_sound").setSoundEnabled(!1),
            this._loadCharacter(e.routerParams.ga_008.id)
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnRedL: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate008To007(e),
            t.promise
        },
        btnCallbackBtnBlueL: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showPopupEpisode(e),
            t.promise
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnSound: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchPlayVoiceButton(),
            t.promise
        }
    }),
    n.assign(t.pc.gacha.ga_008.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.gacha.roles.Routing, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.status.roles.BurstCommon, t.pc.status.roles.AbilityCommon, t.pc.status.roles.AssistCommon, t.pc.scene.roles.SceneCharacterCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_009 = t.pc.gacha.ga_009 || {},
    t.pc.gacha.ga_009.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_009/ga_009.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_009/ga_009.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("ga_009_a_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("ga_009_a_node").setVisible(!1),
                e.seekWidgetByPath("ga_009_b_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("ga_009_b_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("ga_009_a_node").setVisible(!1),
                e.seekWidgetByPath("ga_009_b_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga009Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_009"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_009 = t.pc.gacha.ga_009 || {},
    t.pc.gacha.ga_009.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams009(e),
            this._fillupGachaArrivalBtnsList(e, e.routerParams.ga_009.category, e.routerParams.ga_009.event_id),
            e.seekWidgetByName("rarity_icon_ssr").seekWidgetByName("rate_label").string = "SSレア：3.00％",
            e.seekWidgetByName("rarity_icon_sr").seekWidgetByName("rate_label").string = "Sレア：15.00％",
            e.seekWidgetByName("rarity_icon_r").seekWidgetByName("rate_label").string = "レア：82.00％",
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        }
    }),
    n.assign(t.pc.gacha.ga_009.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.gacha.roles.Routing, t.pc.gacha.roles.GachaArrivalBtnsPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_010 = t.pc.gacha.ga_010 || {},
    t.pc.gacha.ga_010.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_010/ga_010.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_010/ga_010.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga010Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_010"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnPresent"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_present", t.createInstance("router").navigate.bind(t.createInstance("router"), "present/prs_001")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnTogether10Gacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_together_10_gacha", function() {
                alert("{{長文の為、仕様書参照}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_010 = t.pc.gacha.ga_010 || {},
    t.pc.gacha.ga_010.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupGaCheckUseStoneTicket: {
                factoryName: "popupFactoryGaCheckUseStoneTicket"
            },
            popupGaNeedItem: {
                factoryName: "popupFactoryGaNeedItem"
            },
            popupGaNeedSpace: {
                factoryName: "popupFactoryGaNeedSpace"
            },
            popupOpenEpisode: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-com_open_episode",
                title: "ハーレムエピソード解放",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                onPopupOpened: function(e, t) {
                    var i = e.seekWidgetByName("harlem_release_label");
                    i && (i.setTextVerticalAlignment(n.VERTICAL_TEXT_ALIGNMENT_CENTER),
                    i.setString(t.name + "\r\nのハーレムエピソードが解放されました！")),
                    t.setCoreCardFunc(e, t, "core_img")
                },
                buttons: {
                    blackBtn: function(e) {
                        var t = e._delegate;
                        this.dismiss().then(t._showPopupReleasedEpisodeIfExists.bind(t, e))
                    }
                }
            },
            popupSSRText: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-ga_item_info",
                content: "",
                title: "アイテム入手",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {}
                }
            }
        },
        onSceneInit: function(e) {
            e.routerParams.ga_010.results;
            this._fillupResultCards(e);
            var t = e.seekWidgetByName("btn_together_10_gacha");
            return t.setVisible(!1),
            this._setItemInfo(e),
            this._setItemPopup(e),
            this._showPopupReleasedEpisodeIfExists(e),
            this._getContinueGachaNeedParams(e, e.routerParams.ga_010).then(function() {
                this._setContinueButton(e),
                t.setVisible(!0)
            }
            .bind(this))
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnPresent: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        _setContinueButton: function(e) {
            e.seekWidgetByName("red_shadow").setVisible(!0);
            var t = e.seekWidgetByName("btn_together_10_gacha");
            t.addTouchEventListener(function(t, n) {
                n === ccui.Widget.TOUCH_ENDED && (console.log("ted"),
                this._continueGacha(e, e.routerParams.ga_010))
            }, this),
            this._setContinueGachaText(e, e.routerParams.ga_010, "btn_together_10_gacha")
        },
        _fillupResultCards: function(e) {
            i.each(e.routerParams.ga_010.results, function(t, n) {
                var a = e.seekWidgetByName("ga_result_corecard_ui_" + n)
                  , s = a.seekWidgetByName("corecard_ui");
                console.log(t);
                var o;
                i.isUndefined(t.summon_info) ? i.isUndefined(t.weapon_info) || (o = t.weapon_info,
                o.weapon_id = o.id,
                this._setWeaponCoreCardElementRarity(a, o),
                s.seekWidgetByName("weapon_img").addTouchEventListener(function(t, n) {
                    n === ccui.Widget.TOUCH_ENDED && (console.log(""),
                    console.log("touch eapon_id=" + o.id),
                    this._navigate010To011(o, e.routerParams.ga_010.params))
                }, this)) : (o = t.summon_info,
                o.summon_id = o.id,
                this._setSummonCoreCardElementRarity(a, o),
                s.seekWidgetByName("summon_img").addTouchEventListener(function(t, n) {
                    n === ccui.Widget.TOUCH_ENDED && (console.log("touch summon_id=" + o.id),
                    this._navigate010To012(o, e.routerParams.ga_010.params))
                }, this)),
                a.seekWidgetByName("icon_new").setVisible(o.is_new)
            }, this);
            for (var t = 0; 10 > t; t++) {
                var n = e.seekWidgetByName("ga_result_corecard_ui_" + t);
                n.setVisible(!0)
            }
        },
        _setCoreCard: function(e, n, a, s) {
            $staticRes(res["core-corecard_chara-corecard_chara_ui"]),
            $staticRes(res["core-corecard_summon-corecard_summon_ui"]),
            $staticRes(res["core-corecard_weapon-corecard_weapon_ui"]),
            e.seekWidgetByName("corecard_ui").addChild(ccs.load($dynamicRes(res["core-corecard_" + n + "-corecard_" + n + "_ui"])).node),
            e.seekWidgetByName(n + "_img").loadTexture(t.Img("corecard", n, i.padZero(a.id, 4), 0).jpg),
            e.seekWidgetByName("icon_new").setVisible(a.is_new),
            e.setVisible(!0),
            e.seekWidgetByName("icon_rarity").loadTexture("core/res/icon/rarityicon_" + a.rare + ".png", ccui.Widget.PLIST_TEXTURE),
            e.seekWidgetByName("icon_element").loadTexture("core/res/icon/elementicon_" + a.element_type + ".png", ccui.Widget.PLIST_TEXTURE),
            e.seekWidgetByName(n + "_img").addTouchEventListener(function(e, n) {
                if (n === ccui.Widget.TOUCH_ENDED) {
                    var i = {};
                    i[s] = {
                        id: a.id,
                        navigate: this.routerParams.ga_010.navigate,
                        getItemNoArray: [],
                        getItemNameArray: []
                    },
                    t.createInstance("router").navigate("gacha/" + s, i)
                }
            }, this)
        },
        _setItemInfo: function(e) {
            var t = e.routerParams.ga_010.params
              , n = "";
            t.present ? n = "プレゼントに送られました！\r\n" : e.seekWidgetByName("btn_present").setVisible(!1);
            var a = !1;
            i.each(e.routerParams.ga_010.results, function(e) {
                if (!i.isUndefined(e.summon_info) || !i.isUndefined(e.weapon_info.character_joined_info)) {
                    var t = e.summon_info || e.weapon_info;
                    a || t.is_new !== !0 || (n += "新しい仲間が加わりました！\r\n",
                    a = !0)
                }
            }, this);
            var s = ccui.helper.seekWidgetByName(e, "get_label");
            s.setString(n)
        },
        _setItemPopup: function(e) {
            if (!i.isUndefined(e.routerParams.ga_010.getItemNameArray) && e.routerParams.ga_010.getItemNameArray.length > 0) {
                var a = e.popups.popupSSRText;
                a.open().then(function() {
                    a.loadTextures({
                        item_img: t.Img("corecard", "item", i.padZero(e.routerParams.ga_010.getItemNoArray[0], 4)).jpg
                    });
                    var s = a.seekWidgetByName("labelimg_0")
                      , o = '<div class="text_common" style="width:400px;font-size:18px;word-break:break-all;">入手したことのあるSSR神姫解放ウェポンを<br />手に入れたため、' + e.routerParams.ga_010.getItemNameArray[0] + "を<br />1個入手しました。</div>";
                    t.convertHTMLToTexture(o, n.size(400, 80), t.GameConfig.POPUP_CSS).then(function(e) {
                        s.loadTexture(e)
                    }
                    .bind(this)),
                    t.setTouchEventHandlers(a, {
                        "TOUCH_ENDED blue_btn": function() {
                            if (e.routerParams.ga_010.getItemNameArray.shift(),
                            e.routerParams.ga_010.getItemNoArray.shift(),
                            e.routerParams.ga_010.getItemNameArray.length > 0) {
                                a.loadTextures({
                                    item_img: t.Img("corecard", "item", i.padZero(e.routerParams.ga_010.getItemNoArray[0], 4)).jpg
                                });
                                var s = a.seekWidgetByName("labelimg_0")
                                  , o = '<div class="text_common" style="width:400px;font-size:18px;word-break:break-all;">入手したことのあるSSR神姫解放ウェポンを<br />手に入れたため、' + e.routerParams.ga_010.getItemNameArray[0] + "を<br />1個入手しました。</div>";
                                t.convertHTMLToTexture(o, n.size(400, 80), t.GameConfig.POPUP_CSS).then(function(e) {
                                    s.loadTexture(e)
                                }
                                .bind(this))
                            } else
                                a.dismiss()
                        }
                        .bind(this)
                    })
                }
                .bind(this))
            }
        },
        _getRecordsReleasedEpisode: function(e) {
            var e = e || {};
            if (!e.ga_010)
                return [];
            if (!e.ga_010.results)
                return [];
            var t = e.ga_010.results || [];
            return i.filter(t, function(e) {
                if (e.weapon_info) {
                    var t = e.weapon_info.character_joined_info || {};
                    return t.is_episode_release
                }
                if (e.summon_info) {
                    var n = e.summon_info || {};
                    return n.is_episode_release
                }
            }).map(function(e) {
                if (e.weapon_info) {
                    var t = e.weapon_info.character_joined_info;
                    return {
                        setCoreCardFunc: this._setCharacterCoreCardElementRarity.bind(this),
                        id: t.character_id,
                        name: t.character_name,
                        element_type: t.element_type,
                        rare: t.rare
                    }
                }
                if (e.summon_info) {
                    var t = e.summon_info;
                    return {
                        setCoreCardFunc: this._setSummonCoreCardElementRarity.bind(this),
                        id: t.id,
                        name: t.name,
                        element_type: t.element_type,
                        rare: t.rare
                    }
                }
                return console.warn("invalid parameter"),
                {}
            }, this)
        },
        _showPopupReleasedEpisodeIfExists: function(e) {
            this._recordsReleasedEpisode || (this._recordsReleasedEpisode = this._getRecordsReleasedEpisode(e.routerParams));
            var t = this._recordsReleasedEpisode.shift();
            t && e.popups.popupOpenEpisode.open(t)
        }
    }),
    t.assignRoles(t.pc.gacha.ga_010.SceneDelegate, [t.pc.roles.UIUtility, t.pc.roles.CoreCardCommon, t.pc.gacha.roles.GachaContinueButton, t.pc.gacha.roles.Routing])
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_011 = t.pc.gacha.ga_011 || {},
    t.pc.gacha.ga_011.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_011/ga_011.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_011/ga_011.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga011Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_011"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBlueL"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_blue_l", function() {
                alert("{{長文の為、仕様書参照}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBlueL2"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_blue_l_2", t.createInstance("router").navigate.bind(t.createInstance("router"), "present/prs_001_2_3")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_011 = t.pc.gacha.ga_011 || {},
    t.pc.gacha.ga_011.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupGaCheckUseStoneTicket: {
                factoryName: "popupFactoryGaCheckUseStoneTicket"
            },
            popupGaNeedItem: {
                factoryName: "popupFactoryGaNeedItem"
            },
            popupGaNeedSpace: {
                factoryName: "popupFactoryGaNeedSpace"
            },
            popupSSRText: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-ga_item_info",
                content: "入手したことのあるSSR神姫解放ウェポンを手に入れたため、を1個入手しました。",
                title: "アイテム入手",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        _open_count: 0,
        onSceneInit: function(e) {
            a.defer();
            this._verifyRouterParams011(e);
            var t = e.routerParams.ga_011;
            return this._loadWeapon(t.id, t.bonus).then(function(e) {}
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            this._complementControlsEvent(e),
            e._open_count = 0,
            this._setItemPopup(e),
            this._getContinueGachaNeedParams(e, e.routerParams.ga_011).then(function() {
                this._setGa011Controls(e)
            }
            .bind(this))
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnBlueL: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._continueGacha(e, e.routerParams.ga_011),
            t.promise
        },
        btnCallbackBtnBlueL2: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate011_012ToPrs001(),
            t.promise
        },
        btnCallbackBtnGaBack: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._isSingleResult(e) ? this._navigate011_012To000() : this._navigate011_012To010(),
            t.promise
        },
        _complementControlsEvent: function(e) {},
        _isSingleResult: function(e) {
            return "gacha/ga_010" != e.routerParams.ga_011.navigate
        },
        _setGa011Controls: function(e) {
            var t = this._isSingleResult(e)
              , n = e.seekWidgetByName("btn_ga_back");
            if (null !== n) {
                var i = t ? "◀ ガチャトップに戻る" : "◀ ガチャ結果に戻る";
                n.setStrings({
                    back_ga_label: i
                })
            }
            var a = e.seekWidgetByName("btn_blue_l");
            null === a ? console.debug("[ERROR] Could not find btn_blue_l.") : (a.setVisible(t),
            a.visible && this._setContinueGachaText(e, e.routerParams.ga_011, "btn_blue_l"));
            var s = e.seekWidgetByName("btn_blue_l_2");
            return null === s ? void console.debug("[ERROR] Could not find btn_blue_l_2.") : void s.setVisible(e.routerParams.ga_011.params.present)
        },
        _setItemPopup: function(e) {
            if (!i.isUndefined(e.routerParams.ga_011.getItemNameArray) && e.routerParams.ga_011.getItemNameArray.length > 0) {
                e._open_count++;
                var a = e.popups.popupSSRText;
                a.open().then(function() {
                    a.loadTextures({
                        item_img: t.Img("corecard", "item", i.padZero(e.routerParams.ga_011.getItemNoArray[0], 4)).jpg
                    });
                    var s = a.seekWidgetByName("labelimg_0")
                      , o = '<table style="width: 400px;height: 80px;"><tr><td><div class="text_common">入手したことのあるSSR神姫解放ウェポンを手に入れたため、<br />' + e.routerParams.ga_011.getItemNameArray[0] + "を1個入手しました。</div></td></tr></table>";
                    t.convertHTMLToTexture(o, n.size(400, 80), t.GameConfig.POPUP_CSS).then(function(e) {
                        s.loadTexture(e)
                    }
                    .bind(this))
                }
                .bind(this))
            }
        }
    }),
    t.assignRoles(t.pc.gacha.ga_011.SceneDelegate, [t.pc.roles.UIUtility, t.pc.gacha.roles.GachaContinueButton, t.pc.gacha.roles.Routing, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.status.roles.BurstCommon, t.pc.status.roles.WeaponSkillCommon, t.pc.scene.roles.SceneWeaponCommon])
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_012 = t.pc.gacha.ga_012 || {},
    t.pc.gacha.ga_012.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_012/ga_012.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_012/ga_012.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga012Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_012"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBlueL"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_blue_l", function() {
                alert("{{長文の為、仕様書参照}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBlueL2"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_blue_l_2", t.createInstance("router").navigate.bind(t.createInstance("router"), "present/prs_001_2_3")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._,
    e.Q);
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_012 = t.pc.gacha.ga_012 || {},
    t.pc.gacha.ga_012.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupGaCheckUseStoneTicket: {
                factoryName: "popupFactoryGaCheckUseStoneTicket"
            },
            popupGaNeedItem: {
                factoryName: "popupFactoryGaNeedItem"
            },
            popupGaNeedSpace: {
                factoryName: "popupFactoryGaNeedSpace"
            }
        },
        onSceneInit: function(e) {
            n.defer();
            this._verifyRouterParams012(e);
            var t = e.routerParams.ga_012;
            return this._loadSummon(t.id, t.bonus).then(function(e) {}
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            this._complementControlsEvent(e),
            this._getContinueGachaNeedParams(e, e.routerParams.ga_012).then(function() {
                this._setGa012Controls(e)
            }
            .bind(this))
        },
        onSceneEnter: function(e) {
            n.defer();
            return n.resolve()
        },
        onSceneExit: function(e) {
            n.defer();
            return n.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = n.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnBlueL: function(e) {
            var t = n.defer();
            return t.reject(this._override),
            this._continueGacha(e, e.routerParams.ga_012),
            t.promise
        },
        btnCallbackBtnBlueL2: function(e) {
            var t = n.defer();
            return t.reject(this._override),
            this._navigate011_012ToPrs001(),
            t.promise
        },
        btnCallbackBtnGaBack: function(e) {
            var t = n.defer();
            return t.reject(this._override),
            this._isSingleResult(e) ? this._navigate011_012To000() : this._navigate011_012To010(),
            t.promise
        },
        _complementControlsEvent: function(e) {},
        _isSingleResult: function(e) {
            return "gacha/ga_010" != e.routerParams.ga_012.navigate
        },
        _setGa012Controls: function(e) {
            var t = this._isSingleResult(e)
              , n = e.seekWidgetByName("btn_ga_back");
            if (null !== n) {
                var i = t ? "◀ ガチャトップに戻る" : "◀ ガチャ結果に戻る";
                n.setStrings({
                    back_ga_label: i
                })
            }
            var a = e.seekWidgetByName("btn_blue_l");
            null === a ? console.debug("[ERROR] Could not find btn_blue_l.") : (a.setVisible(t),
            a.visible && this._setContinueGachaText(e, e.routerParams.ga_012, "btn_blue_l"));
            var s = e.seekWidgetByName("btn_blue_l_2");
            return null === s ? void console.debug("[ERROR] Could not find btn_blue_l_2.") : void s.setVisible(e.routerParams.ga_012.params.present)
        }
    }),
    t.assignRoles(t.pc.gacha.ga_012.SceneDelegate, [t.pc.gacha.ga_012.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.gacha.roles.GachaContinueButton, t.pc.gacha.roles.Routing, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.scene.roles.SceneSummonCommon])
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_013 = t.pc.gacha.ga_013 || {},
    t.pc.gacha.ga_013.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_013/ga_013.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_013/ga_013.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga013Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_013"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_013 = t.pc.gacha.ga_013 || {},
    t.pc.gacha.ga_013.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParams013(e);
            var n = t.createInstance("apiGacha").getSliderDetail(e.routerParams.ga_013.id).then(function(t) {
                console.log(t),
                this._setTopEventImage(e, t.body),
                this._loadFitPanel(e, t.body),
                this._fillupReleaseWeapons(e, t.body.release_weapons),
                this._fillupSummons(e, t.body.summons, this._summonPos)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n;
            var n
        },
        onPageInAnimationEnd: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        _setTopEventImage: function(e, i) {
            e.loadTextures({
                gachatop_slider: t.Img("gachaimg", "event", n.padZero(i.slider_id, 4)).jpg
            })
        },
        _loadFitPanel: function(e, t) {
            var i = (e.seekWidgetByName("window_gray"),
            e.seekWidgetByName("ga_013_introduction_list_ui"));
            i.setVisible(!0);
            if (0 == t.summons.length)
                i.animate("ga_013_b", !1);
            else if (0 == t.release_weapons.length)
                this._summonPos = n.map(n.range(0, 8)),
                i.animate("ga_013_d", !1);
            else if (t.release_weapons.length <= 2 && t.summons.length <= 4)
                this._summonPos = n.map(n.range(0, 4)),
                i.animate("ga_013_c", !1);
            else if (t.release_weapons.length <= 3 && t.summons.length <= 2) {
                this._summonPos = n.map(n.range(0, 2));
                var a = i.getAnimInfo("ga_013_a");
                a.action.gotoFrameAndPause(0)
            }
        },
        _fillupReleaseWeapons: function(e, t) {
            n.each(n.range(4), function(t) {
                e.seekWidgetByName("ga_weapon_chara_ui_" + t).setVisible(!1)
            }),
            n.each(t, function(t, n) {
                var i = e.seekWidgetByName("ga_weapon_chara_ui_" + n);
                i.setVisible(!0),
                this._panelAppearance(e, i, t),
                this._panelTouchEvent(e, i, t)
            }, this)
        },
        _fillupSummons: function(e, t, i) {
            n.each(n.range(8), function(t) {
                e.seekWidgetByName("corecard_summon_ui_" + t).setVisible(!1)
            }),
            n.each(t, function(t, n) {
                var a = e.seekWidgetByName("corecard_summon_ui_" + i[n]);
                a.setVisible(!0),
                this._panelAppearance4Summon(e, a, t),
                this._panelTouchEvent4Summon(e, a, t)
            }, this)
        },
        _panelAppearance: function(e, i, a) {
            console.log(a);
            var s = (i.seekWidgetByName("corecard_weapon_ui"),
            t.createInstance("CoreCardWeaponUI", ["e_r"]));
            s.setImg(a.weapon.id, 0),
            console.log("element_Type になっているのでいつか直してほしい"),
            s.setIconElement(a.weapon.element_Type),
            s.setIconRarity(a.weapon.rare);
            var o = s.getResult()
              , r = i.seekWidgetByName("corecard_weapon_ui");
            r.removeAllChildren(),
            r.addChild(o),
            i.loadTextures({
                gachacard_chara: t.Img("gachacard", "chara", n.padZero(a.character.id, 4), 0).png
            })
        },
        _panelTouchEvent: function(e, n, i) {
            t.setTouchEventHandlers(n, {
                "TOUCH_ENDED weapon_img": function() {
                    this._navigate013To007(e, i)
                }
                .bind(this)
            }),
            t.setTouchEventHandlers(n, {
                "TOUCH_ENDED gachacard_chara": function() {
                    this._navigate013To008(e, i)
                }
                .bind(this)
            })
        },
        _panelAppearance4Summon: function(e, n, i) {
            console.log(i);
            var a = t.createInstance("CoreCardSummonUI", ["e_r"]);
            a.setImg(i.id, 0),
            a.setIconElement(i.element_type),
            a.setIconRarity(i.rare);
            var s = a.getResult();
            n.removeAllChildren(),
            n.addChild(s),
            n.setVisible(!0)
        },
        _panelTouchEvent4Summon: function(e, n, i) {
            t.setTouchEventHandlers(n, {
                "TOUCH_ENDED summon_img": function() {
                    this._navigate013To006(e, i)
                }
                .bind(this)
            })
        }
    }),
    n.assign(t.pc.gacha.ga_013.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.gacha.roles.Routing)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_014 = t.pc.gacha.ga_014 || {},
    t.pc.gacha.ga_014.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_014/ga_014.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_014/ga_014.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            btn_chara: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("ga_014_a_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("ga_014_a_node").setVisible(!1),
                e.seekWidgetByPath("ga_014_b_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnChara";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            btn_summon: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("ga_014_b_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("ga_014_a_node").setVisible(!1),
                e.seekWidgetByPath("ga_014_b_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnSummon";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga014Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_014"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEpiInfo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_epi_info", function() {
                alert("popup com_tutorialを表示")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_014 = t.pc.gacha.ga_014 || {},
    t.pc.gacha.ga_014.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupSceneCheck: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-ga_scene_check",
                title: "エピソード紹介",
                buttonLabels: {
                    blueBtn: "ステータス確認",
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupSubTutorial: {
                factoryName: "popupFactorySubTutorial",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss();
                    }
                }
            }
        },
        onSceneInit: function(e) {
            i.defer();
            return this._fillupEnhEvoEntryBtnsList(e, "chara", "_touchCharaCard"),
            this._fillupEnhEvoEntryBtnsList(e, "summon", "_touchSummonCard"),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnEpiInfo: function(e) {
            var t = i.defer();
            t.reject(this._override);
            var n = e.popups.popupSubTutorial;
            return n.setTypeAndOpen("harem", "subtutorial"),
            t.promise
        },
        _touchCharaCard: function(e, t, n) {
            console.log(t),
            this._showPopupEpisode(t, "chara", n)
        },
        _touchSummonCard: function(e, t, n) {
            console.log(t),
            this._showPopupEpisode(t, "summon", n)
        },
        _showPopupEpisode: function(e, i, a) {
            var s = "chara" == i ? e.character_id : e.summon_id
              , o = i
              , r = {};
            r["chara" == i ? "ga_008" : "ga_006"] = {
                id: s
            };
            var c = a.popups.popupSceneCheck;
            c.open().then(function() {
                if (c.setTitle(e.title),
                c.loadTextures({
                    scene_img: t.Img("scene-check", o, n.padZero(s, 4)).png
                }),
                console.log(t.Img("scene-check", o, n.padZero(s, 4)).png),
                t.env.isR18)
                    c.setStrings({
                        synopsis_label: e.description
                    });
                else {
                    var r = c.contentNode.seekWidgetByName("synopsis_label");
                    r.setString("年齢制限コンテンツのため内容を伏せております。\n本コンテンツは神姫PROJECT　R指定版より\nお楽しみ頂けます。"),
                    r.width = 540
                }
                t.setTouchEventHandlers(c, {
                    "TOUCH_ENDED blue_btn": function() {
                        "chara" === i ? this._navigate014To008(a, e.character_id) : this._navigate014To006(a, e.summon_id)
                    }
                    .bind(this)
                }, this)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    n.assign(t.pc.gacha.ga_014.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.gacha.roles.Routing, t.pc.gacha.roles.HaremEpiBtnsPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        ga_tips: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("ga_tips")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: ga_tips"),
                e || ""
            }(),
            title: "取得条件",
            buttonLabels: {
                blackBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        }
    };
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_100 = t.pc.gacha.ga_100 || {},
    t.pc.gacha.ga_100.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_001_2_3_4/ga_002.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_001_2_3_4/ga_002.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "ga100Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_100"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnArrivalList"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_arrival_list", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_005")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNotice"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_notice", function(e) {
                this.popups.ga_tips.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRate"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_rate", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_009")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnPrevGacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_prev_gacha", function() {
                alert("{{現在表示しているガチャのバナーの１つ前のガチャに切り替え表示。一番端まで行った場合、ループさせる。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnNextGacha"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_next_gacha", function() {
                alert("{{現在表示しているガチャのバナーの１つ次のガチャに切り替え表示。一番端まで行った場合、ループさせる。}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_100 = t.pc.gacha.ga_100 || {},
    t.pc.gacha.ga_100.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            ga_tips: {
                factoryName: "popupFactoryGaTips"
            },
            popupUseStone: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-ga_check_stone-ticket",
                title: "使用確認",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                },
                onPopupOpened: function(e, s) {
                    e.loadTextures({
                        stone_or_ticket_img: t.Img("corecard", "gacha", i.padZero(s.gachaId, 4)).jpg
                    }),
                    e.setHtmlStrings({
                        confirm_labelimg: ["<span class='white'>チケットでガチャを引く</span><br />", "<span class='orange'>所持チケット数：</span><span class='white'>" + s.before + "&rarr;</span>", "<span class='red'>" + s.after + "</span><br />", "<span class='white'>よろしいですか？</span>"].join("\n")
                    }, t.GameConfig.POPUP_CSS);
                    var o = function() {
                        return t.createInstance("apiAGacha").playGacha("ticket", s.gachaId).then(function(e) {
                            return e.body
                        }, function(e) {
                            console.error(e),
                            a.reject(e)
                        })
                    }
                    .bind(s)
                      , r = function(e) {
                        var t = n.director.getRunningScene()
                          , i = t._delegate;
                        i._navigate100ToGaAni(e, s.gachaId, "gacha/ga_100", i._getEventId())
                    }
                    .bind(s);
                    t.setTouchEventHandlers(e, {
                        "TOUCH_ENDED blue_btn": function() {
                            o().then(r)
                        }
                    })
                }
            },
            popupComText: {
                factoryName: "popupFactoryTextOnly",
                content: "ガチャを引くのに必要なガチャチケットが足りないため、ガチャをひくことができません",
                title: "ガチャを引くことができません",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        onSceneInit: function(e) {
            if (this._category = "event",
            i.isUndefined(e.routerParams.ga_100) ? this._setEventId(e.routerParams.event_id) : this._setEventId(e.routerParams.ga_100.event_id),
            this._navigateGaAniIfHasPaymentId(e))
                return a.resolve();
            this._setGachaToGachaSlider(e);
            var n = t.createInstance("apiAGacha").getEventCategory(this._getEventId()).then(function(t) {
                console.log(t.body),
                this._gachaData = t.body;
                var n = t.body
                  , i = this._getGachaDelegate(n);
                if (!i)
                    return console.error("gacha delegate not found"),
                    a.reject(new Error("gacha delegate not found"));
                i.updateRateButton(this._getRateButton(e), n),
                this._setGachaHeaderImage(e, n),
                this._setGachaHeaderDescription(e),
                this._setGachaSlider(e),
                i.updateTicketLabel(this._getTicketLabel(e), n);
                var s = this._getGachaButtonsByGroups(e, n.groups || []);
                i.updateGachaButtons(s, n),
                i.setGachaButtonEvents(s, n)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        onSceneEnter: function(e) {
            a.defer();
            return this._getTicketLabel(e).parent.setVisible(!1),
            this._getRateButton(e).setVisible(!1),
            a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return this._stopAutoScroll(),
            a.resolve()
        },
        _getGachaDelegate: function(e) {
            return t.createInstance("ga100DelegateFactory").create(e)
        },
        btnCallbackBtnArrivalList: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate100To005(e),
            t.promise
        },
        btnCallbackBtnNotice: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnRate: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate100To009(e),
            t.promise
        },
        btnCallbackBtnPrev: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnNext: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnPrevGacha: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate000ToGacha(e, this._getPrevGachaCategory()),
            t.promise
        },
        btnCallbackBtnNextGacha: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate000ToGacha(e, this._getNextGachaCategory()),
            t.promise
        },
        _setEventId: function(e) {
            this._eventId = e
        },
        _getEventId: function() {
            return this._eventId
        },
        _getRateButton: function(e) {
            var t = "btn_rate"
              , n = e.seekWidgetByName(t);
            if (!n)
                throw new Error("node not found: " + t);
            return n
        },
        _getTicketLabel: function(e) {
            var t = "have_label"
              , n = e.seekWidgetByName(t);
            if (!n)
                throw new Error("node not found: " + t);
            return n
        },
        _getGachaButtonsByGroups: function(e, t) {
            var n = this._getGachaButtonsMapping(t);
            return this._getGachaButtons(e, n)
        },
        _getGachaButtons: function(e, n) {
            return i.mapValues(n, function(n, a) {
                var s = e.seekWidgetByName(n);
                if (!s)
                    throw new Error("node not found: " + n);
                return s = i.extend(s, {
                    setGachaButtonImage: function(e, n) {
                        t.pc.gacha.roles.GachaButtonCommon._setGachaButtonImage.call(null , this, e, n)
                    },
                    setEnableButton: function(e) {
                        t.pc.roles.UIUtility._setEnableButton.call(null , this, e)
                    }
                })
            })
        },
        _getGachaButtonsMapping: function(e) {
            e = e || [];
            var t = i.map(e, function(e) {
                return e.gacha_count
            }).map(function(e) {
                return 1 === e ? [e, "btn_bottom_gacha"] : [e, "btn_top_gacha"]
            });
            return i(t).zipObject().value()
        },
        _navigateGaAniIfHasPaymentId: function(e) {
            return e.routerParams.payment_id ? (t.createInstance("apiAGachaResult").putGachaResult(e.routerParams.payment_id).then(function(t) {
                var n = e.routerParams.gacha_id
                  , i = t.body;
                this._navigate100ToGaAni(i, n, "gacha/ga_100", this._getEventId(), "event")
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            !0) : !1
        },
        _playGacha: function(e, t) {
            this._navigate100ToGaAni(e, t, "gacha/ga_100", this._getEventId(), "event")
        }
    }),
    i.assign(t.pc.gacha.ga_100.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.gacha.roles.Routing, t.pc.gacha.roles.PlayGachaBase, t.pc.gacha.roles.GachaToGachaSlider, t.pc.gacha.roles.GachaButtonCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh;
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_100 = t.pc.gacha.ga_100 || {},
    t.pc.gacha.ga_100.DelegateFactory = cc.Class.extend({
        create: function(e) {
            if (!e)
                throw new Error("gachaData is not specified");
            var n = t.pc.gacha.ga_100.delegate.PointGachaDelegate;
            if (!n)
                throw new Error("PointGachaDelegate is undefined");
            var i = t.pc.gacha.ga_100.delegate.TicketGachaDelegate;
            if (!i)
                throw new Error("TicketGachaDelegate is undefined");
            if (this._isPointGacha(e))
                return new n;
            if (this._isTicketGacha(e))
                return new i;
            throw new Error("invalid type: " + e.payment_type)
        },
        _isPointGacha: function(e) {
            return "point" === e.payment_type
        },
        _isTicketGacha: function(e) {
            return "ticket" === e.payment_type
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh;
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_100 = t.pc.gacha.ga_100 || {},
    t.pc.gacha.ga_100.delegate = t.pc.gacha.ga_100 || {},
    t.pc.gacha.ga_100.delegate.IGachaDelegate = {
        updateRateButton: function(e) {
            throw new Error("not implemented")
        },
        updateGachaButtons: function(e, t) {
            throw new Error("not implemented")
        },
        updateTicketLabel: function(e, t) {
            throw new Error("not implemented")
        },
        setGachaButtonEvents: function(e, t) {
            throw new Error("not implemented")
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh;
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_100 = t.pc.gacha.ga_100 || {},
    t.pc.gacha.ga_100.delegate = t.pc.gacha.ga_100.delegate || {},
    t.pc.gacha.ga_100.delegate.PointGachaDelegate = cc.Class.extend(_.assign({}, t.pc.gacha.ga_100.delegate.IGachaDelegate, {
        updateRateButton: function(e) {
            e.setAppearance("show")
        },
        updateGachaButtons: function(e, t) {
            if (!t.groups)
                throw new Error("no gacha groups");
            _.each(t.groups, function(t) {
                var n = t.gacha_id
                  , i = t.gacha_count
                  , a = t.enabled
                  , s = e[i];
                return s ? (s.setGachaButtonImage(n, i),
                s.setEnableButton(a),
                void s.setAppearance("show")) : void console.warn("button not found: " + i)
            }
            .bind(this))
        },
        updateTicketLabel: function(e, t) {
            e.parent.setAppearance("hide"),
            e.setAppearance("hide")
        },
        setGachaButtonEvents: function(e, n) {
            if (!n)
                throw new Error("gachaData is not specified");
            if (!n.groups)
                throw new Error("no gacha groups");
            _.each(n.groups, function(n) {
                var i = n.gacha_count
                  , a = e[i];
                if (!a)
                    return void console.warn("button not found: " + i);
                if (a.isVisible) {
                    var s = {};
                    s["TOUCH_ENDED " + a.name] = this._handleGachaButtonEvent.bind(this, n),
                    t.setTouchEventHandlers(a.parent, s)
                }
            }
            .bind(this))
        },
        _handleGachaButtonEvent: function(e) {
            if (!e)
                throw new Error("group is not specified");
            var t = e.gacha_id;
            if (!t)
                throw new Error("gachaId is not defined");
            this._requestPayment(e).then(function(e) {
                this._playGacha(e, t)
            }
            .bind(this)).fail(function(e) {
                console.error(e)
            })
        },
        _requestPayment: function(e) {
            var n = cc.director.getRunningScene()
              , i = n._delegate;
            return t.createInstance("paymentRequest").requestGacha({
                num: 1,
                name: e.title || "ガチャ!!",
                description: e.description || "ガチャ説明!!",
                price: e.price,
                gachaId: e.gacha_id
            }, {
                component: "gacha",
                route: "ga_100",
                event_id: i._getEventId(),
                gacha_id: e.gacha_id
            })
        },
        _playGacha: function(e, t) {
            var n = cc.director.getRunningScene()
              , i = n._delegate;
            i._navigate100ToGaAni(e, t, "gacha/ga_100", i._getEventId(), "event")
        }
    }))
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh;
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_100 = t.pc.gacha.ga_100 || {},
    t.pc.gacha.ga_100.delegate = t.pc.gacha.ga_100.delegate || {},
    t.pc.gacha.ga_100.delegate.TicketGachaDelegate = cc.Class.extend(_.assign({}, t.pc.gacha.ga_100.delegate.IGachaDelegate, {
        updateRateButton: function(e) {
            e.setAppearance("hide")
        },
        updateGachaButtons: function(e, t) {
            if (!t.groups)
                throw new Error("no gacha groups");
            _.each(t.groups, function(t) {
                var n = t.gacha_id
                  , i = t.gacha_count
                  , a = t.enabled
                  , s = e[i];
                return s ? (s.setGachaButtonImage(n, i),
                s.setEnableButton(a),
                void s.setAppearance("show")) : void console.warn("button not found: " + i)
            })
        },
        updateTicketLabel: function(e, t) {
            if (!t.groups)
                throw new Error("gacha groups not defined");
            var n = t.groups[0];
            if (!n)
                throw new Error("gacha group not found: 0");
            var i = t.groups[0].gacha_id;
            this._getTicketCountPromise(i).then(function(t) {
                e.setString("所持枚数：" + t)
            }
            .bind(this)),
            e.parent.setAppearance("show"),
            e.setAppearance("show")
        },
        _getTicketCountPromise: function(e) {
            return t.createInstance("apiAGacha").getCheckUsing(e).then(function(e) {
                return e.body.before_num
            }, function(e) {
                return console.error(e),
                Q.reject(e)
            })
        },
        setGachaButtonEvents: function(e, n) {
            if (!n)
                throw new Error("gachaData is not specified");
            if (!n.groups)
                throw new Error("gacha groups is not defined");
            var i = n.groups[0];
            if (!i)
                return void console.info("gacha group not found: " + idx);
            var a = i.gacha_count
              , s = {}
              , o = e[a];
            if (!o)
                throw new Error("button not found: " + a);
            s["TOUCH_ENDED " + o.name] = this._handleGachaButtonEvent.bind(this, i),
            t.setTouchEventHandlers(o.parent, s)
        },
        _handleGachaButtonEvent: function(e) {
            if (!e)
                throw new Error("gacha group not specified");
            var t = e.gacha_id;
            if (!t)
                throw new Error("gachaId is not defined");
            this._inspectTicket(t).then(function(e) {
                this._showPopupUseTicket(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e)
            })
        },
        _inspectTicket: function(e) {
            if (!e)
                throw new Error("gachaId is not specified");
            return t.createInstance("apiAGacha").getCheckUsing(e).then(function(t) {
                var n = t.body;
                return Q.resolve({
                    gachaId: e,
                    before: n.before_num,
                    after: n.after_num
                })
            })
        },
        _showPopupUseTicket: function(e) {
            var t = cc.director.getRunningScene()
              , n = t.popups.popupUseStone;
            return n.open(e)
        }
    }))
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_ani = t.pc.gacha.ga_ani || {},
    t.pc.gacha.ga_ani.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("ga_ani/ga_ani.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: ga_ani/ga_ani.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "gaAniDelegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["gacha", "ga_ani"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSkip"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_skip", t.createInstance("router").navigate.bind(t.createInstance("router"), "gacha/ga_010")),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.gacha = t.pc.gacha || {},
    t.pc.gacha.ga_ani = t.pc.gacha.ga_ani || {},
    t.pc.gacha.ga_ani.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            a.defer();
            return e._disable_sharpness_filter = !0,
            e.footerDelegate = e.headerDelegate = e.mainMenuDelegate = e.subMenuDelegate = new t.EmptyDelegate,
            this._verifyRouterParamsAni(e),
            this._initialize(e.routerParams.ga_ani.data, !0),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        _navigateToResultScene: function() {
            var e = n.director.getRunningScene()
              , t = e.routerParams.ga_ani
              , a = t.data;
            if (i.isEmpty(e.temporaryRouterParams) || i.isEmpty(e.temporaryRouterParams.result_to)) {
                var s = t.navigate
                  , o = t.present !== !1
                  , r = t.event_id
                  , c = t.gacha_id
                  , u = t.category;
                this._navigateGaAniToResult(a, s, o, c, r, u)
            } else
                this._navigateGaAniToSpecialResult(a, e.temporaryRouterParams.result_to)
        },
        _showIOSSoundTouchFieldWithoutNavigation: function() {
            t.env.isIOS && t.postMessage("showIOSSoundTouchField", [])
        }
    }),
    i.assign(t.pc.gacha.ga_ani.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.gacha.roles.Routing, t.pc.scene.roles.SceneGachaAnimation)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc.present = t.pc.present || {},
    t.pc.present.roles = t.pc.present.roles || {},
    $staticRes(res["core-popup-prs_receive"]),
    $staticRes(res["core-popup-prs_receive_check_result"]),
    $staticRes(res["core-popup-prs_carry_limit"]),
    t.pc.present.roles.PRESENT_TYPE_BY_DIRECTION = {
        weapon: {
            direction: "enh_evo/enh_001",
            label: "強化へ"
        },
        summon: {
            direction: "enh_evo/enh_006",
            label: "強化へ"
        },
        item: {
            direction: "quest/q_001",
            label: "クエストへ"
        },
        stone: {
            direction: "gacha/ga_001",
            label: "ガチャへ"
        },
        gem: {
            direction: "gacha/ga_001",
            label: "ガチャへ"
        },
        treasure: {
            direction: "shop/sh_004",
            label: "ショップへ"
        },
        job_point: {
            direction: "party/par_007",
            label: "英霊解放へ"
        }
    },
    t.pc.present.roles.PresentPopups = {
        _popups: {
            popupReceivePresent: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-prs_receive",
                title: "プレゼント受け取り",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss();
                        var t = this.seekWidgetByName("contents_panel");
                        t && t.removeAllChildren()
                    },
                    blueBtn: function(e) {
                        var t = this.getTag();
                        console.debug("receiving present id=" + t);
                        var n = e._delegate;
                        this.dismiss();
                        var i = this.seekWidgetByName("contents_panel");
                        i && i.removeAllChildren(),
                        n._receivePresent.apply(n, [t])
                    }
                }
            },
            popupReceivePresentConfirm: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-prs_receive_check_result",
                title: "一括受取確認",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "OK"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss();
                        var t = this.seekWidgetByName("contents_panel");
                        t && t.removeAllChildren()
                    },
                    blueBtn: function(e) {
                        var t = e._delegate
                          , n = this.getTag();
                        this.dismiss();
                        var i = this.seekWidgetByName("contents_panel");
                        i && i.removeAllChildren(),
                        t._receiveAllPresent.apply(t, [n])
                    }
                }
            },
            popupReceivePresentResult: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-prs_receive_check_result",
                title: "一括受取結果",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss();
                        var t = this.seekWidgetByName("contents_panel");
                        t && t.removeAllChildren()
                    }
                }
            },
            popupCarryLimitConfirm: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-prs_carry_limit",
                title: "プレゼント受け取り",
                buttonLabels: {
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss();
                        var t = this.seekWidgetByName("contents_panel");
                        t && t.removeAllChildren()
                    }
                }
            }
        },
        _openReceiveConfirmPopup: function(e, n) {
            var i = e.popups.popupReceivePresent;
            i.open().then(function() {
                this._setPresentPanelCoreCard(i, n),
                i.seekWidgetByName("corecard_ui").setVisible(!0),
                i.setTag(n.a_present_id),
                i.setStrings({
                    item_label: n.present_name
                }),
                i.setHtmlStrings({
                    receive_labelimg: "<table class='nb'><tr><td class='numbox_slong'><span class='white'>" + n.present_name + " " + n.count + "</span></td></tr></table>"
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _initVariablePopup: function(e) {
            e.seekWidgetByName("popup_base").height = 274,
            e.seekWidgetByName("main_panel").y = 123,
            e.seekWidgetByName("title_label").y = 244,
            e.seekWidgetByName("contents_panel").height = 8
        },
        __prepareLabelLine: function(e, t) {
            var n = e.clone()
              , i = n.seekWidgetByName("prs_label");
            i.setString(t);
            var a = n.seekWidgetByName("btn_transition");
            return null !== a && (a.y = a.y - 2,
            a.scale = 1.5),
            i.y = i.y - 5,
            n
        },
        _showReceiveConfirmPopup: function(e) {
            var t = e.received_info
              , a = e.not_received_info
              , s = n.director.getRunningScene()
              , o = s.popups.popupReceivePresentConfirm;
            o.open().then(function() {
                o.setTag(a),
                o.setStrings({
                    check_or_result_label: "以下のプレゼントを\r\nまとめて受け取りますか？"
                }),
                this._initVariablePopup(o);
                var e = o.seekWidgetByName("contents_panel");
                e.setLayoutType(ccui.Layout.LINEAR_VERTICAL),
                e.removeAllChildren();
                var n = ccs.load(res["core-popup-prs_receive_list_ui"]).node;
                i.each(t, function(t) {
                    var i = this.__prepareLabelLine(n, t.name + " " + t.count);
                    e.height = e.height + i.height,
                    e.addChild(i),
                    o.seekWidgetByName("popup_base").height = o.seekWidgetByName("popup_base").height + i.height,
                    o.seekWidgetByName("main_panel").y = o.seekWidgetByName("main_panel").y + i.height,
                    o.seekWidgetByName("title_label").y = o.seekWidgetByName("title_label").y + i.height
                }, this)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _showCarryLimitConfirmPopup: function(e, a) {
            var s = n.director.getRunningScene()
              , o = s.popups.popupCarryLimitConfirm;
            o.open().then(function() {
                this._initVariablePopup(o),
                i.isObject(a) && t.setTouchEventHandlers(o, {
                    "TOUCH_ENDED black_btn": function() {
                        o.dismiss(),
                        a.resolve()
                    }
                    .bind(this)
                }, this);
                var n = o.seekWidgetByName("contents_panel");
                n.setLayoutType(ccui.Layout.LINEAR_VERTICAL),
                n.removeAllChildren();
                var s = ccs.load(res["core-popup-prs_non_receive_list_ui"]).node;
                i.each(e, function(e) {
                    var a = this.__prepareLabelLine(s, e.name + " " + (i.isUndefined(e.count) ? "" : e.count));
                    n.height = n.height + a.height,
                    n.addChild(a),
                    i.find(t.pc.present.roles.PRESENT_TYPE_BY_DIRECTION, function(n, i) {
                        return e.type === i ? (a.seekWidgetByName("btn_transition").setTitleText(n.label),
                        a.seekWidgetByName("btn_transition").addTouchEventListener(function(e, i) {
                            t.createInstance("router").navigate(n.direction, {})
                        }, this),
                        !0) : void 0
                    }, this),
                    o.seekWidgetByName("popup_base").height = o.seekWidgetByName("popup_base").height + a.height,
                    o.seekWidgetByName("main_panel").y = o.seekWidgetByName("main_panel").y + a.height,
                    o.seekWidgetByName("title_label").y = o.seekWidgetByName("title_label").y + a.height
                }, this)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _receiveAllPresentShowResult: function(e, s, o) {
            var r = a.defer()
              , c = n.director.getRunningScene()
              , u = c.popups.popupReceivePresentResult;
            return u.open().then(function() {
                u.setStrings({
                    check_or_result_label: o
                }),
                t.setTouchEventHandlers(u, {
                    "TOUCH_ENDED blue_btn": function() {
                        u.dismiss(),
                        i.isEmpty(s) ? r.resolve() : this._showCarryLimitConfirmPopup(s, r)
                    }
                    .bind(this)
                }, this),
                this._initVariablePopup(u);
                var n = u.seekWidgetByName("contents_panel");
                n.removeAllChildren(),
                n.setLayoutType(ccui.Layout.LINEAR_VERTICAL);
                var a = ccs.load(res["core-popup-prs_receive_list_ui"]).node;
                i.each(e, function(e) {
                    var t = this.__prepareLabelLine(a, e.name + " " + e.count);
                    n.height = n.height + t.height,
                    n.addChild(t),
                    u.seekWidgetByName("popup_base").height = u.seekWidgetByName("popup_base").height + t.height,
                    u.seekWidgetByName("main_panel").y = u.seekWidgetByName("main_panel").y + t.height,
                    u.seekWidgetByName("title_label").y = u.seekWidgetByName("title_label").y + t.height
                }, this)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            r.promise
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.present = t.pc.present || {},
    t.pc.present.roles = t.pc.present.roles || {},
    t.pc.present.roles.PresentBtnsListController = {
        _fillupPresentBtnsList: function(e, t) {
            var n = [{
                targetNode: "tab_0_node",
                apiName: "apiAPresents",
                methodName: "getPresentList",
                apiParams: ["normal"],
                initFuncName: "_setPresentPanelNoLimit",
                notifyIcon: "new_icon_0"
            }, {
                targetNode: "tab_1_node",
                apiName: "apiAPresents",
                methodName: "getPresentList",
                apiParams: ["timelimit"],
                initFuncName: "_setPresentPanelLimit",
                notifyIcon: "new_icon_1"
            }, {
                targetNode: "tab_2_node",
                apiName: "apiAPresents",
                methodName: "getPresentList",
                apiParams: ["received"],
                initFuncName: "_setPresentPanelHistory"
            }];
            if (!i.isUndefined(t)) {
                if (0 > t || t >= n.length)
                    return void console.error("[ERROR] targetNum is out of range.");
                var a = n.splice(t, 1);
                a = a[0],
                this._fillupPresentBtnsListCore(e, a)
            }
            var s = 250
              , o = 1;
            i.delay(function() {
                i.each(n, function(t) {
                    this._fillupPresentBtnsListCore(e, t)
                }, this)
            }
            .bind(this), s * o)
        },
        _fillupPresentBtnsListCore: function(e, n) {
            var a = e.seekWidgetByName(n.targetNode);
            if (null === a)
                return void console.debug("[ERROR] Could not find the node: " + n.targetNode);
            var s, o = "__listBtnsController_" + n.targetNode, r = {
                baseName: n.targetNode,
                panelName: t.BtnsPageListParams.PRESENT.panelName,
                panelsPerPage: t.BtnsPageListParams.PRESENT.perPage,
                apiName: n.apiName,
                apiMethod: n.methodName,
                apiParams: n.apiParams,
                cardType: "misc",
                cardFrame: "plain",
                notifyIcon: n.notifyIcon,
                controllerName: o
            };
            i.isUndefined(this[o]) || (s = this[o]._pagerButtons.getCurrentPageNumber()),
            this._setListBtnsControllerWithArgs(e, void 0, r, void 0, n.initFuncName).then(function(t) {
                var n = t.pageCount > 0;
                null !== a.seekWidgetByName("nothing_node") && a.seekWidgetByName("nothing_node").setVisible(!n),
                null !== a.seekWidgetByName("list_node") && a.seekWidgetByName("list_node").setVisible(n);
                var c = this[o];
                if (n && !i.isUndefined(s) && !i.isUndefined(c)) {
                    var u = c._pager.getPageCount()
                      , _ = Math.min(s, u);
                    _ !== c._pagerButtons.getCurrentPageNumber() && (c._pagerButtons.setCurrentPageNum(_),
                    c._pagerButtons.refresh())
                }
                i.isUndefined(r.notifyIcon) || null === e.seekWidgetByName(r.notifyIcon) || e.seekWidgetByName(r.notifyIcon).setVisible(n)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setPresentPanelNoLimit: function(e, a) {
            var s = "no_limit";
            if (this._switchPresentPanel(e.parent, s) === !1)
                return void console.warn("[ERROR] Could not switch present panel.");
            this._setPresentPanelCommon(e, a, s);
            var o = a.can_receive === !0;
            if (o && i.isFunction(this._onTouchReceiveButton)) {
                var r = n.director.getRunningScene();
                t.setTouchEventHandlers(e.parent, {
                    "TOUCH_ENDED btn_get": function() {
                        this._onTouchReceiveButton(r, a)
                    }
                    .bind(this)
                })
            }
            var c = e.parent.seekWidgetByName("btn_get");
            c.setEnabled(o),
            c.setColor(o ? n.color("#ffffff") : n.color("#808080"))
        },
        _setPresentPanelLimit: function(e, a) {
            var s = "has_limit";
            if (this._switchPresentPanel(e.parent, s) === !1)
                return void console.warn("[ERROR] Could not switch present panel.");
            if (this._setPresentPanelCommon(e, a, s),
            i.isFunction(this._onTouchLimitReceiveButton) && a.can_receive) {
                var o = n.director.getRunningScene();
                t.setTouchEventHandlers(e.parent, {
                    "TOUCH_ENDED btn_get": function() {
                        this._onTouchLimitReceiveButton(o, a)
                    }
                    .bind(this)
                })
            }
            var r = e.getParent().seekWidgetByName("btn_get");
            this._setEnableButton(r, a.can_receive)
        },
        _setPresentPanelHistory: function(e, t) {
            var n = "received_log";
            return this._switchPresentPanel(e.parent, n) === !1 ? void console.warn("[ERROR] Could not switch present panel.") : void this._setPresentPanelCommon(e, t, n)
        },
        _setPresentPanelCommon: function(e, t, n) {
            console.log(e, t),
            e = e.parent,
            this._setPresentPanelCoreCard(e, t),
            i.isUndefined(t.present_name) || null === e.seekWidgetByName("name_label") || e.setStrings({
                name_label: t.present_name
            }),
            i.isUndefined(t.created_at) || null === e.seekWidgetByName("get_date_label") || e.setStrings({
                get_date_label: "取得日:" + t.created_at
            }),
            i.isUndefined(t.created_at) || null === e.seekWidgetByName("received_date_label") || e.setStrings({
                received_date_label: "受取日:" + t.received_at
            }),
            i.isUndefined(t.description) || null === e.seekWidgetByName("explanation_label") || e.setStrings({
                explanation_label: t.description
            }),
            i.isUndefined(t.expires) || null === e.seekWidgetByName("limit_date_label") || e.setStrings({
                limit_date_label: "受取期限:" + t.expires
            });
            var a = e.seekWidgetByName("num_base");
            if (null !== a) {
                var s = t.count > 0;
                a.setVisible(s),
                a.seekWidgetByName("num_label").string = t.count || ""
            }
            e.setVisible(!0)
        },
        _switchPresentPanel: function(e, t) {
            if (!i.contains(["no_limit", "has_limit", "received_log"], t))
                return console.error("Invalid animation name: " + t),
                !1;
            var n = e.getActionByTag(e.tag);
            return n ? (n.gotoFrameAndPause(n.animationInfo[t].startIndex),
            !0) : !1
        },
        _setPresentPanelCoreCard: function(e, t) {
            i.isUndefined(t.kind) || ("weapon" !== t.kind || i.isUndefined(t.weapon_info) ? "summon" !== t.kind || i.isUndefined(t.summon_info) ? (t.item_id = t.id,
            this._setItemCoreCard(e, t)) : (t.summon_info.summon_id = t.id,
            this._setSummonCoreCardElementRarity(e, t.summon_info)) : (t.weapon_info.weapon_id = t.id,
            this._setWeaponCoreCardElementRarity(e, t.weapon_info)))
        }
    },
    i.assign(t.pc.present.roles.PresentBtnsListController, t.pc.list.roles.PageListBtnsControllerCommon, t.pc.roles.CoreCardCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.present = t.pc.present || {},
    t.pc.present.roles = t.pc.present.roles || {},
    t.pc.present.roles.Routing = {
        _verifyRouterParams001: function(e) {},
        _verifyRouterParams002: function(e) {},
        _verifyRouterParams003: function(e) {}
    },
    n.assign(t.pc.present.roles.Routing, t.pc.roles.RoutingCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.present = t.pc.present || {},
    t.pc.present.prs_001_002_003 = t.pc.present.prs_001_002_003 || {},
    t.pc.present.prs_001_002_003.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("prs_001_2_3/prs_001_2_3")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: prs_001_2_3/prs_001_2_3"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_0_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_1_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_2: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab3のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_2_node");
                if (!t)
                    return void alert("tab.tab3のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab2";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "prs001002003Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["present", "prs_001_002_003"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackTab0NodeBtnAllReceipt"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("tab_0_node"), "btn_all_receipt", function() {
                alert("{{現在該当のアイテム （ウェポン・幻獣）の所持数が最大所持数の場合pre_carry_limitを開く。それ以外の場合prs_receive_checkを開く}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackTab1NodeBtnAllReceipt"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath("tab_1_node"), "btn_all_receipt", function() {
                alert("{{現在該当のアイテム （ウェポン・幻獣）の所持数が最大所持数の場合pre_carry_limitを開く。それ以外の場合prs_receive_checkを開く}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.present = t.pc.present || {},
    t.pc.present.prs_001_002_003 = t.pc.present.prs_001_002_003 || {},
    t.pc.present.prs_001_002_003.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            a.defer();
            if (!e.restoreParams) {
                var n = t.createInstance("router").getCurrentFragment()
                  , i = parseInt(n.replace(/^[^1-9]*/, "") || "1");
                e.tabDelegateList[0].selectTab(e.seekWidgetByName("tab_" + --i))
            }
            return this._fillupPresentBtnsList(e),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        tabCallbackTab0: function(e) {
            this._currentType = "normal"
        },
        tabCallbackTab1: function(e) {
            this._currentType = "timelimit"
        },
        tabCallbackTab2: function(e) {
            this._currentType = "received"
        },
        btnCallbackTab0NodeBtnAllReceipt: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._confirmBeforeReceiveAll(),
            t.promise
        },
        btnCallbackTab1NodeBtnAllReceipt: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._confirmBeforeReceiveAll(),
            t.promise
        },
        _onTouchReceiveButton: function(e, t) {
            console.log(t),
            this._openReceiveConfirmPopup(e, t)
        },
        _onTouchLimitReceiveButton: function(e, t) {
            console.log(t),
            this._openReceiveConfirmPopup(e, t)
        },
        _receivePresent: function(e) {
            var n = t.createInstance("apiAPresents");
            n.receivePresent(e).then(function(e) {
                this._reload()
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _reload: function() {
            var e = n.director.getRunningScene()
              , t = i.keys(this).filter(function(e) {
                return /^__listBtnsController/.test(e)
            }).map(function(e) {
                return this[e]
            }
            .bind(this));
            i.invoke(t, "_clearList", !0),
            this._fillupPresentBtnsList(e)
        },
        _confirmBeforeReceiveAll: function() {
            var e = t.createInstance("apiAPresents");
            e.checkAvailablePresents(this._currentType).then(function(e) {
                var t = e.body.received_info
                  , n = e.body.not_received_info;
                t.length ? this._showReceiveConfirmPopup(e.body) : n.length && this._showCarryLimitConfirmPopup(n)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _receiveAllPresent: function(e) {
            var n = t.createInstance("apiAPresents");
            n.receiveAllPresent(this._currentType).then(function(t) {
                this._reload();
                var n = "以下のプレゼントを\r\nまとめて受け取りました。";
                this._receiveAllPresentShowResult(t.body.received_info, e, n)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    }),
    t.assignRoles(t.pc.present.prs_001_002_003.SceneDelegate, [t.pc.roles.UIUtility, t.pc.present.roles.Routing, t.pc.present.roles.PresentPopups, t.pc.present.roles.PresentBtnsListController])
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh;
    e.cc,
    e._,
    e.Q;
    t.pc = t.pc || {},
    t.pc.status = t.pc.status || {},
    t.pc.status.roles = t.pc.status.roles || {},
    t.pc.status.roles.ShSummonInfoCommon = {
        setData: function(e, t) {
            this._setCorecard(e, t),
            this._setSummonName(e, t.name),
            this._setAttackInfo(e, t.attack),
            this._setSupportInfo(e, t.effect),
            this._setMaxLimitSupportInfo(e, t.max_overlimit_effect.description),
            this._setHpAndAttack(e, t)
        },
        clearData: function(e) {
            this._setSummonName(e, ""),
            this._setAttackInfo(e, {
                name: "",
                description: ""
            }),
            this._setSupportInfo(e, {
                name: "",
                description: ""
            }),
            this._setMaxLimitSupportInfo(e, ""),
            this._clearCorecard(e),
            e.seekWidgetByName("status_labelimg").setVisible(!1)
        },
        _setCorecard: function(e, n) {
            var i = t.createInstance("CoreCardSummonUI", ["e_r"]);
            i.setImg(n.summon_id, n.skin || 0),
            i.setPlusNo(n.bonus ? "+" + n.bonus : ""),
            i.setIconElement(n.element_type),
            i.setIconRarity(n.rare);
            var a = e.seekWidgetByName("corecard_summon_ui");
            a.addChild(i.getResult()),
            a.setVisible(!0)
        },
        _clearCorecard: function(e) {
            var t = e.seekWidgetByName("corecard_summon_ui");
            t.removeAllChildren(),
            t.setVisible(!1)
        },
        _setSummonName: function(e, t) {
            this._setLabel(e, "summon_name_label", t)
        },
        _setAttackInfo: function(e, t) {
            this._setLabel(e, "summon_attack_name_label", t.name),
            this._setLabel(e, "summon_attack_label", t.description)
        },
        _setSupportInfo: function(e, t) {
            this._setLabel(e, "summon_support_name_label", t.name),
            this._setLabel(e, "summon_support_label", t.description)
        },
        _setMaxLimitSupportInfo: function(e, t) {
            this._setLabel(e, "summon_support_max_label", t)
        },
        _setHpAndAttack: function(e, n) {
            var i = "<div style='padding-bottom:10px;width:100%;height:100%'>                   <table width='100%' height='100%'>                   <tr class='cyan_shadow'>                     <td><span class='cyan_shadow_mini'>MIN </span>" + n.min_hp + "</td>                     <td>-</td>                     <td><span class='cyan_shadow_mini'>MAX </span>" + n.max_hp + "</td>                     <td>　&nbsp;</td>                   </tr>                   <tr class='pink_shadow'>                     <td><span class='pink_shadow_mini'>MIN </span>" + n.min_attack + "</td>                     <td>-</td>                     <td><span class='pink_shadow_mini'>MAX </span>" + n.max_attack + "</td>                     <td>　&nbsp;</td>                   </tr>                 </table></div>";
            e.setHtmlStrings({
                status_labelimg: i
            }, t.GameConfig.POPUP_CSS).then(function() {
                e.seekWidgetByName("status_labelimg").setVisible(!0)
            }
            .bind(this))
        },
        _setLabel: function(e, t, n) {
            n.length > 10 && (n = n.replace(/([^\d\s]+\s*\/)\s*([^\d\s]+)|([^\d\s]+\s*\/)\s*([\d]+)|([\d]+\s*\/)\s*([^\d\s]+)/, "$1$3$5\n$2$4$6")),
            e.seekWidgetByName(t).string = n
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc = t.pc || {},
    t.pc.status = t.pc.status || {},
    t.pc.status.roles = t.pc.status.roles || {},
    t.pc.status.roles.ShWeaponInfoCommon = {
        setData: function(e, t) {
            this._setCorecard(e, t),
            this._setWeaponName(e, t.name),
            this._setWeaponIcon(e, t.weapon_type),
            this._setBurstInfo(e, t.burst),
            this._setSkillInfo(e, t.skills),
            this._setHpAndAttack(e, t)
        },
        clearData: function(e) {
            this._setWeaponName(e, ""),
            i(["status_labelimg", "skill_label", "skill_name_label", "burst_label", "weapon_icon"]).map(e.seekWidgetByName.bind(e)).invoke("setVisible", !1),
            this._clearCorecard(e)
        },
        _setCorecard: function(e, n) {
            var i = t.createInstance("CoreCardWeaponUI", ["e_r"]);
            i.setImg(n.weapon_id, n.skin || 0),
            i.setPlusNo(n.bonus ? "+" + n.bonus : ""),
            i.setIconElement(n.element_type),
            i.setIconRarity(n.rare);
            var a = e.seekWidgetByName("corecard_weapon_ui");
            a.addChild(i.getResult()),
            a.setVisible(!0)
        },
        _clearCorecard: function(e) {
            var t = e.seekWidgetByName("corecard_weapon_ui");
            t.removeAllChildren(),
            t.setVisible(!1)
        },
        _setWeaponName: function(e, t) {
            this._setLabel(e, "weapon_name_label", t)
        },
        _setWeaponIcon: function(e, t) {
            var n = e.seekWidgetByName("weapon_icon");
            n.loadTexture("core/res/icon/weapontypeicon_" + t + ".png", ccui.Widget.PLIST_TEXTURE),
            n.setVisible(!0)
        },
        _setBurstInfo: function(e, t) {
            var i = e.seekWidgetByName("burst_label");
            i.setTextVerticalAlignment(n.VERTICAL_TEXT_ALIGNMENT_TOP),
            this._setLabel(e, "burst_label", t.description)
        },
        _setSkillInfo: function(e, t) {
            var n = i.first(t);
            i.isUndefined(n) ? (this._setLabel(e, "skill_name_label", "なし"),
            this._setLabel(e, "skill_label", "")) : (this._setLabel(e, "skill_name_label", n.name),
            this._setLabel(e, "skill_label", n.description))
        },
        _setHpAndAttack: function(e, n) {
            var i = "<div style='padding-bottom:10px;width:100%;height:100%'>                   <table width='100%' height='100%'>                   <tr class='cyan_shadow'>                     <td><span class='cyan_shadow_mini'>MIN </span>" + n.min_hp + "</td>                     <td>-</td>                     <td><span class='cyan_shadow_mini'>MAX </span>" + n.max_hp + "</td>                     <td>　&nbsp;</td>                   </tr>                   <tr class='pink_shadow'>                     <td><span class='pink_shadow_mini'>MIN </span>" + n.min_attack + "</td>                     <td>-</td>                     <td><span class='pink_shadow_mini'>MAX </span>" + n.max_attack + "</td>                     <td>　&nbsp;</td>                   </tr>                 </table></div>";
            e.setHtmlStrings({
                status_labelimg: i
            }, t.GameConfig.POPUP_CSS).then(function() {
                e.seekWidgetByName("status_labelimg").setVisible(!0)
            }
            .bind(this))
        },
        _setLabel: function(e, t, n) {
            var i = e.seekWidgetByName(t);
            n.length > 10 && (n = n.replace(/([^\d\s]+\s*\/)\s*([^\d\s]+)|([^\d\s]+\s*\/)\s*([\d]+)|([\d]+\s*\/)\s*([^\d\s]+)/, "$1$3$5\n$2$4$6")),
            i.string = n,
            i.setVisible(!0)
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.cc;
    n.PopupFactoryShChangeCheck = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-sh_change_check",
            title: "交換確認",
            buttonLabels: {
                blueBtn: "交換する",
                blackBtn: "キャンセル"
            },
            buttons: {
                blueBtn: function(e) {
                    var t = this.seekWidgetByName("blue_btn").getUserData();
                    if (this.pulldown && this.pulldown.releaseMenu(),
                    this.dismiss(),
                    null !== t)
                        n.createInstance("router").navigate(t.fragment, t.options);
                    else {
                        var i = e._delegate ? e._delegate : e;
                        i.exchange(this.selectedRecord, this.selectedValue)
                    }
                },
                blackBtn: function(e) {
                    this.pulldown && this.pulldown.releaseMenu(),
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        _haveMaxRouting: {
            weapon: {
                title: "強化・限界突破",
                navigate: {
                    fragment: "enh_evo/enh_001",
                    options: {
                        enhevo_home: {
                            tab: "enh",
                            kind: "weapon"
                        }
                    }
                }
            },
            summon: {
                title: "強化・限界突破",
                navigate: {
                    fragment: "enh_evo/enh_006",
                    options: {
                        enhevo_home: {
                            tab: "enh",
                            kind: "summon"
                        }
                    }
                }
            }
        },
        onPopupOpened: function(e, i) {
            this.popup = e,
            this.popup.selectedRecord = i,
            this.popup.selectedValue = 1,
            this.__cleanUpChangeCheckCoreCard();
            var a = null
              , s = {
                title: "交換する",
                navigate: null
            };
            if (!t.isUndefined(i) && !t.isUndefined(i.kind)) {
                t.isUndefined(i.have_max) || (i.have_max ? (e.seekWidgetByName("btn_pulldown").setVisible(!1),
                e.seekWidgetByName("unit_label").setVisible(!1),
                s = this._haveMaxRouting[i.kind] || s) : (e.seekWidgetByName("btn_pulldown").setVisible(!0),
                e.seekWidgetByName("unit_label").setVisible(!0),
                this.__setBuyPopupPulldown(i)));
                var o = e.seekWidgetByName("blue_btn");
                if (o.setTitleText(s.title),
                o.setUserData(s.navigate),
                "treasure" == i.kind ? (a = n.createInstance("CoreCardShopItemUI"),
                a.IMG_ID_TYPE = "shop-treasure",
                a.setImg(i.shop_treasure_id)) : "item" == i.kind ? (a = n.createInstance("CoreCardItemUI"),
                a.setImg(i.id)) : "summon" == i.kind ? n.createInstance("apiSummons").get(i.id).then(function(t) {
                    var i = t.body
                      , a = n.createInstance("CoreCardSummonUI", ["e_r"]);
                    a.setImg(i.summon_id, 0),
                    a.setIconElement(i.element_type),
                    a.setIconRarity(i.rare);
                    var s = a.getResult();
                    e.seekWidgetByName("corecard_ui").addChild(s),
                    e.seekWidgetByName("corecard_ui").setVisible(!0)
                }
                .bind(this)) : "weapon" == i.kind && n.createInstance("apiWeapons").get(i.id).then(function(t) {
                    this._selectedWeapon = t.body;
                    var i = n.createInstance("CoreCardWeaponUI", ["e_r"]);
                    i.setImg(this._selectedWeapon.weapon_id, 0),
                    i.setIconElement(this._selectedWeapon.element_type),
                    i.setIconRarity(this._selectedWeapon.rare);
                    var a = i.getResult();
                    e.seekWidgetByName("corecard_ui").addChild(a),
                    e.seekWidgetByName("corecard_ui").setVisible(!0)
                }
                .bind(this)),
                !t.isUndefined(a) && null != a) {
                    var r = a.getResult();
                    e.seekWidgetByName("corecard_ui").removeAllChildren(),
                    e.seekWidgetByName("corecard_ui").addChild(r),
                    e.seekWidgetByName("corecard_ui").setVisible(!0)
                }
            }
            this.__setContentsPanel(i),
            this.__createMainLabelTexture(i),
            this.__createLimitLabelTexture(i)
        },
        __cleanUpChangeCheckCoreCard: function() {
            var e = this.popup
              , t = e.seekWidgetByName("corecard_ui");
            t.removeAllChildrenWithCleanup()
        },
        __updateContentsPanel: function(e) {
            var i = popup.seekWidgetByName("contents_panel");
            t.each(materialUI.children, function(a) {
                var s = ccs.load(res["core-popup-sh_change_material_ui"]).node
                  , o = n.Img("corecard", "item", t.padZero(v.item_id, 4)).jpg;
                s.seekWidgetByName("material_img").loadTexture(o),
                this.__createAmountLabelTexture(a, e),
                i.addChild(s)
            }, this)
        },
        __setContentsPanel: function(e) {
            var a = this.popup
              , s = a.seekWidgetByName("contents_panel");
            s.removeAllChildren();
            var o = 76;
            e.exchange_items && (s.setSize(new i.Size(616,o * e.exchange_items.length)),
            s.setPositionY(253 + o * (e.exchange_items.length - 1))),
            t.each(e.exchange_items, function(i, a) {
                var r = ccs.load(res["core-popup-sh_change_material_ui"]).node
                  , c = n.Img("corecard", "item", t.padZero(i.item_id, 4)).jpg;
                r.seekWidgetByName("material_img").loadTexture(c),
                this.__createAmountLabelTexture(r, i),
                r.setPositionY((e.exchange_items.length - (a + 1)) * o),
                s.addChild(r)
            }, this);
            var r = a.seekWidgetByName("bottom_panel");
            e.exchange_items && r.setSize(new i.Size(640,263 + o * (e.exchange_items.length - 1)))
        },
        __createAmountLabelTexture: function(e, t) {
            var a = e.seekWidgetByName("amount_labelimg");
            a.setVisible(!1);
            var s = t.have_num
              , o = s - this.popup.selectedValue * t.required_num
              , r = i.size(320, 65);
            a.setSize(i.size(r.width + 2, r.height + 2));
            var c = "<div class='text_common_left' style='white-space: nowrap;'><span class='white'>" + t.name + "×" + t.required_num * this.popup.selectedValue + "</span><br /><span class='yellow'>所持数：</span>                   <span class='white'>" + s + "&rarr;</span><span class='red'>" + o + "</span></div>"
              , u = '<table style="width: ' + r.width + "px;height: " + r.height + 'px;"><tr><td><div class="text_common">' + c + "</div></td></tr></table>";
            n.convertHTMLToTexture(u, r, n.GameConfig.POPUP_CSS).then(function(e) {
                a.loadTexture(e),
                a.setVisible(!0)
            }
            .bind(this))
        },
        __setBuyPopupPulldown: function(e) {
            var t = this._getPulldownCondition(e)
              , a = !!t.length;
            if (this.popup.seekWidgetByName("btn_pulldown").setVisible(a),
            this.popup.seekWidgetByName("unit_label").setVisible(a),
            this.popup.seekWidgetByName("blue_btn").setTouchEnabled(a),
            this.popup.seekWidgetByName("blue_btn").color = a ? i.color("#FFFFFF") : i.color("#808080"),
            t.length) {
                var s = this.popup.seekWidgetByName("sort_ui");
                if (t && t.length < 10) {
                    var o = 45
                      , r = 134
                      , c = (10 - t.length) * o;
                    s.setPositionY(r - c)
                }
                var u = this.popup.seekWidgetByName("btn_pulldown");
                this.popup.pulldown = new n.Pulldown({
                    button: u,
                    label: u.seekWidgetByName("amount_label"),
                    menuBase: this.popup.seekWidgetByName("gud_sh_sort"),
                    choice: ccs.load(res["core-sort-sort_list_ui"]).node
                },t),
                this.popup.pulldown.onChange(function(t) {
                    this.popup.selectedValue = t.value,
                    this.__setContentsPanel(e)
                }
                .bind(this))
            }
        },
        __createMainLabelTexture: function(e) {
            var t = this.popup.seekWidgetByName("main_labelimg");
            t.setVisible(!1);
            var a = i.size(610, 85);
            t.setSize(a);
            var s = "<span class='red'>" + e.name + "</span><br />（所持数&nbsp;" + e.have_num + "）<br />" + e.item_description
              , o = '<table style="width: ' + a.width + "px;height: " + a.height + 'px;"><tr><td><div class="text_common" style="white-space:nowrap;">' + s + "</div></td></tr></table>";
            n.convertHTMLToTexture(o, a, n.GameConfig.POPUP_CSS).then(function(e) {
                t.loadTexture(e),
                t.setVisible(!0)
            }
            .bind(this))
        },
        __createLimitLabelTexture: function(e) {
            var t = this.popup.seekWidgetByName("limit_labelimg");
            t.setVisible(!1);
            var a = i.size(640, 115)
              , s = ""
              , o = "";
            if (e.stock_info.day) {
                var r = e.stock_info.day;
                s = "<span class='white'>本日の交換個数制限&nbsp;残り<span class='red'>" + r.remaining_num + "</span><br />                    <span class='darkkhaki_mini'>※本日の交換個数制限は毎朝AM5:00にリセットされます。</span><br />"
            }
            if (e.stock_info.month) {
                var r = e.stock_info.month;
                o = "<span class='white'>今月の交換個数制限&nbsp;残り<span class='red'>" + r.remaining_num + "</span><br />                      <span class='darkkhaki_mini'>※今月の交換個数制限は毎月1日AM5:00にリセットされます。</span>"
            }
            var c = '<table style="width: ' + a.width + "px;height: " + a.height + 'px;"><tr><td><div class="text_common">' + s + o + "</div></td></tr></table>";
            e.have_max && (c = c.replace(/<\/tr><\/table>$/, "</tr><tr><td align='center'><span class='yellow'>アイテムの所持数が最大所持数に達しているため、交換できません</span></td></tr></table>")),
            n.convertHTMLToTexture(c, a, n.GameConfig.POPUP_CSS).then(function(e) {
                t.loadTexture(e),
                t.setVisible(!0)
            }
            .bind(this))
        },
        _getRemainingNum: function(e) {
            var n = 0;
            return t.some(["no_time_limit", "day", "month"], function(t) {
                var i = e.stock_info[t];
                return i && i.remaining_num > 0 ? (n = i.remaining_num,
                !0) : !1
            }),
            n
        },
        _getPulldownCondition: function(e) {
            var n = this._getRemainingNum(e)
              , i = !1
              , a = t.compact(t.map(t.range(n), function(n) {
                if (i)
                    return null ;
                n++;
                var a = !t.some(e.exchange_items, function(e) {
                    return e.required_num * n <= e.have_num ? !1 : !0
                });
                return a ? {
                    value: n,
                    text: n
                } : (i = !0,
                null )
            }));
            return a.length ? (a[0].selected = !0,
            a) : []
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.roles = t.pc.shop.roles || {},
    t.pc.shop.roles.ShopCommon = {
        _popups: {
            sh_buy_check: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-sh_buy_check",
                title: "購入確認",
                id: "1001",
                buttonLabels: {
                    blueBtn: "購入する",
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blueBtn: function(e) {
                        e.pulldown.releaseMenu(),
                        e._delegate._buy(),
                        this.dismiss()
                    },
                    blackBtn: function(e) {
                        e.pulldown.releaseMenu(),
                        this.dismiss()
                    }
                }
            },
            sh_stone_check: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-sh_stone_check",
                title: "購入確認",
                id: "1001",
                buttonLabels: {
                    blueBtn: "購入する",
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blueBtn: function(e) {
                        e._delegate._buy(),
                        e.pulldown.releaseMenu(),
                        this.dismiss()
                    },
                    blackBtn: function(e) {
                        e.pulldown.releaseMenu(),
                        this.dismiss()
                    }
                }
            },
            sh_item_info: {
                factoryName: "popupFactoryShItemInfo"
            },
            sh_buy_result: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-sh_buy_result",
                title: "購入結果",
                id: "1002",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            com_need_mate: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-com_need_mate",
                title: "アイテム詳細",
                id: "1000",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            sh_change_check: {
                factoryName: "popupFactoryShChangeCheck"
            },
            com_need_mate_sp: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-com_need_mate",
                title: "アイテム詳細",
                id: "1001",
                buttonLabels: {
                    blueBtn: "SPクエストへ",
                    blackBtn: "閉じる"
                },
                buttons: {
                    blueBtn: function(e) {
                        t.createInstance("router").navigate("quest/q_004"),
                        this.dismiss()
                    },
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            sh_weapon_info: {
                factoryName: "popupFactoryShWeaponInfo"
            },
            sh_summon_info: {
                factoryName: "popupFactoryShSummonInfo"
            }
        },
        _setShopStrings: function(e, n) {
            if (!i.isUndefined(n.name) && null !== e.seekWidgetByName("name_label")) {
                var a = "";
                i.isUndefined(n.on_sale) || n.on_sale !== !0 || i.isUndefined(n.buy_max_num) || (a = "（残り" + n.buy_max_num + "個）"),
                e.setStrings({
                    name_label: n.name + a
                })
            }
            i.isUndefined(n.description) || null === e.seekWidgetByName("explanation_label") || e.setStrings({
                explanation_label: n.description
            }),
            i.isUndefined(n.price) || null === e.seekWidgetByName("price_label") || null === e.seekWidgetByName("price_no") ? i.isUndefined(n.stones) || null === e.seekWidgetByName("price_label") || null === e.seekWidgetByName("price_no") || e.setStrings({
                price_label: t.w("stone"),
                price_no: n.stones + "個"
            }) : e.setStrings({
                price_label: "価格",
                price_no: n.price + "ポイント"
            })
        },
        _setShopCoreCardPoint: function(e, n) {
            if (i.isUndefined(n.shop_item_id))
                return void console.warn("[ERROR] Could not find a shop item id.");
            var a = e.seekWidgetByName("corecard_shop");
            if (null === a)
                return void console.warn("[ERROR] Could not find a core card node.");
            var s = t.Img("corecard", "shop-point", i.padZero(n.shop_item_id, 4)).jpg;
            return a.loadTexture(s),
            a.setVisible(!0),
            a
        },
        _onTab0PagerButtonInit: function(e) {
            this._tab0PagerButtons = e
        },
        _onTab1PagerButtonInit: function(e) {
            this._tab1PagerButtons = e
        },
        _onTab2PagerButtonInit: function(e) {
            this._tab2PagerButtons = e
        },
        _onTab3PagerButtonInit: function(e) {
            this._tab3PagerButtons = e
        },
        _onTab3BannerPagerButtonInit: function(e) {
            this._tab3BannerPagerButtons = e
        },
        _onTab3ListPagerButtonInit: function(e) {
            this._tab3ListPagerButtons = e
        },
        _toggleTab3PagerButton: function(e) {
            e ? this._tab3PagerButtons = this._tab3BannerPagerButtons : this._tab3PagerButtons = this._tab3ListPagerButtons
        },
        _refreshCurrentTab: function() {
            var e = n.director.getRunningScene();
            if (e.tabDelegateList.length) {
                var t = e.tabDelegateList[0].selected
                  , a = i.last(t.match(/\d/g))
                  , s = this["_tab" + a + "PagerButtons"];
                null != s && s.refresh()
            }
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.roles = t.pc.shop.roles || {},
    t.pc.shop.roles.ShopHealExtensionBtnsPageListController = {
        _fillupHealExtensionBtnsList: function(e, t) {
            if (t = t || "point",
            !i.contains(["point", "stone"], t))
                return void console.error("Invalid list type: " + t);
            var n = e.seekWidgetByName("tab_0_node")
              , a = e.seekWidgetByName("tab_1_node");
            return null === n ? void console.debug("[ERROR] Could not find tab_0_node.") : null === a ? void console.debug("[ERROR] Could not find tab_1_node.") : (this._fillupButtonList(n, "sh_green_list_ui", "apiShop", "getGoods" + i.capitalize(t) + "Heal", [], 4, "_setShop" + i.capitalize(t) + "GreenRedPanel", "_onTab0PagerButtonInit"),
            void this._fillupButtonList(a, "sh_red_list_ui", "apiShop", "getGoods" + i.capitalize(t) + "Extension", [], 4, "_setShop" + i.capitalize(t) + "GreenRedPanel", "_onTab1PagerButtonInit"))
        },
        _resetPanels: function(e) {
            var t = e.seekWidgetByName("sh_green_list_ui");
            null !== t && this._resetListChildren(t);
            var n = e.seekWidgetByName("sh_red_list_ui");
            null !== n && this._resetListChildren(n)
        },
        _setShopPointGreenRedPanel: function(e, a) {
            if (console.log(e, a),
            e.getName().match(/.*_0$/) && this._resetPanels(e.parent),
            i.isUndefined(a.shop_item_id))
                return void e.setOpacity(0);
            i.isUndefined(a.on_sale) || a.on_sale !== !0 || this._setShopSalePanel(e, a),
            this._setShopStrings(e, a);
            var s = this._setShopCoreCardPoint(e, a)
              , o = n.director.getRunningScene();
            i.isUndefined(s) || i.isNull(s) || t.setTouchEventHandlers(s, {
                "TOUCH_ENDED corecard_shop": function() {
                    i.isFunction(this._onTouchShopItemIcon) && this._onTouchShopItemIcon(o, a)
                }
                .bind(this)
            }, this);
            var r = e.seekWidgetByName("btn_buy");
            null !== r && (0 === a.buy_max_num ? (r.setEnabled(!1),
            r.setColor(n.color("#808080"))) : t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_buy": function() {
                    i.isFunction(this._onTouchShopBuyButton) && this._onTouchShopBuyButton(o, a)
                }
                .bind(this)
            }, this))
        },
        stone_max: 0,
        _setShopStoneGreenRedPanel: function(e, t) {
            if (this._setShopPointGreenRedPanel(e, t),
            !i.isUndefined(t.stones) && null !== e.seekWidgetByName("price_label") && null !== e.seekWidgetByName("price_no")) {
                e.setStrings({
                    price_label: "魔宝石",
                    price_no: t.stones + "個"
                });
                var a = this.stone_max >= t.stones ? !0 : !1
                  , s = e.seekWidgetByName("btn_buy");
                a = a && s.isEnabled(),
                s.setColor(1 == a ? n.color("#FFFFFF") : n.color("#808080")),
                s.setEnabled(a)
            }
        },
        _setShopSalePanel: function(e, n) {
            $staticRes(res["shop-sh_green_sale_ui"]);
            var a = res["shop-sh_green_sale_ui"];
            if (i.isUndefined(a))
                return void console.warn("[ERROR] Could not find a resouce of sale panel.");
            var s = ccs.load(a).node;
            e.removeAllChildren(),
            e.addChild(s);
            var o = t.Img("salelist", "shop-point", i.padZero(n.shop_item_id, 4)).png
              , r = e.seekWidgetByName("salelist");
            r && r.setBackGroundImage(o)
        },
        _resetListChildren: function(e) {
            i.each(e.getChildren(), function(e) {
                this._restoreNormalPanelIfNeeded(e)
            }, this)
        },
        _restoreNormalPanelIfNeeded: function(e) {
            if (e.getOpacity() < 255)
                return void e.setOpacity(255);
            if (null === e.seekWidgetByName("corecard_shop_ui")) {
                var t = res["shop-sh_green_ui"]
                  , n = ccs.load(t).node;
                e.removeAllChildren(),
                e.addChild(n)
            }
        }
    },
    i.assign(t.pc.shop.roles.ShopHealExtensionBtnsPageListController, t.pc.list.roles.PageListBtnsControllerCommon, t.pc.shop.roles.ShopCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.roles = t.pc.shop.roles || {},
    t.pc.shop.roles.ShopTreasureBtnsPageListController = {
        _fillupTreasureBtnsList: function(e) {
            var n = [{
                targetNodeName: "tab_0_node",
                listParent: "sh_exchangelist_list_ui",
                apiName: "apiShop",
                apiMethodName: "getTreasuresDragonEye",
                initFuncName: "_setTreasuresItemEquipmentPanel",
                pagePerPanel: 4,
                initPagerButtonFuncName: "_onTab0PagerButtonInit"
            }, {
                targetNodeName: "tab_1_node",
                listParent: "sh_exchangelist_list_ui",
                apiName: "apiShop",
                apiMethodName: "getTreasuresItemEquipment",
                initFuncName: "_setTreasuresItemEquipmentPanel",
                pagePerPanel: 4,
                initPagerButtonFuncName: "_onTab1PagerButtonInit"
            }, {
                targetNodeName: "tab_2_node",
                listParent: "sh_exchangelist_list_ui",
                apiName: "apiShop",
                apiMethodName: "getTreasuresTreasure",
                initFuncName: "_setTreasuresItemEquipmentPanel",
                pagePerPanel: 4,
                initPagerButtonFuncName: "_onTab2PagerButtonInit"
            }, {
                targetNodeName: "tab_3_node..banner_node",
                listParent: "sh_event_bannerlist_ui",
                apiName: "apiABanners",
                apiMethodName: "getTreasureEventBanners",
                initFuncName: "_setTreasuresItemEventPanel",
                pagePerPanel: t.BtnsPageListParams.SHOP_EVENT_TAB.perPage,
                initPagerButtonFuncName: "_onTab3BannerPagerButtonInit"
            }];
            i.each(n, function(t) {
                i.delay(function() {
                    this._fillupTreasureBtnsListCore(e, t)
                }
                .bind(this), 500)
            }, this),
            this._switchTab3Banner(e, !0)
        },
        _fillupTreasureBtnsListCore: function(e, t) {
            var n = e.seekWidgetByPath(t.targetNodeName);
            if (null === n)
                return void console.debug("[ERROR] Could not find a target node: " + t.targetNodeName);
            var a = i.isUndefined(t.apiParams) ? [] : t.apiParams;
            this._fillupButtonList(n, t.listParent, t.apiName, t.apiMethodName, a, t.pagePerPanel, t.initFuncName, t.initPagerButtonFuncName)
        },
        _switchTab3Banner: function(e, t) {
            var n = e.seekWidgetByPath("tab_3_node.banner_node")
              , i = e.seekWidgetByPath("tab_3_node.list_node");
            return null === n || null === i ? void console.warn("[ERROR] Could not find bannder node.") : (n.setVisible(t),
            i.setVisible(!t),
            void this._toggleTab3PagerButton(t))
        },
        _setTreasuresItemEquipmentPanel: function(e, t) {
            console.log(e, t),
            this._setExchangeTargetItem(e, t),
            this._setShopItemStockInfo(e, t),
            this._setExchangeButtonAvailability(e, t),
            this._setExchangeItemCoreCard(e, t),
            this._setExchangeBtnEvent(e, t),
            e.setVisible(!0)
        },
        _setExchangeTargetItem: function(e, a) {
            var s = e.seekWidgetByName("corecard_shop");
            if (null === s)
                return void console.warn("[ERROR] Could not find corecard shop node.");
            if (s.parent && s.parent.setVisible && s.parent.setVisible(!0),
            i.isUndefined(a.shop_treasure_id))
                return void console.warn("[ERROR] Could not find a shop_treasure_id in the record.");
            var o = null ;
            if (i.isUndefined(a.shop_treasure_id) ? console.warn("shop_treasure_id is not specified: ", a) : (o = t.Img("corecard", "shop-treasure", i.padZero(a.shop_treasure_id, 4)).jpg,
            s.loadTexture(o)),
            i.isFunction(this._onTouchShopTreasure)) {
                var r = n.director.getRunningScene();
                t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED corecard_shop": function() {
                        this._onTouchShopTreasure(r, a)
                    }
                    .bind(this)
                }, this)
            }
        },
        _checkIfStockExist: function(e) {
            var t = !i.isUndefined(e);
            if (t) {
                var n = e.day || e.month || e.no_time_limit;
                i.isUndefined(n) || i.isUndefined(n.remaining_num) || (t = 0 !== n.remaining_num)
            }
            return t
        },
        _checkIfEnuoghExchangeResources: function(e) {
            var t = !0;
            return i.each(e, function(e, n) {
                e.have_num < e.required_num && (t = !1)
            }, this),
            t
        },
        _setExchangeButtonAvailability: function(e, t) {
            var i = this._checkIfEnuoghExchangeResources(t.exchange_items)
              , a = this._checkIfStockExist(t.stock_info)
              , s = i && a
              , o = e.seekWidgetByName("btn_exchange");
            o.setColor(n.color(s ? "#FFFFFF" : "#808080")),
            o.setEnabled(s)
        },
        _setShopItemStockInfo: function(e, t) {
            var n = e.seekWidgetByName("name_label")
              , a = e.seekWidgetByName("rest_base")
              , s = e.seekWidgetByName("rest_label")
              , o = e.seekWidgetByName("stock_label")
              , r = e.seekWidgetByName("stock_num_label");
            i.invoke([a, s, o, r], "setVisible", !1);
            n.setString(t.name),
            t.stock_info && (t.stock_info.month && (t.stock_info.no_time_limit && 1 == t.stock_info.no_time_limit.remaining_num || (o.setString("在庫(月)"),
            r.setString(t.stock_info.month.remaining_num + "個"),
            i.invoke([o, r], "setVisible", !0))),
            t.stock_info.day && (s.setString("残り" + t.stock_info.day.remaining_num + "個"),
            i.invoke([a, s], "setVisible", !0)),
            !t.stock_info.no_time_limit || t.stock_info.day || t.stock_info.month || (o.setString("在庫"),
            r.setString(t.stock_info.no_time_limit.remaining_num + "個"),
            i.invoke([o, r], "setVisible", !0)),
            t.stock_info.no_time_limit || t.stock_info.day || t.stock_info.month || r.setString("交換制限なし"))
        },
        _setExchangeItemCoreCard: function(e, a) {
            i.each(i.range(4), function(s) {
                var o = e.seekWidgetByName("sh_exchange_ui_" + s);
                if (null === o)
                    return void console.warn("[ERROR] Could not find sh_exchange_ui_" + s);
                o.parent && o.parent.setVisible && o.parent.setVisible(!0),
                o.setVisible(!1);
                var r = o.seekWidgetByName("corecard_ui");
                if (null === r)
                    return void console.warn("[ERROR] Could not find coracard_ui.");
                var c = o.seekWidgetByName("need_amount_label");
                if (null === c)
                    return void console.warn("[ERROR] Could not find need_amount_label.");
                if (a.exchange_items.length > s) {
                    var u = a.exchange_items[s];
                    if (this._setItemCoreCard(o, u, "corecard_ui"),
                    i.isUndefined(u.have_num) || i.isUndefined(u.required_num) || c.setString(u.have_num + "/" + u.required_num),
                    o.setVisible(!0),
                    i.isFunction(this._onTouchExchangeItem)) {
                        var _ = n.director.getRunningScene();
                        t.setTouchEventHandlers(r, {
                            "TOUCH_ENDED item_img": function() {
                                this._onTouchExchangeItem(_, u)
                            }
                            .bind(this)
                        }, this)
                    }
                    o.setTouchEnabled(!0)
                }
            }, this)
        },
        _setExchangeBtnEvent: function(e, a) {
            if (i.isFunction(this._onTouchExchangeBtn)) {
                var s = n.director.getRunningScene();
                t.setTouchEventHandlers(e, {
                    "TOUCH_ENDED btn_exchange": function() {
                        this._onTouchExchangeBtn(s, a)
                    }
                    .bind(this)
                }, this)
            }
        },
        _setTreasuresItemEventPanel: function(e, n) {
            console.log(n);
            var a = e.seekWidgetByName("eventimg_banner");
            if (null === a)
                return void console.warn("[ERROR] Could not find banner node.");
            if (i.isUndefined(n.banner_id))
                return void console.warn("[ERROR] Could not find a banner_id in the record.");
            var s = t.Img("eventimg", "banner", i.padZero(n.banner_id, 4)).png;
            a.loadTextures(s, s, s),
            t.setTouchEventHandlers(e, {
                "TOUCH_ENDED eventimg_banner": function() {
                    this._onTouchEventBanner(n)
                }
                .bind(this)
            }, this),
            e.setVisible(!0)
        },
        _onTouchEventBanner: function(e) {
            "shop/sh_004" !== e.navigate_page && (console.warn("Unexpected banner navigation parameters!"),
            console.debug("ShopTreasureBtnPageListController#_onTouchEventBanner", e));
            var t = {
                targetNodeName: "tab_3_node..list_node",
                listParent: "sh_exchangelist_list_ui",
                apiName: "apiShop",
                apiMethodName: "getTreasuresByEventId",
                apiParams: [e.event_id],
                initFuncName: "_setTreasuresItemEquipmentPanel",
                pagePerPanel: 4,
                initPagerButtonFuncName: "_onTab3ListPagerButtonInit"
            }
              , i = n.director.getRunningScene();
            this._fillupTreasureBtnsListCore(i, t),
            this._switchTab3Banner(i, !1)
        }
    },
    i.assign(t.pc.shop.roles.ShopTreasureBtnsPageListController, t.pc.list.roles.PageListBtnsControllerCommon, t.pc.roles.CoreCardCommon, t.pc.shop.roles.ShopCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.roles = t.pc.shop.roles || {},
    t.pc.shop.roles.ShopArrivalPageListController = {
        _fillupShopArrivalList: function(e, n, a) {
            var s = t.createInstance("apiShop").getEvents(n).then(function(n) {
                console.log(n.body);
                var s = e.seekWidgetByName("sh_006_a_node")
                  , o = i.values(n.body.release_weapons)
                  , r = t.PageListParams.SHOP_GACHA_ARRIVAL_CHARA.subPageRes
                  , c = t.PageListParams.SHOP_GACHA_ARRIVAL_CHARA.perPage
                  , u = this._charaPanelForShopArrival.bind(this);
                return "summon" === a && (s = e.seekWidgetByName("sh_006_b_node"),
                o = i.values(n.body.summons),
                r = t.PageListParams.SHOP_GACHA_ARRIVAL_SUMMON.subPageRes,
                c = t.PageListParams.SHOP_GACHA_ARRIVAL_SUMMON.perPage,
                u = this._summonPanelForShopArrival.bind(this)),
                this._fillupList(s, {
                    viewParent: t.PageListParams.SHOP_GACHA_ARRIVAL.viewParent,
                    subPageRes: r,
                    panelsPerPage: c
                }, o, o.length, void 0, u),
                n.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return s
        },
        _charaPanelForShopArrival: function(e, a, s) {
            console.log(e, a, s);
            var o = a.character
              , r = a.weapon;
            if (this._setWeaponCoreCardElementRarity(e, r, "corecard_weapon_ui"),
            null === o || null === r)
                return void console.warn("[ERROR] Could not find a chara | a weapon in the record.");
            e.loadTextures({
                gachacard_chara: t.Img("gachacard", "chara", i.padZero(o.id, 4), o.skin || 0).png
            }),
            e.setVisible(!0),
            o.release_weapon_id = r.id;
            var c = n.director.getRunningScene();
            i.isFunction(this._touchArrivalWeapon) && i.isFunction(this._touchArrivalChara) && t.setTouchEventHandlers(e, {
                "TOUCH_ENDED weapon_img": function() {
                    this._touchArrivalWeapon(c, r)
                }
                .bind(this),
                "TOUCH_ENDED gachacard_chara": function() {
                    this._touchArrivalChara(c, o)
                }
                .bind(this)
            });
            var u = e.seekWidgetByName("weapon_img");
            u.setSoundEnabled(!0),
            u.setSound(t.SoundList.BUTTON_TOUCHED_DEFAULT);
            var _ = e.seekWidgetByName("gachacard_chara");
            _.setSoundEnabled(!0),
            _.setSound(t.SoundList.BUTTON_TOUCHED_DEFAULT)
        },
        _summonPanelForShopArrival: function(e, a, s) {
            console.log(a),
            a.summon_id = a.id,
            this._setSummonCoreCardElementRarity(e, a);
            var o = n.director.getRunningScene();
            i.isFunction(this._touchArrivalSummon) && t.setTouchEventHandlers(e, {
                "TOUCH_ENDED summon_img": function() {
                    this._touchArrivalSummon(o, a)
                }
                .bind(this)
            }),
            e.setVisible(!0)
        }
    },
    i.assign(t.pc.shop.roles.ShopArrivalPageListController, t.pc.roles.CoreCardCommon, t.pc.list.roles.PageListControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.roles = t.pc.shop.roles || {},
    t.pc.shop.roles.Routing = {
        _verifyRouterParams001: function(e) {},
        _navigate001ToBannerDestination: function(e, i) {
            if (n.isUndefined(i) || n.isUndefined(i.navigate_page))
                return void this._consoleErrorRoutingAbort("record | record.navigate_page");
            var a = i.navigate_page
              , s = a.replace(/^shop\//g, "")
              , o = {};
            o[s] = {
                event_id: i.event_id
            },
            t.createInstance("router").navigate(i.navigate_page, o, {
                tab: i.tab_name
            })
        },
        _navigate001To002003004: function(e, n) {
            "dmm" === n ? t.createInstance("router").navigate("shop/sh_002", {}, {
                tab: "heal"
            }) : "stone" === n ? t.createInstance("router").navigate("shop/sh_003", {}, {
                tab: "heal"
            }) : "treasure" === n && t.createInstance("router").navigate("shop/sh_004", {}, {
                tab: "item_equipment"
            })
        },
        _verifyRouterParams002: function(e) {},
        _verifyRouterParams003: function(e) {},
        _verifyRouterParams004: function(e) {},
        _verifyRouterParams005: function(e) {
            return n.isUndefined(e.routerParams.sh_005) || n.isUndefined(e.routerParams.sh_005.event_id) ? !n.isUndefined(e.routerParams.sh_005) && !n.isUndefined(e.routerParams.sh_005.event_id) || n.isUndefined(e.routerParams.shop_event_id) ? void this._consoleErrorRoutingAbort("routerParams.sh_005.event_id") : void (e.routerParams.sh_005 = {
                event_id: e.routerParams.shop_event_id
            }) : void 0
        },
        _navigate005To006: function(e) {
            if (n.isUndefined(e.routerParams.sh_005))
                return void this._consoleErrorRoutingAbort("routerParams.sh_005");
            if (n.isUndefined(e._type))
                return void this._consoleErrorRoutingAbort("scene._type");
            var i = "character_pack" === e._type ? "arrival_chara" : "arrival_summon"
              , a = {
                sh_006: {
                    id: e.routerParams.sh_005.event_id,
                    type: i
                }
            };
            null != e.routerParams.payment_id && (a.payment_id = null ,
            a.shop_event_id = null ),
            t.createInstance("router").navigate("shop/sh_006", a)
        },
        _navigate005To001: function(e) {
            var n = null != e.routerParams.payment_id ? {
                payment_id: null ,
                shop_event_id: null
            } : {};
            t.createInstance("router").navigate("shop", n)
        },
        _verifyRouterParams006: function(e) {
            n.isUndefined(e.routerParams.sh_006) && (e.routerParams.sh_006 = {},
            e.routerParams.sh_006.id = 1,
            e.routerParams.sh_006.type = "arrival_chara",
            this._consoleErrorRouterParams("sh_006, .id, .type"))
        },
        _navigate006To007: function(e, i) {
            return n.isUndefined(e.routerParams.sh_006) ? void this._consoleErrorRoutingAbort("routerParams.sh_006") : n.isUndefined(i.id) ? void this._consoleErrorRoutingAbort("record.id") : void t.createInstance("router").navigate("shop/sh_007", {
                sh_007: {
                    id: i.id
                }
            })
        },
        _navigate006To008: function(e, i) {
            return n.isUndefined(e.routerParams.sh_006) ? void this._consoleErrorRoutingAbort("routerParams.sh_006") : n.isUndefined(i.id) ? void this._consoleErrorRoutingAbort("record.id") : void t.createInstance("router").navigate("shop/sh_008", {
                sh_008: {
                    id: i.id
                }
            })
        },
        _navigate006To009: function(e, i) {
            return n.isUndefined(e.routerParams.sh_006) ? void this._consoleErrorRoutingAbort("routerParams.sh_006") : n.isUndefined(i.id) ? void this._consoleErrorRoutingAbort("record.id") : n.isUndefined(i.release_weapon_id) ? void this._consoleErrorRoutingAbort("record.release_weapon_id") : void t.createInstance("router").navigate("shop/sh_009", {
                sh_009: {
                    id: i.id,
                    release_weapon_id: i.release_weapon_id
                }
            })
        },
        _verifyRouterParams007: function(e) {
            n.isUndefined(e.routerParams.sh_007) && (e.routerParams.sh_007 = {},
            e.routerParams.sh_007.id = 1,
            this._consoleErrorRouterParams("routerParams.sh_007, .id"))
        },
        _verifyRouterParams008: function(e) {
            n.isUndefined(e.routerParams.sh_008) && (e.routerParams.sh_008 = {},
            e.routerParams.sh_008.id = 1,
            e.routerParams.sh_008.from = "sh_006",
            e.routerParams.sh_008.category = "stone",
            this._consoleErrorRouterParams("routerParams.sh_008, .id .from .category"))
        },
        _verifyRouterParams009: function(e) {
            n.isUndefined(e.routerParams.sh_009) && (e.routerParams.sh_009 = {},
            e.routerParams.sh_009.id = 1,
            e.routerParams.sh_009.release_weapon_id = 1,
            this._consoleErrorRouterParams("routerParams.sh_009, .id "))
        },
        _navigate009To008: function(e) {
            if (n.isUndefined(e.routerParams.sh_009))
                return void this._consoleErrorRoutingAbort("routerParams.sh_009");
            if (n.isUndefined(e.routerParams.sh_009.release_weapon_id))
                return void this._consoleErrorRoutingAbort("routerParams.sh_009.release_weapon_id");
            var i = e.routerParams.sh_009;
            t.createInstance("router").navigate("shop/sh_008", {
                sh_008: {
                    id: i.release_weapon_id
                }
            })
        }
    },
    n.assign(t.pc.shop.roles.Routing, t.pc.roles.RoutingCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_001 = t.pc.shop.sh_001 || {},
    t.pc.shop.sh_001.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("sh_001/sh_001.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: sh_001/sh_001.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "sh001Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["shop", "sh_001"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnPoint"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_point", t.createInstance("router").navigate.bind(t.createInstance("router"), "shop/sh_002")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnStone"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_stone", t.createInstance("router").navigate.bind(t.createInstance("router"), "shop/sh_003")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnTreasure"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_treasure", t.createInstance("router").navigate.bind(t.createInstance("router"), "shop/sh_004")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnHint"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_hint", function() {
                alert("{{popup、com_tutorialを開く}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_001 = t.pc.shop.sh_001 || {},
    t.pc.shop.sh_001.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            popupHint: {
                factoryName: "popupFactorySubTutorial",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams001(e),
            this._setStone(e),
            this._initBanner(e),
            e.seekWidgetByName("sh_event-info_ui").seekWidgetByName("subparts_textbar_label").setString("お買い得！便利なアイテム販売中！"),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        onPageInAnimationEnd: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnPoint: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate001To002003004(e, "dmm"),
            t.promise
        },
        btnCallbackBtnStone: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate001To002003004(e, "stone"),
            t.promise
        },
        btnCallbackBtnTreasure: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate001To002003004(e, "treasure"),
            t.promise
        },
        btnCallbackBtnPrev: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnNext: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnHint: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            e.popups.popupHint.setTypeAndOpen("shop", "hint"),
            t.promise
        },
        _setStone: function(e) {
            n.delay(function() {
                var t = e.seekWidgetByPath("headerparts_ui.stone_label")
                  , n = e.seekWidgetByPath("btn_stone.stone_label");
                return null !== t && t.getString() && null !== n ? void n.setString(t.getString()) : void this._getCurrency().then(function(e) {
                    n.setString(e.stone.toString())
                })
            }
            .bind(this), 500)
        },
        _getCurrency: function() {
            return t.createInstance("apiAPlayers").getCurrency().then(function(e) {
                return e.body
            })
        },
        _initBanner: function(e) {
            t.createInstance("apiABanners").getShopBanners().then(function(t) {
                console.log(t.body.data);
                var n = t.body.data;
                this._setSlider(e, "sh_event_banner_panel", n, "shop-sh_event_banner_ui", "_setShopSliderPanel", {
                    nodeName: "eventimg_banner",
                    funcName: "_onTouchSliderBanner"
                }, "_slideShopBanner")
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _setShopSliderPanel: function(e, i, a) {
            if (console.log(a),
            null === i.seekWidgetByName("eventimg_banner"))
                return void console.warn("[ERROR] Could not find image node: eventimg_banner");
            if (n.isUndefined(a.banner_id))
                return void console.warn("[ERROR] Could not find slider id.");
            var s = t.Img("eventimg", "banner", n.padZero(a.banner_id, 4)).png;
            i.seekWidgetByName("eventimg_banner").loadTextures(s, s, s)
        },
        _onTouchSliderBanner: function(e, t, n) {
            console.log(n),
            this._navigate001ToBannerDestination(e, n)
        },
        _slideShopBanner: function(e, t, n) {
            var i = n.description || "お買い得！便利なアイテム販売中！";
            this._setSliderTitle(e, i)
        },
        _setSliderTitle: function(e, t) {
            e.seekWidgetByName("subparts_textbar_label") && e.seekWidgetByName("subparts_textbar_label").setString(t)
        }
    }),
    n.assign(t.pc.shop.sh_001.SceneDelegate.prototype, t.pc.shop.roles.Routing, t.pc.list.roles.SliderCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_002 = t.pc.shop.sh_002 || {},
    t.pc.shop.sh_002.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("sh_002/sh_002.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: sh_002/sh_002.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_0_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_1_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "sh002Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["shop", "sh_002"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_002 = t.pc.shop.sh_002 || {},
    t.pc.shop.sh_002.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            a.defer();
            return this._verifyRouterParams002(e),
            this._shopInit(e),
            this._fillupHealExtensionBtnsList(e),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        tabCallbackTab0: function(e) {},
        tabCallbackTab1: function(e) {},
        _shopInit: function(e) {
            var n = [];
            if (this.paymentData = null ,
            e.routerParams.payment_id) {
                var i = t.createInstance("apiShopBuyResult").put(e.routerParams.payment_id).then(function(n) {
                    this.paymentData = n.body,
                    t.createInstance("router").setNavigateOption({
                        payment_id: null
                    }),
                    this.paymentData && this._showResultPopup(e, this.paymentData.num, this.paymentData.shop_item_id)
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                });
                n.push(i)
            }
            var a = {
                heal: "tab_0",
                extension: "tab_1"
            }
              , s = a[e.temporaryRouterParams.tab || "heal"];
            e.tabDelegateList[0].selectTab(e.seekWidgetByName(s))
        },
        _onTouchShopItemIcon: function(e, t) {
            console.log(t),
            e.popups.sh_item_info.open().then(function() {
                e.popups.sh_item_info.setData(t, "point")
            })
        },
        _onTouchShopBuyButton: function(e, n) {
            console.log(n),
            e.popups.sh_buy_check.open().then(function() {
                var a = e.popups.sh_buy_check
                  , s = a.seekWidgetByName("item_img")
                  , o = a.seekWidgetByName("item_name_label")
                  , r = a.seekWidgetByName("item_description_label")
                  , c = a.seekWidgetByName("price_label")
                  , u = t.Img("corecard", "shop-point", i.padZero(n.shop_item_id, 4)).jpg;
                s.loadTexture(u),
                o.setString(n.name),
                r.setString(n.description),
                c.setString(n.price + "ポイント"),
                this.selectedValue = 1,
                this.selectedRecord = n,
                t.setTouchEventHandlers(a, {
                    "TOUCH_ENDED blue_btn": function() {
                        this.pulldown.releaseMenu(),
                        this._buy(),
                        a.dismiss()
                    }
                    .bind(this),
                    "TOUCH_ENDED black_btn": function() {
                        this.pulldown.releaseMenu(),
                        a.dismiss()
                    }
                    .bind(this)
                }, this);
                var _ = this._getPulldownCondition(n);
                this.pulldown = new t.Pulldown({
                    button: a.seekWidgetByName("btn_pulldown"),
                    label: a.seekWidgetByName("amount_label"),
                    menuBase: a.seekWidgetByName("gud_sh_sort"),
                    choice: ccs.load(res["core-sort-sort_list_ui"]).node
                },_),
                this.pulldown.onChange(function(e) {
                    this.selectedRecord = n,
                    this.selectedValue = e.value,
                    c.setString(n.price * this.selectedValue + "ポイント")
                }
                .bind(this))
            }
            .bind(this))
        },
        _getPulldownCondition: function(e) {
            var t = [];
            return i.each(i.range(e.buy_max_num), function(e) {
                e++,
                t.push({
                    value: e,
                    text: e
                })
            }),
            t[0].selected = !0,
            t
        },
        _buy: function() {
            var e = {};
            e.num = this.selectedValue,
            e.name = this.selectedRecord.name,
            e.description = this.selectedRecord.description,
            e.price = this.selectedRecord.price,
            e.itemId = this.selectedRecord.shop_item_id,
            t.createInstance("paymentRequest").requestShopItem(e, {
                component: "shop"
            }).then(function(e) {
                var t = n.director.getRunningScene();
                this._showResultPopup(t, e.num, e.shop_item_id)
            }
            .bind(this))
        },
        _showResultPopup: function(e, a, s) {
            e.popups.sh_buy_result.open().then(function() {
                var o = e.popups.sh_buy_result
                  , r = t.Img("corecard", "shop-point", i.padZero(parseInt(s), 4)).jpg
                  , c = new n.Sprite(r);
                c.setAnchorPoint(n.p(0, 0)),
                o.seekWidgetByName("corecard_ui").addChild(c);
                var u = o.seekWidgetByName("buy_result_label");
                u.setString(a + "個購入しました。"),
                t.setTouchEventHandlers(o, {
                    "TOUCH_ENDED blue_btn": function() {
                        o.dismiss(),
                        t.env.isSp && this._removePaymentId(),
                        this.refreshPage()
                    }
                    .bind(this)
                }, this)
            }
            .bind(this))
        },
        _removePaymentId: function() {
            var e = t.createInstance("router")
              , n = e.getCurrentFragment()
              , i = e.getCurrentOption().option;
            delete i.payment_id,
            e.historyReplace(n, i)
        },
        refreshPage: function() {
            var e = n.director.getRunningScene();
            return null !== e.seekWidgetByName("salelist") ? (delete e.routerParams.payment_id,
            t.createInstance("sceneManager").reloadScene()) : (e.headerDelegate.updateCurrency(),
            void this._refreshCurrentTab())
        }
    }),
    i.assign(t.pc.shop.sh_002.SceneDelegate.prototype, t.pc.shop.roles.Routing, t.pc.shop.roles.ShopHealExtensionBtnsPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_003 = t.pc.shop.sh_003 || {},
    t.pc.shop.sh_003.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("sh_003/sh_003.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: sh_003/sh_003.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_0_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_1_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "sh003Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["shop", "sh_003"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_003 = t.pc.shop.sh_003 || {},
    t.pc.shop.sh_003.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            a.defer();
            return this._verifyRouterParams003(e),
            this._shopInit(e),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        tabCallbackTab0: function(e) {},
        tabCallbackTab1: function(e) {},
        _shopInit: function(e) {
            t.createInstance("apiAPlayers").getCurrency().then(function(t) {
                this.currency = t.body,
                e.seekWidgetByName("header_sub_label") && this.currency.stone && e.seekWidgetByName("header_sub_label").setString("所持数:" + this.currency.stone),
                this.stone_max = this.currency.stone,
                this._fillupHealExtensionBtnsList(e, "stone")
            }
            .bind(this))
        },
        _updateStone: function(e) {
            t.createInstance("apiAPlayers").getCurrency().then(function(t) {
                this.currency = t.body,
                e.seekWidgetByName("header_sub_label") && this.currency.stone && e.seekWidgetByName("header_sub_label").setString("所持数:" + this.currency.stone),
                this.stone_max = this.currency.stone
            }
            .bind(this))
        },
        _onTouchShopItemIcon: function(e, t) {
            console.log(t),
            e.popups.sh_item_info.open().then(function() {
                e.popups.sh_item_info.setData(t, "stone")
            }
            .bind(e))
        },
        _onTouchShopBuyButton: function(e, a) {
            e.popups.sh_stone_check.open().then(function() {
                var s = e.popups.sh_stone_check
                  , o = s.seekWidgetByName("item_img")
                  , r = s.seekWidgetByName("item_name_label")
                  , c = s.seekWidgetByName("item_description_label")
                  , u = s.seekWidgetByName("price_labelimg")
                  , _ = t.Img("corecard", "shop-stone", i.padZero(a.shop_item_id, 4)).jpg;
                o.loadTexture(_),
                r.setString(a.name),
                c.setString(a.description),
                this.selectedValue = 1,
                this.selectedRecord = a,
                t.setTouchEventHandlers(s, {
                    "TOUCH_ENDED blue_btn": function() {
                        this.pulldown.releaseMenu(),
                        this._buy(e),
                        s.dismiss()
                    }
                    .bind(this),
                    "TOUCH_ENDED black_btn": function() {
                        this.pulldown.releaseMenu(),
                        s.dismiss()
                    }
                    .bind(this)
                }, this);
                var l = this._getPulldownCondition(a);
                this.pulldown = new t.Pulldown({
                    button: s.seekWidgetByName("btn_pulldown"),
                    label: s.seekWidgetByName("amount_label"),
                    menuBase: s.seekWidgetByName("gud_sh_sort"),
                    choice: ccs.load(res["core-sort-sort_list_ui"]).node
                },l),
                this.pulldown.onChange(function(e) {
                    this.selectedRecord = a,
                    this.selectedValue = e.value,
                    d()
                }
                .bind(this));
                var d = function() {
                    var e = this.selectedValue * a.stones
                      , i = this.currency.stone - e
                      , s = "<span class='orange'>必要数&nbsp;：&nbsp;</span><span class='white'>" + a.stones + "個</span><br /><span class='orange'>所持" + t.w("stone") + "&nbsp;：&nbsp;</span><span class='white'>" + this.currency.stone + "&rarr;</span><span class='red'>" + i + "</span>"
                      , o = '<table style="width: 400px;height: 60px;"><tr><td><div class="text_common">' + s + "</div></td></tr></table>";
                    t.convertHTMLToTexture(o, n.size(400, 60), t.GameConfig.POPUP_CSS).then(function(e) {
                        u.loadTexture(e)
                    }
                    .bind(this))
                }
                .bind(this);
                d()
            }
            .bind(this))
        },
        _buy: function(e) {
            var n = t.createInstance("apiShop");
            n.buy(this.selectedRecord.shop_item_id, this.selectedValue, "stone").then(function(t) {
                var n = t.body.result;
                n ? (this._updateStone(e),
                this._showResultPopup(e, this.selectedValue, this.selectedRecord.shop_item_id)) : console.error(new Error("購入結果が正しく取得できませんでした"))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _showResultPopup: function(e, n, i) {
            this.refreshPage(),
            e.popups.sh_buy_result.open().then(function() {
                try {
                    var e = this.popups.sh_buy_result
                      , a = t.createInstance("CoreCardShopItemUI", ["shop-stone"]);
                    a.setImg(i);
                    var s = a.getResult();
                    e.seekWidgetByName("corecard_ui").addChild(s),
                    e.seekWidgetByName("corecard_ui").setVisible(!0);
                    var o = e.seekWidgetByName("buy_result_label");
                    o.setString(n + "個購入しました。"),
                    t.setTouchEventHandlers(e, {
                        "TOUCH_ENDED blue_btn": function() {
                            e.dismiss()
                        }
                    }, this)
                } catch (r) {
                    console.error(r)
                }
            }
            .bind(e))
        },
        _getPulldownCondition: function(e) {
            var t = Math.floor(this.currency.stone / e.stones);
            t = e.buy_max_num < t ? e.buy_max_num : t;
            var n = i.map(i.range(t), function(e) {
                return e++,
                {
                    value: e,
                    text: e
                }
            });
            return n[0].selected = !0,
            n
        },
        refreshPage: function() {
            n.director.getRunningScene().headerDelegate.updateCurrency(),
            this._refreshCurrentTab()
        }
    }),
    i.assign(t.pc.shop.sh_003.SceneDelegate.prototype, t.pc.shop.roles.Routing, t.pc.shop.roles.ShopHealExtensionBtnsPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_004 = t.pc.shop.sh_004 || {},
    t.pc.shop.sh_004.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("sh_004/sh_004.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: sh_004/sh_004.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_0_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                e.seekWidgetByPath("tab_3_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_1_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                e.seekWidgetByPath("tab_3_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_2: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab3のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_2_node");
                if (!t)
                    return void alert("tab.tab3のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                e.seekWidgetByPath("tab_3_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab2";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_3: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab4のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("tab_3_node");
                if (!t)
                    return void alert("tab.tab4のcontent-nodeが見つかりません");
                e.seekWidgetByPath("tab_0_node").setVisible(!1),
                e.seekWidgetByPath("tab_1_node").setVisible(!1),
                e.seekWidgetByPath("tab_2_node").setVisible(!1),
                e.seekWidgetByPath("tab_3_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab3";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "sh004Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["shop", "sh_004"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_004 = t.pc.shop.sh_004 || {},
    t.pc.shop.sh_004.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        _tabNumber: 0,
        onSceneInit: function(e) {
            a.defer();
            return this._fillupTreasureBtnsList(e),
            a.resolve()
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            e.seekWidgetByName("tab_" + this._tabNumber + "_node").setVisible(!0);
            a.defer();
            return a.resolve()
        },
        tabCallbackTab0: function(e) {
            this._tabNumber = 0
        },
        tabCallbackTab1: function(e) {
            this._tabNumber = 1
        },
        tabCallbackTab2: function(e) {
            this._tabNumber = 2
        },
        tabCallbackTab3: function(e) {
            this._tabNumber = 3,
            this._switchTab3Banner(e, !0)
        },
        _onTouchShopTreasure: function(e, t) {
            console.log(t),
            this._showItemDetailPopup(e, t, this._getItemType(t))
        },
        _onTouchExchangeItem: function(e, t) {
            console.log(t),
            this._showItemDetailPopup(e, t, this._getItemType(t))
        },
        _onTouchExchangeBtn: function(e, t) {
            console.log(t),
            e.popups.sh_change_check.open(t)
        },
        _showResultPopup: function(e, n, i, a) {
            this.refreshPage(),
            e.popups.sh_buy_result.open().then(function() {
                try {
                    var e = this.popups.sh_buy_result;
                    if ("treasure" == a) {
                        var s = t.createInstance("CoreCardItemUI");
                        s.setImg(i);
                        var o = s.getResult();
                        e.seekWidgetByName("corecard_ui").addChild(o),
                        e.seekWidgetByName("corecard_ui").setVisible(!0)
                    } else if ("item" == a) {
                        var s = t.createInstance("CoreCardItemUI");
                        s.setImg(i);
                        var o = s.getResult();
                        e.seekWidgetByName("corecard_ui").addChild(o),
                        e.seekWidgetByName("corecard_ui").setVisible(!0)
                    } else
                        "weapon" == a ? t.createInstance("apiWeapons").get(i).then(function(t) {
                            this._selectedWeapon = t.body,
                            this._delegate._setWeaponCoreCardElementRarity(e, this._selectedWeapon, "corecard_ui"),
                            e.seekWidgetByName("corecard_ui").setVisible(!0)
                        }
                        .bind(this)) : "summon" == a && t.createInstance("apiSummons").get(i).then(function(t) {
                            this._selectedWeapon = t.body,
                            this._delegate._setSummonCoreCardElementRarity(e, this._selectedWeapon, "corecard_ui"),
                            e.seekWidgetByName("corecard_ui").setVisible(!0)
                        }
                        .bind(this));
                    e.seekWidgetByName("title_label").string = "交換結果";
                    var r = e.seekWidgetByName("buy_result_label");
                    r.setString(n + "個交換しました。"),
                    t.setTouchEventHandlers(e, {
                        "TOUCH_ENDED blue_btn": function() {
                            e.dismiss()
                        }
                    }, this)
                } catch (c) {
                    console.error(c)
                }
            }
            .bind(e))
        },
        exchange: function(e, i) {
            var a = {
                0: "exchangeDragonEye",
                1: "exchangeItemEquipment",
                2: "exchangeTreasure",
                3: "exchangeEvent",
                4: "exchangeEvent"
            }
              , s = t.createInstance("apiShop");
            s[a[this._tabNumber]](e.shop_treasure_id, i).then(function(t) {
                var a = t.body.result;
                a ? this._showResultPopup(n.director.getRunningScene(), i, e.id, e.kind) : console.error(new Error("購入結果が正しく取得できませんでした"))
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _getItemType: function(e) {
            var t = e.kind || "item";
            if ("item" === t || "treasure" === t) {
                var n = e.obtainment_info;
                i.isUndefined(n) || (n.is_today_sp_quest ? t = "treasure_todays_quest" : i.isString(n.description) && n.description.length > 0 && (t = "treasure"))
            }
            return t
        },
        _showItemDetailPopup: function(e, t, n) {
            var i = {
                item: {
                    popupName: "sh_item_info",
                    funcName: "_shItemInfo"
                },
                treasure: {
                    popupName: "com_need_mate",
                    funcName: "_comNeedMate"
                },
                treasure_todays_quest: {
                    popupName: "com_need_mate_sp",
                    funcName: "_comNeedMateSp"
                },
                weapon: {
                    popupName: "sh_weapon_info",
                    funcName: "_shWeaponInfo"
                },
                summon: {
                    popupName: "sh_summon_info",
                    funcName: "_shSummonInfo"
                }
            };
            e.popups[i[n].popupName].open().then(this[i[n].funcName].bind(this, e, t))
        },
        _shItemInfo: function(e, t) {
            i.isUndefined(t.shop_treasure_id) ? e.popups.sh_item_info.setData(t) : (t.item_id = t.shop_treasure_id,
            e.popups.sh_item_info.setData(t, "treasure"))
        },
        _comNeedMate: function(e, n, a) {
            var a = a && !i.isArray(a) ? a : e.popups.com_need_mate
              , s = a.seekWidgetByName("item_img")
              , o = a.seekWidgetByName("item_label")
              , r = a.seekWidgetByName("item_detail_label")
              , c = a.seekWidgetByName("item_quest_label")
              , u = null ;
            "item" == n.kind ? u = t.Img("corecard", "item", i.padZero(n.id, 4)).jpg : n.item_id ? u = t.Img("corecard", "item", i.padZero(n.item_id, 4)).jpg : n.shop_treasure_id && (u = t.Img("corecard", "shop-treasure", i.padZero(n.shop_treasure_id, 4)).jpg),
            null != u ? s.loadTexture(u) : console.warn("適切な画像が見つかりません。API仕様が変わったかも！？", n),
            o.setString(n.name),
            r.setString(n.item_description),
            c.setString(n.obtainment_info.description)
        },
        _comNeedMateSp: function(e, t) {
            this._comNeedMate(e, t, e.popups.com_need_mate_sp)
        },
        _shWeaponInfo: function(e, n) {
            t.createInstance("apiWeapons").get(n.id).then(function(t) {
                e.popups.sh_weapon_info.setData(e.popups.sh_weapon_info, t.body)
            }
            .bind(this))
        },
        _shSummonInfo: function(e, n) {
            t.createInstance("apiSummons").get(n.id).then(function(t) {
                e.popups.sh_summon_info.setData(e.popups.sh_summon_info, t.body)
            }
            .bind(this))
        },
        refreshPage: function() {
            n.director.getRunningScene().headerDelegate.updateCurrency(),
            this._refreshCurrentTab()
        }
    }),
    i.assign(t.pc.shop.sh_004.SceneDelegate.prototype, t.pc.shop.roles.Routing, t.pc.roles.CoreCardCommon, t.pc.shop.roles.ShopTreasureBtnsPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_005 = t.pc.shop.sh_005 || {},
    t.pc.shop.sh_005.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("sh_005/sh_005.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: sh_005/sh_005.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "sh005Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["shop", "sh_005"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBlueM"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_blue_m", function() {
                alert("SSR神姫一覧へをタップの場合sh_006_aへ。遷移SSR幻獣一覧へをタップの場合sh_006_bへ遷移")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBuy"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_buy", function() {
                alert("{{DMM購入ポップアップを表示。購入後、購入ポップアップを開く前のページに戻りsh_buy_resultを開く.購入回数の制限を超えている場合、グレーアウトしてタップ不可に。}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnPackpage"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_packpage", function() {
                alert("{{幻獣パックページへをタップの場合sh_005_bに遷移。神姫パックページへをタップの場合sh_005_aに遷移}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_005 = t.pc.shop.sh_005 || {},
    t.pc.shop.sh_005.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            sh_buy_result: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-sh_buy_result",
                title: "購入結果",
                id: "1002",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        _response: "",
        _type: "",
        onSceneInit: function(e) {
            if (this._verifyRouterParams005(e),
            this._hasCompletedTransaction(e)) {
                var t = this._getPaymentId(e);
                this._cleanUpPaymentId(),
                this._getTransactionResult(e, t).then(function(t) {
                    this._showResultPopup(e, t.num, t.shop_item_id)
                }
                .bind(this))
            }
            return null !== e.seekWidgetByName("packpage_panel") && e.seekWidgetByName("packpage_panel").setVisible(!1),
            this._updateScene(e)
        },
        _updateScene: function(e) {
            var n = t.createInstance("apiShop");
            return n.getEvents(e.routerParams.sh_005.event_id).then(function(t) {
                null != t && (e._response = t.body),
                this._apiFinished(e)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _hasCompletedTransaction: function(e) {
            return null != e.routerParams.payment_id
        },
        _getPaymentId: function(e) {
            return e.routerParams.payment_id
        },
        _cleanUpPaymentId: function() {
            var e = t.createInstance("router");
            e.permanentlyRemoveRouterParam("payment_id")
        },
        _getTransactionResult: function(e, n) {
            return t.createInstance("apiShopBuyResult").put(n).then(function(e) {
                return e.body
            })
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        btnCallbackBtnBlueM: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            this._navigate005To006(e),
            t.promise
        },
        btnCallbackBtnBuy: function(e) {
            return a.reject(this._override)
        },
        btnCallbackBtnPackpage: function(e) {
            var t = a.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackBtnBackShTop: function(e) {
            return this._navigate005To001(e),
            a.reject(this._override)
        },
        _buy: function() {
            var e = n.director.getRunningScene()
              , i = {};
            i.num = 1,
            i.price = e._response.price,
            i.itemId = e._response.shop_item_id,
            i.shop_event_id = e.routerParams.sh_005.event_id,
            i.name = e._response.shop_item_name,
            i.description = e._response.shop_item_description,
            t.createInstance("paymentRequest").requestShopItem(i, {
                component: "shop"
            }).then(function(e) {
                var t = n.director.getRunningScene();
                this._showResultPopup(t, e.num, e.shop_item_id)
            }
            .bind(this), function(e) {
                console.log(e)
            })
        },
        _showResultPopup: function(e, a, s) {
            this.refreshPage(),
            e.popups.sh_buy_result.open().then(function() {
                var o = e.popups.sh_buy_result
                  , r = t.Img("corecard", "shop-point", i.padZero(parseInt(s), 4)).jpg
                  , c = new n.Sprite(r);
                c.setAnchorPoint(n.p(0, 0)),
                o.seekWidgetByName("corecard_ui").addChild(c);
                var u = o.seekWidgetByName("buy_result_label");
                u.setString(a + "個購入しました。"),
                this._updateScene(e)
            }
            .bind(this))
        },
        _apiFinished: function(e) {
            e._type = e._response.shop_event_type,
            "character_pack" === e._response.shop_event_type ? e.seekWidgetByName("btn_blue_m").setTitleText("SSR神姫一覧へ") : "summon_pack" === e._response.shop_event_type ? e.seekWidgetByName("btn_blue_m").setTitleText("SSR幻獣一覧へ") : e.seekWidgetByName("btn_blue_m").setVisible(!1),
            e.seekWidgetByName("header_label").setString("ショップ");
            var a = t.Img("shopevent-bg", "event", i.padZero(e._response.shop_event_id, 4)).jpg;
            e.seekWidgetByName("main_bg").loadTexture(a);
            var s = e.seekWidgetByName("btn_buy");
            s.setColor(n.color(e._response.buyable ? "#FFFFFF" : "#808080")),
            s.setTouchEnabled(e._response.buyable),
            s.addTouchEventListener(function(e, t) {
                t === ccui.Widget.TOUCH_ENDED && this._buy()
            }
            .bind(this))
        },
        refreshPage: function() {
            n.director.getRunningScene().headerDelegate.updateCurrency()
        }
    }),
    i.assign(t.pc.shop.sh_005.SceneDelegate.prototype, t.pc.shop.roles.Routing)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_006 = t.pc.shop.sh_006 || {},
    t.pc.shop.sh_006.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("sh_006/sh_006.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: sh_006/sh_006.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "sh006Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["shop", "sh_006"])
            })
        },
        _init: function() {
            if (!this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_006 = t.pc.shop.sh_006 || {},
    t.pc.shop.sh_006.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams006(e),
            "arrival_chara" === e.routerParams.sh_006.type ? e.seekWidgetByName("sh_006_a_node") && (e.seekWidgetByName("sh_006_a_node").setVisible(!0),
            this._fillupShopArrivalList(e, e.routerParams.sh_006.id, "chara")) : e.seekWidgetByName("sh_006_b_node") && (e.seekWidgetByName("sh_006_b_node").setVisible(!0),
            this._fillupShopArrivalList(e, e.routerParams.sh_006.id, "summon")),
            i.resolve()
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        onPageInAnimationEnd: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackSh006ANodeBtnUp: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSh006ANodeBtnDown: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSh006BNodeBtnUp: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        btnCallbackSh006BNodeBtnDown: function(e) {
            var t = i.defer();
            return t.resolve(),
            t.promise
        },
        _touchArrivalWeapon: function(e, t) {
            console.log(t),
            this._navigate006To008(e, t)
        },
        _touchArrivalChara: function(e, t) {
            console.log(t),
            this._navigate006To009(e, t)
        },
        _touchArrivalSummon: function(e, t) {
            console.log(t),
            this._navigate006To007(e, t)
        }
    }),
    n.assign(t.pc.shop.sh_006.SceneDelegate.prototype, t.pc.shop.roles.Routing, t.pc.shop.roles.ShopArrivalPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        ga_scene_check: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("ga_scene_check")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: ga_scene_check"),
                e || ""
            }(),
            title: "{{該当の幻獣に応じたエピソードタイトルを差し替え}}",
            buttonLabels: {
                blackBtn: "閉じる"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        }
    };
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_007 = t.pc.shop.sh_007 || {},
    t.pc.shop.sh_007.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("sh_007/sh_007.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: sh_007/sh_007.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "sh007Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["shop", "sh_007"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBlueL"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_blue_l", function(e) {
                this.popups.ga_scene_check.open(e)
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_007 = t.pc.shop.sh_007 || {},
    t.pc.shop.sh_007.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            ga_scene_check: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: function() {
                    var e = n.findKey(res, function(e) {
                        return 0 < e.indexOf("ga_scene_check")
                    });
                    return e || alert("該当するポップアップリソースが見つかりませんでした: ga_scene_check"),
                    e || ""
                }(),
                title: "{{該当の幻獣に応じたエピソードタイトルを差し替え}}",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function() {
                        this.dismiss()
                    }
                }
            }
        },
        onSceneInit: function(e) {
            i.defer();
            return this._verifyRouterParams007(e),
            this._loadSummon(e.routerParams.sh_007.id).then(function(t) {
                if (!n.isUndefined(t.episodes) && t.episodes.length) {
                    var i = e.seekWidgetByName("btn_blue_l");
                    null !== i && i.setVisible(!0)
                }
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        onPageInAnimationEnd: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnBlueL: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showPopupEpisode(e),
            t.promise
        }
    }),
    n.assign(t.pc.shop.sh_007.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.shop.roles.Routing, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.scene.roles.SceneSummonCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_008 = t.pc.shop.sh_008 || {},
    t.pc.shop.sh_008.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("sh_008/sh_008.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: sh_008/sh_008.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "sh008Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["shop", "sh_008"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_008 = t.pc.shop.sh_008 || {},
    t.pc.shop.sh_008.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {},
        onSceneInit: function(e) {
            this._verifyRouterParams008(e);
            var t = this._loadWeapon(e.routerParams.sh_008.id);
            return t
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve()
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        onPageInAnimationEnd: function(e) {
            i.defer();
            return i.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        }
    }),
    n.assign(t.pc.shop.sh_008.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.shop.roles.Routing, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.status.roles.BurstCommon, t.pc.status.roles.WeaponSkillCommon, t.pc.scene.roles.SceneWeaponCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {
        ga_scene_check: {
            factoryName: "popupFactoryPopupCommon",
            resourceName: function() {
                var e = n.findKey(res, function(e) {
                    return 0 < e.indexOf("ga_scene_check")
                });
                return e || alert("該当するポップアップリソースが見つかりませんでした: ga_scene_check"),
                e || ""
            }(),
            title: "{{該当の幻獣に応じたエピソードタイトルを差し替え}}",
            buttonLabels: {
                blackBtn: "閉じる"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        }
    };
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_009 = t.pc.shop.sh_009 || {},
    t.pc.shop.sh_009.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("sh_009/sh_009.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: sh_009/sh_009.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_chara_status_0_ui");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_chara_status_0_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("introduce_statuslist_list_7_ui");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("introduce_chara_status_0_ui").setVisible(!1),
                e.seekWidgetByPath("introduce_statuslist_list_7_ui").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "sh009Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["shop", "sh_009"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnRedL"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_red_l", t.createInstance("router").navigate.bind(t.createInstance("router"), "shop/sh_008")),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnBlueL"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_blue_l", function(e) {
                this.popups.ga_scene_check.open(e)
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnSound"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_sound", function() {
                alert("{{サウンドの再生}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._)
      , i = e.Q;
    t.pc = t.pc || {},
    t.pc.shop = t.pc.shop || {},
    t.pc.shop.sh_009 = t.pc.shop.sh_009 || {},
    t.pc.shop.sh_009.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            ga_scene_check: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: function() {
                    var e = n.findKey(res, function(e) {
                        return 0 < e.indexOf("ga_scene_check")
                    });
                    return e || alert("該当するポップアップリソースが見つかりませんでした: ga_scene_check"),
                    e || ""
                }(),
                title: "{{該当の幻獣に応じたエピソードタイトルを差し替え}}",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function() {
                        this.dismiss()
                    }
                }
            }
        },
        onSceneInit: function(e) {
            return this._verifyRouterParams009(e),
            e.seekWidgetByName("btn_sound").setSoundEnabled(!1),
            this._loadCharacter(e.routerParams.sh_009.id)
        },
        onSceneEnter: function(e) {
            i.defer();
            return i.resolve();
        },
        onSceneExit: function(e) {
            i.defer();
            return i.resolve()
        },
        onPageInAnimationEnd: function(e) {
            i.defer();
            return i.resolve()
        },
        tabCallbackTab0: function(e) {},
        tabCallbackTab1: function(e) {},
        btnCallbackBtnRedL: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._navigate009To008(e),
            t.promise
        },
        btnCallbackBtnBlueL: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showPopupEpisode(e),
            t.promise
        },
        btnCallbackBtnAllOver: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._showImageZoomPopup(),
            t.promise
        },
        btnCallbackBtnSound: function(e) {
            var t = i.defer();
            return t.reject(this._override),
            this._touchPlayVoiceButton(),
            t.promise
        }
    }),
    n.assign(t.pc.shop.sh_009.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.shop.roles.Routing, t.pc.scene.roles.SceneCharacterCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._
      , i = e.cc
      , a = e.ccui;
    t.epi = t.epi || {};
    var s = {};
    t.epi.QuestButton = i.Class.extend({
        type: "",
        aQuest: null ,
        popupDelegate: null ,
        ctor: function(e, t, n) {
            this.type = e,
            this.aQuest = t,
            this.storyIsEncounter = n
        },
        setPopupDelegate: function(e) {
            this.popupDelegate = e
        },
        createListener: function() {
            return function(e, t) {
                t === a.Widget.TOUCH_ENDED && this._selectEpisode()
            }
            .bind(this)
        },
        _selectEpisode: function() {
            if (!this.popupDelegate)
                throw new Error("popupDelegate が指定されていません");
            var a = i.director.getRunningScene();
            return a.routerParams.episode_type = this.storyIsEncounter ? "encounter" : "",
            this.aQuest.is_opened && this.aQuest.is_cleared ? this.storyIsEncounter ? this.showPopupEpiStoryCheck(this.type, this.aQuest) : t.env.isR18 ? this.showPopupEpiSceneCheck(this.type, this.aQuest) : this.showPopupComAgeLimitCleared(this.aQuest) : void Q.all([this._fetch(null , "apiAQuestInfo", "get"), this._fetch(null , "apiAPlayers", "getQuestPoints"), this._fetch(null , "apiAItems", "getApGain"), this._fetch(null , "apiAQuests", "getCheckUserAP", [this.aQuest.a_quest_id, this.aQuest.type]), this._fetch(null , "apiAPlayers", "get", ["me"])]).spread(function(e, i, a, s, o) {
                if (!n.isUndefined(this.aQuest.limit_info) && o.rank < this.aQuest.limit_info.rank)
                    return this.showPopupComCaution2(this.aQuest.limit_info.rank);
                var r = new t.QuestSceneCommonDelegate
                  , c = r.getInProgressQuest(e);
                if (c)
                    return this.showPopupComApRestart(c);
                if (e.has_unverified)
                    return this.showPopupComRaidCheck();
                if (this.storyIsEncounter)
                    return this.navigateToAQ002(this.aQuest);
                if (!s.result) {
                    var u = n.find(a.data, function(e) {
                        return e.name === t.w("elixir")
                    })
                      , _ = n.find(a.data, function(e) {
                        return e.name === t.w("elixirHalf")
                    });
                    return 0 === u.num && 0 === _.num ? this.showPopupComNeedApBp2(this.aQuest.title, i.quest_points.ap, i.quest_points.max_ap, u, _) : this.showPopupComNeedApBp1(this.aQuest.title, i.quest_points.ap, i.quest_points.max_ap, u, _)
                }
                return t.env.isR18 ? this.showPopupEpiApCheck(this.aQuest, i.quest_points.ap, i.quest_points.ap - this.aQuest.quest_ap) : this.showPopupComAgeLimitNotCleared(function() {
                    this.showPopupEpiApCheck(this.aQuest, i.quest_points.ap, i.quest_points.ap - this.aQuest.quest_ap)
                }
                .bind(this))
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            })
        },
        _onUseApItem: function(e) {
            this._selectEpisode()
        },
        _fetch: function(e, n, i, a) {
            if (e && s[e])
                return Q.resolve(s[e]);
            var o = t.createInstance(n);
            return o[i].apply(o, a || []).then(function(t) {
                return e && (s[e] = t.body),
                t.body
            }
            .bind(this))
        },
        showPopupComApRestart: function(e) {
            var t = this.popupDelegate.getPopup("comApRestart");
            return t.open({
                questTitle: e.title,
                aQuestId: e.a_quest_id,
                questType: e.type,
                type: e.type
            })
        },
        showPopupComRaidCheck: function() {
            var e = this.popupDelegate.getPopup("comRaidCheck");
            return e.open()
        },
        _showPopupComNeedApBp: function(e, t, i, a, s, o) {
            n.zipObject(n.map({
                elixir: s,
                elixirHalf: o
            }, function(e, t) {
                var n = e.recovery_amount;
                return [t, n]
            }));
            return e.open({
                property: "AP",
                questTitle: t,
                item: s,
                itemLittleRecover: o,
                currentQuestPoints: i,
                maxQuestPoints: a,
                component: "epi",
                navigateOnly: !0,
                onUse: this._onUseApItem.bind(this)
            })
        },
        showPopupComNeedApBp1: function() {
            var e = this.popupDelegate.getPopup("comNeedApBp1")
              , t = Array.prototype.slice.apply(arguments);
            return t.unshift(e),
            this._showPopupComNeedApBp.apply(this, t)
        },
        showPopupComNeedApBp2: function() {
            var e = this.popupDelegate.getPopup("comNeedApBp2")
              , t = Array.prototype.slice.apply(arguments);
            return t.unshift(e),
            this._showPopupComNeedApBp.apply(this, t)
        },
        showPopupComCaution2: function(e) {
            var t = this.popupDelegate.getPopup("comCaution2");
            return t.open().then(function() {
                var n = "<p>Rank" + e + 'に達していないため<br />このクエストを開始することができません。</p><p class="red">[開始条件]<br />Rank' + e + "以上</p>";
                t.setContent(n)
            })
        },
        showPopupEpiSceneCheck: function(e, t) {
            var n = this.popupDelegate.getPopup("epiSceneCheck")
              , i = this.popupDelegate.getReturnBackParams();
            return n.open({
                type: e,
                record: t,
                returnBackParams: i
            })
        },
        showPopupEpiApCheck: function(e, t, n) {
            var i = this.popupDelegate.getPopup("epiApCheck");
            return i.open({
                episodeTitle: e.title,
                beforeAP: t,
                afterAP: n,
                aQuestId: e.a_quest_id,
                questType: e.type
            })
        },
        showPopupEpiStoryCheck: function(e, t) {
            if (n.isEmpty(t.description))
                var i = this.popupDelegate.getPopup("epiReplayCheck");
            else
                var i = this.popupDelegate.getPopup("epiStoryCheck");
            var a = this.popupDelegate.getReturnBackParams();
            i.open({
                type: e,
                record: t,
                returnBackParams: a
            })
        },
        showPopupComAgeLimitCleared: function(e) {
            var t = this.popupDelegate.getPopup("comAgeLimitB");
            t.open()
        },
        showPopupComAgeLimitNotCleared: function(e) {
            var t = this.popupDelegate.getPopup("comAgeLimitA");
            t.open({
                onSkipButtonTouched: e
            })
        },
        navigateToAQ002: function(e) {
            this.popupDelegate.getReturnBackParams();
            t.createInstance("questStateManager").startQuest(e.a_quest_id, e.type)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._
      , i = e.cc
      , a = e.ccui;
    t.epi = t.epi || {};
    t.epi.EpisodeButton = i.Class.extend({
        type: "",
        aQuest: null ,
        popupDelegate: null ,
        _cached: {},
        ctor: function(e, t) {
            this.type = e,
            this.aQuest = t
        },
        setPopupDelegate: function(e) {
            this.popupDelegate = e
        },
        createListener: function() {
            return function(e, n) {
                if (n === a.Widget.TOUCH_ENDED) {
                    if (!this.popupDelegate)
                        throw new Error("popupDelegate が指定されていません");
                    return this.aQuest.is_cleared ? this.showPopupEpiStoryCheck(this.type, this.aQuest) : void t.createInstance("questStateManager").startQuest(this.aQuest.a_quest_id, this.aQuest.type)
                }
            }
            .bind(this)
        },
        showPopupEpiStoryCheck: function(e, t) {
            if (n.isEmpty(t.description))
                var i = this.popupDelegate.getPopup("epiReplayCheck");
            else
                var i = this.popupDelegate.getPopup("epiStoryCheck");
            var a = this.popupDelegate.getReturnBackParams();
            i.open({
                type: e,
                record: t,
                returnBackParams: a
            })
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._
      , i = e.blowfish
      , a = i.decrypt
      , s = "bLoWfIsH"
      , o = 1
      , r = 0;
    t.EpisodeImage = cc.Class.extend({
        _episodeRecordCache: {},
        loadTextureToImageView: function(c, u, _, l) {
            return n.isUndefined(_) ? (console.warn("episode_id is not specified"),
            Q.resolve()) : (this._episodeRecordCache[_] ? Q.resolve(this._episodeRecordCache[_]) : t.createInstance("apiEpisodes").get(_).then(function(e) {
                return this._episodeRecordCache[_] = e,
                e
            }
            .bind(this))).then(function(t) {
                var i = t.body.harem_scenes;
                if (n.isArray(i) && 0 < i.length) {
                    var a = i[0];
                    if (n.isUndefined(a))
                        return e.console.warn("該当するハーレムシーンが見つかりませんでした 1"),
                        "";
                    var s = a.harem_scene_id;
                    return n.isUndefined(s) ? (e.console.warn("該当するハーレムシーンが見つかりませんでした 2"),
                    "") : a.resource_directory || ""
                }
                var o = t.body.scenarios;
                if (n.isArray(o) && 0 < o.length) {
                    var r = o[0];
                    if (n.isUndefined(r))
                        return e.console.warn("該当するシナリオが見つかりませんでした 1"),
                        "";
                    var c = r.scenario_id;
                    return n.isUndefined(c) ? (e.console.warn("該当するシナリオが見つかりませんでした 2"),
                    "") : r.resource_directory || ""
                }
            }
            .bind(this)).then(function(e) {
                var d = e.match(/[^\/]+$/);
                if (d) {
                    d = d[0],
                    d.indexOf("-") < 0 && (d = a.call(i, d, s, {
                        outputType: o,
                        cipherMode: r
                    })),
                    d = d.replace(/^[\w-_]+_(\d{4}-\d{1}-\d{1})-[HS]$/, function(e, t) {
                        return t
                    });
                    var p;
                    if (/main/.test(u)) {
                        var h = _
                          , g = l;
                        p = t.Img("questimg", u, n.padZero(h, 4), g).png,
                        console.debug("[!! DEBUG IMG POPUP MAIN STORY !!]", p)
                    } else
                        p = t.Img("questimg", u.replace(/cter$/, "") + "-quest", d, l).png,
                        console.debug("[!! DEBUG IMG POPUP CHARA STORY !!]", p);
                    var m = Q.defer()
                      , f = new Image;
                    return f.crossOrigin = "anonymous",
                    f.onload = function() {
                        c.loadTexture(p),
                        m.resolve()
                    }
                    ,
                    f.src = p,
                    m.promise
                }
            }
            .bind(this)).fail(function(t) {
                e.console.warn(t)
            })
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh;
    e.cc,
    e._,
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.RoutingCommon = {
        _consoleErrorRouterParams: function(e) {
            if (t.env.riseErrorOnRoutingValidation)
                throw new Error("Routing parameter validation failed. requires " + e + " .");
            console.debug("[CAUTION] Created temporary router param for debug: " + e + "."),
            console.debug("          If you define this parameter, this caution will be cleared.")
        },
        _consoleErrorRoutingAbort: function(e) {
            console.debug("[CAUTION] Not defined router parameters: " + e),
            console.debug("          Routing aborted.")
        },
        _navigateToPresent: function(e) {
            t.createInstance("router").navigate("present/prs_001", e)
        },
        _navigateToGachaTop: function(e) {
            t.createInstance("router").navigate("gacha", e)
        },
        _navigateToGemGacha: function(e) {
            t.createInstance("router").navigate("gacha/ga_004", e)
        },
        _navigateToQuest: function(e) {
            t.createInstance("router").navigate("quest", e)
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.IconsCommon = {
        _setRarityIcon: function(e, t) {
            if (!n.isUndefined(t.rare) && null !== e.seekWidgetByName("rarity_icon")) {
                var i = t.rare;
                if (t.is_aroused && (i += "_arousal"),
                !n.contains(["N", "R", "SR", "SSR", "SR_arousal", "SSR_arousal"], i))
                    return void console.error("Invalid rarity type: " + i);
                var a = "core/res/icon/rarityicon_" + i + ".png";
                e.seekWidgetByName("rarity_icon").loadTexture(a, ccui.Widget.PLIST_TEXTURE)
            }
        },
        _setRarityBar: function(e, t) {
            if (!n.isUndefined(t.rare) && null !== e.seekWidgetByName("name_base")) {
                var i = t.rare;
                if (!n.contains(["N", "R", "SR", "SSR"], i))
                    return void console.error("Invalid rarity type: " + i);
                var a = "core/res/introduce/introduce_raritybar_" + i + ".png";
                e.seekWidgetByName("name_base").loadTexture(a, ccui.Widget.PLIST_TEXTURE)
            }
        },
        _setElementIcon: function(e, t, i) {
            if (!n.isUndefined(t.element_type) && null !== e.seekWidgetByName("element_icon")) {
                var a = t.element_type;
                if (!n.contains([0, 1, 2, 3, 4, 5, 6], a))
                    return void console.error("Invalid element type: " + a);
                i = i || "core/res/introduce/introduce_element_";
                var s = i + a + ".png";
                e.seekWidgetByName("element_icon").loadTexture(s, ccui.Widget.PLIST_TEXTURE)
            }
        },
        _setElementIconCommonRes: function(e, t) {
            this._setElementIcon(e, t, "core/res/icon/elementicon_")
        },
        _setStatustypeIcon: function(e, t) {
            if (!n.isUndefined(t.character_type) && null !== e.seekWidgetByName("statustype_icon")) {
                var i = t.character_type;
                if (!n.contains(["attack", "balance", "defense", "special", "heal"], i))
                    return void console.error("Invalid character type: " + i);
                var a = "core/res/icon/statustypeicon_" + i + ".png";
                e.seekWidgetByName("statustype_icon").loadTexture(a, ccui.Widget.PLIST_TEXTURE)
            }
        },
        _setJobStatustypeIcon: function(e, t) {
            n.isUndefined(t.type) || (t.character_type = t.type,
            this._setStatustypeIcon(e, t))
        },
        _setWeaponIcon: function(e, t, i) {
            if (i = i || "weapontype_icon",
            !n.isUndefined(t.weapon_type) && null !== e.seekWidgetByName(i)) {
                var a = t.weapon_type;
                if (!n.contains(["sword", "special_sword", "spear", "ax", "staff", "hammer", "gun", "bow", "magic_item"], a))
                    return void console.error("Invalid weapon type: " + a);
                var s = "core/res/icon/weapontypeicon_" + a + ".png";
                e.seekWidgetByName(i).loadTexture(s, ccui.Widget.PLIST_TEXTURE)
            }
        },
        _setWeaponsIcon: function(e, t) {
            return n.isUndefined(t.familiar_weapon_types) ? void 0 : void n.each(t.familiar_weapon_types, function(t, n) {
                this._setWeaponIcon(e, {
                    weapon_type: t
                }, "weapontypeicon_" + n)
            }, this)
        },
        _setForteIcon: function(e, t) {
            return null === e ? void console.error("iconNode is null.") : n.isUndefined(t) ? void console.error("weaponName is undefined.") : void e.loadTexture("core/res/icon/weapontypeicon_" + t + ".png", ccui.Widget.PLIST_TEXTURE)
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.ImagesCommon = {
        _setIntroduceCharaImage: function(e) {
            var a = n.director.getRunningScene();
            if (!i.isUndefined(e.character_id) && null !== a.seekWidgetByName("introduceimg_chara")) {
                var s = t.Img("introduceimg", "chara", i.padZero(e.character_id, 4), e.skin || 0).jpg;
                a.seekWidgetByName("introduceimg_chara").loadTexture(s)
            }
        },
        _setIntroduceJobImage: function(e) {
            var a = n.director.getRunningScene();
            if (!i.isUndefined(e.job_id) && null !== a.seekWidgetByName("introduceimg_job")) {
                var s = t.Img("introduceimg", "job", i.padZero(e.job_id, 4), e.skin || 0).jpg;
                a.seekWidgetByName("introduceimg_job").loadTexture(s)
            }
        },
        _setIntroduceWeaponImage: function(e) {
            var a = n.director.getRunningScene();
            if (!i.isUndefined(e.weapon_id) && null !== a.seekWidgetByName("introduceimg_weapon")) {
                var s = t.Img("introduceimg", "weapon", i.padZero(e.weapon_id, 4), e.skin || 0).jpg;
                a.seekWidgetByName("introduceimg_weapon").loadTexture(s)
            }
        },
        _setIntroduceSummonImage: function(e) {
            var a = n.director.getRunningScene();
            if (!i.isUndefined(e.summon_id) && null !== a.seekWidgetByName("introduceimg_summon")) {
                var s = t.Img("introduceimg", "summon", i.padZero(e.summon_id, 4), e.skin || 0).jpg;
                a.seekWidgetByName("introduceimg_summon").loadTexture(s)
            }
        },
        _setIntroduceGuardianImage: function(e) {
            var a = n.director.getRunningScene();
            if (!i.isUndefined(e.guardian_id) && null !== a.seekWidgetByName("introduceimg_guardian")) {
                var s = t.Img("introduceimg", "guardian", i.padZero(e.guardian_id, 4), e.skin || 0).jpg;
                a.seekWidgetByName("introduceimg_guardian").loadTexture(s)
            }
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.StringsCommon = {
        _setCardStrings: function(e, t) {
            n.isUndefined(t.name) || null === e.seekWidgetByName("name_label") || e.setStrings({
                name_label: t.name
            }),
            n.isUndefined(t.attack) || null === e.seekWidgetByName("attack_no") || e.setStrings({
                attack_no: t.attack
            }),
            n.isUndefined(t.min_attack) || null === e.seekWidgetByName("attack_min_no_label") || e.setStrings({
                attack_min_no_label: t.min_attack
            }),
            n.isUndefined(t.min_attack) || null === e.seekWidgetByName("attack_min_no") || e.setStrings({
                attack_min_no: t.min_attack
            }),
            n.isUndefined(t.max_attack) || null === e.seekWidgetByName("attack_max_no_label") || e.setStrings({
                attack_max_no_label: t.max_attack
            }),
            n.isUndefined(t.max_attack) || null === e.seekWidgetByName("attack_max_no") || e.setStrings({
                attack_max_no: t.max_attack
            }),
            n.isUndefined(t.hp) || null === e.seekWidgetByName("hp_no") || e.setStrings({
                hp_no: t.hp
            }),
            n.isUndefined(t.min_hp) || null === e.seekWidgetByName("hp_min_no_label") || e.setStrings({
                hp_min_no_label: t.min_hp
            }),
            n.isUndefined(t.min_hp) || null === e.seekWidgetByName("hp_min_no") || e.setStrings({
                hp_min_no: t.min_hp
            }),
            n.isUndefined(t.max_hp) || null === e.seekWidgetByName("hp_max_no_label") || e.setStrings({
                hp_max_no_label: t.max_hp
            }),
            n.isUndefined(t.max_hp) || null === e.seekWidgetByName("hp_max_no") || e.setStrings({
                hp_max_no: t.max_hp
            }),
            n.isUndefined(t.level) || null === e.seekWidgetByName("level_label") || e.setStrings({
                level_label: t.level
            }),
            n.isUndefined(t.level) || null === e.seekWidgetByName("level_now_label") || e.setStrings({
                level_now_label: t.level
            }),
            n.isUndefined(t.max_level) || null === e.seekWidgetByName("level_max_label") || e.setStrings({
                level_max_label: "MAX " + t.max_level
            }),
            n.isUndefined(t.next_exp) || null === e.seekWidgetByName("exp_next_label") || e.setStrings({
                exp_next_label: "NEXT:" + t.next_exp
            }),
            n.isUndefined(t.level) || n.isUndefined(t.max_level) || null === e.seekWidgetByName("exp_next_label") || e.seekWidgetByName("exp_next_label").setVisible(t.level < t.max_level),
            n.isUndefined(t.bonus) || null === e.seekWidgetByName("plus_no") || e.setStrings({
                plus_no: t.bonus < 1 ? "" : "+" + t.bonus
            }),
            n.isUndefined(t.description) || null === e.seekWidgetByName("flavor_label") || e.setStrings({
                flavor_label: t.description
            })
        },
        _setSummonAttackEffectStrings: function(e, t) {
            n.isUndefined(t.attack_info) || (n.isUndefined(t.attack_info.name) || null === e.seekWidgetByName("attack_name_label") || e.setStrings({
                attack_name_label: t.attack_info.name
            }),
            n.isUndefined(t.attack_info.description) || null === e.seekWidgetByName("attack_description_label") || e.setStrings({
                attack_description_label: t.attack_info.description
            }),
            n.isUndefined(t.attack_info.turn) || null === e.seekWidgetByName("interval_label") || e.setStrings({
                interval_label: "使用間隔：" + t.attack_info.turn + "ターン"
            })),
            n.isUndefined(t.effect_info) || (n.isUndefined(t.effect_info.name) || null === e.seekWidgetByName("support_name_label") || e.setStrings({
                support_name_label: t.effect_info.name
            }),
            n.isUndefined(t.effect_info.description) || null === e.seekWidgetByName("support_description_label") || e.setStrings({
                support_description_label: t.effect_info.description
            })),
            n.isUndefined(t.attack) || (n.isUndefined(t.attack.name) || null === e.seekWidgetByName("attack_name_label") || e.setStrings({
                attack_name_label: t.attack.name
            }),
            n.isUndefined(t.attack.description) || null === e.seekWidgetByName("attack_description_label") || e.setStrings({
                attack_description_label: t.attack.description
            }),
            n.isUndefined(t.attack.turn) || null === e.seekWidgetByName("interval_label") || e.setStrings({
                interval_label: "使用間隔：" + t.attack.turn + "ターン"
            })),
            n.isUndefined(t.effect) || (n.isUndefined(t.effect.name) || null === e.seekWidgetByName("support_name_label") || e.setStrings({
                support_name_label: t.effect.name
            }),
            n.isUndefined(t.effect.description) || null === e.seekWidgetByName("support_description_label") || e.setStrings({
                support_description_label: t.effect.description
            }))
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.GaugesCommon = {
        _setExpGauge: function(e, t) {
            if (!(n.isUndefined(t.exp) || n.isUndefined(t.next_exp) || n.isUndefined(t.level) || n.isUndefined(t.max_level) || null === e.seekWidgetByName("exp-gauge"))) {
                var i = t.level === t.max_level ? 100 : t.exp / (t.next_exp + t.exp) * 100;
                e.seekWidgetByName("exp-gauge").percent = i
            }
        },
        _setStarGauge: function(e, t) {
            if (!n.isUndefined(t.max_overlimit_count) && !n.isUndefined(t.overlimit_count)) {
                var i = this.__getStarGaugeBlankNode(e, t)
                  , a = this.__getStarGaugeNode(e, t);
                i && a && (t.is_aroused ? this.__setAppearanceStarGaugeAroused(e) : this.__setAppearanceStarGaugeNormal(e),
                i.percent = 20 * t.max_overlimit_count,
                a.percent = 20 * t.overlimit_count)
            }
        },
        __setAppearanceStarGaugeAroused: function(e) {
            var t = this.__getStarGaugeFrameNode(e);
            t && t.setAppearance("star_gauge_arousal")
        },
        __setAppearanceStarGaugeNormal: function(e) {
            var t = this.__getStarGaugeFrameNode(e);
            t && t.setAppearance("star_gauge")
        },
        __getStarGaugeFrameNode: function(e) {
            return e.seekWidgetByName("mainparts_star_gauge_ui")
        },
        __getStarGaugeBlankNode: function(e, t) {
            return t.is_aroused ? e.seekWidgetByName("star_gauge_blank_arousal") : e.seekWidgetByName("star_gauge_blank")
        },
        __getStarGaugeNode: function(e, t) {
            return t.is_aroused ? e.seekWidgetByName("star_gauge_arousal") : e.seekWidgetByName("star_gauge")
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.roles = t.pc.roles || {},
    t.pc.roles.AllOverUI = {
        _openAllOverPanel: function(e, a, s) {
            var o = n.director.getRunningScene()
              , r = o.seekWidgetByName("all_over_ui");
            if (null === r)
                return void console.warn("[ERROR] Could not find all_over_ui.");
            if (!i.contains(["chara", "weapon", "summon", "job", "guardian", "npc"], s))
                return void console.error("Invalid image type: " + s);
            var c = r.seekWidgetByName("illustzoom")
              , u = r.seekWidgetByName("illustface")
              , _ = r.seekWidgetByName("btn_faceup");
            if (null === c)
                return void console.warn("[ERROR] Could not find illustzoom | btn_faceup.");
            a = a || 0,
            c.loadTexture(t.Img("illustzoom", s, i.padZero(e, 4), a).png),
            r.setVisible(!0),
            _ && u && (u.loadTexture(t.Img("illustface", s, i.padZero(e, 4), a).png),
            this._setZoomEvent(r, e, a, s));
            var l = r.seekWidgetByName("btn_close");
            l && this._setCloseEvent(r)
        },
        _setZoomEvent: function(e, n, i, a) {
            t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_faceup": function() {
                    this._changeZoomView(e, "faceup")
                }
                .bind(this)
            }, this)
        },
        _changeZoomView: function(e, t) {
            var n = e.getActionByTag(e.tag);
            n && n.gotoFrameAndPause(n.animationInfo[t].startIndex)
        },
        _setCloseEvent: function(e) {
            t.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_close": function() {
                    e.setVisible(!1),
                    this._onTouchClose(e)
                }
                .bind(this)
            }, this)
        },
        _onTouchClose: function(e) {
            var t = n.director.getRunningScene()
              , i = t.seekWidgetByName("all_over_ui");
            return null === i ? void console.warn("[ERROR] Could not find all_over_ui.") : (e.seekWidgetByName("illustface") && this._changeZoomView(e, "zoom"),
            void i.setVisible(!1))
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.status = t.pc.status || {},
    t.pc.status.roles = t.pc.status.roles || {},
    t.pc.status.roles.BurstCommon = {
        _appendBurst: function(e, i, a, s, o) {
            var r = 0;
            if (n.isUndefined(i.burst))
                return r;
            n.isUndefined(o) && (o = $staticRes(res["core-statuslist-statuslist_burst_ui"])),
            n.isUndefined(s) && (s = "statuslist_ui_"),
            n.isUndefined(a) && (a = 0);
            var c = ccs.load($dynamicRes(o)).node
              , u = i.burst.name || "[バースト付与効果]";
            c.setStrings({
                burst_list_name: u,
                burst_list_description: i.burst.description
            });
            var _ = c.seekWidgetByName("coreimg_bursticon");
            return null !== _ && _.loadTexture(t.Img("coreimg", "bursticon", n.padZero(1, 4)).png),
            null !== e.seekWidgetByName(s + a) && (e.seekWidgetByName(s + a).addChild(c),
            e.seekWidgetByName(s + a).setVisible(!0)),
            r++,
            r
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.status = t.pc.status || {},
    t.pc.status.roles = t.pc.status.roles || {},
    t.pc.status.roles.AbilityCommon = {
        _appendAbility: function(e, i, a, s, o) {
            if (n.isUndefined(i.abilities))
                return 0;
            n.isUndefined(o) && (o = $staticRes(res["core-statuslist-statuslist_ability_ui"])),
            n.isUndefined(s) && (s = "statuslist_ui_"),
            n.isUndefined(a) && (a = 0);
            var r = i.abilities.length
              , c = /\/(?:prf_004|ga_008|sh_009)$/.test(t.createInstance("router").getCurrentFragment());
            return n.each(i.abilities, function(r, u) {
                var _ = ccs.load($dynamicRes(o)).node;
                this._setAbilityPanelStrings(_, r);
                var l = _.seekWidgetByName("ability_learn_level_0")
                  , d = _.seekWidgetByName("ability_learn_level_1");
                if (!n.isUndefined(r.available_level) && null !== l && null !== d) {
                    var p = "習得Lv" + r.available_level;
                    l.setString(p),
                    d.setString(p);
                    var h = !n.isUndefined(r.episode_cleared) && r.episode_cleared
                      , g = !n.isUndefined(r.available_level) && r.available_level > 1;
                    if (c || h ? (console.debug(r.name, "cleared"),
                    l.setVisible(g),
                    d.setVisible(!1)) : g && (console.debug(r.name, "lv1over", i.level < r.available_level),
                    l.setVisible(!1),
                    d.setVisible(!0),
                    this.__setEpisodeButton(_, i, r)),
                    _.seekWidgetByName("coreimg_abilityicon").loadTexture(t.Img("coreimg", "abilityicon", n.padZero(r.type, 4)).png),
                    null !== e.seekWidgetByName(s + (u + a)) && e.seekWidgetByName(s + (u + a)).addChild(_),
                    !n.isUndefined(r.is_ex_ability) && !n.isUndefined(r.available_level)) {
                        var m = _.seekWidgetByName("ability_learn_level_0");
                        if (null !== m && r.is_ex_ability && (m.setVisible(!0),
                        m.setString("EX設定可")),
                        i.level < r.available_level && n.contains([5, 10, 15], r.available_level) === !0) {
                            null !== _.seekWidgetByName("icon_filter") && _.seekWidgetByName("icon_filter").setVisible(!0);
                            var f = _.seekWidgetByName("get_lv_textimg");
                            null !== f && f.loadTexture("core/res/introduce/statuslist/statuslist_icon_lv" + r.available_level + ".png", ccui.Widget.PLIST_TEXTURE)
                        }
                    }
                }
            }, this),
            r
        },
        __setEpisodeButton: function(e, t, i) {
            var a = e.seekWidgetByName("ability_list_ep_btn");
            if (null !== a)
                return n.isUndefined(t.job_id) ? (a.setVisible(!0),
                t.level < i.available_level ? void this._setEnableButton(a, !1) : void a.addTouchEventListener(function(e, t) {
                    t === ccui.Widget.TOUCH_ENDED && this._touchEPButton()
                }, this)) : void a.setVisible(!1)
        },
        _appendExAbility: function(e, i, a, s, o) {
            if (n.isUndefined(i.selected_ex_ability) || n.isUndefined(i.can_set_ex_ability))
                return 0;
            n.isUndefined(o) && (o = $staticRes(res["core-statuslist-statuslist_ex-ability_ui"])),
            n.isUndefined(s) && (s = "statuslist_ui_"),
            n.isUndefined(a) && (a = 0);
            var r = 1
              , c = i.selected_ex_ability;
            if (n.isUndefined(c.type)) {
                var u = ccs.load(res["core-statuslist-statuslist_ex-ability_blank_ui"]).node;
                if (null !== !e.seekWidgetByName(s + a))
                    return e.seekWidgetByName(s + a).addChild(u),
                    r
            }
            var u = ccs.load($dynamicRes(o)).node;
            return this._setExAbilityPanelStrings(u, c),
            u.seekWidgetByName("coreimg_abilityicon").loadTexture(t.Img("coreimg", "abilityicon", n.padZero(c.type, 4)).png),
            null !== e.seekWidgetByName(s + a) && e.seekWidgetByName(s + a).addChild(u),
            r
        },
        _setAbilityPanelStrings: function(e, t) {
            e.setStrings({
                ability_list_name: t.name,
                ability_list_description: t.description,
                ability_list_interval_label: this._getAbilityInterval(t),
                ability_list_duration_label: this._getAbilityDuration(t)
            })
        },
        _setExAbilityPanelStrings: function(e, t) {
            e.setStrings({
                ex_ability_list_name: t.name,
                ex_ability_list_description: t.description,
                ex_ability_list_interval_label: this._getAbilityInterval(t),
                ex_ability_list_duration_label: this._getAbilityDuration(t)
            })
        },
        _setExAbilityIsSet: function(e, t) {
            e.seekWidgetByName("ex_ability_list_setting_up").setVisible(t.is_set)
        },
        _setExAbilityIcon: function(e, t) {
            e.seekWidgetByName("coreimg_abilityicon").loadTexture(this._getAbilityIconImg(t))
        },
        _getAbilityInterval: function(e) {
            return "使用間隔：" + e.recast + "ターン"
        },
        _getAbilityDuration: function(e) {
            var t = [];
            return n.isEmpty(e.turn) || t.push(e.turn + "ターン"),
            n.isEmpty(e.second) || t.push(e.second + "秒"),
            t.length > 0 ? "効果時間：" + t.join("") : ""
        },
        _getAbilityIconImg: function(e) {
            return t.Img("coreimg", "abilityicon", n.padZero(e.type, 4)).png
        },
        _touchEPButton: function() {
            t.createInstance("router").navigate("epi/epi_001", {
                epi_001: {
                    tab: "new"
                }
            })
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.status = t.pc.status || {},
    t.pc.status.roles = t.pc.status.roles || {},
    t.pc.status.roles.AssistCommon = {
        _appendAssist: function(e, i, a, s, o) {
            return n.isUndefined(i.assists) ? 0 : (n.isUndefined(o) && (o = $staticRes(res["core-statuslist-statuslist_assist_ui"])),
            n.isUndefined(s) && (s = "statuslist_ui_"),
            n.isUndefined(a) && (a = 0),
            n.each(i.assists, function(i, r) {
                var c = ccs.load($dynamicRes(o)).node;
                c.setStrings({
                    assist_list_name: i.name,
                    assist_list_description: i.description
                });
                var u = c.seekWidgetByName("coreimg_assisticon");
                null !== u && u.loadTexture(t.Img("coreimg", "assisticon", n.padZero(1, 4)).png),
                null !== e.seekWidgetByName(s + (r + a)) && e.seekWidgetByName(s + (r + a)).addChild(c)
            }, this),
            i.assists.length)
        },
        _getAssistAbilityIconImg: function() {
            return t.Img("coreimg", "assisticon", n.padZero(1, 4)).png
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc.scene = t.pc.scene || {},
    t.pc.scene.roles = t.pc.scene.roles || {},
    t.pc.scene.roles.SceneCharacterCommon = {
        _popups: {
            popupComIllustUp: {
                factoryName: "popupFactoryIllustUp",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupSceneCheck: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-ga_scene_check",
                title: "エピソード紹介",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        charaVoiceUrls: [],
        _loadACharacter: function(e) {
            var n = t.createInstance("apiACharacters").get(e).then(function(e) {
                return console.log(e.body),
                this._character = e.body,
                this._loadCompleteACharacter = !0,
                this._setUpControls(),
                this._fillupACharacterStatus().thenResolve(e.body)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        _loadCharacter: function(e) {
            var n = t.createInstance("apiCharacters").get(e).then(function(e) {
                return console.log(e.body),
                this._character = e.body,
                this._loadCompleteACharacter = !0,
                this.__loadCharacterVoices(),
                this._fillupACharacterStatus("introduce_chara_status_0_ui").thenResolve(e.body)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        __loadCharacterVoices: function(e) {
            var n = t.createInstance("voiceLoader")
              , i = t.IDList.VOICES.NOTE;
            n.loadCharacterVoices(this._character.character_id, i.LOWER, i.UPPER).then(function(e) {
                this.charaVoiceUrls = e
            }
            .bind(this))
        },
        _fillupACharacterStatus: function(e) {
            return i.isUndefined(this._loadCompleteACharacter) || this._loadCompleteACharacter === !1 ? void console.error("You should call _loadACharacter method first.") : (this._setStatusBonusRecord(e),
            this._setStatusBurstAbilityAssist(),
            this._loadedAvatar && (this._unloadAvatar(this._loadedAvatar),
            this._loadedAvatar = null ),
            this._loadAvatar().then(function(e) {
                this._loadedAvatar = e
            }
            .bind(this)))
        },
        _setStatusBonusRecord: function(e) {
            i.isUndefined(e) && (e = "introduce_chara_status_1_ui");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName(e);
            return null === a ? void console.debug("Could not find " + e + ".") : (this._setIntroduceCharaImage(this._character),
            this._setRarityIcon(a, this._character),
            this._setRarityBar(a, this._character),
            this._setElementIcon(a, this._character),
            this._setStatustypeIcon(a, this._character),
            this._setExpGauge(a, this._character),
            this._setCardStrings(a, this._character),
            void this._setStarGauge(a, this._character))
        },
        _setStatusBurstAbilityAssist: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("introduce_statuslist_list_7_ui");
            this._clearAbilityList();
            var i = 0;
            i += this._appendBurst(t, this._character),
            i += this._appendAbility(t, this._character, i),
            i += this._appendAssist(t, this._character, i)
        },
        _setUpControls: function() {
            if (i.isUndefined(this._loadCompleteACharacter) || this._loadCompleteACharacter === !1)
                return void console.error("You should call _loadACharacter method first.");
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_enh");
            null !== t && this._character.level >= this._character.max_level && this._character.bonus >= 99 && this._setEnableButton(t, !1),
            this._character.can_arouse ? (this.__setAppearanceEvoArousalUICanArouse(e),
            this.__setEnableArouseButton(e, !0)) : this._character.overlimit_count < this._character.max_overlimit_count ? (this.__setAppearanceEvoArousalUICanEvolve(e),
            this.__setEnableEvolveButton(e, !0)) : (this.__setAppearanceEvoArousalUICanEvolve(e),
            this.__setEnableEvolveButton(e, !1))
        },
        __setEnableArouseButton: function(e, t) {
            var n = e.seekWidgetByName("btn_arousal");
            n && this._setEnableButton(n, t)
        },
        __setEnableEvolveButton: function(e, t) {
            var n = e.seekWidgetByName("btn_evo");
            n && this._setEnableButton(n, t)
        },
        __setAppearanceEvoArousalUICanArouse: function(e) {
            var t = this.__getEvoArousalUINode(e);
            t && t.setAppearance("arousal")
        },
        __setAppearanceEvoArousalUICanEvolve: function(e) {
            var t = this.__getEvoArousalUINode(e);
            t && t.setAppearance("evo")
        },
        __getEvoArousalUINode: function(e) {
            return e.seekWidgetByName("introduce_btn_evolution_arousal_ui")
        },
        _touchEnhButton: function() {
            t.createInstance("router").navigate("enh_evo/enh_008", {
                enh_008: {
                    id: this._character.a_character_id
                }
            })
        },
        _touchEvoButton: function() {
            t.createInstance("router").navigate("enh_evo/evo_013", {
                evo_013: {
                    id: this._character.a_character_id
                }
            })
        },
        _touchArouseButton: function() {
            t.createInstance("router").navigate("enh_evo/arousal_002", {}, {
                arousal_002: {
                    id: this._character.a_character_id
                }
            })
        },
        _showImageZoomPopup: function() {
            return i.isUndefined(this._loadCompleteACharacter) || this._loadCompleteACharacter === !1 ? void console.error("You should call _loadACharacter method first.") : null == this._character.character_id && null != this._character.other_character_id ? void this._openAllOverPanel(this._character.other_character_id, this._character.skin, "npc") : void this._openAllOverPanel(this._character.character_id, this._character.skin, "chara")
        },
        _touchPlayVoiceButton: function() {
            if (!(this.charaVoiceUrls.length < 1 || this._voiceCooldown)) {
                this._cooldownVoice();
                var e = i.shuffle(this.charaVoiceUrls)
                  , n = e[0];
                t.createInstance("soundPlayer").playVoice(n)
            }
        },
        _cooldownVoice: function() {
            this._voiceCooldown = !0,
            a.delay(1e3).then(function() {
                this._voiceCooldown = !1
            }
            .bind(this))
        },
        _loadAvatar: function() {
            var e = n.director.getRunningScene()
              , i = e.seekWidgetByName("avatar_position_node");
            return null == i ? a.resolve() : t.createInstance("BasicAvatarSceneObject").init(this._character.character_id, !1, this._character.skin).then(function(e) {
                var t = e.getAvatar();
                return t.appendTo(i),
                t.playStandByAnimation(),
                t
            })
        },
        _unloadAvatar: function(e) {
            e && e.cleanup()
        },
        _showPopupEpisode: function() {
            if (i.isUndefined(this._loadCompleteACharacter) || this._loadCompleteACharacter === !1)
                return void console.error("You should call _loadACharacter method first.");
            var e = n.director.getRunningScene();
            return i.isUndefined(this._character) || i.isUndefined(this._character.character_id) ? void console.debug("[ERROR] Could not find this._character | .character_id") : void t.createInstance("apiGacha").getHaremEpisodeCharacter(this._character.character_id).then(function(n) {
                var a = e.popups.popupSceneCheck
                  , s = n.body;
                return i.isUndefined(a) ? void console.debug("[ERROR] Could not load popupSceneCheck.") : void a.open().then(function() {
                    a.setTitle(s.title),
                    a.loadTextures({
                        scene_img: t.Img("scene-check", "chara", i.padZero(s.character_id, 4)).png
                    }),
                    a.setStrings({
                        synopsis_label: s.description
                    })
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _clearAbilityList: function() {
            var e = n.director.getRunningScene();
            i(i.range(0, 7)).map(function(t) {
                return e.seekWidgetByName("statuslist_ui_" + t)
            }).filter(function(e) {
                return e
            }).invoke("removeAllChildren").value()
        }
    },
    i.assign(t.pc.scene.roles.SceneCharacterCommon, t.pc.roles.UIUtility, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.status.roles.BurstCommon, t.pc.status.roles.AbilityCommon, t.pc.status.roles.AssistCommon, t.pc.roles.AllOverUI);
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._;
    e.Q;
    t.pc.scene = t.pc.scene || {},
    t.pc.scene.roles = t.pc.scene.roles || {},
    t.pc.scene.roles.SceneSummonCommon = {
        _popups: {
            popupComIllustUp: {
                factoryName: "popupFactoryIllustUp",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupProtect: {
                factoryName: "popupFactoryBlue",
                title: "保護設定",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttonSounds: {
                    blueBtn: t.SoundList.BUTTON_TOUCHED_CONFIRMED
                },
                buttons: {
                    blueBtn: function() {
                        this.dissmiss()
                    }
                }
            },
            popupSceneCheck: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-ga_scene_check",
                title: "エピソード紹介",
                buttonLabels: {
                    blackBtn: "キャンセル"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        _loadASummon: function(e) {
            var n = t.createInstance("apiASummons").get(e).then(function(e) {
                return console.log(e.body),
                this._summon = e.body,
                this._loadCompleteSummon = !0,
                this._fillupASummonStatus(),
                t.createInstance("apiSummons").get(this._summon.summon_id).then(function(e) {
                    e.body.can_sell === !1 ? this._disableProtectButton() : (this._protectFlag = this._summon.is_locked,
                    this._setLockStatus(this._summon.is_locked))
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                }),
                this._setControls(),
                e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        _loadSummon: function(e, i) {
            var a = t.createInstance("apiSummons").get(e).then(function(e) {
                console.log(e.body),
                this._summon = e.body,
                this._loadCompleteSummon = !0;
                var t = n.director.getRunningScene();
                null === t.seekWidgetByName("introduce_summon_status_0_ui") ? this._fillupASummonStatus("introduce_summon_status_2_ui") : this._fillupASummonStatus("introduce_summon_status_0_ui");
                var a = t.seekWidgetByName("plus_no");
                if (null !== a) {
                    var s = i > 0 ? "+" + i : "";
                    a.setString(s)
                }
                return e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return a
        },
        _fillupASummonStatus: function(e) {
            return i.isUndefined(this._loadCompleteSummon) || this._loadCompleteSummon === !1 ? void console.debug("You should call _loadASummon | _loadSummon method first.") : (this._setStatusRecord(e),
            void this._setAttackEffect(e))
        },
        _setStatusRecord: function(e) {
            i.isUndefined(e) && (e = "introduce_summon_status_1_ui");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName(e);
            return null === a ? void console.debug("Could not find " + e + ".") : (this._setIntroduceSummonImage(this._summon),
            this._setRarityIcon(a, this._summon),
            this._setRarityBar(a, this._summon),
            this._setElementIcon(a, this._summon),
            this._setStatustypeIcon(a, this._summon),
            this._setExpGauge(a, this._summon),
            this._setCardStrings(a, this._summon),
            void this._setStarGauge(a, this._summon))
        },
        _setAttackEffect: function(e) {
            i.isUndefined(e) && (e = "introduce_summon_status_1_ui");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName(e);
            return null === a ? void console.debug("Could not find " + e + ".") : void this._setSummonAttackEffectStrings(a, this._summon)
        },
        _setControls: function() {
            if (i.isUndefined(this._loadCompleteSummon) || this._loadCompleteSummon === !1)
                return void console.error("You should call _loadASummon method first.");
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_enh");
            null !== t && this._summon.level >= this._summon.max_level && this._summon.bonus >= 99 && this._setEnableButton(t, !1);
            var a = e.seekWidgetByName("btn_evo");
            null !== a && this._summon.overlimit_count >= this._summon.max_overlimit_count && this._setEnableButton(a, !1);
            var s = e.seekWidgetByName("btn_sell_select");
            null !== s && (this._summon.is_equipped || this._summon.is_locked) && this._setEnableButton(s, !1)
        },
        _disableProtectButton: function() {
            if (i.isUndefined(this._loadCompleteSummon) || this._loadCompleteSummon === !1)
                return void console.error("You should call _loadASummon method first.");
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_protect")
              , a = e.seekWidgetByName("protected_icon");
            if (null !== t && null !== a) {
                t.setTitleText("保護解除"),
                a.setVisible(!0),
                this._setEnableButton(t, !1);
                var s = e.seekWidgetByName("btn_sell_select");
                null !== s && this._setEnableButton(s, !1)
            }
        },
        _setLockStatus: function(e) {
            if (i.isUndefined(this._loadCompleteSummon) || this._loadCompleteSummon === !1)
                return void console.error("You should call _loadASummon method first.");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName("btn_protect")
              , s = t.seekWidgetByName("protected_icon");
            if (null !== a && null !== s) {
                a.setTitleText(e ? "保護解除" : "保護する"),
                s.setVisible(e);
                var o = t.seekWidgetByName("btn_sell_select");
                null !== o && (this._summon.is_equipped === !0 ? this._setEnableButton(o, !1) : this._setEnableButton(o, !e))
            }
        },
        _touchProtect: function() {
            if (i.isUndefined(this._protectFlag))
                return void console.error("You should call _loadASummon method first.");
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_protect")
              , a = e.seekWidgetByName("protected_icon");
            return null === t || null === a ? void console.error("Could not find protected control: btn_protect | protected_icon.") : this._protectFlag ? this._unlockSummon(e) : this._lockSummon(e)
        },
        _lockSummon: function(e) {
            var n = t.createInstance("apiASummons").lock(this._summon.a_summon_id).then(function(t) {
                this._summon = t.body;
                var n = e.popups.popupProtect;
                return n.setContent("<p>" + this._summon.name + (this._summon.bonus < 1 ? " " : "+" + this._summon.bonus) + "<br />保護しました。</p><p>保護を解除するまで<br />売却や強化素材にすることができません。</p>"),
                n.open(),
                this._protectFlag = !this._protectFlag,
                this._setLockStatus(this._summon.is_locked),
                this._summon
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        _unlockSummon: function(e) {
            var n = t.createInstance("apiASummons").unlock(this._summon.a_summon_id).then(function(t) {
                this._summon = t.body;
                var n = e.popups.popupProtect;
                return n.setContent("<p>" + this._summon.name + (this._summon.bonus < 1 ? " " : "+" + this._summon.bonus) + "<br />保護解除しました。</p><p>売却や強化素材にすることができます。</p>"),
                n.open(),
                this._protectFlag = !this._protectFlag,
                this._setLockStatus(this._summon.is_locked),
                this._summon
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            });
            return n
        },
        _touchEnhButton: function() {
            t.createInstance("router").navigate("enh_evo/enh_009", {
                enh_009: {
                    id: this._summon.a_summon_id
                }
            })
        },
        _touchEvoButton: function() {
            t.createInstance("router").navigate("enh_evo/evo_010", {
                evo_010: {
                    id: this._summon.a_summon_id
                }
            })
        },
        _showImageZoomPopup: function() {
            return i.isUndefined(this._loadCompleteSummon) || this._loadCompleteSummon === !1 ? void console.error("You should call _loadASummon method first.") : void this._openAllOverPanel(this._summon.summon_id, this._summon.skin, "summon")
        },
        _showPopupEpisode: function() {
            if (i.isUndefined(this._loadCompleteSummon) || this._loadCompleteSummon === !1)
                return void console.error("You should call _loadASummon method first.");
            var e = n.director.getRunningScene();
            return i.isUndefined(this._summon) || i.isUndefined(this._summon.summon_id) ? void console.debug("[ERROR] Could not find this._summon | .summon_id") : void t.createInstance("apiGacha").getHaremEpisodeSummon(this._summon.summon_id).then(function(n) {
                var a = e.popups.popupSceneCheck
                  , s = n.body;
                return i.isUndefined(a) ? void console.debug("[ERROR] Could not load popupSceneCheck.") : void a.open().then(function() {
                    a.setTitle(s.title),
                    a.loadTextures({
                        scene_img: t.Img("scene-check", "summon", i.padZero(s.summon_id, 4)).png
                    }),
                    a.setStrings({
                        synopsis_label: s.description
                    })
                }
                .bind(this)).fail(function(e) {
                    console.error(e.stack)
                })
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    },
    i.assign(t.pc.scene.roles.SceneSummonCommon, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.roles.AllOverUI)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc.scene = t.pc.scene || {},
    t.pc.scene.roles = t.pc.scene.roles || {},
    $staticRes(res["party-jobget_ani-jobget_ani"]),
    t.pc.scene.roles.SceneJobCommon = {
        _popups: {
            popupComIllustUp: {
                factoryName: "popupFactoryIllustUp",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupConfirmLvUpBonus: {
                factoryName: "popupFactoryPopupCommon",
                resourceName: "core-popup-p_level_bonus",
                title: "習得可能ボーナス一覧",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupAbilityNone: {
                factoryName: "popupFactoryBlue",
                title: "EXアビリティ設定",
                content: "設定できるEXアビリティがありません。",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupNeedJobPoint: {
                factoryName: "popupFactoryPopupCommon",
                title: "取得条件",
                resourceName: "core-popup-p_need_point",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function(e) {
                        this.dismiss()
                    }
                }
            },
            popupConfirmGetJob: {
                factoryName: "popupFactoryPopupCommon",
                title: "英霊解放確認",
                resourceName: "core-popup-p_job_get",
                buttonLabels: {
                    blackBtn: "キャンセル",
                    blueBtn: "解放する"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    },
                    blueBtn: function(e) {
                        this.dismiss(),
                        e._delegate._releaseJob.call(e._delegate)
                    }
                }
            },
            popupSubTutorial: {
                factoryName: "popupFactorySubTutorial",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function(e) {
                        this.dismiss()
                    }
                }
            }
        },
        jobReleaseAnimationInfo: {
            animation: null ,
            zOrder: 100,
            resource: "party-jobget_ani-jobget_ani"
        },
        _loadJob: function(e, n) {
            var s = null ;
            return s = i.isUndefined(n) ? t.createInstance("apiAJobs").get(e) : t.createInstance("apiAParties").getJobsByParty(n, e),
            a.all(s).then(function(e) {
                return console.log(e.body),
                this._job = e.body,
                this._loadCompleteJob = !0,
                i.isUndefined(n) ? this._fillupJobStatus("introduce_job_status_0_ui") : this._fillupJobStatus(),
                e.body
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            }),
            s
        },
        _fillupJobStatus: function(e) {
            return i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1 ? void console.debug("You should call _loadJob method first.") : (this._setStatusBonusRecord(e),
            void this._setStatusBurstAbilityAssist())
        },
        _setStatusBonusRecord: function(e) {
            i.isUndefined(e) && (e = "introduce_job_status_1_ui");
            var t = n.director.getRunningScene()
              , a = t.seekWidgetByName(e);
            return null === a ? void console.debug("Could not find " + e + ".") : (this._setIntroduceJobImage(this._job),
            this._setMasterIcon4Title(a, this._job),
            this._setMasterIcon4Exp(a, this._job),
            this._setJobStatustypeIcon(a, this._job),
            this._setWeaponsIcon(a, this._job),
            this._setExpGauge(a, this._job),
            this._setCardStrings(a, this._job),
            this._fillupJobLvupBonus(a, this._job),
            this._fillupJobMasterBonus(a, this._job),
            void this._fillupJobExBonus(a, this._job))
        },
        _setMasterIcon4Title: function(e, t) {
            if (i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1)
                return void console.debug("You should call _loadJob method first.");
            if (!i.isUndefined(t.level) && !i.isUndefined(t.max_level) && t.level === t.max_level) {
                var n = e.seekWidgetByName("master_icon");
                null !== n && n.setVisible(!0)
            }
        },
        _setMasterIcon4Exp: function(e, t) {
            if (i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1)
                return void console.debug("You should call _loadJob method first.");
            if (!i.isUndefined(t.exp) && !i.isUndefined(t.next_exp) && t.exp === t.next_exp) {
                var n = e.seekWidgetByName("job_master_icon");
                null !== n && n.setVisible(!0);
                var a = e.seekWidgetByName("exp_next_label");
                null !== a && a.setVisible(!1)
            }
        },
        _fillupJobLvupBonus: function(e, n) {
            return i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1 ? void console.debug("You should call _loadJob method first.") : void (i.isUndefined(n.bonus) || i.isUndefined(n.bonus.level_up_bonus) || i.each(n.bonus.level_up_bonus, function(n, a) {
                var s = e.seekWidgetByName("job-bonusicon_lv-up_" + a);
                if (null !== s) {
                    var o = s.seekWidgetByName("lv-up_bonus_label");
                    null !== o && (s.seekWidgetByName("lv-up_bonus_label").setString(n.description),
                    s.loadTexture(t.Img("coreimg", "job-bonusicon", i.padZero(n.type, 4)).png),
                    s.setVisible(!0))
                }
            }))
        },
        _fillupJobMasterBonus: function(e, n) {
            return i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1 ? void console.debug("You should call _loadJob method first.") : void (i.isUndefined(n.bonus) || i.isUndefined(n.bonus.max_level_bonus) || i.each(n.bonus.max_level_bonus, function(n, a) {
                var s = e.seekWidgetByName("job-bonusicon_master_" + a);
                if (null !== s) {
                    var o = s.seekWidgetByName("master_bonus_label");
                    null !== o && (s.seekWidgetByName("master_bonus_label").setString(n.description),
                    s.loadTexture(t.Img("coreimg", "job-bonusicon", i.padZero(n.type, 4)).png),
                    s.setVisible(!0))
                }
            }))
        },
        _fillupJobExBonus: function(e, n) {
            return i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1 ? void console.debug("You should call _loadJob method first.") : void (null !== e.seekWidgetByName("bonus-textimg_job") && (i.isUndefined(n) || i.isUndefined(n.job_id) || i.isFunction(e.seekWidgetByName("bonus-textimg_job").loadTexture) !== !1 && e.loadTextures({
                "bonus-textimg_job": t.Img("bonus-textimg", "job", i.padZero(n.job_id, 4)).png
            })))
        },
        _setStatusBurstAbilityAssist: function() {
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("introduce_statuslist_list_7_ui")
              , i = 0;
            i += this._appendBurst(t, this._job),
            i += this._appendAbility(t, this._job, i),
            i += this._appendExAbility(t, this._job, i),
            i += this._appendAssist(t, this._job, i)
        },
        _setUpControls: function() {
            if (i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1)
                return void console.debug("You should call _loadJob method first.");
            var e = n.director.getRunningScene()
              , t = e.seekWidgetByName("btn_enh");
            null !== t && this._job.level >= this._job.max_level && this._job.bonus >= 99 && this._setEnableButton(t, !1);
            var a = e.seekWidgetByName("btn_evo");
            null !== a && this._job.overlimit_count >= this._job.max_overlimit_count && this._setEnableButton(a, !1)
        },
        _showImageZoomPopup: function() {
            return i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1 ? void console.debug("You should call _loadJob method first.") : void this._openAllOverPanel(this._job.job_id, this._job.skin, "job")
        },
        _showSetupExtraAbility: function() {
            if (i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1)
                return void console.debug("You should call _loadJob method first.");
            var e = n.director.getRunningScene()
              , a = e.popups.popupAbilityNone;
            return i.isUndefined(a) ? void console.debug("Could not find popup: popupAbilityNone.") : i.isUndefined(this._job.can_set_ex_ability) ? void console.debug("Could not find job param: can_set_ex_ability.") : void (this._job.can_set_ex_ability ? t.createInstance("router").navigate("party/par_005") : a.open())
        },
        _showPopupBonus: function() {
            if (i.isUndefined(this._loadCompleteJob) || this._loadCompleteJob === !1)
                return void console.error("You should call _loadJob method first.");
            var e = n.director.getRunningScene()
              , a = e.popups.popupConfirmLvUpBonus;
            return i.isUndefined(a) ? void console.error("Could not find popup: popupConfirmLvUpBonus.") : void a.open().then(function() {
                a.loadTextures({
                    "bonus-textimg_job": t.Img("bonus-textimg", "job", i.padZero(this._job.job_id, 4)).png
                })
            }
            .bind(this))
        },
        _showPopupConfirmGetJobWithNeedItem: function(e) {
            var a = e.have_num
              , s = e.num
              , o = e.name
              , r = n.director.getRunningScene()
              , c = r.popups.popupConfirmGetJob
              , u = a - s;
            c._getConfirmLabel = function() {
                return this.seekWidgetByName("confirm_label")
            }
            ,
            c.replaceConfirmLabel = function(e) {
                var t = this._getConfirmLabel();
                if (null !== t) {
                    var n = t.getString().replace("英霊P", e);
                    t.setString(n)
                }
            }
            ,
            c.open().then(function() {
                c.replaceConfirmLabel(o),
                c.loadTextures({
                    get_job_img: t.Img("joblist", "job", i.padZero(this._job.job_id, 4), 0).png
                }),
                c.setHtmlStrings({
                    job_point_fall_labelimg: e.name + ":" + a + "→<span class='red'>" + u + "</span>"
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this))
        },
        _showPJobGetOrPNeedPoint: function() {
            if (this._player.job_point < this._job.release_need_job_point)
                this._popupNeedJobPoint();
            else {
                var e = n.director.getRunningScene()
                  , a = e.popups.popupConfirmGetJob
                  , s = this._player.job_point - this._job.release_need_job_point;
                a.open().then(function() {
                    a.loadTextures({
                        get_job_img: t.Img("joblist", "job", i.padZero(this._job.job_id, 4), 0).png
                    }),
                    a.setHtmlStrings({
                        job_point_fall_labelimg: "英霊P:" + this._player.job_point + "→<span class='red'>" + s + "</span>"
                    }, t.GameConfig.POPUP_CSS)
                }
                .bind(this))
            }
        },
        _popupNeedJobPoint: function() {
            var e = n.director.getRunningScene()
              , a = e.popups.popupNeedJobPoint;
            a.open().then(function() {
                this._job.need_jobs.forEach(function(e, n) {
                    var s = a.seekWidgetByName("job_clippanel_" + n);
                    s.seekWidgetByName("need_job").loadTexture(t.Img("joblist", "job", i.padZero(e.job_id, 4), 0).png);
                    var o = a.seekWidgetByName("condition_base_" + n)
                      , r = e.is_acquired ? e.level === e.max_level ? "MASTER" : "Lv:" + e.level + "/" + e.max_level : "未取得";
                    o.seekWidgetByName("condition_label").setString(r)
                }, this),
                a.setHtmlStrings({
                    condition_notice_labelimg: "<span class='orange'>必要英霊P：</span><span class='white'>" + this._job.release_need_job_point + "英霊P</span><br /><span class='red'>英霊をマスターする必要があります</span>"
                }, t.GameConfig.POPUP_CSS)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _releaseJob: function() {
            t.createInstance("apiAJobs").release(this._job.job_id).then(function(e) {
                console.log(e),
                this._playReleaseAnimation()
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _playReleaseAnimation: function() {
            var a = new n.Node;
            a.setName("aniRoot");
            var s = n.director.getRunningScene();
            s.addChild(a),
            t.createInstance("soundPlayer").init(t.createInstance("playerGameConfig")),
            this.jobReleaseAnimationInfo.animation = t.createInstance("WindowVisualEffect").init(e.res[this.jobReleaseAnimationInfo.resource]);
            var o = this.jobReleaseAnimationInfo.animation;
            t.createInstance("Sound2Event", [o]),
            o.setAnimationNameEndCallback("release_ani", function() {
                o.playByName("touch_ani", a, n.p(0, 0), this.jobReleaseAnimationInfo.zOrder, !0),
                o.removeAnimationEndCallback(),
                a.seekWidgetByName("touch_btn").setVisible(!0),
                t.setTouchEventHandlers(a, {
                    "TOUCH_ENDED touch_btn": function() {
                        var e = {
                            par_006_007: {
                                released_job: this._job
                            }
                        }
                          , n = {
                            par_006_007: {
                                id: s.routerParams.par_006_007.id
                            }
                        };
                        t.createInstance("router").navigate("party/par_007", n, e)
                    }
                }, this)
            }, this),
            o.playByName("release_ani", a, n.p(0, 0), this.jobReleaseAnimationInfo.zOrder, !1);
            var r = s.seekWidgetByName("job_panel_01")
              , c = s.seekWidgetByName("job_panel_02");
            r.loadTextures({
                "jobget-sp_job": t.Img("jobget-sp", "job", i.padZero(this._job.job_id, 4)).png
            }),
            c.loadTextures({
                "jobget-sp_job": t.Img("jobget-sp", "job", i.padZero(this._job.job_id, 4)).png
            })
        },
        _playLoopAnimation: function(e, t, n, a, s) {
            var o = null ;
            if (i.isObject(e))
                var o = e;
            else
                var o = ccs.load($dynamicRes(e));
            o.node.runAction(o.action),
            t.addChild(o.node);
            var r = null ;
            if (a)
                var r = this._setEndAnimationEvent(o.action, n.end);
            return "object" == typeof n ? o.action.gotoFrameAndPlay(n.start, n.end, s) : "number" == typeof n && o.action.gotoFrameAndPlay(n, s),
            r
        }
    },
    i.assign(t.pc.scene.roles.SceneJobCommon, t.pc.roles.ImagesCommon, t.pc.roles.IconsCommon, t.pc.roles.StringsCommon, t.pc.roles.GaugesCommon, t.pc.status.roles.BurstCommon, t.pc.status.roles.AbilityCommon, t.pc.status.roles.AssistCommon, t.pc.roles.AnimationCommon, t.pc.roles.AllOverUI)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.epi = t.pc.epi || {},
    t.pc.epi.roles = t.pc.epi.roles || {},
    t.pc.epi.roles.HaremEpiBtnsPageListController = {
        _fillupHremEpiBtnsList: function(e, i, a) {
            if (!n.contains(["chara", "summon", "job"], i))
                return void console.error("Invalid episode type: " + i);
            var s = []
              , o = "getHaremCharacters"
              , r = "chara"
              , c = "epi_001_a_1_node";
            "summon" === i ? (o = "getHaremSummons",
            r = "summon",
            c = "epi_001_a_2_node") : "job" === i && (o = "getHaremJobs",
            r = "job",
            c = "epi_001_a_3_node"),
            $staticRes(res["core-corecard-corecard_blank_6_3_ui"]);
            var u = {
                baseName: c,
                panelName: t.BtnsPageListParams.EPI_CHARA_LIST.panelName,
                panelsPerPage: t.BtnsPageListParams.EPI_CHARA_LIST.perPage,
                apiName: "apiALibrary",
                apiMethod: o,
                apiParams: s,
                cardType: r,
                cardFrame: "plain"
            };
            this._setListBtnsControllerWithArgs(e, a, u).then(function(e) {}
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _fillupHremEpiMainStoryBtnsList: function(e, n) {
            var i = []
              , a = "getHaremMainQuests"
              , s = "main-quest-battle"
              , o = "epi_001_b_node";
            $staticRes(res["core-corecard-corecard_blank_5_3_ui"]);
            var r = {
                baseName: o,
                panelName: t.BtnsPageListParams.EPI_MAINSTORY_LIST.panelName,
                panelsPerPage: t.BtnsPageListParams.EPI_MAINSTORY_LIST.perPage,
                apiName: "apiALibrary",
                apiMethod: a,
                apiParams: i,
                cardType: s,
                cardFrame: "plain"
            };
            this._setListBtnsControllerWithArgs(e, n, r).then(function(e) {}
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        },
        _fillupHremEpiNewBtnsList: function(e, i) {
            var a = []
              , s = "getUnconfirmedHaremEpisodes"
              , o = "misc"
              , r = "epi_001_c_node";
            $staticRes(res["epi-epi_001-epi_new_ui"]);
            var c = {
                baseName: r,
                panelName: t.BtnsPageListParams.EPI_NEW_LIST.panelName,
                panelsPerPage: t.BtnsPageListParams.EPI_NEW_LIST.perPage,
                apiName: "apiAQuests",
                apiMethod: s,
                apiParams: a,
                cardType: o,
                cardFrame: "plain"
            };
            this._setListBtnsControllerWithArgs(e, void 0, c, void 0, i).then(function(t) {
                n.isUndefined(t.pageCount) || 0 !== t.pageCount || e.seekWidgetByName("nothing_label").setVisible(!0)
            }
            .bind(this)).fail(function(e) {
                console.error(e.stack)
            })
        }
    },
    n.assign(t.pc.epi.roles.HaremEpiBtnsPageListController, t.pc.list.roles.PageListBtnsControllerCommon)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = (e.cc,
    e._);
    e.Q;
    t.pc.epi = t.pc.epi || {},
    t.pc.epi.roles = t.pc.epi.roles || {},
    t.pc.epi.roles.Routing = {
        _verifyRouterParams002: function(e) {
            n.isUndefined(e.routerParams.epi_001) && (e.routerParams.epi_001 = {
                character_id: 1
            },
            this._consoleErrorRouterParams("routerParams.epi_001, .character_id"))
        },
        _verifyRouterParams003: function(e) {
            n.isUndefined(e.routerParams.epi_001) && (e.routerParams.epi_001 = {
                summon_id: 1
            },
            this._consoleErrorRouterParams("routerParams.epi_001, .summon_id"))
        },
        _verifyRouterParams004: function(e) {
            n.isUndefined(e.routerParams.epi_001) && (e.routerParams.epi_001 = {
                job_id: 1
            },
            this._consoleErrorRouterParams("routerParams.epi_001, .job_id"))
        }
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.epi = t.pc.epi || {},
    t.pc.epi.epi_001 = t.pc.epi.epi_001 || {},
    t.pc.epi.epi_001.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("epi_001/epi_001.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: epi_001/epi_001.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [new t.TabDelegate({
            tab_0: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("epi_001_a_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("epi_001_a_node").setVisible(!1),
                e.seekWidgetByPath("epi_001_b_node").setVisible(!1),
                e.seekWidgetByPath("epi_001_c_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab0";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_1: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("epi_001_b_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("epi_001_a_node").setVisible(!1),
                e.seekWidgetByPath("epi_001_b_node").setVisible(!1),
                e.seekWidgetByPath("epi_001_c_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab1";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            tab_2: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab3のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("epi_001_c_node");
                if (!t)
                    return void alert("tab.tab3のcontent-nodeが見つかりません");
                e.seekWidgetByPath("epi_001_a_node").setVisible(!1),
                e.seekWidgetByPath("epi_001_b_node").setVisible(!1),
                e.seekWidgetByPath("epi_001_c_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackTab2";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },""), new t.TabDelegate({
            btn_chara: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab1のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("epi_001_a_1_node");
                if (!t)
                    return void alert("tab.tab1のcontent-nodeが見つかりません");
                e.seekWidgetByPath("epi_001_a_1_node").setVisible(!1),
                e.seekWidgetByPath("epi_001_a_2_node").setVisible(!1),
                e.seekWidgetByPath("epi_001_a_3_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnChara";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            btn_summon: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab2のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("epi_001_a_2_node");
                if (!t)
                    return void alert("tab.tab2のcontent-nodeが見つかりません");
                e.seekWidgetByPath("epi_001_a_1_node").setVisible(!1),
                e.seekWidgetByPath("epi_001_a_2_node").setVisible(!1),
                e.seekWidgetByPath("epi_001_a_3_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnSummon";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            },
            btn_job: function() {
                var e = 0 < "".length ? this.seekWidgetByPath("") : this;
                if (!e)
                    return void alert("tab.tab3のcontainer-nodeが見つかりません");
                var t = e.seekWidgetByPath("epi_001_a_3_node");
                if (!t)
                    return void alert("tab.tab3のcontent-nodeが見つかりません");
                e.seekWidgetByPath("epi_001_a_1_node").setVisible(!1),
                e.seekWidgetByPath("epi_001_a_2_node").setVisible(!1),
                e.seekWidgetByPath("epi_001_a_3_node").setVisible(!1),
                t.setVisible(!0);
                var i = "tabCallbackBtnJob";
                this._delegate && n.isFunction(this._delegate[i]) && this._delegate[i].call(this._delegate, this)
            }
        },"")],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "epi001Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["epi", "epi_001"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnEpiInfo"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_epi_info", function() {
                alert("{{popup com_tutorialを開く。}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {},
    t.pc.epi = t.pc.epi || {},
    t.pc.epi.epi_001 = t.pc.epi.epi_001 || {},
    t.pc.epi.epi_001.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            epiSceneCheck: {
                factoryName: "popupFactoryEpiSceneCheck"
            },
            epiStoryCheck: {
                factoryName: "popupFactoryEpiStoryCheck"
            },
            epiReplayCheck: {
                factoryName: "popupFactoryEpiReplayCheck"
            },
            epiApCheck: {
                factoryName: "popupFactoryEpiApCheck"
            },
            comRaidCheck: {
                factoryName: "popupFactoryComRaidCheck"
            },
            comNeedApBp1: {
                factoryName: "popupFactoryComNeedApBp1"
            },
            comNeedApBp2: {
                factoryName: "popupFactoryComNeedApBp2"
            },
            comApRestart: {
                factoryName: "popupFactoryComApRestart"
            },
            comAgeLimitA: {
                factoryName: "popupFactoryComAgeLimitA"
            },
            comAgeLimitB: {
                factoryName: "popupFactoryComAgeLimitB"
            },
            comCaution2: {
                factoryName: "popupFactoryBlue",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function() {
                        this.dismiss()
                    }
                }
            },
            popupHint: {
                factoryName: "popupFactorySubTutorial",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function() {
                        this.dismiss()
                    }
                }
            }
        },
        _tabNode: {
            epi_001_a: "tab_0",
            epi_001_b: "tab_1",
            epi_001_c: "tab_2"
        },
        onSceneInit: function(e) {
            a.defer();
            this._fillupHremEpiBtnsList(e, "chara", "_touchEpiCharaCard"),
            this._fillupHremEpiBtnsList(e, "summon", "_touchEpiSummonCard"),
            this._fillupHremEpiBtnsList(e, "job", "_touchEpiJobCard"),
            this._fillupHremEpiMainStoryBtnsList(e, "_touchEpiMainstoryCard"),
            this._fillupHremEpiNewBtnsList(e, "_setHaremEpiNewPanel"),
            this._dfdCheckNewEpisode = this._checkNewEpisode().then(function(t) {
                return console.log("[!! CHECK !!]", t),
                t ? this._showNewBadge(e) : this._hideNewBadge(e),
                t
            }
            .bind(this)).fail(function(e) {
                console.error(e)
            }),
            this._owner = e;
            var n = t.createInstance("router");
            if (/_[abc]$/.test(n.currentScene)) {
                if (!i.isUndefined(this._tabNode[n.currentScene])) {
                    var s = e.seekWidgetByName(this._tabNode[n.currentScene]);
                    i.isUndefined(s) || e.tabDelegateList[0].selectTab(s)
                }
            } else
                this._initializeTab(e, e.routerParams.epi_001),
                this._initializeKind(e, e.routerParams.epi_001),
                delete e.routerParams.epi_001,
                e.enableRestore(!1);
            return a.resolve()
        },
        _initializeTab: function(e, t) {
            if (t && t.tab) {
                var n = {
                    chara: "tab_0",
                    main_story: "tab_1",
                    "new": "tab_2"
                }
                  , i = e.seekWidgetByName(n[t.tab]);
                i && e.tabDelegateList[0].selectTab(i)
            }
        },
        _initializeKind: function(e, t) {
            if (t && t.kind) {
                var n = {
                    chara: "btn_chara",
                    summon: "btn_summon",
                    job: "btn_job"
                }
                  , a = e.seekWidgetByName(n[t.kind]);
                i.isUndefined(a) || e.tabDelegateList[1].selectTab(a)
            }
        },
        _adjustTabForGeneral: function(e) {
            var t = e.seekWidgetByName("tab_1");
            if (t) {
                var n = e.seekWidgetByName("tab_label_1");
                if (n) {
                    var i = e.seekWidgetByName("tab_2");
                    if (i) {
                        var a = e.seekWidgetByName("tab_label_2");
                        if (a) {
                            var s = e.seekWidgetByName("new_icon");
                            if (s) {
                                var o = i.x - t.x;
                                i.x -= o,
                                a.x -= o,
                                s.x -= o,
                                t.setVisible(!1),
                                n.setVisible(!1)
                            }
                        }
                    }
                }
            }
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return this._owner = null ,
            a.resolve()
        },
        onPageInAnimationEnd: function(e) {
            a.defer();
            return a.resolve()
        },
        tabCallbackTab0: function(e) {
            t.createInstance("router").historyReplace("epi/epi_001", i.merge(e.routerParams, {
                epi_001: {
                    tab: "chara"
                }
            }))
        },
        tabCallbackTab1: function(e) {
            t.createInstance("router").historyReplace("epi/epi_001", i.merge(e.routerParams, {
                epi_001: {
                    tab: "main_story"
                }
            }))
        },
        tabCallbackTab2: function(e) {
            t.createInstance("router").historyReplace("epi/epi_001", i.merge(e.routerParams, {
                epi_001: {
                    tab: "new"
                }
            }))
        },
        tabCallbackBtnChara: function(e) {},
        tabCallbackBtnSummon: function(e) {},
        tabCallbackBtnJob: function(e) {},
        btnCallbackBtnEpiInfo: function(e) {
            var t = a.defer();
            return t.reject(this._override),
            e.popups.popupHint.setTypeAndOpen("harem", "help"),
            t.promise
        },
        _checkNewEpisode: function() {
            return t.createInstance("apiAQuestInfo").get().then(function(e) {
                return e.body.has_new_harem ? !0 : !1
            }
            .bind(this))
        },
        _showNewBadge: function(e) {
            e.seekWidgetByName("tab_ui").seekWidgetByName("new_icon").setVisible(!0)
        },
        _hideNewBadge: function(e) {
            e.seekWidgetByName("tab_ui").seekWidgetByName("new_icon").setVisible(!1)
        },
        _setHaremEpiNewPanel: function(e, a) {
            var s = e.parent;
            s.setVisible(!0);
            var o = a.harem_episode_info || {}
              , r = a.reward_info || {}
              , c = a.type.replace(/^harem-/, "").replace(/cter$/, "")
              , u = o.is_story_of_encounter ? $staticRes(res["epi-epi_001-questlist_epi_blue_ui"]) : $staticRes(res["epi-questlist_epi_pink_ui"])
              , _ = ccs.load($dynamicRes(u))
              , l = _.node;
            i.each(l.seekWidgets(function(e) {
                return "clip_panel" === e._name
            }), function(e) {
                e.setTouchEnabled(!1)
            }),
            l.runAction(_.action),
            e.addChild(l),
            r.item_id && l.loadTextures({
                quest_reward: t.Img("rewardicon", "item", i.padZero(r.item_id, 4)).png
            });
            var d = t.createInstance("episodeImage")
              , p = {
                grayout: 0,
                colored: 1
            };
            if (d.loadTextureToImageView(l.seekWidgetByName("questimg"), a.type.replace(/cter$/, ""), o.episode_id, p.colored),
            i.each(l.seekWidgets(function(e) {
                return "questimg_clip_panel" === e._name
            }), function(e) {
                e.setTouchEnabled(!1)
            }),
            o.is_story_of_encounter) {
                var h = t.createInstance("QuestButton", [c, a, !0]);
                h.setPopupDelegate(this),
                l.seekWidgetByName("questlist_epi_base").setTouchEnabled(!0),
                l.seekWidgetByName("questlist_epi_base").addTouchEventListener(h.createListener()),
                l.setStrings({
                    quest_header_label: this.__getEncounterEpisodeTitle(o.heroine_name, a.title, o.heroine_is_aroused)
                })
            } else {
                if (l.seekWidgetByName("cons_ap_label").setString("ap" + a.quest_ap),
                a.is_opened) {
                    var h = t.createInstance("QuestButton", [c, a]);
                    h.setPopupDelegate(this),
                    l.seekWidgetByName("questlist_epi_base").setTouchEnabled(!0),
                    l.seekWidgetByName("questlist_epi_base").addTouchEventListener(h.createListener())
                } else
                    i.invoke(i.map(["questlist_epi_base"], function(e) {
                        return l.seekWidgetByName(e);
                    }), "setColor", n.color("#808080")),
                    l.seekWidgetByName("questlist_epi_base").setTouchEnabled(!1);
                "acquire_ability" === o.cleared_bonus_type ? l.changeFrameWithAnimInfo("new_ability", "start") : "strengthen_ability" === o.cleared_bonus_type ? l.changeFrameWithAnimInfo("up_ability", "start") : "none" === o.cleared_bonus_type && l.changeFrameWithAnimInfo("not_clear", "start"),
                l.setStrings({
                    quest_header_label: o.heroine_name + "「" + a.title + "」"
                })
            }
        },
        __getEncounterEpisodeTitle: function(e, n, i) {
            return t.env.isR18 ? e + "「" + n + "」" : i ? e + "の覚醒エピソード" : e + "との出会いの物語"
        },
        _touchEpiCharaCard: function(e, n, i) {
            var a = this.__getVirtualCharacterId(n);
            t.createInstance("router").navigate("epi/epi_002", {
                epi_001: {
                    tab: "chara",
                    kind: "chara",
                    page: page,
                    character_id: a
                }
            })
        },
        __getVirtualCharacterId: function(e) {
            return i.isNumber(e.aroused_character_id) && -1 < e.aroused_character_id ? e.aroused_character_id : e.character_id
        },
        _touchEpiSummonCard: function(e, n, i) {
            console.log(n),
            t.createInstance("router").navigate("epi/epi_003", {
                epi_001: {
                    tab: "chara",
                    kind: "summon",
                    page: page,
                    summon_id: n.summon_id
                }
            })
        },
        _touchEpiJobCard: function(e, n, i) {
            console.log(n),
            t.createInstance("router").navigate("epi/epi_004", {
                epi_001: {
                    tab: "chara",
                    kind: "job",
                    page: page,
                    job_id: n.job_id
                }
            })
        },
        _touchEpiMainstoryCard: function(e, t, n) {
            console.log(t)
        },
        getPopup: function(e) {
            if (!this._owner.popups[e])
                throw new Error("no such popup: ",e);
            return this._owner.popups[e]
        },
        getReturnBackParams: function() {
            var e = n.director.getRunningScene()
              , t = e.tabDelegateList[0].selected
              , i = "tab_1" === t ? "main_story" : "new";
            return {
                scene: "epi/epi_001",
                routerParams: {
                    epi_001: {
                        tab: i
                    }
                }
            }
        }
    }),
    i.assign(t.pc.epi.epi_001.SceneDelegate.prototype, t.pc.roles.UIUtility, t.pc.epi.roles.Routing, t.pc.epi.roles.HaremEpiBtnsPageListController)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {};
    var i = e.Q
      , a = {};
    t.pc.epi = t.pc.epi || {},
    t.pc.epi.epi_002_003_004 = t.pc.epi.epi_002_003_004 || {},
    t.pc.epi.epi_002_003_004.Scene = t.BaseScene.extend({
        resourceName: function() {
            var e = n.findKey(res, function(e) {
                return 0 < e.indexOf("epi_002_3_4/epi_002_3_4.json")
            });
            return e || alert("該当するシーンリソースが見つかりませんでした: epi_002_3_4/epi_002_3_4.json"),
            e || ""
        }(),
        _popups: a,
        footerDelegate: new t.FooterDelegate,
        headerDelegate: new t.HeaderDelegate,
        mainMenuDelegate: new t.MainMenuDelegate,
        subMenuDelegate: new t.SubMenuDelegate,
        tabDelegateList: [],
        _delegate: null ,
        _prepare: function() {
            return function(n) {
                e.console.debug("[!! scene delegate DI name !!]: ", n),
                this._delegate = t.dictx.has(n) ? t.createInstance(n) : null
            }
            .call(this, "epi002003004Delegate"),
            this._delegate && (this.__proto__._popups = this._delegate._popups),
            this._super().then(function() {
                t.createInstance("notificationCenter").dispatchEvent("scene:prepared", ["epi", "epi_002_003_004"])
            })
        },
        _init: function() {
            if (function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnAllOver"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_all_over", function() {
                alert("{{all_over_uiを表示}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnArousalAfter"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_arousal_after", function() {
                alert("{{処理についてはUI仕様書を参照}}")
            }),
            function(a, s, o) {
                var r = {};
                r["TOUCH_ENDED " + s] = function() {
                    var t = "btnCallbackBtnArousalBefore"
                      , a = this._delegate && n.isFunction(this._delegate[t]) ? i.fcall(this._delegate[t].bind(this._delegate, this)) : i.resolve();
                    a.then(o.bind(this)).fail(function(t) {
                        this._delegate && t === this._delegate._override || e.console.error(t)
                    }
                    .bind(this))
                }
                ,
                t.setTouchEventHandlers(a, r, this)
            }
            .call(this, this.seekWidgetByPath(""), "btn_arousal_before", function() {
                alert("{{処理についてはUI仕様書を参照}}")
            }),
            !this._delegate)
                ;i.fcall(function() {
                var e = "onSceneInit";
                return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }).then(function() {
                var e = "page_in";
                0 < e.length && (this.promisePageInAnimationEnd = i.delay(100).then(function() {
                    return this.animate(e, !1)
                }
                .bind(this)).then(function() {
                    this.animate("default_view", !0);
                    var e = "onPageInAnimationEnd";
                    return this._delegate && n.isFunction(this._delegate[e]) ? this._delegate[e].call(this._delegate, this) : i.resolve()
                }
                .bind(this))),
                this.seekWidgets(function(e) {
                    return "Layer" === e._className && e.getAnimInfo("layer_in").animInfo
                }).map(function(e) {
                    e.animate("layer_in", !1).then(function() {
                        e.animate("default_view", !0)
                    })
                })
            }
            .bind(this)).fail(function(t) {
                e.console.error(t)
            }),
            a = null
        },
        onEnter: function() {
            this._super();
            var e = "onSceneEnter";
            this._delegate && n.isFunction(this._delegate[e]) && this._delegate[e].call(this._delegate, this)
        },
        onExit: function() {
            this._super();
            var e = "onSceneExit";
            this._delegate && n.isFunction(this._delegate[e]) && (this._delegate[e].call(this._delegate, this),
            this._delegate = null )
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e.cc
      , i = e._
      , a = e.Q;
    t.pc = t.pc || {};
    var s = function() {
        return function() {
            alert("not implemented")
        }
    };
    t.pc.epi = t.pc.epi || {},
    t.pc.epi.epi_002_003_004 = t.pc.epi.epi_002_003_004 || {};
    var o = {
        getSceneName: s("_getSceneName"),
        getTargetEpisodes: s("_getTargetEpisodes"),
        getTargetType: s("_getTargetType"),
        getTargetMainImagePath: s("_getTargetMainImagePath"),
        getTargetHaremEpisodes: s("_getTargetHaremEpisodes"),
        getTargetCloseUPImagePath: s("_getTargetCloseUPImagePath")
    };
    t.pc.epi.epi_002_003_004.SceneDelegate = t.pc.BaseSceneDelegate.extend({
        _popups: {
            illustUp: {
                factoryName: "popupFactoryIllustUp",
                buttonLabels: {
                    blackBtn: "閉じる"
                },
                buttons: {
                    blackBtn: function() {
                        this.dismiss()
                    }
                },
                onPopupOpened: function(e, t) {
                    e.setTitle(t.title),
                    e.setImage(t.image)
                }
            },
            epiSceneCheck: {
                factoryName: "popupFactoryEpiSceneCheck"
            },
            epiStoryCheck: {
                factoryName: "popupFactoryEpiStoryCheck"
            },
            epiReplayCheck: {
                factoryName: "popupFactoryEpiReplayCheck"
            },
            epiApCheck: {
                factoryName: "popupFactoryEpiApCheck"
            },
            comRaidCheck: {
                factoryName: "popupFactoryComRaidCheck"
            },
            comNeedApBp1: {
                factoryName: "popupFactoryComNeedApBp1"
            },
            comNeedApBp2: {
                factoryName: "popupFactoryComNeedApBp2"
            },
            comApRestart: {
                factoryName: "popupFactoryComApRestart"
            },
            comAgeLimitA: {
                factoryName: "popupFactoryComAgeLimitA"
            },
            comAgeLimitB: {
                factoryName: "popupFactoryComAgeLimitB"
            },
            comCaution2: {
                factoryName: "popupFactoryBlue",
                title: "注意",
                buttonLabels: {
                    blueBtn: "OK"
                },
                buttons: {
                    blueBtn: function() {
                        this.dismiss()
                    }
                },
                onPopupOpened: function(e, t) {
                    var n = '<p style="padding: 0;margin: 0">以下の条件を満たしていないため<br /> このエピソードを開始することができません。</p> <p class="red" style="pargin:0;margin:8px 0 0">[開始条件]<br />{{name}}のLv{{lv}}到達<br />{{prerequired}}クリア</p>'
                      , i = n.replace(/\{\{([^\}]+?)\}\}/g, function(e, n) {
                        return t[n] || ""
                    });
                    e.setContent(i)
                }
            }
        },
        onSceneInit: function(e) {
            var n = function() {
                var e = t.createInstance("router").getCurrentFragment()
                  , n = {
                    epi_002: {
                        delegateName: "epi002Delegate",
                        paramKey: "character_id",
                        verifyRouterParams: "_verifyRouterParams002"
                    },
                    epi_003: {
                        delegateName: "epi003Delegate",
                        paramKey: "summon_id",
                        verifyRouterParams: "_verifyRouterParams003"
                    },
                    epi_004: {
                        delegateName: "epi004Delegate",
                        paramKey: "job_id",
                        verifyRouterParams: "_verifyRouterParams004"
                    }
                }
                  , a = i.find(["epi_002", "epi_003", "epi_004"], function(t) {
                    return 0 < e.indexOf(t)
                });
                return n[a]
            }();
            this[n.verifyRouterParams](e),
            this._owner = e;
            var s = e.routerParams.epi_001[n.paramKey];
            return this._params = n,
            this._subDelegate = this.__createSubDelegate(this._params.delegateName, s),
            a.all([this._loadArousalInfo(), this._loadEpisodes()]).then(this._updateSubViews.bind(this, e))
        },
        __createSubDelegate: function(e, n) {
            return t.createInstance(e, [n]) || o
        },
        _loadArousalInfo: function() {
            return this._subDelegate.getArousalPromise().then(function(e) {
                return this._arousalInfo = e,
                e
            }
            .bind(this))
        },
        _loadEpisodes: function() {
            return this._subDelegate.getTargetEpisodes().then(function(e) {
                return this._episodeList = e,
                e
            }
            .bind(this))
        },
        _updateSubViews: function(e) {
            return this._subDelegate.getTargetEpisodes().then(function(t) {
                if (t.length < 1)
                    return void console.error("エピソード一覧が空で返ってきました");
                var n = (t[0].harem_episode_info || {
                    heroine_name: ""
                }).heroine_name;
                return this._updateHeader(e, n),
                this._updateBackground(e),
                this._updateEpisodes(e, t),
                this._updateButtons(e),
                t
            }
            .bind(this))
        },
        _changeHeroine: function(e, n) {
            return this._subDelegate = this.__createSubDelegate(this._params.delegateName, n),
            this._updateSelectedId(e, this._params.paramKey, n),
            t.env.isSp ? a.resolve().then(this._updateSubViews.bind(this, e)).then(e.animate.bind(e, "page_in", !1)) : e.animate("page_out", !1).then(this._updateSubViews.bind(this, e)).then(e.animate.bind(e, "page_in", !1))
        },
        _updateSelectedId: function(e, n, a) {
            var s = t.createInstance("router")
              , o = s.getCurrentFragment()
              , r = i.clone(e.routerParams);
            r.epi_001[n] = a,
            s.historyReplace(o, r)
        },
        onSceneEnter: function(e) {
            a.defer();
            return a.resolve()
        },
        onSceneExit: function(e) {
            a.defer();
            return this._subDelegate = null ,
            this._owner = null ,
            a.resolve()
        },
        btnCallbackBtnAllOver: function(e) {
            var t = a.defer();
            t.reject(this._override);
            var n = this._subDelegate.getId()
              , i = this._subDelegate.getTargetType()
              , s = 0;
            return this._openAllOverPanel(n, s, i),
            t.promise
        },
        btnCallbackBtnArousalAfter: function(e) {
            return this.__canChangeHeroineToAroused() && this._changeHeroine(e, this._arousalInfo.arousedId),
            a.reject(this._override)
        },
        btnCallbackBtnArousalBefore: function(e) {
            return this.__heroineIsAroused() && this._changeHeroine(e, this._arousalInfo.baseId),
            a.reject(this._override)
        },
        _updateHeader: function(e, t) {
            e.seekWidgetByName("header_base").setStrings({
                header_label: [" ", t || "", " "].join("")
            })
        },
        _updateBackground: function(e) {
            e.loadTextures({
                epimain: this._subDelegate.getTargetMainImagePath()
            })
        },
        _updateButtons: function(e) {
            this._hideArousalAfterBtn(e),
            this._hideArousalBeforeBtn(e),
            this.__heroineIsAroused() ? this._showArousalBeforeBtn(e) : this.__canChangeHeroineToAroused() && this._showArousalAfterBtn(e)
        },
        __heroineIsAroused: function() {
            return this._subDelegate.getId() === this._arousalInfo.arousedId
        },
        __canChangeHeroineToAroused: function() {
            return i.isNumber(this._arousalInfo.arousedId) && 0 < this._arousalInfo.arousedId
        },
        _showArousalBeforeBtn: function(e) {
            this.__showBtn(this._getArousalBeforeBtn(e))
        },
        _showArousalAfterBtn: function(e) {
            this.__showBtn(this._getArousalAfterBtn(e))
        },
        _hideArousalBeforeBtn: function(e) {
            this.__hideBtn(this._getArousalBeforeBtn(e))
        },
        _hideArousalAfterBtn: function(e) {
            this.__hideBtn(this._getArousalAfterBtn(e))
        },
        _getArousalBeforeBtn: function(e) {
            return e.seekWidgetByName("btn_arousal_before")
        },
        _getArousalAfterBtn: function(e) {
            return e.seekWidgetByName("btn_arousal_after")
        },
        __showBtn: function(e) {
            e && e.setAppearance("show")
        },
        __hideBtn: function(e) {
            e && e.setAppearance("hide")
        },
        _updateEpisodes: function(e, s) {
            var o = []
              , r = i.zipObject(["encounter", "harem"], i.partition(s, function(e) {
                return e.harem_episode_info ? e.harem_episode_info.is_story_of_encounter : !1
            }))
              , c = {}
              , u = i.map(["questlist_epi_ui_3", "questlist_epi_ui_2", "questlist_epi_ui_1", "questlist_epi_ui_0"], function(t) {
                return e.seekWidgetByName(t)
            }, this);
            return c.harem = i.range(0, r.harem.length).map(function() {
                return u.pop()
            }).reverse(),
            c.encounter = i.range(0, r.encounter.length).map(function() {
                return u.pop()
            }).reverse(),
            i.each(u, function(e) {
                e.removeAllChildren()
            }),
            i.each(i.zip([r.encounter, c.encounter]), function(e) {
                var n = e[0]
                  , a = (n.harem_episode_info || {},
                n.reward_info || {})
                  , s = e[1];
                s.removeAllChildren();
                var o = ccs.load(res["epi-epi_002_3_4-quest_list_white_ui"])
                  , r = o.node;
                r.runAction(o.action),
                s.addChild(r),
                s.setVisible(!0),
                s.setStrings({
                    quest_header_label: this.__getEncounterEpisodeTitle(n.harem_episode_info.heroine_name)
                }),
                a.item_id && s.seekWidgetByName("quest_reward").loadTexture(t.Img("rewardicon", "item", i.padZero(a.item_id, 4)).png);
                var c = t.createInstance("QuestButton", [this._subDelegate.getTargetType(), n, !0]);
                c.setPopupDelegate(this);
                var u = s.seekWidgetByName("questlist_epi_base");
                u.addTouchEventListener(c.createListener()),
                u.setSound(t.SoundList.BUTTON_TOUCHED_DECIDE),
                u.setSoundEnabled(!0),
                n.is_cleared && r.animate("cleared", !0)
            }
            .bind(this)),
            i.each(i.zip([r.harem, c.harem]), function(a, s) {
                var r = a[0] || {
                    quest_id: 0
                }
                  , c = r.harem_episode_info || {}
                  , u = r.reward_info || {}
                  , _ = a[1];
                _.removeAllChildren();
                var l = ccs.load(res["epi-questlist_epi_pink_ui"])
                  , d = l.node;
                d.runAction(l.action),
                _.addChild(d),
                _.setVisible(!0),
                t.env.isR18 ? _.setStrings({
                    quest_header_label: c.heroine_name + "「" + r.title + "」"
                }) : (r.title = "エピソード" + (s + 1),
                _.setStrings({
                    quest_header_label: r.title
                })),
                u.item_id && _.seekWidgetByName("quest_reward").loadTexture(t.Img("rewardicon", "item", i.padZero(u.item_id, 4)).png);
                var p = t.createInstance("episodeImage")
                  , h = {
                    grayout: 0,
                    colored: 1
                };
                if (o.push(p.loadTextureToImageView(_.seekWidgetByName("questimg"), r.type.replace(/cter$/, ""), c.episode_id, h.colored)),
                i.each(_.seekWidgets(function(e) {
                    return "clip_panel" === e._name
                }), function(e) {
                    e.setTouchEnabled(!1)
                }),
                r.is_cleared ? (_.seekWidgetByName("cons_ap_label").setString("ap0", !0),
                d.changeFrameWithAnimInfo("cleared", "start")) : (_.seekWidgetByName("cons_ap_label").setString("ap" + r.quest_ap, !0),
                "acquire_ability" === c.cleared_bonus_type ? d.changeFrameWithAnimInfo("new_ability", "start") : "strengthen_ability" === c.cleared_bonus_type ? d.changeFrameWithAnimInfo("up_ability", "start") : "none" === c.cleared_bonus_type && d.changeFrameWithAnimInfo("not_clear", "start")),
                r.is_opened) {
                    var g = t.createInstance("QuestButton", [this._subDelegate.getTargetType(), r]);
                    g.setPopupDelegate(this),
                    _.seekWidgetByName("questlist_epi_base").setTouchEnabled(!0),
                    _.seekWidgetByName("questlist_epi_base").addTouchEventListener(g.createListener())
                } else {
                    i.invoke(i.map(["questlist_epi_base"], function(e) {
                        return _.seekWidgetByName(e)
                    }), "setColor", n.color("#808080"));
                    var m = c.condition_to_unlock || {
                        heroine_name: c.heroine_name,
                        level: 9999999999
                    };
                    _.seekWidgetByName("questlist_epi_base").setTouchEnabled(!0),
                    t.setTouchEventHandlers(_, {
                        "TOUCH_ENDED questlist_epi_base": function() {
                            var n = m.episode_title;
                            t.env.isR18 && (n = 0 == s ? this.__getEncounterEpisodeTitle(m.heroine_name) : "エピソード「" + m.episode_title + "」"),
                            e.popups.comCaution2.open({
                                name: m.heroine_name,
                                lv: m.level,
                                prerequired: n
                            })
                        }
                    }, this)
                }
            }, this),
            a.all(o)
        },
        __getEncounterEpisodeTitle: function(e) {
            return this.__heroineIsAroused() ? t.env.isR18 ? e + "\nの覚醒エピソード" : "覚醒エピソード" : t.env.isR18 ? e + "\nとの出会いの物語" : "出会いの物語"
        },
        _showPopupIllustUp: function() {
            this.popups.illustUp.open({
                title: this._subDelegate.getTargetName(),
                image: this._subDelegate.getTargetCloseUpImagePath()
            })
        },
        getPopup: function(e) {
            if (!this._owner.popups[e])
                throw new Error("no such popup: ",e);
            return this._owner.popups[e]
        },
        getReturnBackParams: function() {
            return {
                scene: this._subDelegate.getSceneName()
            }
        }
    }),
    i.assign(t.pc.epi.epi_002_003_004.SceneDelegate.prototype, t.pc.roles.RoutingCommon, t.pc.epi.roles.Routing, t.pc.roles.AllOverUI)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh;
    t.pc.epi.epi_002_003_004 = t.pc.epi.epi_002_003_004 || {},
    t.pc.epi.epi_002_003_004.epi_002 = t.pc.epi.epi_002_003_004.epi_002 || {},
    t.pc.epi.epi_002_003_004.epi_002.SceneDelegate = cc.Class.extend({
        _characterId: 0,
        ctor: function(e) {
            this._characterId = e
        },
        getId: function() {
            return this._characterId
        },
        getSceneName: function() {
            return "epi/epi_002"
        },
        getTargetType: function() {
            return "chara"
        },
        getTargetMainImagePath: function() {
            return t.Img("epimain", "chara", _.padZero(this._characterId, 4), 0).jpg
        },
        getTargetEpisodes: function() {
            return t.createInstance("apiAQuests").getListHaremByCharacter(this._characterId).then(function(e) {
                return e.body.data
            })
        },
        getArousalPromise: function() {
            return t.createInstance("apiALibrary").getCharacterArousal(this._characterId).then(function(e) {
                return _(["base", "aroused"]).map(function(t) {
                    var n = e.body[t + "_character_id"];
                    return [t + "Id", n]
                }).zipObject().value()
            })
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh;
    t.pc.epi.epi_002_003_004 = t.pc.epi.epi_002_003_004 || {},
    t.pc.epi.epi_002_003_004.epi_003 = t.pc.epi.epi_002_003_004.epi_003 || {},
    t.pc.epi.epi_002_003_004.epi_003.SceneDelegate = cc.Class.extend({
        _summonId: 0,
        ctor: function(e) {
            this._summonId = e
        },
        getId: function() {
            return this._summonId
        },
        getSceneName: function() {
            return "epi/epi_003"
        },
        getTargetType: function() {
            return "summon"
        },
        getTargetMainImagePath: function() {
            return t.Img("epimain", "summon", _.padZero(this._summonId, 4), 0).jpg
        },
        getTargetEpisodes: function() {
            return t.createInstance("apiAQuests").getListHaremBySummon(this._summonId).then(function(e) {
                return e.body.data
            })
        },
        getArousalPromise: function() {
            return Q.resolve({
                baseId: this.getId(),
                arousedId: -1
            })
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh;
    t.pc.epi.epi_002_003_004 = t.pc.epi.epi_002_003_004 || {},
    t.pc.epi.epi_002_003_004.epi_004 = t.pc.epi.epi_002_003_004.epi_004 || {},
    t.pc.epi.epi_002_003_004.epi_004.SceneDelegate = cc.Class.extend({
        _jobId: 0,
        ctor: function(e) {
            this._jobId = e
        },
        getId: function() {
            return this._jobId
        },
        getSceneName: function() {
            return "epi/epi_004"
        },
        getTargetType: function() {
            return "job"
        },
        getTargetMainImagePath: function() {
            return t.Img("epimain", "job", _.padZero(this._jobId, 4), 0).jpg
        },
        getTargetEpisodes: function() {
            return t.createInstance("apiAQuests").getListHaremByJob(this._jobId).then(function(e) {
                return e.body.data
            })
        },
        getArousalPromise: function() {
            return Q.resolve({
                baseId: this.getId(),
                arousedId: -1
            })
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = {
        grayout: 0,
        colored: 1
    };
    n.PopupFactoryEpiSceneCheck = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-epi_scene_check",
            title: "エピソード確認",
            buttonLabels: {
                blackBtn: "キャンセル"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        },
        WIDGET_NAMES: {},
        POPUP_METHODS: {},
        _setup: {
            chara: function(e, t) {
                var a = n.createInstance("episodeImage");
                a.loadTextureToImageView(this.contentNode.seekWidgetByName("scene_img"), e.type.replace(/cter$/, ""), e.harem_episode_info.episode_id, i.colored)
            },
            summon: function(e) {
                var t = n.createInstance("episodeImage");
                t.loadTextureToImageView(this.contentNode.seekWidgetByName("scene_img"), e.type.replace(/cter$/, ""), e.harem_episode_info.episode_id, i.colored)
            },
            job: function(e) {
                var t = n.createInstance("episodeImage");
                t.loadTextureToImageView(this.contentNode.seekWidgetByName("scene_img"), e.type.replace(/cter$/, ""), e.harem_episode_info.episode_id, i.colored)
            },
            main_story: function(e) {
                var i = this.contentNode.seekWidgetByName("scene_img");
                i && i.loadTexture(n.Img("questimg", "main-quest-battle", t.padZero(e.quest_id, 4), e.battle_no).png)
            }
        },
        onPopupOpened: function(t, i) {
            if (this._setup[i.type].call(t, i.record || {}),
            n.env.isR18)
                t.contentNode.setStrings({
                    synopsis_label: i.record.description
                });
            else {
                var a = t.contentNode.seekWidgetByName("synopsis_label");
                a.setString("年齢制限コンテンツのため内容を伏せております。\n本コンテンツは神姫PROJECT　R指定版より\nお楽しみ頂けます。"),
                a.width = 540
            }
            n.setTouchEventHandlers(t.contentNode, {
                "TOUCH_ENDED btn_play_scenario": function() {
                    this.dismiss().then(function() {
                        n.createInstance("router").navigate("scenario/episode-play", {
                            "scenario/play": {
                                episode_id: i.record.harem_episode_info.episode_id,
                                harem_only: !0,
                                returnBackParams: i.returnBackParams
                            }
                        })
                    }
                    .bind(this)).fail(function(t) {
                        e.console.error(t)
                    })
                },
                "TOUCH_ENDED btn_play_scene": function() {
                    this.dismiss().then(function() {
                        n.createInstance("router").navigate("scenario/episode-play", {
                            "scenario/play": {
                                episode_id: i.record.harem_episode_info.episode_id,
                                harem_only: !0,
                                hscene_only: !0,
                                returnBackParams: i.returnBackParams
                            }
                        })
                    }
                    .bind(this)).fail(function(t) {
                        e.console.error(t)
                    })
                }
            }, t)
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = {
        grayout: 0,
        colored: 1
    };
    n.PopupFactoryEpiStoryCheck = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-epi_story_check",
            title: "エピソード確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "シナリオから確認"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    this.dismiss().then(function() {
                        n.createInstance("router").navigate("scenario/episode-play", {
                            "scenario/play": {
                                episode_id: this.param.record.harem_episode_info.episode_id,
                                harem_only: !0,
                                returnBackParams: this.param.returnBackParams
                            }
                        })
                    }
                    .bind(this)).fail(function(t) {
                        e.console.error(t)
                    })
                }
            },
            buttonSounds: {
                blueBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED
            }
        },
        POPUP_METHODS: {},
        _setup: {
            chara: function(e, t) {
                var a = n.createInstance("episodeImage");
                a.loadTextureToImageView(this.contentNode.seekWidgetByName("scene_img"), e.type.replace(/cter$/, ""), e.harem_episode_info.episode_id, i.colored)
            },
            summon: function(e) {
                var t = n.createInstance("episodeImage");
                t.loadTextureToImageView(this.contentNode.seekWidgetByName("scene_img"), e.type.replace(/cter$/, ""), e.harem_episode_info.episode_id, i.colored)
            },
            job: function(e) {
                var t = n.createInstance("episodeImage");
                t.loadTextureToImageView(this.contentNode.seekWidgetByName("scene_img"), e.type.replace(/cter$/, ""), e.harem_episode_info.episode_id, i.colored)
            },
            main_story: function(e) {
                var i = this.contentNode.seekWidgetByName("scene_img");
                i && i.loadTexture(n.Img("questimg", "main-quest-battle", t.padZero(e.quest_id, 4), e.battle_no).png)
            }
        },
        onPopupOpened: function(e, t) {
            this._setup[t.type].call(e, t.record || {}),
            e.contentNode.setStrings({
                synopsis_label: t.record.description
            }),
            e.param = t
        },
        create: function(e, i) {
            return n.PopupFactory.prototype.create.call(this, t.assign(e, this.POPUP_PROPERTIES), i)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = (e._,
    e.kh);
    $staticRes(res["core-popup-epi_replay_check"]),
    t.PopupFactoryEpiReplayCheck = t.PopupFactoryEpiStoryCheck.extend({
        onPopupOpened: function(e, t) {
            this._setup[t.type].call(e, t.record || {}),
            e.param = t
        },
        _setupContentNode: function(e, t) {
            console.debug(e, t),
            (t || {}).resourceName = "core-popup-epi_replay_check",
            this._super(e, t)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryEpiApCheck = n.PopupFactoryTextOnly.extend({
        POPUP_PROPERTIES: {
            title: "エピソード開始確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "OK"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                },
                blueBtn: function() {
                    this.dismiss().then(function() {
                        n.createInstance("questStateManager").startQuest(this.aQuestId, this.questType)
                    }
                    .bind(this)).fail(function(t) {
                        e.console.error(t)
                    })
                }
            },
            buttonSounds: {
                blueBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED
            }
        },
        onPopupOpened: function(e, i) {
            var a;
            a = n.env.isR18 ? "エピソード<br /> 「{{episodeTitle}}」を<br /> 開始します。" : "{{episodeTitle}}を<br /> 開始します。",
            a += '<br /><table class="nb"><tr><td class="numbox_middle_long" style="margin: 0 auto"><span class="white">{{beforeAP}}&rarr;</span><span class="yellow">{{afterAP}}</span></td></tr></table><br />よろしいですか？',
            a = a.replace(/{{([^}]+?)}}/g, function(e, n) {
                return t.isUndefined(i[n]) ? "" : i[n]
            }),
            e.setContent(a),
            e.aQuestId = i.aQuestId,
            e.questType = i.questType
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryTextOnly.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComApRestart = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_ap_restart",
            title: "クエスト再開",
            buttonLabels: {
                blackBtn: "キャンセル"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            var i = {};
            i.questTitle = t.questTitle || "クエストタイトル",
            i.type = "raid" === t.questType ? "レイドバトル" : "クエスト",
            e.setStrings({
                confirm_label: "進行中のクエストがあります\n{{type}}「{{questTitle}}」".replace(/{{([^}]+)}}/g, function(e, t) {
                    return i[t]
                })
            }),
            n.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_withdrawal": function() {
                    e.dismiss().then(function() {
                        this._showPopupComBackCheck(t.aQuestId, t.questType)
                    }
                    .bind(this))
                },
                "TOUCH_ENDED btn_restart": function() {
                    e.dismiss().then(function() {
                        this._gotoQuest(t.aQuestId, t.questType)
                    }
                    .bind(this))
                }
            }, this);
            var a = e.seekWidgetByName("btn_restart");
            a.setSoundEnabled(!0),
            a.setSound(n.SoundList.BUTTON_TOUCHED_CONFIRMED)
        },
        _showPopupComBackCheck: function(t, i) {
            n.createInstance("apiAQuests").getGainedItems(t, i).then(function(e) {
                var a = e.body.gained_items
                  , s = n.createInstance("popupFactoryComBackCheck").create({});
                console.log("bachCkeck", t, i),
                s.open({
                    type: i,
                    coin: a.gem,
                    normal: a.wooden_box,
                    silver: a.silver_box,
                    gold: a.golden_box,
                    rainbow: a.rainbow_box,
                    needToOpenComBackResult: !0,
                    aQuestId: t,
                    questType: i
                })
            }).fail(function(t) {
                e.console.error(t)
            })
        },
        _gotoQuest: function(e, t) {
            n.createInstance("questStateManager").restartQuest(e, t)
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComBackCheck = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_back_check",
            title: "リタイア確認",
            buttonLabels: {
                blackBtn: "キャンセル",
                redBtn: "リタイア"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss().then(this.onCancel)
                },
                redBtn: function() {
                    var t = n.createInstance("apiAQuests");
                    t.giveupQuest(this.aQuestId, this.questType).then(function(t) {
                        this.dismiss().then(function() {
                            if (this.needToOpenComBackResult) {
                                var e = n.createInstance("popupFactoryComBackResult").create({});
                                e.open({
                                    type: this.questType
                                })
                            } else
                                n.createInstance("router").navigate("quest")
                        }
                        .bind(this)).fail(function(t) {
                            e.console.error(t)
                        })
                    }
                    .bind(this)).fail(function(t) {
                        e.console.error(t)
                    })
                }
            },
            buttonSounds: {
                redBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED
            }
        },
        typeDictionary: {
            coin: "gem",
            normal: "bronze",
            silver: "silver",
            gold: "gold",
            rainbow: "rainbow"
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, n) {
            var i = n.type;
            "raid" === i && e.setStrings({
                confirm_label: e.seekWidgetByName("confirm_label").getString().replace("クエスト", "レイドバトル")
            }),
            t.each(t.keys(this.typeDictionary), function(t) {
                e.seekWidgetByName("{{type}}_no_label".replace(/{{type}}/, this.typeDictionary[t])).setString((n[t] || 0).toString())
            }
            .bind(this)),
            e.needToOpenComBackResult = n.needToOpenComBackResult || !1,
            e.aQuestId = n.aQuestId,
            e.questType = n.questType,
            e.type = i,
            e.onCancel = n.onCancel || function() {}
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComBackResult = n.PopupFactoryTextOnly.extend({
        POPUP_PROPERTIES: {
            title: "クエストリタイア",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    var e = cc.director.getRunningScene();
                    (e._delegate.update || function() {}
                    )(),
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        WIDGET_NAMES: {},
        onPopupOpened: function(e, t) {
            var n = "raid" === t.type ? "レイドバトル" : "クエスト";
            e.setContent("{{type}}からリタイアしました".replace(/{{type}}/, n))
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryTextOnly.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComRaidCheck = n.PopupFactoryTextOnly.extend({
        POPUP_PROPERTIES: {
            title: "未確認バトルがあります",
            content: '<span class="red">結果が未確認のレイドバトルがあります</span>',
            buttonLabels: {
                blueBtn: "確認する",
                blackBtn: "キャンセル"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss().then(function() {
                        n.createInstance("router").navigate("quest/q_007")
                    })
                },
                blackBtn: function() {
                    this.dismiss()
                }
            },
            buttonSounds: {
                blueBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED
            }
        },
        POPUP_METHODS: {},
        _addMethodsToPopup: function(e) {
            n.PopupFactoryTextOnly.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComNeedApBp1 = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_need_ap_bp_1",
            buttonLabels: {
                blackBtn: "キャンセル",
                blueBtn: "使用する"
            },
            buttons: {
                blackBtn: function() {
                    this.cleanUp().then(this.dismiss.bind(this))
                },
                blueBtn: function() {
                    this._useItems(),
                    this.cleanUp().then(this.dismiss.bind(this))
                }
            }
        },
        WIDGET_NAMES: {
            FULL: {
                POINTS_BEFORE_AFTER: "comp_recovery_use_labelimg",
                ITEMS_BEFORE_AFTER: "comp_recovery_have_labelimg"
            },
            HALF: {
                POINTS_BEFORE_AFTER: "harf_recovery_use_labelimg",
                ITEMS_BEFORE_AFTER: "harf_recovery_have_labelimg"
            }
        },
        POPUP_METHODS: {
            setItemFull: function(e) {
                this._itemFull = e
            },
            setItemHalf: function(e) {
                this._itemHalf = e
            },
            setCurrentQuestPoints: function(e) {
                this._currentQuestPoints = e
            },
            setMaxQuestPoints: function(e) {
                this._maxQuestPoints = e
            },
            setQuestPointType: function(e) {
                this._questPointType = e
            },
            createPulldowns: function() {
                this._createPulldownFull(),
                this._createPulldownHalf()
            },
            onUse: function(e) {
                this._onUse = e
            },
            cleanUp: function() {
                return this._pulldownFull.releaseMenu(),
                this._pulldownHalf.releaseMenu(),
                Q.all(t(this.WIDGET_NAMES.FULL).values().concat(t.values(this.WIDGET_NAMES.HALF)).map(function(e) {
                    var t = {};
                    return t[e] = "",
                    this.setHtmlStrings(t, n.GameConfig.POPUP_CSS)
                }, this).value())
            },
            _setBeforeAndAfterCount: function(e, t, i) {
                var a = {};
                return a[this.WIDGET_NAMES[i].ITEMS_BEFORE_AFTER] = this._generateAmountBoxContent(e, t),
                this.setHtmlStrings(a, n.GameConfig.POPUP_CSS)
            },
            _setBeforeAndAfterQuestPoint: function(e, t, i) {
                var a = {};
                return a[this.WIDGET_NAMES[i].POINTS_BEFORE_AFTER] = this._generateAmountBoxContent(e, t),
                this.setHtmlStrings(a, n.GameConfig.POPUP_CSS)
            },
            _generateAmountBoxContent: function(e, t) {
                return '<table class="nb"><tr><td class="numbox_middle_mini"><span class="white">' + e + '&rarr;</span><span class="' + this._getAmountAfterTextColor(e, t) + '">' + t + "</span></td></tr></table>"
            },
            _getAmountAfterTextColor: function(e, t) {
                return t > e ? "yellow" : e > t ? "red" : "white"
            },
            _getMaxPossibleItemUses: function(e) {
                var t = this._maxQuestPoints - this._currentQuestPoints
                  , n = Math.ceil(t / this._getItemRecoveryValue(e));
                return Math.min(n, e.num)
            },
            _getPulldownChoices: function(e) {
                return t.map(t.range(this._getMaxPossibleItemUses(e) + 1), function(e) {
                    return {
                        text: e.toString(),
                        value: e
                    }
                })
            },
            _createPulldownFull: function() {
                this._pulldownFull = this._createPulldown(this.seekWidgetByPath("group_panel_0.btn_pulldown"), this._getPulldownChoices(this._itemFull), this._onPulldownSelectFull, this)
            },
            _createPulldownHalf: function() {
                this._pulldownHalf = this._createPulldown(this.seekWidgetByPath("group_panel_1.btn_pulldown"), this._getPulldownChoices(this._itemHalf), this._onPulldownSelectHalf, this)
            },
            _createPulldown: function(e, t, i, a) {
                var s = e.seekWidgetByName("amount_label")
                  , o = new n.Pulldown({
                    button: e,
                    label: s,
                    menuBase: !0,
                    choice: !0
                },t);
                return o.onChange(i, a),
                o.selectValue(0),
                o
            },
            _onPulldownSelectFull: function(e) {
                this._onPulldownSelect(e, "FULL")
            },
            _onPulldownSelectHalf: function(e) {
                this._onPulldownSelect(e, "HALF")
            },
            _onPulldownSelect: function(e, t) {
                var n = "FULL" === t ? this._itemFull : this._itemHalf
                  , i = 0 === e.value
                  , a = "FULL" === t ? this._pulldownHalf : this._pulldownFull;
                this._setItemSelectedNumber(e.value, t),
                this._setBeforeAndAfterCount(n.num, n.num - e.value, t),
                this._setBeforeAndAfterQuestPoint(this._currentQuestPoints, this._getQuestPointsAfter(e.value, n), t),
                i || a.selectValue(0),
                this._updateButtonStatus()
            },
            _setItemSelectedNumber: function(e, t) {
                "FULL" === t ? this._itemFullSelected = e : this._itemHalfSelected = e
            },
            _getItemRecoveryValue: function(e) {
                return e.recovery_amount - this._currentQuestPoints
            },
            _getQuestPointsAfter: function(e, t) {
                return this._currentQuestPoints + e * this._getItemRecoveryValue(t)
            },
            _updateButtonStatus: function() {
                var e = this._itemFullSelected + this._itemHalfSelected > 0;
                n.pc.roles.UIUtility._setEnableButton(this.blueBtn, e)
            },
            _useItems: function() {
                var t = this._getSelectedItemInfo()
                  , i = this._getSelectedItemAmount()
                  , a = t.a_item_id
                  , s = {
                    item: t,
                    beforeAP: this._currentQuestPoints,
                    onUse: this._onUse
                };
                return n.createInstance("apiAItems").useItem(a, i).then(function(e) {
                    return s.countBefore = e.body.num + i,
                    s.count = e.body.num,
                    this._updateQuestPoints()
                }
                .bind(this)).then(function(e) {
                    s.afterAP = e[this._questPointType.toLowerCase()];
                    var t = n.createInstance("popupFactoryComUseResult").create({});
                    return t.open(s)
                }
                .bind(this)).fail(function(t) {
                    e.console.error(t)
                })
            },
            _getSelectedItemInfo: function() {
                return this._itemFullSelected > this._itemHalfSelected ? this._itemFull : this._itemHalf
            },
            _getSelectedItemAmount: function() {
                return this._itemFullSelected || this._itemHalfSelected
            },
            _updateQuestPoints: function() {
                var e = cc.director.getRunningScene();
                return e._delegate && t.isFunction(e._delegate.updateQuestPoints) ? e._delegate.updateQuestPoints() : e.headerDelegate && t.isFunction(e.headerDelegate.updateQuestPoints) ? e.headerDelegate.updateQuestPoints() : Q.reject("KHPopupFactoryComNeedApBp1._updateQuestPoints: no quest point updater found");
            }
        },
        onPopupOpened: function(e, i) {
            e.WIDGET_NAMES = this.WIDGET_NAMES,
            e.BUTTON_FRAME_NAMES = this.BUTTON_FRAME_NAMES;
            var a = (i.property || "bp").toUpperCase()
              , s = i.questTitle || "クエストタイトル"
              , o = i.item || {}
              , r = i.itemLittleRecover || {};
            e.setItemFull(o),
            e.setItemHalf(r),
            e.setQuestPointType(a),
            e.setCurrentQuestPoints(i.currentQuestPoints),
            e.setMaxQuestPoints(i.maxQuestPoints),
            e.onUse(i.onUse),
            e.createPulldowns(),
            e.loadTextures({
                comp_recovery_img: n.Img("corecard", "item", t.padZero(o.item_id, 4)).jpg,
                harf_recovery_img: n.Img("corecard", "item", t.padZero(r.item_id, 4)).jpg
            });
            var c = new RegExp("{{([^}]+)}}","g")
              , u = function(e) {
                return function(t, n) {
                    return e[n]
                }
            };
            e.setTitle("{{property}}が足りません！".replace(c, u({
                property: a
            })));
            e.setHtmlStrings({
                none_labelimg: '「{{questTitle}}」を開始するには<br /><span class="red">{{property}}が足りません。</span><br />アイテムを使用して{{property}}を回復しますか？'.replace(c, u({
                    questTitle: s,
                    property: a
                }))
            }, n.GameConfig.POPUP_CSS);
            o.count <= 0 && e.seekWidgetByName("comp_recovery_img").setColor(cc.color("#808080")),
            r.count <= 0 && e.seekWidgetByName("harf_recovery_img").setColor(cc.color("#808080")),
            e.setStrings({
                comp_recovery_label: o.name,
                harf_recovery_label: r.name
            })
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.console;
    n.PopupFactoryComNeedApBp2 = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_need_ap_bp_2",
            title: "APが足りません！",
            buttonLabels: {
                blackBtn: "キャンセル"
            },
            buttons: {
                blackBtn: function() {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, i) {
            this.popup = e;
            var a = (i.property || "bp").toUpperCase()
              , s = i.questTitle || "クエストタイトル"
              , o = i.item || {}
              , r = i.itemLittleRecover || {}
              , c = i.component
              , u = i.navigateOnly || !1;
            this._property = a,
            n.setTouchEventHandlers(e, {
                "TOUCH_ENDED btn_stone_chenge": function() {
                    this.popup.setVisible(!1),
                    this._exchangeWithStone(i, o, u)
                },
                "TOUCH_ENDED btn_shop": function() {
                    this.popup.setVisible(!1),
                    this._gotoShop(a, c, u)
                }
            }, this),
            e.loadTextures({
                comp_recovery_img: n.Img("corecard", "item", t.padZero(o.item_id, 4)).jpg,
                harf_recovery_img: n.Img("corecard", "item", t.padZero(r.item_id, 4)).jpg
            });
            var _ = new RegExp("{{([^}]+)}}","g")
              , l = function(e) {
                return function(t, n) {
                    return e[n]
                }
            };
            e.setTitle("{{property}}が足りません！".replace(_, l({
                property: a
            }))),
            e.setHtmlStrings({
                none_labelimg: '「{{questTitle}}」を開始するには<br /><span class="red">{{property}}が足りません。</span><br />{{item}}を使用すると{{property}}を最大まで回復できます。'.replace(_, l({
                    questTitle: s,
                    item: "AP" === a ? n.w("elixir") : n.w("energyLeaf"),
                    property: a
                }))
            }, n.GameConfig.POPUP_CSS),
            e.setStrings({
                comp_recovery_label: o.name,
                harf_recovery_label: r.name
            })
        },
        _exchangeWithStone: function(e, t, i) {
            return i ? void n.createInstance("router").navigate("shop/sh_003") : void n.createInstance("apiAPlayers").getCurrency().then(function(i) {
                var a = i.body;
                a.stone < 100 ? n.createInstance("popupFactoryNeedStone").create({}).open({
                    stone: a.stone,
                    name: t.name,
                    onClose: function() {
                        this.popup.setVisible(!0)
                    }
                    .bind(this)
                }) : n.createInstance("apiShop")["AP" === e.property ? "getGoodsStoneApGain" : "getGoodsStoneBpGain"]().then(function(e) {
                    var t = e.body.data[0]
                      , i = n.createInstance("popupFactoryStoneCheck").create({})
                      , s = this._getBuyCheckPopupParameters(t);
                    s.stones = t.stones,
                    s.currency = a,
                    i.open(s)
                }
                .bind(this))
            }
            .bind(this))
        },
        _gotoShop: function(e, t, a) {
            return a ? void n.createInstance("router").navigate("shop/sh_002") : void n.createInstance("apiShop")["AP" === e ? "getGoodsPointApGain" : "getGoodsPointBpGain"]().then(function(e) {
                var i = e.body.data[0]
                  , a = n.createInstance("popupFactoryBuyCheck").create({})
                  , s = this._getBuyCheckPopupParameters(i);
                s.price = i.price,
                s.options = {
                    component: t
                },
                a.open(s)
            }
            .bind(this)).fail(function(e) {
                i.error(e)
            })
        },
        _getBuyCheckPopupParameters: function(e) {
            var t = {};
            return t.name = e.name,
            t.description = e.description,
            t.shop_item_id = e.shop_item_id,
            t.buy_max_num = e.buy_max_num,
            t.onClose = function() {
                this.popup.setVisible(!0)
            }
            .bind(this),
            t.onBuy = this._onBuyCallback.bind(this),
            t
        },
        _onBuyCallback: function() {
            Q.all([n.createInstance("apiAItems")["get" + ("AP" === this._property ? "Ap" : "Bp") + "Gain"](), this.popup.dismiss()]).spread(function(e) {
                n.createInstance("popupFactoryComNeedApBp").create({
                    items: e.body
                }).open()
            }
            .bind(this)).fail(function(e) {
                i.error(e && e.stack ? e.stack : e)
            })
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh;
    n.PopupFactoryComUseResult = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_use_result",
            title: "アイテム使用完了",
            buttonLabels: {
                blueBtn: "OK"
            },
            buttons: {
                blueBtn: function() {
                    this.dismiss().then(function() {
                        return t.isFunction(this._onUse) ? this._onUse(this._afterQuestPoints) : void n.createInstance("sceneManager").reloadScene()
                    }
                    .bind(this))
                }
            },
            buttonSounds: {
                blueBtn: n.SoundList.BUTTON_TOUCHED_CONFIRMED
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, i) {
            var a = i.item || {}
              , s = i.count
              , o = null != i.countBefore ? i.countBefore : s + 1
              , r = "ap_gain" === i.item.type ? !0 : !1
              , c = i.beforeAP
              , u = i.afterAP
              , _ = new RegExp("{{([^}]+)}}","g")
              , l = function(e) {
                return function(t, n) {
                    return e[n]
                }
            };
            e._onUse = i.onUse,
            e._afterQuestPoints = u;
            var d = '<table class="nb"><tr><td class="numbox_middle_mini"><span class="white">{{before}}&rarr;</span><span class="yellow">{{after}}</span></td></tr></table>';
            e.setHtmlStrings({
                ap_bp_labelimg: d.replace(_, l({
                    before: c,
                    after: u
                })),
                have_labelimg: d.replace(_, l({
                    before: o,
                    after: s
                }))
            }, n.GameConfig.POPUP_CSS),
            e.loadTextures({
                elixir_or_elixir_half_img: n.Img("corecard", "item", t.padZero(a.item_id, 4)).jpg
            }),
            e.setStrings({
                ap_bp_heal_label: r ? "APを回復しました。" : "BPを回復しました。",
                elixir_or_elixir_half_have_label: "{{item}}\n所持数".replace(_, l({
                    item: a.name
                }))
            })
        },
        _addMethodsToPopup: function(e) {
            n.PopupFactoryPopupCommon.prototype._addMethodsToPopup.call(this, e),
            t.assign(e, this.POPUP_METHODS)
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._
      , n = e.kh
      , i = e.cc;
    e.ccui;
    n.PopupFactoryComAgeLimitA = n.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_age_limit_a",
            title: "年齢制限確認",
            buttonLabels: {
                redBtn: "R指定版へ行く",
                blueBtn: "制限版で再生"
            },
            buttonSounds: {
                redBtn: n.SoundList.BUTTON_TOUCHED_DECIDE,
                blueBtn: n.SoundList.BUTTON_TOUCHED_DECIDE
            },
            buttons: {
                redBtn: function(e) {
                    this.dismiss().then(function() {
                        if (n.env.R18GameURL) {
                            var e = document.createEvent("MouseEvents");
                            e.initMouseEvent("click", !0, !0, window, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null );
                            var t = document.createElement("a");
                            t.target = "_top",
                            t.href = n.env.R18GameURL,
                            t.dispatchEvent(e)
                        }
                    })
                },
                blueBtn: function(e) {
                    var e = e || i.director.getRunningScene();
                    e.routerParams.limitedPlay = !0,
                    t.isFunction(this.params.onSkipButtonTouched) ? this.dismiss().then(function(e) {
                        return function() {
                            e()
                        }
                    }(this.params.onSkipButtonTouched)) : this.dismiss().then(function(e, t) {
                        return function() {
                            n.createInstance("questStateManager").startQuest(e, t)
                        }
                    }(this.params.a_quest_id, this.params.type))
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {
            e.params = t
        }
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = (e._,
    e.kh);
    e.cc,
    e.ccui;
    t.PopupFactoryComAgeLimitB = t.PopupFactoryPopupCommon.extend({
        POPUP_PROPERTIES: {
            resourceName: "core-popup-com_age_limit_b",
            title: "年齢制限確認",
            buttonLabels: {
                redBtn: "R指定版へ行く",
                blackBtn: "キャンセルする"
            },
            buttonSounds: {
                redBtn: t.SoundList.BUTTON_TOUCHED_DECIDE,
                blackBtn: t.SoundList.BUTTON_TOUCHED_DECIDE
            },
            buttons: {
                redBtn: function(e) {
                    this.dismiss().then(function() {
                        if (t.env.R18GameURL) {
                            var e = document.createEvent("MouseEvents");
                            e.initMouseEvent("click", !0, !0, window, 0, 0, 0, 0, 0, !1, !1, !1, !1, 0, null );
                            var n = document.createElement("a");
                            n.target = "_top",
                            n.href = t.env.R18GameURL,
                            n.dispatchEvent(e)
                        }
                    })
                },
                blackBtn: function(e) {
                    this.dismiss()
                }
            }
        },
        POPUP_METHODS: {},
        onPopupOpened: function(e, t) {}
    })
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "ALibrary"
      , s = {
        getCharacters: function(e, n) {
            return this._http.get({
                url: "/a_library/characters",
                json: {
                    page: e,
                    per_page: n
                }
            }).then(function(e) {
                var n = e.body.data;
                return t.each(n, function(e) {
                    delete e.aroused_character_id
                }),
                e
            })
        },
        getCharacter: function(e) {
            return this._http.get({
                url: "/a_library/characters/" + e
            })
        },
        getOtherCharacters: function(e, t) {
            return this._http.get({
                url: "/a_library/other_characters",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        getOtherCharacter: function(e) {
            return this._http.get({
                url: "/a_library/other_characters/" + e
            })
        },
        getSummons: function(e, t, n) {
            var i = {
                page: t,
                per_page: n
            };
            return void 0 !== e && (i.element_type = e),
            this._http.get({
                url: "/a_library/summons",
                json: i
            })
        },
        getSummon: function(e) {
            return this._http.get({
                url: "/a_library/summons/" + e
            })
        },
        getWeapons: function(e, t, n, i) {
            var a = {
                page: n,
                per_page: i
            };
            return void 0 !== e && (a.weapon_type = e),
            void 0 !== t && (a.element_type = t),
            this._http.get({
                url: "/a_library/weapons",
                json: a
            })
        },
        getWeapon: function(e) {
            return this._http.get({
                url: "/a_library/weapons/" + e
            })
        },
        getHaremCharacters: function(e, t) {
            return this._http.get({
                url: "/a_library/characters",
                json: {
                    harem: !0,
                    page: e,
                    per_page: t
                }
            })
        },
        getHaremJobs: function(e, t) {
            return this._http.get({
                url: "/a_library/jobs",
                json: {
                    harem: !0,
                    page: e,
                    per_page: t
                }
            })
        },
        getHaremSummons: function(e, t) {
            return this._http.get({
                url: "/a_library/summons",
                json: {
                    harem: !0,
                    page: e,
                    per_page: t
                }
            })
        },
        getHaremMainQuests: function(e, t) {
            return this._http.get({
                url: "/a_library/harem_main_quests",
                json: {
                    page: e,
                    per_page: t
                }
            })
        },
        getMainStories: function() {
            return this._http.get({
                url: "/a_library/main_stories"
            })
        },
        getStoryEpisodes: function(e, t) {
            return this._http.get({
                url: "/a_library/story_episodes",
                json: {
                    quest_id: e,
                    quest_type: t
                }
            })
        },
        getEvents: function() {
            return this._http.get({
                url: "/a_library/event_stories"
            })
        },
        getEventEpisodes: function(e) {
            return this._http.get({
                url: "/a_library/event_story_episodes",
                json: {
                    event_id: e
                }
            })
        },
        getCharacterArousal: function(e) {
            return this._http.get({
                url: ["/a_library/characters", e, "arousal"].join("/"),
                json: {}
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiALibrary",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (console.debug("[mock api]", t, JSON.stringify(arguments, null , "")),
                !n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "Episodes"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/episodes/" + e
            })
        },
        getHaremOnly: function(e) {
            return this._http.get({
                url: "/episodes/" + e,
                json: {
                    type: "harem_only"
                }
            })
        },
        getList: function() {
            return this._http.get({
                url: "/episodes/"
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiEpisodes",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e._ || require("lodash")
      , n = e.kh || {}
      , i = e.cc || {
        Class: {
            extend: function() {
                console.error("cc not loaded")
            }
        }
    };
    n.env = n.env || {
        useApiMock: !0
    };
    n.env.urlRoot;
    n.Api = n.Api || {};
    var a = "HaremScenes"
      , s = {
        get: function(e) {
            return this._http.get({
                url: "/harem_scenes/" + e
            })
        }
    };
    if (n.Api[a] = i.Class.extend(t.assign({
        className: "KHApiHaremScenes",
        _http: null ,
        ctor: function() {
            this._http = n.createInstance("HttpConnection"),
            this._http.setURLDelegate({
                process: function(e) {
                    return e.url = n.env.urlRoot + e.url.replace(/^https?:\/\/[^\/]+?\//, "/"),
                    e
                }
                .bind(this)
            })
        }
    }, s)),
    n.env.useApiMock) {
        n.MockApi = n.MockApi || {};
        var o = {};
        t.each(s, function(e, t) {
            o[t] = function() {
                if (!n.MockApi)
                    throw "kh.MockApi is not defined";
                if (!n.MockApi[a][t + "JSON"])
                    throw "not implemented: kh.MockApi." + a + "." + t;
                var e = Q.defer();
                return e.resolve({
                    body: n.MockApi[a][t + "JSON"].apply(this, arguments)
                }),
                e.promise
            }
        }),
        n.MockApi[a] = i.Class.extend(t.assign({}, o))
    }
    var r = "undefined" != typeof process && "undefined" != typeof require;
    if (r) {
        var c = require("fs")
          , u = c.readFileSync("../_mockTemplate.js", {
            encoding: "utf8"
        });
        t.each(s, function(e, t) {
            t += "JSON";
            var n = "./mock/" + t + ".js";
            return c.existsSync(n) ? void console.log("skip: file exists: " + n) : (console.log("generate: " + n),
            void c.writeFileSync(n, u.replace(/\[%\sapi\s%\]/g, a).replace(/\[%\smethod\s%\]/g, t)))
        }),
        process.exit()
    }
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {},
    t.pc.mypage || t.pc.mypage || {};
    var i = t.pc.mypage
      , a = {
        sceneManager: t.SceneManager,
        unionRouter: t.UnionRouter,
        burstTime: t.BurstTime
    };
    n.each(["AQuestInfo", "News", "AMail", "AMypage", "APresents", "AParties", "APlayers", "AUnions", "AWorlds", "AMissions", "ABanners"], function(e) {
        a["api" + e] = t.env.useApiMock ? t.MockApi[e] : t.Api[e]
    });
    var s = {
        LoginBonus: t.LoginBonus,
        AddGachaContents: t.AddGachaContents,
        BurstTimeCountDownPanel: t.BurstTimeCountDownPanel,
        TimeLimitItemController: t.mypage.controller.TimeLimitItem,
        ItemExpireInfoModel: t.mypage.model.ItemExpireInfo,
        TimeLimitItemModel: t.mypage.model.TimeLimitItem,
        MyTimeLimitTicketCautionPopup: t.mypage.view.MyTimeLimitTicketCautionPopup
    };
    n.each(["my_001"], function(e) {
        n.has(i, e) && (s[e] = i[e].Scene,
        s[n.camelize(e) + "Delegate"] = i[e].SceneDelegate)
    }),
    t.dictx.injectDependent(a, s)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {},
    t.pc.quest || t.pc.quest || {};
    var i = t.pc.quest
      , a = {
        sceneManager: t.SceneManager,
        popupRaidMvp: t.PopupFactoryMvp,
        popupRankUp: t.PopupFactoryRankUp,
        popupJobMaxBonus: t.PopupFactoryJobMaxBonus,
        popupJobAbilityAcquired: t.PopupFactoryJobAbilityAcquired,
        popupCharacterAbilityImproved: t.PopupFactoryCharacterAbilityImproved,
        popupCharacterAbilityAcquired: t.PopupFactoryCharacterAbilityAcquired,
        popupCharacterAcquired: t.PopupFactoryCharacterAcquired,
        popupFriendRequest: t.PopupFactoryFriendRequest,
        popupNewItemAcquired: t.PopupFactoryNewItemAcquired,
        popupQuestClearBonusItemsAcquired: t.PopupFactoryQuestClearBonusItemsAcquired,
        popupFactoryComBackCheck: t.PopupFactoryComBackCheck,
        popupFactoryComBackResult: t.PopupFactoryComBackResult,
        popupFactoryComNeedApBp: t.PopupFactoryComNeedApBp,
        popupFactoryComNeedApBp1: t.PopupFactoryComNeedApBp1,
        popupFactoryComNeedApBp2: t.PopupFactoryComNeedApBp2,
        popupFactoryComApRestart: t.PopupFactoryComApRestart,
        popupFactoryComUseResult: t.PopupFactoryComUseResult,
        popupFactoryComRaidCheck: t.PopupFactoryComRaidCheck,
        popupFactoryComQuestInfo: t.PopupFactoryComQuestInfo,
        popupFactoryComAgeLimit: t.PopupFactoryComAgeLimitB,
        popupFactoryRaQuestAppearance: t.PopupFactoryRaQuestAppearance,
        burstTime: t.BurstTime
    };
    n.each(["AAreas", "AUnions", "ABanners", "APlayers", "AQuests", "Events", "ASummons", "AParties", "APlayers", "AFriendOffers", "APlayers", "AQuestInfo", "AItems", "AWorlds", "Shop", "ShopBuyResult", "ABattles", "Summons", "Weapons", "Items"], function(e) {
        a["api" + e] = t.env.useApiMock ? t.MockApi[e] : t.Api[e]
    });
    var s = {
        PageController: t.PageControllerEx,
        BurstTimeCountDownPanel: t.BurstTimeCountDownPanel
    };
    n.each(["q_001", "q_002", "q_003_001", "q_003_002", "q_004", "q_005", "q_006_007_008", "q_009", "q_010"], function(e) {
        n.has(i, e) && (s[e] = i[e].Scene,
        s[n.camelize(e) + "Delegate"] = i[e].SceneDelegate)
    }),
    t.dictx.injectDependent(a, s)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {},
    t.pc.party || t.pc.party || {};
    var i = t.pc.party
      , a = {
        sceneManager: t.SceneManager,
        unionRouter: t.UnionRouter,
        PopupFactoryBlackRed: t.PopupFactoryBlackRed,
        popupFactoryComConfirmBonus: t.PopupFactoryComConfirmBonus,
        popupFactoryComCharChange: t.PopupFactoryComCharChange,
        popupFactoryComOpenJobEpisode: t.PopupFactoryComOpenJobEpisode,
        popupFactoryComPartyAutoOrg: t.PopupFactoryComPartyAutoOrg,
        popupFactoryComWeaponSummonAutoOrg: t.PopupFactoryComWeaponSummonAutoOrg,
        popupFactoryComPartyChange: t.PopupFactoryComPartyChange,
        ListBtnsController: t.ListBtnsController,
        PulldownSortConfig: t.PulldownSortConfig
    };
    n.each(["AUnions", "AParties", "APlayers", "AJobs", "AWorlds", "AWeapons", "ASummons", "Summons", "ACharacters", "ABanners", "ASubTutorialPages", "AQuestInfo"], function(e) {
        a["api" + e] = t.env.useApiMock ? t.MockApi[e] : t.Api[e]
    });
    var s = {};
    n.each(["par_001_002_003", "par_004", "par_005", "par_006_007", "par_008", "par_009", "par_010", "par_011", "par_012", "par_013", "par_014", "par_015", "par_016", "par_017"], function(e) {
        n.has(i, e) && (s[e] = i[e].Scene,
        s[n.camelize(e) + "Delegate"] = i[e].SceneDelegate)
    }),
    t.dictx.injectDependent(a, s)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {},
    t.pc.guild || t.pc.guild || {};
    var i = t.pc.guild
      , a = {
        popupFactoryComEnhGuardian: t.PopupFactoryComEnhGuardian,
        popupFactoryComRoleChange: t.PopupFactoryComRoleChange,
        popupFactoryComChat: t.PopupFactoryComGreeting,
        popupFactoryGudGuardianDetail: t.PopupFactoryGudGuardianDetail,
        popupFactoryGudGuardianDetailB: t.PopupFactoryGudGuardianDetailB,
        popupFactoryGudGuardianNomoney: t.PopupFactoryGudGuardianNomoney,
        popupFactoryGudGuardianBuy: t.PopupFactoryGudGuardianBuy,
        popupFactoryGudGuardianResult: t.PopupFactoryGudGuardianResult,
        popupFactoryGudGuardianChange: t.PopupFactoryGudGuardianChange,
        popupFactoryGudChangeResult: t.PopupFactoryGudChangeResult,
        popupFactoryGud000Attention: t.PopupFactoryGud000Attention,
        popupFactoryGud000Forbidden: t.PopupFactoryGud000Forbidden,
        popupFactoryGud001Control: t.PopupFactoryGud001Control,
        popupFactoryGud001UncontrolBurstTime: t.PopupFactoryGud001UncontrolBurstTime,
        popupFactoryGud001Uncontrol: t.PopupFactoryGud001Uncontrol,
        popupFactoryGud001Edit: t.PopupFactoryGud001Edit,
        popupFactoryGud001Leave: t.PopupFactoryGud001Leave,
        popupFactoryGud001Break: t.PopupFactoryGud001Break,
        popupFactoryGud001BurstTimeChange: t.PopupFactoryGud001BurstTimeChange,
        popupFactoryGud001BurstTimeResult: t.PopupFactoryGud001BurstTimeResult,
        popupFactoryGudNameCha: t.PopupFactoryGudNameCha,
        popupFactoryGudNameEnd: t.PopupFactoryGudNameEnd,
        popupFactoryComEditNocom: t.PopupFactoryComEditNocom,
        popupFactoryGudGemAmount: t.PopupFactoryGudGemAmount,
        popupFactoryGudGemCheck: t.PopupFactoryGudGemCheck,
        popupFactoryGudGemRankup: t.PopupFactoryGudGemRankup,
        popupFactoryGudGemResult: t.PopupFactoryGudGemResult,
        popupFactoryGud002Detail: t.PopupFactoryGud002Detail,
        popupFactoryGudMyStatus: t.PopupFactoryGudMyStatus,
        popupFactoryGudRequestSet: t.PopupFactoryGudRequestSet,
        popupFactoryGudRequestEnd: t.PopupFactoryGudRequestEnd,
        popupFactoryGudRequestDelete: t.PopupFactoryGudRequestDelete,
        popupFactoryComMemberFire: t.PopupFactoryComMemberFire,
        popupFactoryComLeaderChange: t.PopupFactoryComLeaderChange,
        popupFactoryComLeaderChangeDone: t.PopupFactoryComLeaderChangeDone,
        burstTime: t.BurstTime
    };
    n.each(["APlayers", "AQuestInfo", "ABanners", "AUnions", "AUnionAuthority", "AUnionCheck", "AUnionJoinConditions", "AUnionJoinRequests", "AUnionScoutsSearch", "AUnionScouts", "AUnionSearch", "AFriends", "AWorlds", "AWeapons", "ACharacters", "AStamps", "UnionUnavailableOperation"], function(e) {
        a["api" + e] = t.env.useApiMock ? t.MockApi[e] : t.Api[e]
    });
    var s = {
        ListBtnsController: t.ListBtnsController,
        PulldownSortConfig: t.PulldownSortConfig,
        BurstTimeSubTutorialPanel: t.BurstTimeSubTutorialPanel,
        Gud001ControlAnimation: t.Gud001ControlAnimation,
        GuildControlPermissionModel: t.pc.guild.model.GuildControlPermissions
    };
    n.each(["gud_000_a", "gud_000_b", "gud_000_c", "gud_001", "gud_002", "gud_003", "gud_005", "gud_006", "gud_007_leader", "gud_007_not_leader", "gud_008", "gud_009", "gud_010_011_012", "gud_013_a", "gud_013_b"], function(e) {
        n.has(i, e) && (s[e] = i[e].Scene,
        s[n.camelize(e) + "Delegate"] = i[e].SceneDelegate)
    }),
    t.dictx.injectDependent(a, s)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {},
    t.pc.enh_evo || t.pc.enh_evo || {};
    var i = t.pc.enh_evo
      , a = {
        sceneManager: t.SceneManager,
        popupFactoryAbilityAcquired: t.PopupFactoryAbilityAcquired
    };
    n.each(["AUnions", "AWorlds", "APlayers", "AWeapons", "ACharacters", "ASummons", "Summons", "ASubTutorialPages", "APlayers", "ABanners", "AQuestInfo"], function(e) {
        a["api" + e] = t.env.useApiMock ? t.MockApi[e] : t.Api[e]
    });
    var s = {
        ListBtnsController: t.ListBtnsController,
        PulldownSortConfig: t.PulldownSortConfig,
        ArouseMateCheckPopup: t.enh_evo.view.popup.ArouseMateCheckPopup
    };
    n.each(["enh_001_002_006_evo_001_002_003", "enh_003", "enh_004", "enh_005", "enh_007", "enh_008", "enh_009", "enh_010", "enh_011", "enh_012", "enh_013", "enh_014", "enh_015", "evo_004", "evo_005", "evo_006", "evo_007", "evo_008", "evo_009", "evo_010", "evo_011", "evo_012", "evo_013", "evo_014", "arousal_002", "arousal_003"], function(e) {
        n.has(i, e) && (s[e] = i[e].Scene,
        s[n.camelize(e) + "Delegate"] = i[e].SceneDelegate)
    }),
    t.dictx.injectDependent(a, s)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {},
    t.pc.gacha || t.pc.gacha || {};
    var i = t.pc.gacha
      , a = {
        sceneManager: t.SceneManager,
        popupFactoryGaCheckUseStoneTicket: t.PopupFactoryGaCheckUseStoneTicket,
        popupFactoryGaNeedItem: t.PopupFactoryGaNeedItem,
        popupFactoryGaNeedSpace: t.PopupFactoryGaNeedSpace,
        popupFactoryGaTips: t.PopupFactoryGaTips,
        ga100DelegateFactory: t.pc.gacha.ga_100.DelegateFactory
    };
    n.each(["AUnions", "AWorlds", "APlayers", "AParties", "ABanners", "AGacha", "AGachaResult", "ACharacters", "Characters", "Summons", "ASummons", "Weapons", "AWeapons", "Gacha", "AQuestInfo"], function(e) {
        a["api" + e] = t.env.useApiMock ? t.MockApi[e] : t.Api[e]
    });
    var s = {
        ListBtnsController: t.ListBtnsController
    };
    n.each(["ga_000", "ga_001", "ga_002", "ga_003", "ga_004", "ga_100", "ga_005", "ga_006", "ga_007", "ga_008", "ga_009", "ga_010", "ga_011", "ga_012", "ga_013", "ga_014", "ga_ani"], function(e) {
        n.has(i, e) && (s[e] = i[e].Scene,
        s[n.camelize(e) + "Delegate"] = i[e].SceneDelegate)
    }),
    t.dictx.injectDependent(a, s)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {},
    t.pc.present || t.pc.present || {};
    var i = t.pc.present
      , a = {
        sceneManager: t.SceneManager,
        soundPlayer: t.SoundPlayer
    };
    n.each(["AUnions", "APlayers", "APresents", "ABanners", "AWorlds", "AQuestInfo"], function(e) {
        a["api" + e] = t.env.useApiMock ? t.MockApi[e] : t.Api[e]
    });
    var s = {
        ListBtnsController: t.ListBtnsController
    };
    n.each(["prs_001_002_003"], function(e) {
        n.has(i, e) && (s[e] = i[e].Scene,
        s[n.camelize(e) + "Delegate"] = i[e].SceneDelegate)
    }),
    t.dictx.injectDependent(a, s)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._;
    t.pc = t.pc || {},
    t.pc.shop || t.pc.shop || {};
    var i = t.pc.shop
      , a = {
        sceneManager: t.SceneManager,
        soundPlayer: t.SoundPlayer,
        popupFactoryShChangeCheck: t.PopupFactoryShChangeCheck
    };
    n.each(["AUnions", "APlayers", "AQuestInfo", "ABanners", "Characters", "Weapons", "Summons", "AWorlds", "Gacha", "Shop", "ShopBuyResult"], function(e) {
        a["api" + e] = t.env.useApiMock ? t.MockApi[e] : t.Api[e]
    });
    var s = {};
    n.each(["sh_001", "sh_002", "sh_003", "sh_004", "sh_005", "sh_006", "sh_007", "sh_008", "sh_009"], function(e) {
        n.has(i, e) && (s[e] = i[e].Scene,
        s[n.camelize(e) + "Delegate"] = i[e].SceneDelegate)
    }),
    t.dictx.injectDependent(a, s)
}((this || 0).self || global),
function(e) {
    "use strict";
    var t = e.kh
      , n = e._
      , i = t.pc.epi
      , a = {
        questStateManager: t.QuestStateManager,
        popupFactoryEpiSceneCheck: t.PopupFactoryEpiSceneCheck,
        popupFactoryEpiStoryCheck: t.PopupFactoryEpiStoryCheck,
        popupFactoryEpiReplayCheck: t.PopupFactoryEpiReplayCheck,
        popupFactoryEpiApCheck: t.PopupFactoryEpiApCheck,
        popupFactoryComBackCheck: t.PopupFactoryComBackCheck,
        popupFactoryComBackResult: t.PopupFactoryComBackResult,
        popupFactoryComApRestart: t.PopupFactoryComApRestart,
        popupFactoryComRaidCheck: t.PopupFactoryComRaidCheck,
        popupFactoryComNeedApBp1: t.PopupFactoryComNeedApBp1,
        popupFactoryComNeedApBp2: t.PopupFactoryComNeedApBp2,
        popupFactoryComUseResult: t.PopupFactoryComUseResult,
        popupFactoryComAgeLimitA: t.PopupFactoryComAgeLimitA,
        popupFactoryComAgeLimitB: t.PopupFactoryComAgeLimitB,
        popupFactoryComAgeLimit: t.PopupFactoryComAgeLimitB,
        episodeImage: t.EpisodeImage
    };
    n.each(["AUnions", "ACharacters", "ASummons", "AJobs", "APlayers", "AQuests", "APlayers", "ALibrary", "AQuestInfo", "ABanners", "AWorlds", "Episodes", "HaremScenes", "AItems"], function(e) {
        a["api" + e] = t.env.useApiMock ? t.MockApi[e] : t.Api[e]
    });
    var s = {
        ApGauge: t.ApGauge,
        QuestButton: t.epi.QuestButton,
        EpisodeButton: t.epi.EpisodeButton,
        ListBtnsController: t.ListBtnsController
    };
    n.each(["epi_001", "epi_002_003_004"], function(e) {
        n.has(i, e) && (s[e] = i[e].Scene,
        s[n.camelize(e) + "Delegate"] = i[e].SceneDelegate)
    }),
    n.each(["epi_002", "epi_003", "epi_004"], function(e) {
        n.has(i.epi_002_003_004, e) && (s[e] = i.epi_002_003_004.Scene,
        s[n.camelize(e) + "Delegate"] = i.epi_002_003_004[e].SceneDelegate)
    }),
    t.dictx.injectDependent(a, s)
}((this || 0).self || global);
